/*
 * vis-charts
 * http://visjs.org/
 *
 * A dynamic, browser-based visualization library.
 *
 * @version 0.0.0-no-version
 * @date    2019-11-10T16:06:47Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2018-2019 visjs contributors, https://github.com/visjs
 *
 * @license 
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.vis = factory());
}(this, (function () { 'use strict';

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire() {
    throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function createCommonjsModule(fn, module) {
    return module = {
      exports: {}
    }, fn(module, module.exports), module.exports;
  }

  var _global = createCommonjsModule(function (module) {
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
    : Function('return this')();
    if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
  });

  var _core = createCommonjsModule(function (module) {
    var core = module.exports = {
      version: '2.6.9'
    };
    if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
  });

  var _core_1 = _core.version;
  var _library = false;

  var _shared = createCommonjsModule(function (module) {
    var SHARED = '__core-js_shared__';
    var store = _global[SHARED] || (_global[SHARED] = {});
    (module.exports = function (key, value) {
      return store[key] || (store[key] = value !== undefined ? value : {});
    })('versions', []).push({
      version: _core.version,
      mode: 'global',
      copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'
    });
  });

  var id = 0;
  var px = Math.random();

  var _uid = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };

  var _wks = createCommonjsModule(function (module) {
    var store = _shared('wks');

    var Symbol = _global.Symbol;
    var USE_SYMBOL = typeof Symbol == 'function';

    var $exports = module.exports = function (name) {
      return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
    };

    $exports.store = store;
  });

  var f = _wks;
  var _wksExt = {
    f: f
  };

  var _isObject = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

  var _anObject = function (it) {
    if (!_isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };

  var _fails = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };

  var _descriptors = !_fails(function () {
    return Object.defineProperty({}, 'a', {
      get: function () {
        return 7;
      }
    }).a != 7;
  });

  var document$1 = _global.document; // typeof document.createElement is 'object' in old IE

  var is = _isObject(document$1) && _isObject(document$1.createElement);

  var _domCreate = function (it) {
    return is ? document$1.createElement(it) : {};
  };

  var _ie8DomDefine = !_descriptors && !_fails(function () {
    return Object.defineProperty(_domCreate('div'), 'a', {
      get: function () {
        return 7;
      }
    }).a != 7;
  }); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string


  var _toPrimitive = function (it, S) {
    if (!_isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var dP = Object.defineProperty;
  var f$1 = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    _anObject(O);

    P = _toPrimitive(P, true);

    _anObject(Attributes);

    if (_ie8DomDefine) try {
      return dP(O, P, Attributes);
    } catch (e) {
      /* empty */
    }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
  var _objectDp = {
    f: f$1
  };
  var defineProperty = _objectDp.f;

  var _wksDefine = function (name) {
    var $Symbol = _core.Symbol || (_core.Symbol = _global.Symbol || {});
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
      value: _wksExt.f(name)
    });
  };

  _wksDefine('asyncIterator');

  var hasOwnProperty = {}.hasOwnProperty;

  var _has = function (it, key) {
    return hasOwnProperty.call(it, key);
  };

  var _propertyDesc = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var _hide = _descriptors ? function (object, key, value) {
    return _objectDp.f(object, key, _propertyDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var _functionToString = _shared('native-function-to-string', Function.toString);

  var _redefine = createCommonjsModule(function (module) {
    var SRC = _uid('src');

    var TO_STRING = 'toString';

    var TPL = ('' + _functionToString).split(TO_STRING);

    _core.inspectSource = function (it) {
      return _functionToString.call(it);
    };

    (module.exports = function (O, key, val, safe) {
      var isFunction = typeof val == 'function';
      if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
      if (O[key] === val) return;
      if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));

      if (O === _global) {
        O[key] = val;
      } else if (!safe) {
        delete O[key];

        _hide(O, key, val);
      } else if (O[key]) {
        O[key] = val;
      } else {
        _hide(O, key, val);
      } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

    })(Function.prototype, TO_STRING, function toString() {
      return typeof this == 'function' && this[SRC] || _functionToString.call(this);
    });
  });

  var _aFunction = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };

  var _ctx = function (fn, that, length) {
    _aFunction(fn);

    if (that === undefined) return fn;

    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };

      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };

      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }

    return function ()
    /* ...args */
    {
      return fn.apply(that, arguments);
    };
  };

  var PROTOTYPE = 'prototype';

  var $export = function (type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
    var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
    var key, own, out, exp;
    if (IS_GLOBAL) source = name;

    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

      out = (own ? target : source)[key]; // bind timers to global for call from export context

      exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out; // extend global

      if (target) _redefine(target, key, out, type & $export.U); // export

      if (exports[key] != out) _hide(exports, key, exp);
      if (IS_PROTO && expProto[key] != out) expProto[key] = out;
    }
  };

  _global.core = _core; // type bitmap

  $export.F = 1; // forced

  $export.G = 2; // global

  $export.S = 4; // static

  $export.P = 8; // proto

  $export.B = 16; // bind

  $export.W = 32; // wrap

  $export.U = 64; // safe

  $export.R = 128; // real proto method for `library`

  var _export = $export;

  var _meta = createCommonjsModule(function (module) {
    var META = _uid('meta');

    var setDesc = _objectDp.f;
    var id = 0;

    var isExtensible = Object.isExtensible || function () {
      return true;
    };

    var FREEZE = !_fails(function () {
      return isExtensible(Object.preventExtensions({}));
    });

    var setMeta = function (it) {
      setDesc(it, META, {
        value: {
          i: 'O' + ++id,
          // object ID
          w: {} // weak collections IDs

        }
      });
    };

    var fastKey = function (it, create) {
      // return primitive with prefix
      if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

      if (!_has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return 'F'; // not necessary to add metadata

        if (!create) return 'E'; // add missing metadata

        setMeta(it); // return object ID
      }

      return it[META].i;
    };

    var getWeak = function (it, create) {
      if (!_has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return true; // not necessary to add metadata

        if (!create) return false; // add missing metadata

        setMeta(it); // return hash weak collections IDs
      }

      return it[META].w;
    }; // add metadata on freeze-family methods calling


    var onFreeze = function (it) {
      if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
      return it;
    };

    var meta = module.exports = {
      KEY: META,
      NEED: false,
      fastKey: fastKey,
      getWeak: getWeak,
      onFreeze: onFreeze
    };
  });

  var _meta_1 = _meta.KEY;
  var _meta_2 = _meta.NEED;
  var _meta_3 = _meta.fastKey;
  var _meta_4 = _meta.getWeak;
  var _meta_5 = _meta.onFreeze;
  var def = _objectDp.f;

  var TAG = _wks('toStringTag');

  var _setToStringTag = function (it, tag, stat) {
    if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
      configurable: true,
      value: tag
    });
  };

  var toString = {}.toString;

  var _cof = function (it) {
    return toString.call(it).slice(8, -1);
  }; // eslint-disable-next-line no-prototype-builtins


  var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return _cof(it) == 'String' ? it.split('') : Object(it);
  }; // 7.2.1 RequireObjectCoercible(argument)


  var _defined = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };

  var _toIobject = function (it) {
    return _iobject(_defined(it));
  }; // 7.1.4 ToInteger


  var ceil = Math.ceil;
  var floor = Math.floor;

  var _toInteger = function (it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };

  var min = Math.min;

  var _toLength = function (it) {
    return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };

  var max = Math.max;
  var min$1 = Math.min;

  var _toAbsoluteIndex = function (index, length) {
    index = _toInteger(index);
    return index < 0 ? max(index + length, 0) : min$1(index, length);
  }; // true  -> Array#includes


  var _arrayIncludes = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = _toIobject($this);

      var length = _toLength(O.length);

      var index = _toAbsoluteIndex(fromIndex, length);

      var value; // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare

      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++]; // eslint-disable-next-line no-self-compare

        if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
      } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      }
      return !IS_INCLUDES && -1;
    };
  };

  var shared = _shared('keys');

  var _sharedKey = function (key) {
    return shared[key] || (shared[key] = _uid(key));
  };

  var arrayIndexOf = _arrayIncludes(false);

  var IE_PROTO = _sharedKey('IE_PROTO');

  var _objectKeysInternal = function (object, names) {
    var O = _toIobject(object);

    var i = 0;
    var result = [];
    var key;

    for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key); // Don't enum bug & hidden keys


    while (names.length > i) if (_has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }

    return result;
  }; // IE 8- don't enum bug keys


  var _enumBugKeys = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

  var _objectKeys = Object.keys || function keys(O) {
    return _objectKeysInternal(O, _enumBugKeys);
  };

  var f$2 = Object.getOwnPropertySymbols;
  var _objectGops = {
    f: f$2
  };
  var f$3 = {}.propertyIsEnumerable;
  var _objectPie = {
    f: f$3
  };

  var _enumKeys = function (it) {
    var result = _objectKeys(it);

    var getSymbols = _objectGops.f;

    if (getSymbols) {
      var symbols = getSymbols(it);
      var isEnum = _objectPie.f;
      var i = 0;
      var key;

      while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
    }

    return result;
  };

  var _isArray = Array.isArray || function isArray(arg) {
    return _cof(arg) == 'Array';
  };

  var _toObject = function (it) {
    return Object(_defined(it));
  };

  var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
    _anObject(O);

    var keys = _objectKeys(Properties);

    var length = keys.length;
    var i = 0;
    var P;

    while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);

    return O;
  };

  var document$2 = _global.document;

  var _html = document$2 && document$2.documentElement;

  var IE_PROTO$1 = _sharedKey('IE_PROTO');

  var Empty = function () {
    /* empty */
  };

  var PROTOTYPE$1 = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

  var createDict = function () {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = _domCreate('iframe');

    var i = _enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';

    _html.appendChild(iframe);

    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);

    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;

    while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];

    return createDict();
  };

  var _objectCreate = Object.create || function create(O, Properties) {
    var result;

    if (O !== null) {
      Empty[PROTOTYPE$1] = _anObject(O);
      result = new Empty();
      Empty[PROTOTYPE$1] = null; // add "__proto__" for Object.getPrototypeOf polyfill

      result[IE_PROTO$1] = O;
    } else result = createDict();

    return Properties === undefined ? result : _objectDps(result, Properties);
  };

  var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

  var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return _objectKeysInternal(O, hiddenKeys);
  };

  var _objectGopn = {
    f: f$4
  };
  var gOPN = _objectGopn.f;
  var toString$1 = {}.toString;
  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function (it) {
    try {
      return gOPN(it);
    } catch (e) {
      return windowNames.slice();
    }
  };

  var f$5 = function getOwnPropertyNames(it) {
    return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));
  };

  var _objectGopnExt = {
    f: f$5
  };
  var gOPD = Object.getOwnPropertyDescriptor;
  var f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
    O = _toIobject(O);
    P = _toPrimitive(P, true);
    if (_ie8DomDefine) try {
      return gOPD(O, P);
    } catch (e) {
      /* empty */
    }
    if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
  };
  var _objectGopd = {
    f: f$6
  };
  var META = _meta.KEY;
  var gOPD$1 = _objectGopd.f;
  var dP$1 = _objectDp.f;
  var gOPN$1 = _objectGopnExt.f;
  var $Symbol = _global.Symbol;
  var $JSON = _global.JSON;

  var _stringify = $JSON && $JSON.stringify;

  var PROTOTYPE$2 = 'prototype';

  var HIDDEN = _wks('_hidden');

  var TO_PRIMITIVE = _wks('toPrimitive');

  var isEnum = {}.propertyIsEnumerable;

  var SymbolRegistry = _shared('symbol-registry');

  var AllSymbols = _shared('symbols');

  var OPSymbols = _shared('op-symbols');

  var ObjectProto = Object[PROTOTYPE$2];
  var USE_NATIVE = typeof $Symbol == 'function' && !!_objectGops.f;
  var QObject = _global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

  var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

  var setSymbolDesc = _descriptors && _fails(function () {
    return _objectCreate(dP$1({}, 'a', {
      get: function () {
        return dP$1(this, 'a', {
          value: 7
        }).a;
      }
    })).a != 7;
  }) ? function (it, key, D) {
    var protoDesc = gOPD$1(ObjectProto, key);
    if (protoDesc) delete ObjectProto[key];
    dP$1(it, key, D);
    if (protoDesc && it !== ObjectProto) dP$1(ObjectProto, key, protoDesc);
  } : dP$1;

  var wrap = function (tag) {
    var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);

    sym._k = tag;
    return sym;
  };

  var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
    return typeof it == 'symbol';
  } : function (it) {
    return it instanceof $Symbol;
  };

  var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectProto) $defineProperty(OPSymbols, key, D);

    _anObject(it);

    key = _toPrimitive(key, true);

    _anObject(D);

    if (_has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
        D = _objectCreate(D, {
          enumerable: _propertyDesc(0, false)
        });
      }

      return setSymbolDesc(it, key, D);
    }

    return dP$1(it, key, D);
  };

  var $defineProperties = function defineProperties(it, P) {
    _anObject(it);

    var keys = _enumKeys(P = _toIobject(P));

    var i = 0;
    var l = keys.length;
    var key;

    while (l > i) $defineProperty(it, key = keys[i++], P[key]);

    return it;
  };

  var $create = function create(it, P) {
    return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
  };

  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key = _toPrimitive(key, true));
    if (this === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
    return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };

  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = _toIobject(it);
    key = _toPrimitive(key, true);
    if (it === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
    var D = gOPD$1(it, key);
    if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
  };

  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN$1(_toIobject(it));
    var result = [];
    var i = 0;
    var key;

    while (names.length > i) {
      if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
    }

    return result;
  };

  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto;
    var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));
    var result = [];
    var i = 0;
    var key;

    while (names.length > i) {
      if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
    }

    return result;
  }; // 19.4.1.1 Symbol([description])


  if (!USE_NATIVE) {
    $Symbol = function Symbol() {
      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');

      var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);

      var $set = function (value) {
        if (this === ObjectProto) $set.call(OPSymbols, value);
        if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, _propertyDesc(1, value));
      };

      if (_descriptors && setter) setSymbolDesc(ObjectProto, tag, {
        configurable: true,
        set: $set
      });
      return wrap(tag);
    };

    _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
      return this._k;
    });

    _objectGopd.f = $getOwnPropertyDescriptor;
    _objectDp.f = $defineProperty;
    _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
    _objectPie.f = $propertyIsEnumerable;
    _objectGops.f = $getOwnPropertySymbols;

    if (_descriptors && !_library) {
      _redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }

    _wksExt.f = function (name) {
      return wrap(_wks(name));
    };
  }

  _export(_export.G + _export.W + _export.F * !USE_NATIVE, {
    Symbol: $Symbol
  });

  for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) _wks(es6Symbols[j++]);

  for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) _wksDefine(wellKnownSymbols[k++]);

  _export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    'for': function (key) {
      return _has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(sym) {
      if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

      for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
    },
    useSetter: function () {
      setter = true;
    },
    useSimple: function () {
      setter = false;
    }
  });

  _export(_export.S + _export.F * !USE_NATIVE, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols
  }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
  // https://bugs.chromium.org/p/v8/issues/detail?id=3443


  var FAILS_ON_PRIMITIVES = _fails(function () {
    _objectGops.f(1);
  });

  _export(_export.S + _export.F * FAILS_ON_PRIMITIVES, 'Object', {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
      return _objectGops.f(_toObject(it));
    }
  }); // 24.3.2 JSON.stringify(value [, replacer [, space]])


  $JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
    var S = $Symbol(); // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols

    return _stringify([S]) != '[null]' || _stringify({
      a: S
    }) != '{}' || _stringify(Object(S)) != '{}';
  })), 'JSON', {
    stringify: function stringify(it) {
      var args = [it];
      var i = 1;
      var replacer, $replacer;

      while (arguments.length > i) args.push(arguments[i++]);

      $replacer = replacer = args[1];
      if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

      if (!_isArray(replacer)) replacer = function (key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    }
  }); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

  $Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]

  _setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]


  _setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]


  _setToStringTag(_global.JSON, 'JSON', true);

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(source, true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(source).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  var _objectSap = function (KEY, exec) {
    var fn = (_core.Object || {})[KEY] || Object[KEY];
    var exp = {};
    exp[KEY] = exec(fn);

    _export(_export.S + _export.F * _fails(function () {
      fn(1);
    }), 'Object', exp);
  };

  _objectSap('keys', function () {
    return function keys(it) {
      return _objectKeys(_toObject(it));
    };
  });

  var _flags = function () {
    var that = _anObject(this);

    var result = '';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.unicode) result += 'u';
    if (that.sticky) result += 'y';
    return result;
  };

  if (_descriptors && /./g.flags != 'g') _objectDp.f(RegExp.prototype, 'flags', {
    configurable: true,
    get: _flags
  });
  var TO_STRING = 'toString';
  var $toString = /./[TO_STRING];

  var define = function (fn) {
    _redefine(RegExp.prototype, TO_STRING, fn, true);
  }; // 21.2.5.14 RegExp.prototype.toString()


  if (_fails(function () {
    return $toString.call({
      source: 'a',
      flags: 'b'
    }) != '/a/b';
  })) {
    define(function toString() {
      var R = _anObject(this);

      return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !_descriptors && R instanceof RegExp ? _flags.call(R) : undefined);
    }); // FF44- RegExp#toString has a wrong name
  } else if ($toString.name != TO_STRING) {
    define(function toString() {
      return $toString.call(this);
    });
  } // false -> String#codePointAt


  var _stringAt = function (TO_STRING) {
    return function (that, pos) {
      var s = String(_defined(that));

      var i = _toInteger(pos);

      var l = s.length;
      var a, b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };

  var at = _stringAt(true); // `AdvanceStringIndex` abstract operation
  // https://tc39.github.io/ecma262/#sec-advancestringindex


  var _advanceStringIndex = function (S, index, unicode) {
    return index + (unicode ? at(S, index).length : 1);
  };

  var TAG$1 = _wks('toStringTag'); // ES3 wrong here


  var ARG = _cof(function () {
    return arguments;
  }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

  var tryGet = function (it, key) {
    try {
      return it[key];
    } catch (e) {
      /* empty */
    }
  };

  var _classof = function (it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T // builtinTag case
    : ARG ? _cof(O) // ES3 arguments fallback
    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };

  var builtinExec = RegExp.prototype.exec; // `RegExpExec` abstract operation
  // https://tc39.github.io/ecma262/#sec-regexpexec

  var _regexpExecAbstract = function (R, S) {
    var exec = R.exec;

    if (typeof exec === 'function') {
      var result = exec.call(R, S);

      if (typeof result !== 'object') {
        throw new TypeError('RegExp exec method returned something other than an Object or null');
      }

      return result;
    }

    if (_classof(R) !== 'RegExp') {
      throw new TypeError('RegExp#exec called on incompatible receiver');
    }

    return builtinExec.call(R, S);
  };

  var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the
  // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
  // which loads this file before patching the method.

  var nativeReplace = String.prototype.replace;
  var patchedExec = nativeExec;
  var LAST_INDEX = 'lastIndex';

  var UPDATES_LAST_INDEX_WRONG = function () {
    var re1 = /a/,
        re2 = /b*/g;
    nativeExec.call(re1, 'a');
    nativeExec.call(re2, 'a');
    return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
  }(); // nonparticipating capturing group, copied from es5-shim's String#split patch.


  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

  if (PATCH) {
    patchedExec = function exec(str) {
      var re = this;
      var lastIndex, reCopy, match, i;

      if (NPCG_INCLUDED) {
        reCopy = new RegExp('^' + re.source + '$(?!\\s)', _flags.call(re));
      }

      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];
      match = nativeExec.call(re, str);

      if (UPDATES_LAST_INDEX_WRONG && match) {
        re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
      }

      if (NPCG_INCLUDED && match && match.length > 1) {
        // Fix browsers whose `exec` methods don't consistently return `undefined`
        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
        // eslint-disable-next-line no-loop-func
        nativeReplace.call(match[0], reCopy, function () {
          for (i = 1; i < arguments.length - 2; i++) {
            if (arguments[i] === undefined) match[i] = undefined;
          }
        });
      }

      return match;
    };
  }

  var _regexpExec = patchedExec;

  _export({
    target: 'RegExp',
    proto: true,
    forced: _regexpExec !== /./.exec
  }, {
    exec: _regexpExec
  });

  var SPECIES = _wks('species');

  var REPLACE_SUPPORTS_NAMED_GROUPS = !_fails(function () {
    // #replace needs built-in support for named groups.
    // #match works fine because it just return the exec results, even if it has
    // a "grops" property.
    var re = /./;

    re.exec = function () {
      var result = [];
      result.groups = {
        a: '7'
      };
      return result;
    };

    return ''.replace(re, '$<a>') !== '7';
  });

  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {
    // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
    var re = /(?:)/;
    var originalExec = re.exec;

    re.exec = function () {
      return originalExec.apply(this, arguments);
    };

    var result = 'ab'.split(re);
    return result.length === 2 && result[0] === 'a' && result[1] === 'b';
  }();

  var _fixReWks = function (KEY, length, exec) {
    var SYMBOL = _wks(KEY);

    var DELEGATES_TO_SYMBOL = !_fails(function () {
      // String methods call symbol-named RegEp methods
      var O = {};

      O[SYMBOL] = function () {
        return 7;
      };

      return ''[KEY](O) != 7;
    });
    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !_fails(function () {
      // Symbol-named RegExp methods call .exec
      var execCalled = false;
      var re = /a/;

      re.exec = function () {
        execCalled = true;
        return null;
      };

      if (KEY === 'split') {
        // RegExp[@@split] doesn't call the regex's exec method, but first creates
        // a new one. We need to return the patched regex when creating the new one.
        re.constructor = {};

        re.constructor[SPECIES] = function () {
          return re;
        };
      }

      re[SYMBOL]('');
      return !execCalled;
    }) : undefined;

    if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
      var nativeRegExpMethod = /./[SYMBOL];
      var fns = exec(_defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === _regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return {
              done: true,
              value: nativeRegExpMethod.call(regexp, str, arg2)
            };
          }

          return {
            done: true,
            value: nativeMethod.call(str, regexp, arg2)
          };
        }

        return {
          done: false
        };
      });
      var strfn = fns[0];
      var rxfn = fns[1];

      _redefine(String.prototype, KEY, strfn);

      _hide(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) {
        return rxfn.call(string, this, arg);
      } // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) {
        return rxfn.call(string, this);
      });
    }
  };

  var max$1 = Math.max;
  var min$2 = Math.min;
  var floor$1 = Math.floor;
  var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

  var maybeToString = function (it) {
    return it === undefined ? it : String(it);
  }; // @@replace logic


  _fixReWks('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
    return [// `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
    }, // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = _anObject(regexp);

      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;

      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }

      var results = [];

      while (true) {
        var result = _regexpExecAbstract(rx, S);

        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;

      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max$1(min$2(_toInteger(result.index), S.length), 0);
        var captures = []; // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));

        var namedCaptures = result.groups;

        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }

        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }

      return accumulatedResult + S.slice(nextSourcePosition);
    }]; // https://tc39.github.io/ecma262/#sec-getsubstitution

    function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
      var tailPos = position + matched.length;
      var m = captures.length;
      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

      if (namedCaptures !== undefined) {
        namedCaptures = _toObject(namedCaptures);
        symbols = SUBSTITUTION_SYMBOLS;
      }

      return $replace.call(replacement, symbols, function (match, ch) {
        var capture;

        switch (ch.charAt(0)) {
          case '$':
            return '$';

          case '&':
            return matched;

          case '`':
            return str.slice(0, position);

          case "'":
            return str.slice(tailPos);

          case '<':
            capture = namedCaptures[ch.slice(1, -1)];
            break;

          default:
            // \d\d?
            var n = +ch;
            if (n === 0) return match;

            if (n > m) {
              var f = floor$1(n / 10);
              if (f === 0) return match;
              if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
              return match;
            }

            capture = captures[n - 1];
        }

        return capture === undefined ? '' : capture;
      });
    }
  });

  var UNSCOPABLES = _wks('unscopables');

  var ArrayProto = Array.prototype;
  if (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});

  var _addToUnscopables = function (key) {
    ArrayProto[UNSCOPABLES][key] = true;
  };

  var _iterStep = function (done, value) {
    return {
      value: value,
      done: !!done
    };
  };

  var _iterators = {};
  var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

  _hide(IteratorPrototype, _wks('iterator'), function () {
    return this;
  });

  var _iterCreate = function (Constructor, NAME, next) {
    Constructor.prototype = _objectCreate(IteratorPrototype, {
      next: _propertyDesc(1, next)
    });

    _setToStringTag(Constructor, NAME + ' Iterator');
  };

  var IE_PROTO$2 = _sharedKey('IE_PROTO');

  var ObjectProto$1 = Object.prototype;

  var _objectGpo = Object.getPrototypeOf || function (O) {
    O = _toObject(O);
    if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];

    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    }

    return O instanceof Object ? ObjectProto$1 : null;
  };

  var ITERATOR = _wks('iterator');

  var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

  var FF_ITERATOR = '@@iterator';
  var KEYS = 'keys';
  var VALUES = 'values';

  var returnThis = function () {
    return this;
  };

  var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    _iterCreate(Constructor, NAME, next);

    var getMethod = function (kind) {
      if (!BUGGY && kind in proto) return proto[kind];

      switch (kind) {
        case KEYS:
          return function keys() {
            return new Constructor(this, kind);
          };

        case VALUES:
          return function values() {
            return new Constructor(this, kind);
          };
      }

      return function entries() {
        return new Constructor(this, kind);
      };
    };

    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype; // Fix native

    if ($anyNative) {
      IteratorPrototype = _objectGpo($anyNative.call(new Base()));

      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
        // Set @@toStringTag to native iterators
        _setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines


        if (typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);
      }
    } // fix Array#{values, @@iterator}.name in V8 / FF


    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;

      $default = function values() {
        return $native.call(this);
      };
    } // Define iterator


    if (BUGGY || VALUES_BUG || !proto[ITERATOR]) {
      _hide(proto, ITERATOR, $default);
    } // Plug for library


    _iterators[NAME] = $default;
    _iterators[TAG] = returnThis;

    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) _redefine(proto, key, methods[key]);
      } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }

    return methods;
  }; // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()


  var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
    this._t = _toIobject(iterated); // target

    this._i = 0; // next index

    this._k = kind; // kind
    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;

    if (!O || index >= O.length) {
      this._t = undefined;
      return _iterStep(1);
    }

    if (kind == 'keys') return _iterStep(0, index);
    if (kind == 'values') return _iterStep(0, O[index]);
    return _iterStep(0, [index, O[index]]);
  }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)


  _iterators.Arguments = _iterators.Array;

  _addToUnscopables('keys');

  _addToUnscopables('values');

  _addToUnscopables('entries');

  var ITERATOR$1 = _wks('iterator');

  var TO_STRING_TAG = _wks('toStringTag');

  var ArrayValues = _iterators.Array;
  var DOMIterables = {
    CSSRuleList: true,
    // TODO: Not spec compliant, should be false.
    CSSStyleDeclaration: false,
    CSSValueList: false,
    ClientRectList: false,
    DOMRectList: false,
    DOMStringList: false,
    DOMTokenList: true,
    DataTransferItemList: false,
    FileList: false,
    HTMLAllCollection: false,
    HTMLCollection: false,
    HTMLFormElement: false,
    HTMLSelectElement: false,
    MediaList: true,
    // TODO: Not spec compliant, should be false.
    MimeTypeArray: false,
    NamedNodeMap: false,
    NodeList: true,
    PaintRequestList: false,
    Plugin: false,
    PluginArray: false,
    SVGLengthList: false,
    SVGNumberList: false,
    SVGPathSegList: false,
    SVGPointList: false,
    SVGStringList: false,
    SVGTransformList: false,
    SourceBufferList: false,
    StyleSheetList: true,
    // TODO: Not spec compliant, should be false.
    TextTrackCueList: false,
    TextTrackList: false,
    TouchList: false
  };

  for (var collections = _objectKeys(DOMIterables), i = 0; i < collections.length; i++) {
    var NAME = collections[i];
    var explicit = DOMIterables[NAME];
    var Collection = _global[NAME];
    var proto = Collection && Collection.prototype;
    var key;

    if (proto) {
      if (!proto[ITERATOR$1]) _hide(proto, ITERATOR$1, ArrayValues);
      if (!proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);
      _iterators[NAME] = ArrayValues;
      if (explicit) for (key in es6_array_iterator) if (!proto[key]) _redefine(proto, key, es6_array_iterator[key], true);
    }
  }

  var test = {};
  test[_wks('toStringTag')] = 'z';

  if (test + '' != '[object z]') {
    _redefine(Object.prototype, 'toString', function toString() {
      return '[object ' + _classof(this) + ']';
    }, true);
  }

  var isEnum$1 = _objectPie.f;

  var _objectToArray = function (isEntries) {
    return function (it) {
      var O = _toIobject(it);

      var keys = _objectKeys(O);

      var length = keys.length;
      var i = 0;
      var result = [];
      var key;

      while (length > i) {
        key = keys[i++];

        if (!_descriptors || isEnum$1.call(O, key)) {
          result.push(isEntries ? [key, O[key]] : O[key]);
        }
      }

      return result;
    };
  };

  var $values = _objectToArray(false);

  _export(_export.S, 'Object', {
    values: function values(it) {
      return $values(it);
    }
  });

  var MATCH = _wks('match');

  var _isRegexp = function (it) {
    var isRegExp;
    return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');
  };

  var SPECIES$1 = _wks('species');

  var _speciesConstructor = function (O, D) {
    var C = _anObject(O).constructor;

    var S;
    return C === undefined || (S = _anObject(C)[SPECIES$1]) == undefined ? D : _aFunction(S);
  };

  var $min = Math.min;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX$1 = 'lastIndex';
  var MAX_UINT32 = 0xffffffff; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError

  var SUPPORTS_Y = !_fails(function () {
    RegExp(MAX_UINT32, 'y');
  }); // @@split logic

  _fixReWks('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
    var internalSplit;

    if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
      // based on es5-shim implementation, need to rework it
      internalSplit = function (separator, limit) {
        var string = String(this);
        if (separator === undefined && limit === 0) return []; // If `separator` is not a regex, use native split

        if (!_isRegexp(separator)) return $split.call(string, separator, limit);
        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
        var lastLastIndex = 0;
        var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0; // Make `global` and avoid `lastIndex` issues by working with a copy

        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var match, lastIndex, lastLength;

        while (match = _regexpExec.call(separatorCopy, string)) {
          lastIndex = separatorCopy[LAST_INDEX$1];

          if (lastIndex > lastLastIndex) {
            output.push(string.slice(lastLastIndex, match.index));
            if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
            lastLength = match[0][LENGTH];
            lastLastIndex = lastIndex;
            if (output[LENGTH] >= splitLimit) break;
          }

          if (separatorCopy[LAST_INDEX$1] === match.index) separatorCopy[LAST_INDEX$1]++; // Avoid an infinite loop
        }

        if (lastLastIndex === string[LENGTH]) {
          if (lastLength || !separatorCopy.test('')) output.push('');
        } else output.push(string.slice(lastLastIndex));

        return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
      }; // Chakra, V8

    } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
      internalSplit = function (separator, limit) {
        return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
      };
    } else {
      internalSplit = $split;
    }

    return [// `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
    }, // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = _anObject(regexp);

      var S = String(this);

      var C = _speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.

      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return _regexpExecAbstract(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];

      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;

        var z = _regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));

        var e;

        if (z === null || (e = $min(_toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
          q = _advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;

          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }

          q = p = e;
        }
      }

      A.push(S.slice(p));
      return A;
    }];
  });

  var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)

  var _objectAssign = !$assign || _fails(function () {
    var A = {};
    var B = {}; // eslint-disable-next-line no-undef

    var S = Symbol();
    var K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function (k) {
      B[k] = k;
    });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source) {
    // eslint-disable-line no-unused-vars
    var T = _toObject(target);

    var aLen = arguments.length;
    var index = 1;
    var getSymbols = _objectGops.f;
    var isEnum = _objectPie.f;

    while (aLen > index) {
      var S = _iobject(arguments[index++]);

      var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
      var length = keys.length;
      var j = 0;
      var key;

      while (length > j) {
        key = keys[j++];
        if (!_descriptors || isEnum.call(S, key)) T[key] = S[key];
      }
    }

    return T;
  } : $assign;

  _export(_export.S + _export.F, 'Object', {
    assign: _objectAssign
  });
  /* eslint-disable no-proto */


  var check = function (O, proto) {
    _anObject(O);

    if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
  };

  var _setProto = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) {
        buggy = true;
      }

      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
    check: check
  };
  var setPrototypeOf = _setProto.set;

  var _inheritIfRequired = function (that, target, C) {
    var S = target.constructor;
    var P;

    if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && _isObject(P) && setPrototypeOf) {
      setPrototypeOf(that, P);
    }

    return that;
  };

  var _stringWs = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

  var space = '[' + _stringWs + ']';
  var non = '\u200b\u0085';
  var ltrim = RegExp('^' + space + space + '*');
  var rtrim = RegExp(space + space + '*$');

  var exporter = function (KEY, exec, ALIAS) {
    var exp = {};

    var FORCE = _fails(function () {
      return !!_stringWs[KEY]() || non[KEY]() != non;
    });

    var fn = exp[KEY] = FORCE ? exec(trim) : _stringWs[KEY];
    if (ALIAS) exp[ALIAS] = fn;

    _export(_export.P + _export.F * FORCE, 'String', exp);
  }; // 1 -> String#trimLeft
  // 2 -> String#trimRight
  // 3 -> String#trim


  var trim = exporter.trim = function (string, TYPE) {
    string = String(_defined(string));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };

  var _stringTrim = exporter;
  var gOPN$2 = _objectGopn.f;
  var gOPD$2 = _objectGopd.f;
  var dP$2 = _objectDp.f;
  var $trim = _stringTrim.trim;
  var NUMBER = 'Number';
  var $Number = _global[NUMBER];
  var Base = $Number;
  var proto$1 = $Number.prototype; // Opera ~12 has broken Object#toString

  var BROKEN_COF = _cof(_objectCreate(proto$1)) == NUMBER;
  var TRIM = 'trim' in String.prototype; // 7.1.3 ToNumber(argument)

  var toNumber = function (argument) {
    var it = _toPrimitive(argument, false);

    if (typeof it == 'string' && it.length > 2) {
      it = TRIM ? it.trim() : $trim(it, 3);
      var first = it.charCodeAt(0);
      var third, radix, maxCode;

      if (first === 43 || first === 45) {
        third = it.charCodeAt(2);
        if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
      } else if (first === 48) {
        switch (it.charCodeAt(1)) {
          case 66:
          case 98:
            radix = 2;
            maxCode = 49;
            break;
          // fast equal /^0b[01]+$/i

          case 79:
          case 111:
            radix = 8;
            maxCode = 55;
            break;
          // fast equal /^0o[0-7]+$/i

          default:
            return +it;
        }

        for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
          code = digits.charCodeAt(i); // parseInt parses a string to a first unavailable symbol
          // but ToNumber should return NaN if a string contains unavailable symbols

          if (code < 48 || code > maxCode) return NaN;
        }

        return parseInt(digits, radix);
      }
    }

    return +it;
  };

  if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
    $Number = function Number(value) {
      var it = arguments.length < 1 ? 0 : value;
      var that = this;
      return that instanceof $Number // check on 1..constructor(foo) case
      && (BROKEN_COF ? _fails(function () {
        proto$1.valueOf.call(that);
      }) : _cof(that) != NUMBER) ? _inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
    };

    for (var keys = _descriptors ? gOPN$2(Base) : ( // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j$1 = 0, key$1; keys.length > j$1; j$1++) {
      if (_has(Base, key$1 = keys[j$1]) && !_has($Number, key$1)) {
        dP$2($Number, key$1, gOPD$2(Base, key$1));
      }
    }

    $Number.prototype = proto$1;
    proto$1.constructor = $Number;

    _redefine(_global, NUMBER, $Number);
  }

  var moment = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
      module.exports = factory();
    })(commonjsGlobal, function () {
      var hookCallback;

      function hooks() {
        return hookCallback.apply(null, arguments);
      } // This is done to register the method called with moment()
      // without creating circular dependencies.


      function setHookCallback(callback) {
        hookCallback = callback;
      }

      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
      }

      function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
      }

      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;

          for (k in obj) {
            if (obj.hasOwnProperty(k)) {
              return false;
            }
          }

          return true;
        }
      }

      function isUndefined(input) {
        return input === void 0;
      }

      function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
      }

      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
      }

      function map(arr, fn) {
        var res = [],
            i;

        for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i));
        }

        return res;
      }

      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }

      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }

        if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf;
        }

        return a;
      }

      function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
      }

      function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }

      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }

        return m._pf;
      }

      var some;

      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function (fun) {
          var t = Object(this);
          var len = t.length >>> 0;

          for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }

          return false;
        };
      }

      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m);
          var parsedParts = some.call(flags.parsedDateParts, function (i) {
            return i != null;
          });
          var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
          }

          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }

        return m._isValid;
      }

      function createInvalid(flags) {
        var m = createUTC(NaN);

        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }

        return m;
      } // Plugins that add properties should also add the key here (null value),
      // so we can properly clone ourselves.


      var momentProperties = hooks.momentProperties = [];

      function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
          to._isAMomentObject = from._isAMomentObject;
        }

        if (!isUndefined(from._i)) {
          to._i = from._i;
        }

        if (!isUndefined(from._f)) {
          to._f = from._f;
        }

        if (!isUndefined(from._l)) {
          to._l = from._l;
        }

        if (!isUndefined(from._strict)) {
          to._strict = from._strict;
        }

        if (!isUndefined(from._tzm)) {
          to._tzm = from._tzm;
        }

        if (!isUndefined(from._isUTC)) {
          to._isUTC = from._isUTC;
        }

        if (!isUndefined(from._offset)) {
          to._offset = from._offset;
        }

        if (!isUndefined(from._pf)) {
          to._pf = getParsingFlags(from);
        }

        if (!isUndefined(from._locale)) {
          to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
          for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from[prop];

            if (!isUndefined(val)) {
              to[prop] = val;
            }
          }
        }

        return to;
      }

      var updateInProgress = false; // Moment prototype object

      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);

        if (!this.isValid()) {
          this._d = new Date(NaN);
        } // Prevent infinite loop in case updateOffset creates new moment
        // objects.


        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }

      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }

      function absFloor(number) {
        if (number < 0) {
          // -0 -> 0
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }

      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }

        return value;
      } // compare two arrays, return the number of differences


      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;

        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }

        return diffs + lengthDiff;
      }

      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
          console.warn('Deprecation warning: ' + msg);
        }
      }

      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }

          if (firstTime) {
            var args = [];
            var arg;

            for (var i = 0; i < arguments.length; i++) {
              arg = '';

              if (typeof arguments[i] === 'object') {
                arg += '\n[' + i + '] ';

                for (var key in arguments[0]) {
                  arg += key + ': ' + arguments[0][key] + ', ';
                }

                arg = arg.slice(0, -2); // Remove trailing comma and space
              } else {
                arg = arguments[i];
              }

              args.push(arg);
            }

            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
            firstTime = false;
          }

          return fn.apply(this, arguments);
        }, fn);
      }

      var deprecations = {};

      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }

        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }

      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;

      function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
      }

      function set(config) {
        var prop, i;

        for (i in config) {
          prop = config[i];

          if (isFunction(prop)) {
            this[i] = prop;
          } else {
            this['_' + i] = prop;
          }
        }

        this._config = config; // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.

        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
      }

      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;

        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }

        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
          }
        }

        return res;
      }

      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }

      var keys;

      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function (obj) {
          var i,
              res = [];

          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }

          return res;
        };
      }

      var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
      };

      function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
      }

      var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
      };

      function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
          return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
          return val.slice(1);
        });
        return this._longDateFormat[key];
      }

      var defaultInvalidDate = 'Invalid date';

      function invalidDate() {
        return this._invalidDate;
      }

      var defaultOrdinal = '%d';
      var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

      function ordinal(number) {
        return this._ordinal.replace('%d', number);
      }

      var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
      };

      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }

      function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
      }

      var aliases = {};

      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
      }

      function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
      }

      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);

            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }

        return normalizedInput;
      }

      var priorities = {};

      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }

      function getPrioritizedUnits(unitsObj) {
        var units = [];

        for (var u in unitsObj) {
          units.push({
            unit: u,
            priority: priorities[u]
          });
        }

        units.sort(function (a, b) {
          return a.priority - b.priority;
        });
        return units;
      }

      function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }

      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
      var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
      var formatFunctions = {};
      var formatTokenFunctions = {}; // token:    'M'
      // padded:   ['MM', 2]
      // ordinal:  'Mo'
      // callback: function () { this.month() + 1 }

      function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;

        if (typeof callback === 'string') {
          func = function () {
            return this[callback]();
          };
        }

        if (token) {
          formatTokenFunctions[token] = func;
        }

        if (padded) {
          formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }

        if (ordinal) {
          formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
          };
        }
      }

      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '');
        }

        return input.replace(/\\/g, '');
      }

      function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }

        return function (mom) {
          var output = '',
              i;

          for (i = 0; i < length; i++) {
            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
          }

          return output;
        };
      } // format date using native date object


      function formatMoment(m, format) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
      }

      function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
          return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;

        while (i >= 0 && localFormattingTokens.test(format)) {
          format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }

        return format;
      }

      var match1 = /\d/; //       0 - 9

      var match2 = /\d\d/; //      00 - 99

      var match3 = /\d{3}/; //     000 - 999

      var match4 = /\d{4}/; //    0000 - 9999

      var match6 = /[+-]?\d{6}/; // -999999 - 999999

      var match1to2 = /\d\d?/; //       0 - 99

      var match3to4 = /\d\d\d\d?/; //     999 - 9999

      var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999

      var match1to3 = /\d{1,3}/; //       0 - 999

      var match1to4 = /\d{1,4}/; //       0 - 9999

      var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

      var matchUnsigned = /\d+/; //       0 - inf

      var matchSigned = /[+-]?\d+/; //    -inf - inf

      var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

      var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

      var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
      // any word (or two) characters or numbers including two/three word month in arabic.
      // includes scottish gaelic two word and hyphenated months

      var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
      var regexes = {};

      function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }

      function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
          return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
      } // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript


      function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
        }));
      }

      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      }

      var tokens = {};

      function addParseToken(token, callback) {
        var i,
            func = callback;

        if (typeof token === 'string') {
          token = [token];
        }

        if (isNumber(callback)) {
          func = function (input, array) {
            array[callback] = toInt(input);
          };
        }

        for (i = 0; i < token.length; i++) {
          tokens[token[i]] = func;
        }
      }

      function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
          config._w = config._w || {};
          callback(input, config._w, config, token);
        });
      }

      function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
          tokens[token](input, config._a, config, token);
        }
      }

      var YEAR = 0;
      var MONTH = 1;
      var DATE = 2;
      var HOUR = 3;
      var MINUTE = 4;
      var SECOND = 5;
      var MILLISECOND = 6;
      var WEEK = 7;
      var WEEKDAY = 8; // FORMATTING

      addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
      });
      addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
      });
      addFormatToken(0, ['YYYY', 4], 0, 'year');
      addFormatToken(0, ['YYYYY', 5], 0, 'year');
      addFormatToken(0, ['YYYYYY', 6, true], 0, 'year'); // ALIASES

      addUnitAlias('year', 'y'); // PRIORITIES

      addUnitPriority('year', 1); // PARSING

      addRegexToken('Y', matchSigned);
      addRegexToken('YY', match1to2, match2);
      addRegexToken('YYYY', match1to4, match4);
      addRegexToken('YYYYY', match1to6, match6);
      addRegexToken('YYYYYY', match1to6, match6);
      addParseToken(['YYYYY', 'YYYYYY'], YEAR);
      addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
      }); // HELPERS

      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }

      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      } // HOOKS


      hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
      }; // MOMENTS


      var getSetYear = makeGetSet('FullYear', true);

      function getIsLeapYear() {
        return isLeapYear(this.year());
      }

      function makeGetSet(unit, keepTime) {
        return function (value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }

      function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
      }

      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
          } else {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
          }
        }
      } // MOMENTS


      function stringGet(units) {
        units = normalizeUnits(units);

        if (isFunction(this[units])) {
          return this[units]();
        }

        return this;
      }

      function stringSet(units, value) {
        if (typeof units === 'object') {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units);

          for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);

          if (isFunction(this[units])) {
            return this[units](value);
          }
        }

        return this;
      }

      function mod(n, x) {
        return (n % x + x) % x;
      }

      var indexOf;

      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function (o) {
          // I know
          var i;

          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }

          return -1;
        };
      }

      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }

        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      } // FORMATTING


      addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
      });
      addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
      });
      addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
      }); // ALIASES

      addUnitAlias('month', 'M'); // PRIORITY

      addUnitPriority('month', 8); // PARSING

      addRegexToken('M', match1to2);
      addRegexToken('MM', match1to2, match2);
      addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
      });
      addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
      });
      addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict); // if we didn't find a month name, mark the date as invalid.


        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      }); // LOCALES

      var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
      var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');

      function localeMonths(m, format) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months['standalone'];
        }

        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
      }

      var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');

      function localeMonthsShort(m, format) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        }

        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
      }

      function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();

        if (!this._monthsParse) {
          // this is not used
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];

          for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
          }
        }

        if (strict) {
          if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }

      function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        } // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse


        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);

          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
          }

          if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
          } // test the regex


          if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      } // MOMENTS


      function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
          // No op
          return mom;
        }

        if (typeof value === 'string') {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value); // TODO: Another silent failure?

            if (!isNumber(value)) {
              return mom;
            }
          }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));

        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);

        return mom;
      }

      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, 'Month');
        }
      }

      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }

      var defaultMonthsShortRegex = matchWord;

      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }

          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }

          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }

      var defaultMonthsRegex = matchWord;

      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }

          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
          }

          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }

      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;

        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          shortPieces.push(this.monthsShort(mom, ''));
          longPieces.push(this.months(mom, ''));
          mixedPieces.push(this.months(mom, ''));
          mixedPieces.push(this.monthsShort(mom, ''));
        } // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.


        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
        }

        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
      }

      function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date; // the date constructor remaps years 0-99 to 1900-1999

        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          date = new Date(y + 400, m, d, h, M, s, ms);

          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
      }

      function createUTCDate(y) {
        var date; // the Date.UTC function remaps years 0-99 to 1900-1999

        if (y < 100 && y >= 0) {
          var args = Array.prototype.slice.call(arguments); // preserve leap years using a full 400 year cycle, then reset

          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));

          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
      } // start-of-first-week - start-of-year


      function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      } // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday


      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }

        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }

      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }

        return {
          week: resWeek,
          year: resYear
        };
      }

      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      } // FORMATTING


      addFormatToken('w', ['ww', 2], 'wo', 'week');
      addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek'); // ALIASES

      addUnitAlias('week', 'w');
      addUnitAlias('isoWeek', 'W'); // PRIORITIES

      addUnitPriority('week', 5);
      addUnitPriority('isoWeek', 5); // PARSING

      addRegexToken('w', match1to2);
      addRegexToken('ww', match1to2, match2);
      addRegexToken('W', match1to2);
      addRegexToken('WW', match1to2, match2);
      addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
      }); // HELPERS
      // LOCALES

      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }

      var defaultLocaleWeek = {
        dow: 0,
        // Sunday is the first day of the week.
        doy: 6 // The week that contains Jan 6th is the first week of the year.

      };

      function localeFirstDayOfWeek() {
        return this._week.dow;
      }

      function localeFirstDayOfYear() {
        return this._week.doy;
      } // MOMENTS


      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
      }

      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
      } // FORMATTING


      addFormatToken('d', 0, 'do', 'day');
      addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
      });
      addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
      });
      addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
      });
      addFormatToken('e', 0, 0, 'weekday');
      addFormatToken('E', 0, 0, 'isoWeekday'); // ALIASES

      addUnitAlias('day', 'd');
      addUnitAlias('weekday', 'e');
      addUnitAlias('isoWeekday', 'E'); // PRIORITY

      addUnitPriority('day', 11);
      addUnitPriority('weekday', 11);
      addUnitPriority('isoWeekday', 11); // PARSING

      addRegexToken('d', match1to2);
      addRegexToken('e', match1to2);
      addRegexToken('E', match1to2);
      addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
      });
      addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
      });
      addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
      });
      addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict); // if we didn't get a weekday name, mark the date as invalid


        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
      }); // HELPERS

      function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
          return input;
        }

        if (!isNaN(input)) {
          return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);

        if (typeof input === 'number') {
          return input;
        }

        return null;
      }

      function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
          return locale.weekdaysParse(input) % 7 || 7;
        }

        return isNaN(input) ? null : input;
      } // LOCALES


      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }

      var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');

      function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }

      var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');

      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }

      var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');

      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }

      function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();

        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];

          for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
          }
        }

        if (strict) {
          if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._shortWeekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._weekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._weekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }

      function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, 1]).day(i);

          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
          }

          if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
          } // test the regex


          if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      } // MOMENTS


      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();

        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, 'd');
        } else {
          return day;
        }
      }

      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
      }

      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        } // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.


        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }

      var defaultWeekdaysRegex = matchWord;

      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }

          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }

          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }

      var defaultWeekdaysShortRegex = matchWord;

      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }

          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }

          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }

      var defaultWeekdaysMinRegex = matchWord;

      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }

          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }

          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }

      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;

        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, 1]).day(i);
          minp = this.weekdaysMin(mom, '');
          shortp = this.weekdaysShort(mom, '');
          longp = this.weekdays(mom, '');
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        } // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.


        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        for (i = 0; i < 7; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
      } // FORMATTING


      function hFormat() {
        return this.hours() % 12 || 12;
      }

      function kFormat() {
        return this.hours() || 24;
      }

      addFormatToken('H', ['HH', 2], 0, 'hour');
      addFormatToken('h', ['hh', 2], 0, hFormat);
      addFormatToken('k', ['kk', 2], 0, kFormat);
      addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });

      function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
      }

      meridiem('a', true);
      meridiem('A', false); // ALIASES

      addUnitAlias('hour', 'h'); // PRIORITY

      addUnitPriority('hour', 13); // PARSING

      function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
      }

      addRegexToken('a', matchMeridiem);
      addRegexToken('A', matchMeridiem);
      addRegexToken('H', match1to2);
      addRegexToken('h', match1to2);
      addRegexToken('k', match1to2);
      addRegexToken('HH', match1to2, match2);
      addRegexToken('hh', match1to2, match2);
      addRegexToken('kk', match1to2, match2);
      addRegexToken('hmm', match3to4);
      addRegexToken('hmmss', match5to6);
      addRegexToken('Hmm', match3to4);
      addRegexToken('Hmmss', match5to6);
      addParseToken(['H', 'HH'], HOUR);
      addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      }); // LOCALES

      function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
      }

      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

      function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
          return isLower ? 'pm' : 'PM';
        } else {
          return isLower ? 'am' : 'AM';
        }
      } // MOMENTS
      // Setting the hour should keep the time, because the user explicitly
      // specified which hour they want. So trying to maintain the same hour (in
      // a new timezone) makes sense. Adding/subtracting hours does not follow
      // this rule.


      var getSetHour = makeGetSet('Hours', true);
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      }; // internal storage for locale config files

      var locales = {};
      var localeFamilies = {};
      var globalLocale;

      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
      } // pick the locale from the array
      // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
      // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root


      function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
          split = normalizeLocale(names[i]).split('-');
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;

          while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));

            if (locale) {
              return locale;
            }

            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
              //the next array item is better than a shallower substring of this one
              break;
            }

            j--;
          }

          i++;
        }

        return globalLocale;
      }

      function loadLocale(name) {
        var oldLocale = null; // TODO: Find a better way to register and load all the locales in Node

        if (!locales[name] && 'object' !== 'undefined' && module && module.exports) {
          try {
            oldLocale = globalLocale._abbr;
            var aliasedRequire = commonjsRequire;
            aliasedRequire('./locale/' + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {}
        }

        return locales[name];
      } // This function will load locale and then set the global locale.  If
      // no arguments are passed in, it will simply return the current global
      // locale key.


      function getSetGlobalLocale(key, values) {
        var data;

        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }

          if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
          } else {
            if (typeof console !== 'undefined' && console.warn) {
              //warn user if arguments are passed but the locale could not be set
              console.warn('Locale ' + key + ' not found. Did you forget to load it?');
            }
          }
        }

        return globalLocale._abbr;
      }

      function defineLocale(name, config) {
        if (config !== null) {
          var locale,
              parentConfig = baseConfig;
          config.abbr = name;

          if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale = loadLocale(config.parentLocale);

              if (locale != null) {
                parentConfig = locale._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }

                localeFamilies[config.parentLocale].push({
                  name: name,
                  config: config
                });
                return null;
              }
            }
          }

          locales[name] = new Locale(mergeConfigs(parentConfig, config));

          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
              defineLocale(x.name, x.config);
            });
          } // backwards compat for now: also set the locale
          // make sure we set the locale AFTER all child locales have been
          // created, so we won't end up with the child locale set.


          getSetGlobalLocale(name);
          return locales[name];
        } else {
          // useful for testing
          delete locales[name];
          return null;
        }
      }

      function updateLocale(name, config) {
        if (config != null) {
          var locale,
              tmpLocale,
              parentConfig = baseConfig; // MERGE

          tmpLocale = loadLocale(name);

          if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
          }

          config = mergeConfigs(parentConfig, config);
          locale = new Locale(config);
          locale.parentLocale = locales[name];
          locales[name] = locale; // backwards compat for now: also set the locale

          getSetGlobalLocale(name);
        } else {
          // pass null for config to unupdate, useful for tests
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }

        return locales[name];
      } // returns locale data


      function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }

        if (!key) {
          return globalLocale;
        }

        if (!isArray(key)) {
          //short-circuit everything else
          locale = loadLocale(key);

          if (locale) {
            return locale;
          }

          key = [key];
        }

        return chooseLocale(key);
      }

      function listLocales() {
        return keys(locales);
      }

      function checkOverflow(m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }

          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }

          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }

          getParsingFlags(m).overflow = overflow;
        }

        return m;
      } // Pick the first defined of two or three arguments.


      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }

        if (b != null) {
          return b;
        }

        return c;
      }

      function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());

        if (config._useUTC) {
          return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }

        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      } // convert an array to a date.
      // the array should mirror the parameters below
      // note: all values past the year are optional and will default to the lowest possible value.
      // [year, month, day , hour, minute, second, millisecond]


      function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
          return;
        }

        currentDate = currentDateArray(config); //compute day of the year from weeks and weekdays

        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        } //if the day of the year is set, figure out what it is


        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }

          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        } // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything


        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        } // Zero out whatever was not defaulted, including time


        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        } // Check for 24:00:00.000


        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay(); // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.

        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
          config._a[HOUR] = 24;
        } // check for mismatching day of week


        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }

      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
        w = config._w;

        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4; // TODO: We need to take the current isoWeekYear, but that depends on
          // how we interpret now (local, utc, fixed offset). So create
          // a now version of current config (take local/utc/offset flags, and
          // create now).

          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);

          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          var curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year); // Default to current week.

          week = defaults(w.w, curWeek.week);

          if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;

            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            // local weekday -- counting starts from beginning of week
            weekday = w.e + dow;

            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            // default to beginning of week
            weekday = dow;
          }
        }

        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      } // iso 8601 regex
      // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)


      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
      var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
      var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
      var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], // YYYYMM is NOT allowed by the standard
      ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]]; // iso time formats and regexes

      var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];
      var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i; // date from iso format

      function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
          getParsingFlags(config).iso = true;

          for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }

          if (dateFormat == null) {
            config._isValid = false;
            return;
          }

          if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                // match[2] should be 'T' or space
                timeFormat = (match[2] || ' ') + isoTimes[i][0];
                break;
              }
            }

            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }

          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }

          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = 'Z';
            } else {
              config._isValid = false;
              return;
            }
          }

          config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      } // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3


      var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];

        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }

        return result;
      }

      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);

        if (year <= 49) {
          return 2000 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }

        return year;
      }

      function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
      }

      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
              weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();

          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }

        return true;
      }

      var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };

      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          // the only allowed military tz is Z
          return 0;
        } else {
          var hm = parseInt(numOffset, 10);
          var m = hm % 100,
              h = (hm - m) / 100;
          return h * 60 + m;
        }
      } // date and time from ref 2822 format


      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));

        if (match) {
          var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);

          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }

          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);

          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      } // date from iso format or fallback


      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }

        configFromISO(config);

        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }

        configFromRFC2822(config);

        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        } // Final attempt, use Input Fallback


        hooks.createFromInputFallback(config);
      }

      hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
      }); // constant that refers to the ISO standard

      hooks.ISO_8601 = function () {}; // constant that refers to the RFC 2822 form


      hooks.RFC_2822 = function () {}; // date from string and format string


      function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }

        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }

        config._a = [];
        getParsingFlags(config).empty = true; // This array is used to make a Date, either with `new Date` or `Date.UTC`

        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
          token = tokens[i];
          parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0]; // console.log('token', token, 'parsedInput', parsedInput,
          //         'regex', getParseRegexForToken(token, config));

          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));

            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }

            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          } // don't parse if it's not a known token


          if (formatTokenFunctions[token]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token);
            }

            addTimeToArrayFromToken(token, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
          }
        } // add remaining unparsed input length to the string


        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;

        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        } // clear _12h flag if hour is <= 12


        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem; // handle meridiem

        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        configFromArray(config);
        checkOverflow(config);
      }

      function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
          // nothing to do
          return hour;
        }

        if (locale.meridiemHour != null) {
          return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
          // Fallback
          isPm = locale.isPM(meridiem);

          if (isPm && hour < 12) {
            hour += 12;
          }

          if (!isPm && hour === 12) {
            hour = 0;
          }

          return hour;
        } else {
          // this is not supposed to happen
          return hour;
        }
      } // date from string and array of format strings


      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;

        if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }

        for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          tempConfig = copyConfig({}, config);

          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }

          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);

          if (!isValid(tempConfig)) {
            continue;
          } // if there is any input that was not parsed add a penalty for that format


          currentScore += getParsingFlags(tempConfig).charsLeftOver; //or tokens

          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;

          if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }

        extend(config, bestMoment || tempConfig);
      }

      function configFromObject(config) {
        if (config._d) {
          return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
          return obj && parseInt(obj, 10);
        });
        configFromArray(config);
      }

      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));

        if (res._nextDay) {
          // Adding is smart enough around DST
          res.add(1, 'd');
          res._nextDay = undefined;
        }

        return res;
      }

      function prepareConfig(config) {
        var input = config._i,
            format = config._f;
        config._locale = config._locale || getLocale(config._l);

        if (input === null || format === undefined && input === '') {
          return createInvalid({
            nullInput: true
          });
        }

        if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format)) {
          configFromStringAndArray(config);
        } else if (format) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }

        if (!isValid(config)) {
          config._d = null;
        }

        return config;
      }

      function configFromInput(config) {
        var input = config._i;

        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          // from milliseconds
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }

      function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
          strict = locale;
          locale = undefined;
        }

        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = undefined;
        } // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423


        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
      }

      function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
      }

      var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);

        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      });
      var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);

        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }); // Pick a moment m from moments so that m[fn](other) is true for all
      // other. This relies on the function fn to be transitive.
      //
      // moments should either be an array of moment objects or an array, whose
      // first element is an array of moment objects.

      function pickBy(fn, moments) {
        var res, i;

        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }

        if (!moments.length) {
          return createLocal();
        }

        res = moments[0];

        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }

        return res;
      } // TODO: Use [].sort instead?


      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
      }

      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
      }

      var now = function () {
        return Date.now ? Date.now() : +new Date();
      };

      var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

      function isDurationValid(m) {
        for (var key in m) {
          if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }

        var unitHasDecimal = false;

        for (var i = 0; i < ordering.length; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false; // only allow non-integers for smallest unit
            }

            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }

        return true;
      }

      function isValid$1() {
        return this._isValid;
      }

      function createInvalid$1() {
        return createDuration(NaN);
      }

      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput); // representation for dateAddRemove

        this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately

        this._days = +days + weeks * 7; // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.

        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = getLocale();

        this._bubble();
      }

      function isDuration(obj) {
        return obj instanceof Duration;
      }

      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      } // FORMATTING


      function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
          var offset = this.utcOffset();
          var sign = '+';

          if (offset < 0) {
            offset = -offset;
            sign = '-';
          }

          return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
      }

      offset('Z', ':');
      offset('ZZ', ''); // PARSING

      addRegexToken('Z', matchShortOffset);
      addRegexToken('ZZ', matchShortOffset);
      addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      }); // HELPERS
      // timezone chunker
      // '+10:00' > ['10',  '00']
      // '-1530'  > ['-15', '30']

      var chunkOffset = /([\+\-]|\d\d)/gi;

      function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
          return null;
        }

        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
      } // Return a moment from input, that is local/utc/zone equivalent to model.


      function cloneWithOffset(input, model) {
        var res, diff;

        if (model._isUTC) {
          res = model.clone();
          diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf(); // Use low-level api, because this fn is low-level api.

          res._d.setTime(res._d.valueOf() + diff);

          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }

      function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
      } // HOOKS
      // This function will be called whenever a moment is mutated.
      // It is intended to keep the offset in sync with the timezone.


      hooks.updateOffset = function () {}; // MOMENTS
      // keepLocalTime = true means only change the timezone, without
      // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
      // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
      // +0200, so we adjust the time as needed, to be valid.
      //
      // Keeping the time actually adds/subtracts (one hour)
      // from the actual represented time. That is why we call updateOffset
      // a second time. In case it wants us to change the offset again
      // _changeInProgress == true case, then we have to adjust, because
      // there is no such time in the given timezone.


      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;

        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        if (input != null) {
          if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);

            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }

          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }

          this._offset = input;
          this._isUTC = true;

          if (localAdjust != null) {
            this.add(localAdjust, 'm');
          }

          if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }

          return this;
        } else {
          return this._isUTC ? offset : getDateOffset(this);
        }
      }

      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== 'string') {
            input = -input;
          }

          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }

      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }

      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;

          if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
          }
        }

        return this;
      }

      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
          var tZone = offsetFromString(matchOffset, this._i);

          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }

        return this;
      }

      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }

        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }

      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }

      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }

        var c = {};
        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
          var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }

        return this._isDSTShifted;
      }

      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }

      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }

      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      } // ASP.NET json date format regex


      var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/; // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
      // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
      // and further modified to allow for strings containing both week and day

      var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

      function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
        match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input)) {
          duration = {};

          if (key) {
            duration[key] = input;
          } else {
            duration.milliseconds = input;
          }
        } else if (!!(match = aspNetRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign,
            h: toInt(match[HOUR]) * sign,
            m: toInt(match[MINUTE]) * sign,
            s: toInt(match[SECOND]) * sign,
            ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match

          };
        } else if (!!(match = isoRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign),
            M: parseIso(match[3], sign),
            w: parseIso(match[4], sign),
            d: parseIso(match[5], sign),
            h: parseIso(match[6], sign),
            m: parseIso(match[7], sign),
            s: parseIso(match[8], sign)
          };
        } else if (duration == null) {
          // checks for null or undefined
          duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale;
        }

        return ret;
      }

      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;

      function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.')); // apply sign while we're at it

        return (isNaN(res) ? 0 : res) * sign;
      }

      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;

        if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
      }

      function momentsDifference(base, other) {
        var res;

        if (!(base.isValid() && other.isValid())) {
          return {
            milliseconds: 0,
            months: 0
          };
        }

        other = cloneWithOffset(other, base);

        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }

        return res;
      } // TODO: remove 'name' arg after deprecation is removed


      function createAdder(direction, name) {
        return function (val, period) {
          var dur, tmp; //invert the arguments, but complain about it

          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val;
            val = period;
            period = tmp;
          }

          val = typeof val === 'string' ? +val : val;
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }

      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
          // No op
          return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
          setMonth(mom, get(mom, 'Month') + months * isAdding);
        }

        if (days) {
          set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }

        if (milliseconds) {
          mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }

        if (updateOffset) {
          hooks.updateOffset(mom, days || months);
        }
      }

      var add = createAdder(1, 'add');
      var subtract = createAdder(-1, 'subtract');

      function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
      }

      function calendar$1(time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';
        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
      }

      function clone() {
        return new Moment(this);
      }

      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);

        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }

        units = normalizeUnits(units) || 'millisecond';

        if (units === 'millisecond') {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }

      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);

        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }

        units = normalizeUnits(units) || 'millisecond';

        if (units === 'millisecond') {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }

      function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);

        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }

        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }

      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;

        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }

        units = normalizeUnits(units) || 'millisecond';

        if (units === 'millisecond') {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }

      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }

      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }

      function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
          return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
          return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);

        switch (units) {
          case 'year':
            output = monthDiff(this, that) / 12;
            break;

          case 'month':
            output = monthDiff(this, that);
            break;

          case 'quarter':
            output = monthDiff(this, that) / 3;
            break;

          case 'second':
            output = (this - that) / 1e3;
            break;
          // 1000

          case 'minute':
            output = (this - that) / 6e4;
            break;
          // 1000 * 60

          case 'hour':
            output = (this - that) / 36e5;
            break;
          // 1000 * 60 * 60

          case 'day':
            output = (this - that - zoneDelta) / 864e5;
            break;
          // 1000 * 60 * 60 * 24, negate dst

          case 'week':
            output = (this - that - zoneDelta) / 6048e5;
            break;
          // 1000 * 60 * 60 * 24 * 7, negate dst

          default:
            output = this - that;
        }

        return asFloat ? output : absFloor(output);
      }

      function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, 'months'); // linear across the month

          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, 'months'); // linear across the month

          adjust = (b - anchor) / (anchor2 - anchor);
        } //check for negative zero, return zero if negative zero


        return -(wholeMonthDiff + adjust) || 0;
      }

      hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
      hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

      function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
      }

      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }

        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;

        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }

        if (isFunction(Date.prototype.toISOString)) {
          // native implementation is ~50x faster, use it when we can
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
          }
        }

        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
      }
      /**
       * Return a human readable representation of a moment that can
       * also be evaluated to get a new moment which is the same
       *
       * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
       */


      function inspect() {
        if (!this.isValid()) {
          return 'moment.invalid(/* ' + this._i + ' */)';
        }

        var func = 'moment';
        var zone = '';

        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
          zone = 'Z';
        }

        var prefix = '[' + func + '("]';
        var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }

      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }

        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }

      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            to: this,
            from: time
          }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }

      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }

      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            from: this,
            to: time
          }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }

      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      } // If passed a locale key, it will set the locale for this
      // instance.  Otherwise, it will return the locale configuration
      // variables for this instance.


      function locale(key) {
        var newLocaleData;

        if (key === undefined) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);

          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }

          return this;
        }
      }

      var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      });

      function localeData() {
        return this._locale;
      }

      var MS_PER_SECOND = 1000;
      var MS_PER_MINUTE = 60 * MS_PER_SECOND;
      var MS_PER_HOUR = 60 * MS_PER_MINUTE;
      var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR; // actual modulo - handles negative numbers (for dates before 1970):

      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }

      function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }

      function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }

      function startOf(units) {
        var time;
        units = normalizeUnits(units);

        if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
          case 'year':
            time = startOfDate(this.year(), 0, 1);
            break;

          case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;

          case 'month':
            time = startOfDate(this.year(), this.month(), 1);
            break;

          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;

          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;

          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date());
            break;

          case 'hour':
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;

          case 'minute':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;

          case 'second':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }

        this._d.setTime(time);

        hooks.updateOffset(this, true);
        return this;
      }

      function endOf(units) {
        var time;
        units = normalizeUnits(units);

        if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
          case 'year':
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;

          case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;

          case 'month':
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;

          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;

          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;

          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;

          case 'hour':
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;

          case 'minute':
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;

          case 'second':
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }

        this._d.setTime(time);

        hooks.updateOffset(this, true);
        return this;
      }

      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
      }

      function unix() {
        return Math.floor(this.valueOf() / 1000);
      }

      function toDate() {
        return new Date(this.valueOf());
      }

      function toArray() {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
      }

      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }

      function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
      }

      function isValid$2() {
        return isValid(this);
      }

      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }

      function invalidAt() {
        return getParsingFlags(this).overflow;
      }

      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      } // FORMATTING


      addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
      });

      function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
      }

      addWeekYearFormatToken('gggg', 'weekYear');
      addWeekYearFormatToken('ggggg', 'weekYear');
      addWeekYearFormatToken('GGGG', 'isoWeekYear');
      addWeekYearFormatToken('GGGGG', 'isoWeekYear'); // ALIASES

      addUnitAlias('weekYear', 'gg');
      addUnitAlias('isoWeekYear', 'GG'); // PRIORITY

      addUnitPriority('weekYear', 1);
      addUnitPriority('isoWeekYear', 1); // PARSING

      addRegexToken('G', matchSigned);
      addRegexToken('g', matchSigned);
      addRegexToken('GG', match1to2, match2);
      addRegexToken('gg', match1to2, match2);
      addRegexToken('GGGG', match1to4, match4);
      addRegexToken('gggg', match1to4, match4);
      addRegexToken('GGGGG', match1to6, match6);
      addRegexToken('ggggg', match1to6, match6);
      addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
      });
      addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
      }); // MOMENTS

      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
      }

      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }

      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }

      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;

        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }

      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;

        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);

          if (week > weeksTarget) {
            week = weeksTarget;
          }

          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }

      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      } // FORMATTING


      addFormatToken('Q', 0, 'Qo', 'quarter'); // ALIASES

      addUnitAlias('quarter', 'Q'); // PRIORITY

      addUnitPriority('quarter', 7); // PARSING

      addRegexToken('Q', match1);
      addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      }); // MOMENTS

      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      } // FORMATTING


      addFormatToken('D', ['DD', 2], 'Do', 'date'); // ALIASES

      addUnitAlias('date', 'D'); // PRIORITY

      addUnitPriority('date', 9); // PARSING

      addRegexToken('D', match1to2);
      addRegexToken('DD', match1to2, match2);
      addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(['D', 'DD'], DATE);
      addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      }); // MOMENTS

      var getSetDayOfMonth = makeGetSet('Date', true); // FORMATTING

      addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear'); // ALIASES

      addUnitAlias('dayOfYear', 'DDD'); // PRIORITY

      addUnitPriority('dayOfYear', 4); // PARSING

      addRegexToken('DDD', match1to3);
      addRegexToken('DDDD', match3);
      addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
      }); // HELPERS
      // MOMENTS

      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
      } // FORMATTING


      addFormatToken('m', ['mm', 2], 0, 'minute'); // ALIASES

      addUnitAlias('minute', 'm'); // PRIORITY

      addUnitPriority('minute', 14); // PARSING

      addRegexToken('m', match1to2);
      addRegexToken('mm', match1to2, match2);
      addParseToken(['m', 'mm'], MINUTE); // MOMENTS

      var getSetMinute = makeGetSet('Minutes', false); // FORMATTING

      addFormatToken('s', ['ss', 2], 0, 'second'); // ALIASES

      addUnitAlias('second', 's'); // PRIORITY

      addUnitPriority('second', 15); // PARSING

      addRegexToken('s', match1to2);
      addRegexToken('ss', match1to2, match2);
      addParseToken(['s', 'ss'], SECOND); // MOMENTS

      var getSetSecond = makeGetSet('Seconds', false); // FORMATTING

      addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ['SSS', 3], 0, 'millisecond');
      addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
      });
      addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
      });
      addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
      });
      addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
      }); // ALIASES

      addUnitAlias('millisecond', 'ms'); // PRIORITY

      addUnitPriority('millisecond', 16); // PARSING

      addRegexToken('S', match1to3, match1);
      addRegexToken('SS', match1to3, match2);
      addRegexToken('SSS', match1to3, match3);
      var token;

      for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
      }

      function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
      }

      for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
      } // MOMENTS


      var getSetMillisecond = makeGetSet('Milliseconds', false); // FORMATTING

      addFormatToken('z', 0, 0, 'zoneAbbr');
      addFormatToken('zz', 0, 0, 'zoneName'); // MOMENTS

      function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
      }

      function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
      }

      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
      proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
      proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
      proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
      proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

      function createUnix(input) {
        return createLocal(input * 1000);
      }

      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }

      function preParsePostFormat(string) {
        return string;
      }

      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;

      function get$1(format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
      }

      function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
          index = format;
          format = undefined;
        }

        format = format || '';

        if (index != null) {
          return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];

        for (i = 0; i < 12; i++) {
          out[i] = get$1(format, i, field, 'month');
        }

        return out;
      } // ()
      // (5)
      // (fmt, 5)
      // (fmt)
      // (true)
      // (true, 5)
      // (true, fmt, 5)
      // (true, fmt)


      function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
          if (isNumber(format)) {
            index = format;
            format = undefined;
          }

          format = format || '';
        } else {
          format = localeSorted;
          index = format;
          localeSorted = false;

          if (isNumber(format)) {
            index = format;
            format = undefined;
          }

          format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
          return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];

        for (i = 0; i < 7; i++) {
          out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }

        return out;
      }

      function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
      }

      function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
      }

      function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
      }

      function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
      }

      function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
      }

      getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
          var b = number % 10,
              output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
          return number + output;
        }
      }); // Side effect imports

      hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
      hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
      var mathAbs = Math.abs;

      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }

      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      } // supports only 2.0-style add(1, 's') or add(duration)


      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      } // supports only 2.0-style subtract(1, 's') or subtract(duration)


      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }

      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }

      function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays; // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166

        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
          milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
          days = 0;
          months = 0;
        } // The following code bubbles up values, see the tests for
        // examples of what that means.


        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24); // convert days to months

        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays)); // 12 months -> 1 year

        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
      }

      function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
      }

      function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
      }

      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }

        var days;
        var months;
        var milliseconds = this._milliseconds;
        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
          days = this._days + milliseconds / 864e5;
          months = this._months + daysToMonths(days);

          switch (units) {
            case 'month':
              return months;

            case 'quarter':
              return months / 3;

            case 'year':
              return months / 12;
          }
        } else {
          // handle milliseconds separately because of floating point math errors (issue #1867)
          days = this._days + Math.round(monthsToDays(this._months));

          switch (units) {
            case 'week':
              return days / 7 + milliseconds / 6048e5;

            case 'day':
              return days + milliseconds / 864e5;

            case 'hour':
              return days * 24 + milliseconds / 36e5;

            case 'minute':
              return days * 1440 + milliseconds / 6e4;

            case 'second':
              return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here

            case 'millisecond':
              return Math.floor(days * 864e5) + milliseconds;

            default:
              throw new Error('Unknown unit ' + units);
          }
        }
      } // TODO: Use this.as('ms')?


      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }

        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }

      function makeAs(alias) {
        return function () {
          return this.as(alias);
        };
      }

      var asMilliseconds = makeAs('ms');
      var asSeconds = makeAs('s');
      var asMinutes = makeAs('m');
      var asHours = makeAs('h');
      var asDays = makeAs('d');
      var asWeeks = makeAs('w');
      var asMonths = makeAs('M');
      var asQuarters = makeAs('Q');
      var asYears = makeAs('y');

      function clone$1() {
        return createDuration(this);
      }

      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
      }

      function makeGetter(name) {
        return function () {
          return this.isValid() ? this._data[name] : NaN;
        };
      }

      var milliseconds = makeGetter('milliseconds');
      var seconds = makeGetter('seconds');
      var minutes = makeGetter('minutes');
      var hours = makeGetter('hours');
      var days = makeGetter('days');
      var months = makeGetter('months');
      var years = makeGetter('years');

      function weeks() {
        return absFloor(this.days() / 7);
      }

      var round = Math.round;
      var thresholds = {
        ss: 44,
        // a few seconds to seconds
        s: 45,
        // seconds to minute
        m: 45,
        // minutes to hour
        h: 22,
        // hours to day
        d: 26,
        // days to month
        M: 11 // months to year

      }; // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize

      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }

      function relativeTime$1(posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));
        var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
      } // This function allows you to set the rounding function for relative time strings


      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
          return round;
        }

        if (typeof roundingFunction === 'function') {
          round = roundingFunction;
          return true;
        }

        return false;
      } // This function allows you to set a threshold for relative time strings


      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
          return false;
        }

        if (limit === undefined) {
          return thresholds[threshold];
        }

        thresholds[threshold] = limit;

        if (threshold === 's') {
          thresholds.ss = limit - 1;
        }

        return true;
      }

      function humanize(withSuffix) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
          output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
      }

      var abs$1 = Math.abs;

      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }

      function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days = abs$1(this._days);
        var months = abs$1(this._months);
        var minutes, hours, years; // 3600 seconds -> 60 minutes -> 1 hour

        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60; // 12 months -> 1 year

        years = absFloor(months / 12);
        months %= 12; // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js

        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
          // this is the same as C#'s (Noda) and python (isodate)...
          // but not other JS (goog.date)
          return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
        return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
      }

      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
      proto$2.lang = lang; // Side effect imports
      // FORMATTING

      addFormatToken('X', 0, 0, 'unix');
      addFormatToken('x', 0, 0, 'valueOf'); // PARSING

      addRegexToken('x', matchSigned);
      addRegexToken('X', matchTimestamp);
      addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
      });
      addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
      }); // Side effect imports

      hooks.version = '2.24.0';
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto; // currently HTML5 input type only supports 24-hour formats

      hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
        // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
        // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
        // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',
        // <input type="date" />
        TIME: 'HH:mm',
        // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',
        // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',
        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',
        // <input type="week" />
        MONTH: 'YYYY-MM' // <input type="month" />

      };
      return hooks;
    });
  }); // Maps for number <-> hex string conversion

  var byteToHex = [];

  for (var i$1 = 0; i$1 < 256; i$1++) {
    byteToHex[i$1] = (i$1 + 0x100).toString(16).substr(1);
  }
  /**
   * Represent binary UUID into it's string representation.
   *
   * @param buf - Buffer containing UUID bytes.
   * @param offset - Offset from the start of the buffer where the UUID is saved (not needed if the buffer starts with the UUID).
   *
   * @returns String representation of the UUID.
   */


  function stringifyUUID(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
  }
  /**
   * Generate 16 random bytes to be used as a base for UUID.
   *
   * @ignore
   */


  var random = function () {
    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {
      // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
      // Moderately fast, high quality
      var _rnds8 = new Uint8Array(16);

      return function whatwgRNG() {
        crypto.getRandomValues(_rnds8);
        return _rnds8;
      };
    } // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().
    // It's fast, but is of unspecified quality.


    var _rnds = new Array(16);

    return function () {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) {
          r = Math.random() * 0x100000000;
        }

        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return _rnds;
    }; //     uuid.js
    //
    //     Copyright (c) 2010-2012 Robert Kieffer
    //     MIT License - http://opensource.org/licenses/mit-license.php
    // Unique ID creation requires a high quality random # generator.  We feature
    // detect to determine the best RNG source, normalizing to a function that
    // returns 128-bits of randomness, since that's what's usually required
    // return require('./rng');
  }();

  var byteToHex$1 = [];

  for (var i$1$1 = 0; i$1$1 < 256; i$1$1++) {
    byteToHex$1[i$1$1] = (i$1$1 + 0x100).toString(16).substr(1);
  } // **`v1()` - Generate time-based UUID**
  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html
  // random #'s we need to init node and clockseq


  var seedBytes = random(); // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)

  var defaultNodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]]; // Per 4.2.2, randomize (14 bit) clockseq

  var defaultClockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff; // Previous uuid creation time

  /**
   * UUIDv4 options.
   */

  /**
   * Generate UUIDv4
   *
   * @param options - Options to be used instead of default generated values.
   * String 'binary' is a shorthand for uuid4({}, new Array(16)).
   * @param buf - If present the buffer will be filled with the generated UUID.
   * @param offset - Offset of the UUID from the start of the buffer.
   *
   * @returns UUIDv4
   */

  function uuid4() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var buf = arguments.length > 1 ? arguments[1] : undefined;
    var offset = arguments.length > 2 ? arguments[2] : undefined; // Deprecated - 'format' argument, as supported in v1.2

    var i = buf && offset || 0;

    if (typeof options === 'string') {
      buf = options === 'binary' ? new Array(16) : undefined;
      options = {};
    }

    var rnds = options.random || (options.rng || random)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

    if (buf) {
      for (var ii = 0; ii < 16; ii++) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || stringifyUUID(rnds);
  } // Rollup will complain about mixing default and named exports in UMD build,
  // for example '/Date(1198908717056)/' or '/Date(1198908717056-0700)/'
  // code from http://momentjs.com/


  var ASPDateRegex = /^\/?Date\((-?\d+)/i; // Color REs

  var fullHexRE = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;
  var shortHexRE = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  var rgbRE = /^rgb\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *\)$/i;
  var rgbaRE = /^rgba\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *([01]|0?\.\d+) *\)$/i;
  /**
   * Hue, Saturation, Value.
   */

  /**
   * Test whether given object is a number
   *
   * @param value - Input value of unknown type.
   *
   * @returns True if number, false otherwise.
   */

  function isNumber(value) {
    return value instanceof Number || typeof value === "number";
  }
  /**
   * Remove everything in the DOM object
   *
   * @param DOMobject - Node whose child nodes will be recursively deleted.
   */


  function recursiveDOMDelete(DOMobject) {
    if (DOMobject) {
      while (DOMobject.hasChildNodes() === true) {
        var child = DOMobject.firstChild;

        if (child) {
          recursiveDOMDelete(child);
          DOMobject.removeChild(child);
        }
      }
    }
  }
  /**
   * Test whether given object is a string
   *
   * @param value - Input value of unknown type.
   *
   * @returns True if string, false otherwise.
   */


  function isString(value) {
    return value instanceof String || typeof value === "string";
  }
  /**
   * Test whether given object is a object (not primitive or null).
   *
   * @param value - Input value of unknown type.
   *
   * @returns True if not null object, false otherwise.
   */


  function isObject(value) {
    return _typeof(value) === "object" && value !== null;
  }
  /**
   * Test whether given object is a Date, or a String containing a Date
   *
   * @param value - Input value of unknown type.
   *
   * @returns True if Date instance or string date representation, false otherwise.
   */


  function isDate(value) {
    if (value instanceof Date) {
      return true;
    } else if (isString(value)) {
      // test whether this string contains a date
      var match = ASPDateRegex.exec(value);

      if (match) {
        return true;
      } else if (!isNaN(Date.parse(value))) {
        return true;
      }
    }

    return false;
  }
  /**
   * Test whether given object is a Moment date.
   * @TODO: This is basically a workaround, if Moment was imported property it wouldn't necessary as moment.isMoment is a TS type guard.
   *
   * @param value - Input value of unknown type.
   *
   * @returns True if Moment instance, false otherwise.
   */


  function isMoment(value) {
    return moment.isMoment(value);
  }
  /**
   * Copy property from b to a if property present in a.
   * If property in b explicitly set to null, delete it if `allowDeletion` set.
   *
   * Internal helper routine, should not be exported. Not added to `exports` for that reason.
   *
   * @param a - Target object.
   * @param b - Source object.
   * @param prop - Name of property to copy from b to a.
   * @param allowDeletion  if true, delete property in a if explicitly set to null in b
   */


  function copyOrDelete(a, b, prop, allowDeletion) {
    var doDeletion = false;

    if (allowDeletion === true) {
      doDeletion = b[prop] === null && a[prop] !== undefined;
    }

    if (doDeletion) {
      delete a[prop];
    } else {
      a[prop] = b[prop]; // Remember, this is a reference copy!
    }
  }
  /**
   * Fill an object with a possibly partially defined other object.
   *
   * Only copies values for the properties already present in a.
   * That means an object is not created on a property if only the b object has it.
   *
   * @param a - The object that will have it's properties updated.
   * @param b - The object with property updates.
   * @param allowDeletion - if true, delete properties in a that are explicitly set to null in b
   */


  function fillIfDefined(a, b) {
    var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false; // NOTE: iteration of properties of a
    // NOTE: prototype properties iterated over as well

    for (var prop in a) {
      if (b[prop] !== undefined) {
        if (b[prop] === null || _typeof(b[prop]) !== "object") {
          // Note: typeof null === 'object'
          copyOrDelete(a, b, prop, allowDeletion);
        } else {
          var aProp = a[prop];
          var bProp = b[prop];

          if (isObject(aProp) && isObject(bProp)) {
            fillIfDefined(aProp, bProp, allowDeletion);
          }
        }
      }
    }
  }
  /**
   * Copy the values of all of the enumerable own properties from one or more source objects to a
   * target object. Returns the target object.
   *
   * @param target - The target object to copy to.
   * @param source - The source object from which to copy properties.
   *
   * @return The target object.
   */


  var extend = Object.assign;
  /**
   * Extend object a with selected properties of object b or a series of objects
   * Only properties with defined values are copied
   *
   * @param props - Properties to be copied to a.
   * @param a - The target.
   * @param others - The sources.
   *
   * @returns Argument a.
   */

  function selectiveExtend(props, a) {
    if (!Array.isArray(props)) {
      throw new Error("Array with property names expected as first argument");
    }

    for (var _len = arguments.length, others = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      others[_key - 2] = arguments[_key];
    }

    for (var _i = 0, _others = others; _i < _others.length; _i++) {
      var other = _others[_i];

      for (var p = 0; p < props.length; p++) {
        var prop = props[p];

        if (other && Object.prototype.hasOwnProperty.call(other, prop)) {
          a[prop] = other[prop];
        }
      }
    }

    return a;
  }
  /**
   * Extend object a with selected properties of object b.
   * Only properties with defined values are copied.
   *
   * **Note:** Previous version of this routine implied that multiple source objects
   *           could be used; however, the implementation was **wrong**.
   *           Since multiple (>1) sources weren't used anywhere in the `vis.js` code,
   *           this has been removed
   *
   * @param props - Names of first-level properties to copy over.
   * @param a - Target object.
   * @param b - Source object.
   * @param allowDeletion - If true, delete property in a if explicitly set to null in b.
   *
   * @returns Argument a.
   */


  function selectiveDeepExtend(props, a, b) {
    var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false; // TODO: add support for Arrays to deepExtend

    if (Array.isArray(b)) {
      throw new TypeError("Arrays are not supported by deepExtend");
    }

    for (var p = 0; p < props.length; p++) {
      var prop = props[p];

      if (Object.prototype.hasOwnProperty.call(b, prop)) {
        if (b[prop] && b[prop].constructor === Object) {
          if (a[prop] === undefined) {
            a[prop] = {};
          }

          if (a[prop].constructor === Object) {
            deepExtend(a[prop], b[prop], false, allowDeletion);
          } else {
            copyOrDelete(a, b, prop, allowDeletion);
          }
        } else if (Array.isArray(b[prop])) {
          throw new TypeError("Arrays are not supported by deepExtend");
        } else {
          copyOrDelete(a, b, prop, allowDeletion);
        }
      }
    }

    return a;
  }
  /**
   * Extend object `a` with properties of object `b`, ignoring properties which are explicitly
   * specified to be excluded.
   *
   * The properties of `b` are considered for copying.
   * Properties which are themselves objects are are also extended.
   * Only properties with defined values are copied
   *
   * @param propsToExclude - Names of properties which should *not* be copied.
   * @param a - Object to extend.
   * @param b - Object to take properties from for extension.
   * @param allowDeletion - If true, delete properties in a that are explicitly set to null in b.
   *
   * @returns Argument a.
   */


  function selectiveNotDeepExtend(propsToExclude, a, b) {
    var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false; // TODO: add support for Arrays to deepExtend
    // NOTE: array properties have an else-below; apparently, there is a problem here.

    if (Array.isArray(b)) {
      throw new TypeError("Arrays are not supported by deepExtend");
    }

    for (var prop in b) {
      if (!Object.prototype.hasOwnProperty.call(b, prop)) {
        continue;
      } // Handle local properties only


      if (propsToExclude.indexOf(prop) !== -1) {
        continue;
      } // In exclusion list, skip


      if (b[prop] && b[prop].constructor === Object) {
        if (a[prop] === undefined) {
          a[prop] = {};
        }

        if (a[prop].constructor === Object) {
          deepExtend(a[prop], b[prop]); // NOTE: allowDeletion not propagated!
        } else {
          copyOrDelete(a, b, prop, allowDeletion);
        }
      } else if (Array.isArray(b[prop])) {
        a[prop] = [];

        for (var i = 0; i < b[prop].length; i++) {
          a[prop].push(b[prop][i]);
        }
      } else {
        copyOrDelete(a, b, prop, allowDeletion);
      }
    }

    return a;
  }
  /**
   * Deep extend an object a with the properties of object b
   *
   * @param a - Target object.
   * @param b - Source object.
   * @param protoExtend - If true, the prototype values will also be extended
   * (ie. the options objects that inherit from others will also get the inherited options).
   * @param allowDeletion - If true, the values of fields that are null will be deleted.
   *
   * @returns Argument a.
   */


  function deepExtend(a, b) {
    var protoExtend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    for (var prop in b) {
      if (Object.prototype.hasOwnProperty.call(b, prop) || protoExtend === true) {
        if (_typeof(b[prop]) === "object" && b[prop] !== null && Object.getPrototypeOf(b[prop]) === Object.prototype) {
          if (a[prop] === undefined) {
            a[prop] = deepExtend({}, b[prop], protoExtend); // NOTE: allowDeletion not propagated!
          } else if (_typeof(a[prop]) === "object" && a[prop] !== null && Object.getPrototypeOf(a[prop]) === Object.prototype) {
            deepExtend(a[prop], b[prop], protoExtend); // NOTE: allowDeletion not propagated!
          } else {
            copyOrDelete(a, b, prop, allowDeletion);
          }
        } else if (Array.isArray(b[prop])) {
          a[prop] = b[prop].slice();
        } else {
          copyOrDelete(a, b, prop, allowDeletion);
        }
      }
    }

    return a;
  }
  /**
   * Test whether all elements in two arrays are equal.
   *
   * @param a - First array.
   * @param b - Second array.
   *
   * @returns True if both arrays have the same length and same elements (1 = '1').
   */


  function equalArray(a, b) {
    if (a.length !== b.length) {
      return false;
    }

    for (var i = 0, len = a.length; i < len; i++) {
      if (a[i] != b[i]) {
        return false;
      }
    }

    return true;
  }
  /**
   * Convert an object into another type
   *
   * @param object - Value of unknown type.
   * @param type - Name of the desired type.
   *
   * @returns Object in the desired type.
   * @throws Error
   */


  function convert(object, type) {
    var match;

    if (object === undefined) {
      return undefined;
    }

    if (object === null) {
      return null;
    }

    if (!type) {
      return object;
    }

    if (!(typeof type === "string") && !(type instanceof String)) {
      throw new Error("Type must be a string");
    } //noinspection FallthroughInSwitchStatementJS


    switch (type) {
      case "boolean":
      case "Boolean":
        return Boolean(object);

      case "number":
      case "Number":
        if (isString(object) && !isNaN(Date.parse(object))) {
          return moment(object).valueOf();
        } else {
          // @TODO: I don't think that Number and String constructors are a good idea.
          // This could also fail if the object doesn't have valueOf method or if it's redefined.
          // For example: Object.create(null) or { valueOf: 7 }.
          return Number(object.valueOf());
        }

      case "string":
      case "String":
        return String(object);

      case "Date":
        if (isNumber(object)) {
          return new Date(object);
        }

        if (object instanceof Date) {
          return new Date(object.valueOf());
        } else if (isMoment(object)) {
          return new Date(object.valueOf());
        }

        if (isString(object)) {
          match = ASPDateRegex.exec(object);

          if (match) {
            // object is an ASP date
            return new Date(Number(match[1])); // parse number
          } else {
            return moment(new Date(object)).toDate(); // parse string
          }
        } else {
          throw new Error("Cannot convert object of type " + getType(object) + " to type Date");
        }

      case "Moment":
        if (isNumber(object)) {
          return moment(object);
        }

        if (object instanceof Date) {
          return moment(object.valueOf());
        } else if (isMoment(object)) {
          return moment(object);
        }

        if (isString(object)) {
          match = ASPDateRegex.exec(object);

          if (match) {
            // object is an ASP date
            return moment(Number(match[1])); // parse number
          } else {
            return moment(object); // parse string
          }
        } else {
          throw new Error("Cannot convert object of type " + getType(object) + " to type Date");
        }

      case "ISODate":
        if (isNumber(object)) {
          return new Date(object);
        } else if (object instanceof Date) {
          return object.toISOString();
        } else if (isMoment(object)) {
          return object.toDate().toISOString();
        } else if (isString(object)) {
          match = ASPDateRegex.exec(object);

          if (match) {
            // object is an ASP date
            return new Date(Number(match[1])).toISOString(); // parse number
          } else {
            return moment(object).format(); // ISO 8601
          }
        } else {
          throw new Error("Cannot convert object of type " + getType(object) + " to type ISODate");
        }

      case "ASPDate":
        if (isNumber(object)) {
          return "/Date(" + object + ")/";
        } else if (object instanceof Date || isMoment(object)) {
          return "/Date(" + object.valueOf() + ")/";
        } else if (isString(object)) {
          match = ASPDateRegex.exec(object);

          var _value;

          if (match) {
            // object is an ASP date
            _value = new Date(Number(match[1])).valueOf(); // parse number
          } else {
            _value = new Date(object).valueOf(); // parse string
          }

          return "/Date(" + _value + ")/";
        } else {
          throw new Error("Cannot convert object of type " + getType(object) + " to type ASPDate");
        }

      default:
        var never = type;
        throw new Error("Unknown type ".concat(never));
    }
  }
  /**
   * Get the type of an object, for example exports.getType([]) returns 'Array'
   *
   * @param object - Input value of unknown type.
   *
   * @returns Detected type.
   */


  function getType(object) {
    var type = _typeof(object);

    if (type === "object") {
      if (object === null) {
        return "null";
      }

      if (object instanceof Boolean) {
        return "Boolean";
      }

      if (object instanceof Number) {
        return "Number";
      }

      if (object instanceof String) {
        return "String";
      }

      if (Array.isArray(object)) {
        return "Array";
      }

      if (object instanceof Date) {
        return "Date";
      }

      return "Object";
    }

    if (type === "number") {
      return "Number";
    }

    if (type === "boolean") {
      return "Boolean";
    }

    if (type === "string") {
      return "String";
    }

    if (type === undefined) {
      return "undefined";
    }

    return type;
  }
  /**
   * Used to extend an array and copy it. This is used to propagate paths recursively.
   *
   * @param arr - First part.
   * @param newValue - The value to be aadded into the array.
   *
   * @returns A new array with all items from arr and newValue (which is last).
   */


  function copyAndExtendArray(arr, newValue) {
    return [].concat(_toConsumableArray(arr), [newValue]);
  }
  /**
   * Used to extend an array and copy it. This is used to propagate paths recursively.
   *
   * @param arr - The array to be copied.
   *
   * @returns Shallow copy of arr.
   */


  function copyArray(arr) {
    return arr.slice();
  }
  /**
   * Retrieve the absolute left value of a DOM element
   *
   * @param elem - A dom element, for example a div.
   *
   * @returns The absolute left position of this element in the browser page.
   */


  function getAbsoluteLeft(elem) {
    return elem.getBoundingClientRect().left;
  }
  /**
   * Retrieve the absolute right value of a DOM element
   *
   * @param elem - A dom element, for example a div.
   *
   * @returns The absolute right position of this element in the browser page.
   */


  function getAbsoluteRight(elem) {
    return elem.getBoundingClientRect().right;
  }
  /**
   * Retrieve the absolute top value of a DOM element
   *
   * @param elem - A dom element, for example a div.
   *
   * @returns The absolute top position of this element in the browser page.
   */


  function getAbsoluteTop(elem) {
    return elem.getBoundingClientRect().top;
  }
  /**
   * Add a className to the given elements style.
   *
   * @param elem - The element to which the classes will be added.
   * @param classNames - Space separated list of classes.
   */


  function addClassName(elem, classNames) {
    var classes = elem.className.split(" ");
    var newClasses = classNames.split(" ");
    classes = classes.concat(newClasses.filter(function (className) {
      return classes.indexOf(className) < 0;
    }));
    elem.className = classes.join(" ");
  }
  /**
   * Remove a className from the given elements style.
   *
   * @param elem - The element from which the classes will be removed.
   * @param classNames - Space separated list of classes.
   */


  function removeClassName(elem, classNames) {
    var classes = elem.className.split(" ");
    var oldClasses = classNames.split(" ");
    classes = classes.filter(function (className) {
      return oldClasses.indexOf(className) < 0;
    });
    elem.className = classes.join(" ");
  }
  /**
   * For each method for both arrays and objects.
   * In case of an array, the built-in Array.forEach() is applied (**No, it's not!**).
   * In case of an Object, the method loops over all properties of the object.
   *
   * @param object - An Object or Array to be iterated over.
   * @param callback - Array.forEach-like callback.
   */


  function forEach(object, callback) {
    if (Array.isArray(object)) {
      // array
      var len = object.length;

      for (var i = 0; i < len; i++) {
        callback(object[i], i, object);
      }
    } else {
      // object
      for (var _key2 in object) {
        if (Object.prototype.hasOwnProperty.call(object, _key2)) {
          callback(object[_key2], _key2, object);
        }
      }
    }
  }
  /**
   * Convert an object into an array: all objects properties are put into the array. The resulting array is unordered.
   *
   * @param o - Object that contains the properties and methods.
   *
   * @returns An array of unordered values.
   */


  var toArray = Object.values;
  /**
   * Update a property in an object
   *
   * @param object - The object whose property will be updated.
   * @param key - Name of the property to be updated.
   * @param value - The new value to be assigned.
   *
   * @returns Whether the value was updated (true) or already strictly the same in the original object (false).
   */

  function updateProperty(object, key, value) {
    if (object[key] !== value) {
      object[key] = value;
      return true;
    } else {
      return false;
    }
  }
  /**
   * Throttle the given function to be only executed once per animation frame.
   *
   * @param fn - The original function.
   *
   * @returns The throttled function.
   */


  function throttle(fn) {
    var scheduled = false;
    return function () {
      if (!scheduled) {
        scheduled = true;
        requestAnimationFrame(function () {
          scheduled = false;
          fn();
        });
      }
    };
  }
  /**
   * Add and event listener. Works for all browsers.
   *
   * @param element - The element to bind the event listener to.
   * @param action - Same as Element.addEventListener(action, â, â).
   * @param listener - Same as Element.addEventListener(â, listener, â).
   * @param useCapture - Same as Element.addEventListener(â, â, useCapture).
   */


  function addEventListener(element, action, listener, useCapture) {
    if (element.addEventListener) {
      if (useCapture === undefined) {
        useCapture = false;
      }

      if (action === "mousewheel" && navigator.userAgent.indexOf("Firefox") >= 0) {
        action = "DOMMouseScroll"; // For Firefox
      }

      element.addEventListener(action, listener, useCapture);
    } else {
      // @TODO: IE types? Does anyone care?
      element.attachEvent("on" + action, listener); // IE browsers
    }
  }
  /**
   * Remove an event listener from an element
   *
   * @param element - The element to bind the event listener to.
   * @param action - Same as Element.removeEventListener(action, â, â).
   * @param listener - Same as Element.removeEventListener(â, listener, â).
   * @param useCapture - Same as Element.removeEventListener(â, â, useCapture).
   */


  function removeEventListener(element, action, listener, useCapture) {
    if (element.removeEventListener) {
      // non-IE browsers
      if (useCapture === undefined) {
        useCapture = false;
      }

      if (action === "mousewheel" && navigator.userAgent.indexOf("Firefox") >= 0) {
        action = "DOMMouseScroll"; // For Firefox
      }

      element.removeEventListener(action, listener, useCapture);
    } else {
      // @TODO: IE types? Does anyone care?
      element.detachEvent("on" + action, listener); // IE browsers
    }
  }
  /**
   * Cancels the event's default action if it is cancelable, without stopping further propagation of the event.
   *
   * @param event - The event whose default action should be prevented.
   */


  function preventDefault(event) {
    if (!event) {
      event = window.event;
    }

    if (!event) ;else if (event.preventDefault) {
      event.preventDefault(); // non-IE browsers
    } else {
      // @TODO: IE types? Does anyone care?
      event.returnValue = false; // IE browsers
    }
  }
  /**
   * Get HTML element which is the target of the event.
   *
   * @param event - The event.
   *
   * @returns The element or null if not obtainable.
   */


  function getTarget() {
    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event; // code from http://www.quirksmode.org/js/events_properties.html
    // @TODO: EventTarget can be almost anything, is it okay to return only Elements?

    var target = null;
    if (!event) ;else if (event.target) {
      target = event.target;
    } else if (event.srcElement) {
      target = event.srcElement;
    }

    if (!(target instanceof Element)) {
      return null;
    }

    if (target.nodeType != null && target.nodeType == 3) {
      // defeat Safari bug
      target = target.parentNode;

      if (!(target instanceof Element)) {
        return null;
      }
    }

    return target;
  }
  /**
   * Check if given element contains given parent somewhere in the DOM tree
   *
   * @param element - The element to be tested.
   * @param parent - The ancestor (not necessarily parent) of the element.
   *
   * @returns True if parent is an ancestor of the element, false otherwise.
   */


  function hasParent(element, parent) {
    var elem = element;

    while (elem) {
      if (elem === parent) {
        return true;
      } else if (elem.parentNode) {
        elem = elem.parentNode;
      } else {
        return false;
      }
    }

    return false;
  }

  var option = {
    /**
     * Convert a value into a boolean.
     *
     * @param value - Value to be converted intoboolean, a function will be executed as (() => unknown).
     * @param defaultValue - If the value or the return value of the function == null then this will be returned.
     *
     * @returns Corresponding boolean value, if none then the default value, if none then null.
     */
    asBoolean: function asBoolean(value, defaultValue) {
      if (typeof value == "function") {
        value = value();
      }

      if (value != null) {
        return value != false;
      }

      return defaultValue || null;
    },

    /**
     * Convert a value into a number.
     *
     * @param value - Value to be converted intonumber, a function will be executed as (() => unknown).
     * @param defaultValue - If the value or the return value of the function == null then this will be returned.
     *
     * @returns Corresponding **boxed** number value, if none then the default value, if none then null.
     */
    asNumber: function asNumber(value, defaultValue) {
      if (typeof value == "function") {
        value = value();
      }

      if (value != null) {
        return Number(value) || defaultValue || null;
      }

      return defaultValue || null;
    },

    /**
     * Convert a value into a string.
     *
     * @param value - Value to be converted intostring, a function will be executed as (() => unknown).
     * @param defaultValue - If the value or the return value of the function == null then this will be returned.
     *
     * @returns Corresponding **boxed** string value, if none then the default value, if none then null.
     */
    asString: function asString(value, defaultValue) {
      if (typeof value == "function") {
        value = value();
      }

      if (value != null) {
        return String(value);
      }

      return defaultValue || null;
    },

    /**
     * Convert a value into a size.
     *
     * @param value - Value to be converted intosize, a function will be executed as (() => unknown).
     * @param defaultValue - If the value or the return value of the function == null then this will be returned.
     *
     * @returns Corresponding string value (number + 'px'), if none then the default value, if none then null.
     */
    asSize: function asSize(value, defaultValue) {
      if (typeof value == "function") {
        value = value();
      }

      if (isString(value)) {
        return value;
      } else if (isNumber(value)) {
        return value + "px";
      } else {
        return defaultValue || null;
      }
    },

    /**
     * Convert a value into a DOM Element.
     *
     * @param value - Value to be converted into DOM Element, a function will be executed as (() => unknown).
     * @param defaultValue - If the value or the return value of the function == null then this will be returned.
     *
     * @returns The DOM Element, if none then the default value, if none then null.
     */
    asElement: function asElement(value, defaultValue) {
      if (typeof value == "function") {
        value = value();
      }

      return value || defaultValue || null;
    }
  };
  /**
   * Convert hex color string into RGB color object.
   * http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
   *
   * @param hex - Hex color string (3 or 6 digits, with or without #).
   *
   * @returns RGB color object.
   */

  function hexToRGB(hex) {
    var result;

    switch (hex.length) {
      case 3:
      case 4:
        result = shortHexRE.exec(hex);
        return result ? {
          r: parseInt(result[1] + result[1], 16),
          g: parseInt(result[2] + result[2], 16),
          b: parseInt(result[3] + result[3], 16)
        } : null;

      case 6:
      case 7:
        result = fullHexRE.exec(hex);
        return result ? {
          r: parseInt(result[1], 16),
          g: parseInt(result[2], 16),
          b: parseInt(result[3], 16)
        } : null;

      default:
        return null;
    }
  }
  /**
   * This function takes string color in hex or RGB format and adds the opacity, RGBA is passed through unchanged.
   *
   * @param color - The color string (hex, RGB, RGBA).
   * @param opacity - The new opacity.
   *
   * @returns RGBA string, for example 'rgba(255, 0, 127, 0.3)'.
   */


  function overrideOpacity(color, opacity) {
    if (color.indexOf("rgba") !== -1) {
      return color;
    } else if (color.indexOf("rgb") !== -1) {
      var rgb = color.substr(color.indexOf("(") + 1).replace(")", "").split(",");
      return "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + "," + opacity + ")";
    } else {
      var _rgb = hexToRGB(color);

      if (_rgb == null) {
        return color;
      } else {
        return "rgba(" + _rgb.r + "," + _rgb.g + "," + _rgb.b + "," + opacity + ")";
      }
    }
  }
  /**
   * Convert RGB <0, 255> into hex color string.
   *
   * @param red - Red channel.
   * @param green - Green channel.
   * @param blue - Blue channel.
   *
   * @returns Hex color string (for example: '#0acdc0').
   */


  function RGBToHex(red, green, blue) {
    return "#" + ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1);
  }
  /**
   * Parse a color property into an object with border, background, and highlight colors
   *
   * @param inputColor - Shorthand color string or input color object.
   * @param defaultColor - Full color object to fill in missing values in inputColor.
   *
   * @returns Color object.
   */


  function parseColor(inputColor, defaultColor) {
    if (isString(inputColor)) {
      var colorStr = inputColor;

      if (isValidRGB(colorStr)) {
        var rgb = colorStr.substr(4).substr(0, colorStr.length - 5).split(",").map(function (value) {
          return parseInt(value);
        });
        colorStr = RGBToHex(rgb[0], rgb[1], rgb[2]);
      }

      if (isValidHex(colorStr) === true) {
        var hsv = hexToHSV(colorStr);
        var lighterColorHSV = {
          h: hsv.h,
          s: hsv.s * 0.8,
          v: Math.min(1, hsv.v * 1.02)
        };
        var darkerColorHSV = {
          h: hsv.h,
          s: Math.min(1, hsv.s * 1.25),
          v: hsv.v * 0.8
        };
        var darkerColorHex = HSVToHex(darkerColorHSV.h, darkerColorHSV.s, darkerColorHSV.v);
        var lighterColorHex = HSVToHex(lighterColorHSV.h, lighterColorHSV.s, lighterColorHSV.v);
        return {
          background: colorStr,
          border: darkerColorHex,
          highlight: {
            background: lighterColorHex,
            border: darkerColorHex
          },
          hover: {
            background: lighterColorHex,
            border: darkerColorHex
          }
        };
      } else {
        return {
          background: colorStr,
          border: colorStr,
          highlight: {
            background: colorStr,
            border: colorStr
          },
          hover: {
            background: colorStr,
            border: colorStr
          }
        };
      }
    } else {
      if (defaultColor) {
        var color = {
          background: inputColor.background || defaultColor.background,
          border: inputColor.border || defaultColor.border,
          highlight: isString(inputColor.highlight) ? {
            border: inputColor.highlight,
            background: inputColor.highlight
          } : {
            background: inputColor.highlight && inputColor.highlight.background || defaultColor.highlight.background,
            border: inputColor.highlight && inputColor.highlight.border || defaultColor.highlight.border
          },
          hover: isString(inputColor.hover) ? {
            border: inputColor.hover,
            background: inputColor.hover
          } : {
            border: inputColor.hover && inputColor.hover.border || defaultColor.hover.border,
            background: inputColor.hover && inputColor.hover.background || defaultColor.hover.background
          }
        };
        return color;
      } else {
        var _color = {
          background: inputColor.background || undefined,
          border: inputColor.border || undefined,
          highlight: isString(inputColor.highlight) ? {
            border: inputColor.highlight,
            background: inputColor.highlight
          } : {
            background: inputColor.highlight && inputColor.highlight.background || undefined,
            border: inputColor.highlight && inputColor.highlight.border || undefined
          },
          hover: isString(inputColor.hover) ? {
            border: inputColor.hover,
            background: inputColor.hover
          } : {
            border: inputColor.hover && inputColor.hover.border || undefined,
            background: inputColor.hover && inputColor.hover.background || undefined
          }
        };
        return _color;
      }
    }
  }
  /**
   * Convert RGB <0, 255> into HSV object.
   * http://www.javascripter.net/faq/rgb2hsv.htm
   *
   * @param red - Red channel.
   * @param green - Green channel.
   * @param blue - Blue channel.
   *
   * @returns HSV color object.
   */


  function RGBToHSV(red, green, blue) {
    red = red / 255;
    green = green / 255;
    blue = blue / 255;
    var minRGB = Math.min(red, Math.min(green, blue));
    var maxRGB = Math.max(red, Math.max(green, blue)); // Black-gray-white

    if (minRGB === maxRGB) {
      return {
        h: 0,
        s: 0,
        v: minRGB
      };
    } // Colors other than black-gray-white:


    var d = red === minRGB ? green - blue : blue === minRGB ? red - green : blue - red;
    var h = red === minRGB ? 3 : blue === minRGB ? 1 : 5;
    var hue = 60 * (h - d / (maxRGB - minRGB)) / 360;
    var saturation = (maxRGB - minRGB) / maxRGB;
    var value = maxRGB;
    return {
      h: hue,
      s: saturation,
      v: value
    };
  }

  var cssUtil = {
    // split a string with css styles into an object with key/values
    split: function split(cssText) {
      var styles = {};
      cssText.split(";").forEach(function (style) {
        if (style.trim() != "") {
          var parts = style.split(":");

          var _key3 = parts[0].trim();

          var _value2 = parts[1].trim();

          styles[_key3] = _value2;
        }
      });
      return styles;
    },
    // build a css text string from an object with key/values
    join: function join(styles) {
      return Object.keys(styles).map(function (key) {
        return key + ": " + styles[key];
      }).join("; ");
    }
  };
  /**
   * Append a string with css styles to an element
   *
   * @param element - The element that will receive new styles.
   * @param cssText - The styles to be appended.
   */

  function addCssText(element, cssText) {
    var currentStyles = cssUtil.split(element.style.cssText);
    var newStyles = cssUtil.split(cssText);

    var styles = _objectSpread2({}, currentStyles, {}, newStyles);

    element.style.cssText = cssUtil.join(styles);
  }
  /**
   * Remove a string with css styles from an element
   *
   * @param element - The element from which styles should be removed.
   * @param cssText - The styles to be removed.
   */


  function removeCssText(element, cssText) {
    var styles = cssUtil.split(element.style.cssText);
    var removeStyles = cssUtil.split(cssText);

    for (var _key4 in removeStyles) {
      if (Object.prototype.hasOwnProperty.call(removeStyles, _key4)) {
        delete styles[_key4];
      }
    }

    element.style.cssText = cssUtil.join(styles);
  }
  /**
   * Convert HSV <0, 1> into RGB color object.
   * https://gist.github.com/mjijackson/5311256
   *
   * @param h - Hue
   * @param s - Saturation
   * @param v - Value
   *
   * @returns RGB color object.
   */


  function HSVToRGB(h, s, v) {
    var r;
    var g;
    var b;
    var i = Math.floor(h * 6);
    var f = h * 6 - i;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t = v * (1 - (1 - f) * s);

    switch (i % 6) {
      case 0:
        r = v, g = t, b = p;
        break;

      case 1:
        r = q, g = v, b = p;
        break;

      case 2:
        r = p, g = v, b = t;
        break;

      case 3:
        r = p, g = q, b = v;
        break;

      case 4:
        r = t, g = p, b = v;
        break;

      case 5:
        r = v, g = p, b = q;
        break;
    }

    return {
      r: Math.floor(r * 255),
      g: Math.floor(g * 255),
      b: Math.floor(b * 255)
    };
  }
  /**
   * Convert HSV <0, 1> into hex color string.
   *
   * @param h - Hue
   * @param s - Saturation
   * @param v - Value
   *
   * @returns Hex color string.
   */


  function HSVToHex(h, s, v) {
    var rgb = HSVToRGB(h, s, v);
    return RGBToHex(rgb.r, rgb.g, rgb.b);
  }
  /**
   * Convert hex color string into HSV <0, 1>.
   *
   * @param hex - Hex color string.
   *
   * @returns HSV color object.
   */


  function hexToHSV(hex) {
    var rgb = hexToRGB(hex);

    if (!rgb) {
      throw new TypeError("'".concat(hex, "' is not a valid color."));
    }

    return RGBToHSV(rgb.r, rgb.g, rgb.b);
  }
  /**
   * Validate hex color string.
   *
   * @param hex - Unknown string that may contain a color.
   *
   * @returns True if the string is valid, false otherwise.
   */


  function isValidHex(hex) {
    var isOk = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
    return isOk;
  }
  /**
   * Validate RGB color string.
   *
   * @param rgb - Unknown string that may contain a color.
   *
   * @returns True if the string is valid, false otherwise.
   */


  function isValidRGB(rgb) {
    return rgbRE.test(rgb);
  }
  /**
   * Validate RGBA color string.
   *
   * @param rgba - Unknown string that may contain a color.
   *
   * @returns True if the string is valid, false otherwise.
   */


  function isValidRGBA(rgba) {
    return rgbaRE.test(rgba);
  }
  /**
   * This recursively redirects the prototype of JSON objects to the referenceObject.
   * This is used for default options.
   *
   * @param fields - Names of properties to be bridged.
   * @param referenceObject - The original object.
   *
   * @returns A new object inheriting from the referenceObject.
   */


  function selectiveBridgeObject(fields, referenceObject) {
    if (referenceObject !== null && _typeof(referenceObject) === "object") {
      // !!! typeof null === 'object'
      var objectTo = Object.create(referenceObject);

      for (var i = 0; i < fields.length; i++) {
        if (Object.prototype.hasOwnProperty.call(referenceObject, fields[i])) {
          if (_typeof(referenceObject[fields[i]]) == "object") {
            objectTo[fields[i]] = bridgeObject(referenceObject[fields[i]]);
          }
        }
      }

      return objectTo;
    } else {
      return null;
    }
  }
  /**
   * This recursively redirects the prototype of JSON objects to the referenceObject.
   * This is used for default options.
   *
   * @param referenceObject - The original object.
   *
   * @returns The Element if the referenceObject is an Element, or a new object inheriting from the referenceObject.
   */


  function bridgeObject(referenceObject) {
    if (referenceObject === null || _typeof(referenceObject) !== "object") {
      return null;
    }

    if (referenceObject instanceof Element) {
      // Avoid bridging DOM objects
      return referenceObject;
    }

    var objectTo = Object.create(referenceObject);

    for (var i in referenceObject) {
      if (Object.prototype.hasOwnProperty.call(referenceObject, i)) {
        if (_typeof(referenceObject[i]) == "object") {
          objectTo[i] = bridgeObject(referenceObject[i]);
        }
      }
    }

    return objectTo;
  }
  /**
   * This method provides a stable sort implementation, very fast for presorted data.
   *
   * @param a - The array to be sorted (in-place).
   * @param compare - An order comparator.
   *
   * @returns The argument a.
   */


  function insertSort(a, compare) {
    for (var i = 0; i < a.length; i++) {
      var k = a[i];
      var j = void 0;

      for (j = i; j > 0 && compare(k, a[j - 1]) < 0; j--) {
        a[j] = a[j - 1];
      }

      a[j] = k;
    }

    return a;
  }
  /**
   * This is used to set the options of subobjects in the options object.
   *
   * A requirement of these subobjects is that they have an 'enabled' element
   * which is optional for the user but mandatory for the program.
   *
   * The added value here of the merge is that option 'enabled' is set as required.
   *
   * @param mergeTarget - Either this.options or the options used for the groups.
   * @param options - Options.
   * @param option - Option key in the options argument.
   * @param globalOptions - Global options, passed in to determine value of option 'enabled'.
   */


  function mergeOptions(mergeTarget, options, option) {
    var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {}; // Local helpers

    var isPresent = function isPresent(obj) {
      return obj !== null && obj !== undefined;
    };

    var isObject = function isObject(obj) {
      return obj !== null && _typeof(obj) === "object";
    }; // https://stackoverflow.com/a/34491287/1223531


    var isEmpty = function isEmpty(obj) {
      for (var x in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, x)) {
          return false;
        }
      }

      return true;
    }; // Guards


    if (!isObject(mergeTarget)) {
      throw new Error("Parameter mergeTarget must be an object");
    }

    if (!isObject(options)) {
      throw new Error("Parameter options must be an object");
    }

    if (!isPresent(option)) {
      throw new Error("Parameter option must have a value");
    }

    if (!isObject(globalOptions)) {
      throw new Error("Parameter globalOptions must be an object");
    } //
    // Actual merge routine, separated from main logic
    // Only a single level of options is merged. Deeper levels are ref'd. This may actually be an issue.
    //


    var doMerge = function doMerge(target, options, option) {
      if (!isObject(target[option])) {
        target[option] = {};
      }

      var src = options[option];
      var dst = target[option];

      for (var prop in src) {
        if (Object.prototype.hasOwnProperty.call(src, prop)) {
          dst[prop] = src[prop];
        }
      }
    }; // Local initialization


    var srcOption = options[option];
    var globalPassed = isObject(globalOptions) && !isEmpty(globalOptions);
    var globalOption = globalPassed ? globalOptions[option] : undefined;
    var globalEnabled = globalOption ? globalOption.enabled : undefined; /////////////////////////////////////////
    // Main routine
    /////////////////////////////////////////

    if (srcOption === undefined) {
      return; // Nothing to do
    }

    if (typeof srcOption === "boolean") {
      if (!isObject(mergeTarget[option])) {
        mergeTarget[option] = {};
      }

      mergeTarget[option].enabled = srcOption;
      return;
    }

    if (srcOption === null && !isObject(mergeTarget[option])) {
      // If possible, explicit copy from globals
      if (isPresent(globalOption)) {
        mergeTarget[option] = Object.create(globalOption);
      } else {
        return; // Nothing to do
      }
    }

    if (!isObject(srcOption)) {
      return;
    } //
    // Ensure that 'enabled' is properly set. It is required internally
    // Note that the value from options will always overwrite the existing value
    //


    var enabled = true; // default value

    if (srcOption.enabled !== undefined) {
      enabled = srcOption.enabled;
    } else {
      // Take from globals, if present
      if (globalEnabled !== undefined) {
        enabled = globalOption.enabled;
      }
    }

    doMerge(mergeTarget, options, option);
    mergeTarget[option].enabled = enabled;
  }
  /**
   * This function does a binary search for a visible item in a sorted list. If we find a visible item, the code that uses
   * this function will then iterate in both directions over this sorted list to find all visible items.
   *
   * @param orderedItems - Items ordered by start
   * @param comparator - -1 is lower, 0 is equal, 1 is higher
   * @param field - Property name on an item (i.e. item[field]).
   * @param field2 - Second property name on an item (i.e. item[field][field2]).
   *
   * @returns Index of the found item or -1 if nothing was found.
   */


  function binarySearchCustom(orderedItems, comparator, field, field2) {
    var maxIterations = 10000;
    var iteration = 0;
    var low = 0;
    var high = orderedItems.length - 1;

    while (low <= high && iteration < maxIterations) {
      var middle = Math.floor((low + high) / 2);
      var item = orderedItems[middle];

      var _value3 = field2 === undefined ? item[field] : item[field][field2];

      var searchResult = comparator(_value3);

      if (searchResult == 0) {
        // jihaa, found a visible item!
        return middle;
      } else if (searchResult == -1) {
        // it is too small --> increase low
        low = middle + 1;
      } else {
        // it is too big --> decrease high
        high = middle - 1;
      }

      iteration++;
    }

    return -1;
  }
  /**
   * This function does a binary search for a specific value in a sorted array. If it does not exist but is in between of
   * two values, we return either the one before or the one after, depending on user input
   * If it is found, we return the index, else -1.
   *
   * @param orderedItems - Sorted array.
   * @param target - The searched value.
   * @param field - Name of the property in items to be searched.
   * @param sidePreference - If the target is between two values, should the index of the before or the after be returned?
   * @param comparator - An optional comparator, returning -1, 0, 1 for <, ===, >.
   *
   * @returns The index of found value or -1 if nothing was found.
   */


  function binarySearchValue(orderedItems, target, field, sidePreference, comparator) {
    var maxIterations = 10000;
    var iteration = 0;
    var low = 0;
    var high = orderedItems.length - 1;
    var prevValue;
    var value;
    var nextValue;
    var middle;
    comparator = comparator != undefined ? comparator : function (a, b) {
      return a == b ? 0 : a < b ? -1 : 1;
    };

    while (low <= high && iteration < maxIterations) {
      // get a new guess
      middle = Math.floor(0.5 * (high + low));
      prevValue = orderedItems[Math.max(0, middle - 1)][field];
      value = orderedItems[middle][field];
      nextValue = orderedItems[Math.min(orderedItems.length - 1, middle + 1)][field];

      if (comparator(value, target) == 0) {
        // we found the target
        return middle;
      } else if (comparator(prevValue, target) < 0 && comparator(value, target) > 0) {
        // target is in between of the previous and the current
        return sidePreference == "before" ? Math.max(0, middle - 1) : middle;
      } else if (comparator(value, target) < 0 && comparator(nextValue, target) > 0) {
        // target is in between of the current and the next
        return sidePreference == "before" ? middle : Math.min(orderedItems.length - 1, middle + 1);
      } else {
        // didnt find the target, we need to change our boundaries.
        if (comparator(value, target) < 0) {
          // it is too small --> increase low
          low = middle + 1;
        } else {
          // it is too big --> decrease high
          high = middle - 1;
        }
      }

      iteration++;
    } // didnt find anything. Return -1.


    return -1;
  }
  /*
   * Easing Functions.
   * Only considering the t value for the range [0, 1] => [0, 1].
   *
   * Inspiration: from http://gizma.com/easing/
   * https://gist.github.com/gre/1650294
   */


  var easingFunctions = {
    /**
     * no easing, no acceleration
     *
     * @param t - Time.
     *
     * @returns Value at time t.
     */
    linear: function linear(t) {
      return t;
    },

    /**
     * accelerating from zero velocity
     *
     * @param t - Time.
     *
     * @returns Value at time t.
     */
    easeInQuad: function easeInQuad(t) {
      return t * t;
    },

    /**
     * decelerating to zero velocity
     *
     * @param t - Time.
     *
     * @returns Value at time t.
     */
    easeOutQuad: function easeOutQuad(t) {
      return t * (2 - t);
    },

    /**
     * acceleration until halfway, then deceleration
     *
     * @param t - Time.
     *
     * @returns Value at time t.
     */
    easeInOutQuad: function easeInOutQuad(t) {
      return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    },

    /**
     * accelerating from zero velocity
     *
     * @param t - Time.
     *
     * @returns Value at time t.
     */
    easeInCubic: function easeInCubic(t) {
      return t * t * t;
    },

    /**
     * decelerating to zero velocity
     *
     * @param t - Time.
     *
     * @returns Value at time t.
     */
    easeOutCubic: function easeOutCubic(t) {
      return --t * t * t + 1;
    },

    /**
     * acceleration until halfway, then deceleration
     *
     * @param t - Time.
     *
     * @returns Value at time t.
     */
    easeInOutCubic: function easeInOutCubic(t) {
      return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    },

    /**
     * accelerating from zero velocity
     *
     * @param t - Time.
     *
     * @returns Value at time t.
     */
    easeInQuart: function easeInQuart(t) {
      return t * t * t * t;
    },

    /**
     * decelerating to zero velocity
     *
     * @param t - Time.
     *
     * @returns Value at time t.
     */
    easeOutQuart: function easeOutQuart(t) {
      return 1 - --t * t * t * t;
    },

    /**
     * acceleration until halfway, then deceleration
     *
     * @param t - Time.
     *
     * @returns Value at time t.
     */
    easeInOutQuart: function easeInOutQuart(t) {
      return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
    },

    /**
     * accelerating from zero velocity
     *
     * @param t - Time.
     *
     * @returns Value at time t.
     */
    easeInQuint: function easeInQuint(t) {
      return t * t * t * t * t;
    },

    /**
     * decelerating to zero velocity
     *
     * @param t - Time.
     *
     * @returns Value at time t.
     */
    easeOutQuint: function easeOutQuint(t) {
      return 1 + --t * t * t * t * t;
    },

    /**
     * acceleration until halfway, then deceleration
     *
     * @param t - Time.
     *
     * @returns Value at time t.
     */
    easeInOutQuint: function easeInOutQuint(t) {
      return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
    }
  };
  /**
   * Experimentaly compute the width of the scrollbar for this browser.
   *
   * @returns The width in pixels.
   */

  function getScrollBarWidth() {
    var inner = document.createElement("p");
    inner.style.width = "100%";
    inner.style.height = "200px";
    var outer = document.createElement("div");
    outer.style.position = "absolute";
    outer.style.top = "0px";
    outer.style.left = "0px";
    outer.style.visibility = "hidden";
    outer.style.width = "200px";
    outer.style.height = "150px";
    outer.style.overflow = "hidden";
    outer.appendChild(inner);
    document.body.appendChild(outer);
    var w1 = inner.offsetWidth;
    outer.style.overflow = "scroll";
    var w2 = inner.offsetWidth;

    if (w1 == w2) {
      w2 = outer.clientWidth;
    }

    document.body.removeChild(outer);
    return w1 - w2;
  } // @TODO: This doesn't work properly.
  // It works only for single property objects,
  // otherwise it combines all of the types in a union.
  // export function topMost<K1 extends string, V1> (
  //   pile: Record<K1, undefined | V1>[],
  //   accessors: K1 | [K1]
  // ): undefined | V1
  // export function topMost<K1 extends string, K2 extends string, V1, V2> (
  //   pile: Record<K1, undefined | V1 | Record<K2, undefined | V2>>[],
  //   accessors: [K1, K2]
  // ): undefined | V1 | V2
  // export function topMost<K1 extends string, K2 extends string, K3 extends string, V1, V2, V3> (
  //   pile: Record<K1, undefined | V1 | Record<K2, undefined | V2 | Record<K3, undefined | V3>>>[],
  //   accessors: [K1, K2, K3]
  // ): undefined | V1 | V2 | V3

  /**
   * Get the top most property value from a pile of objects.
   *
   * @param pile - Array of objects, no required format.
   * @param accessors - Array of property names (e.g. object['foo']['bar'] â ['foo', 'bar']).
   *
   * @returns Value of the property with given accessors path from the first pile item where it's not undefined.
   */


  function topMost(pile, accessors) {
    var candidate;

    if (!Array.isArray(accessors)) {
      accessors = [accessors];
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = pile[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var member = _step.value;

        if (member) {
          candidate = member[accessors[0]];

          for (var i = 1; i < accessors.length; i++) {
            if (candidate) {
              candidate = candidate[accessors[i]];
            }
          }

          if (typeof candidate !== "undefined") {
            break;
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return candidate;
  }

  var util =
  /*#__PURE__*/
  Object.freeze({
    isNumber: isNumber,
    recursiveDOMDelete: recursiveDOMDelete,
    isString: isString,
    isObject: isObject,
    isDate: isDate,
    isMoment: isMoment,
    fillIfDefined: fillIfDefined,
    extend: extend,
    selectiveExtend: selectiveExtend,
    selectiveDeepExtend: selectiveDeepExtend,
    selectiveNotDeepExtend: selectiveNotDeepExtend,
    deepExtend: deepExtend,
    equalArray: equalArray,
    convert: convert,
    getType: getType,
    copyAndExtendArray: copyAndExtendArray,
    copyArray: copyArray,
    getAbsoluteLeft: getAbsoluteLeft,
    getAbsoluteRight: getAbsoluteRight,
    getAbsoluteTop: getAbsoluteTop,
    addClassName: addClassName,
    removeClassName: removeClassName,
    forEach: forEach,
    toArray: toArray,
    updateProperty: updateProperty,
    throttle: throttle,
    addEventListener: addEventListener,
    removeEventListener: removeEventListener,
    preventDefault: preventDefault,
    getTarget: getTarget,
    hasParent: hasParent,
    option: option,
    hexToRGB: hexToRGB,
    overrideOpacity: overrideOpacity,
    RGBToHex: RGBToHex,
    parseColor: parseColor,
    RGBToHSV: RGBToHSV,
    addCssText: addCssText,
    removeCssText: removeCssText,
    HSVToRGB: HSVToRGB,
    HSVToHex: HSVToHex,
    hexToHSV: hexToHSV,
    isValidHex: isValidHex,
    isValidRGB: isValidRGB,
    isValidRGBA: isValidRGBA,
    selectiveBridgeObject: selectiveBridgeObject,
    bridgeObject: bridgeObject,
    insertSort: insertSort,
    mergeOptions: mergeOptions,
    binarySearchCustom: binarySearchCustom,
    binarySearchValue: binarySearchValue,
    easingFunctions: easingFunctions,
    getScrollBarWidth: getScrollBarWidth,
    topMost: topMost,
    randomUUID: uuid4
  }); // New API (tree shakeable).

  var util$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': util,
    HSVToHex: HSVToHex,
    HSVToRGB: HSVToRGB,
    RGBToHSV: RGBToHSV,
    RGBToHex: RGBToHex,
    addClassName: addClassName,
    addCssText: addCssText,
    addEventListener: addEventListener,
    binarySearchCustom: binarySearchCustom,
    binarySearchValue: binarySearchValue,
    bridgeObject: bridgeObject,
    convert: convert,
    copyAndExtendArray: copyAndExtendArray,
    copyArray: copyArray,
    deepExtend: deepExtend,
    easingFunctions: easingFunctions,
    equalArray: equalArray,
    extend: extend,
    fillIfDefined: fillIfDefined,
    forEach: forEach,
    getAbsoluteLeft: getAbsoluteLeft,
    getAbsoluteRight: getAbsoluteRight,
    getAbsoluteTop: getAbsoluteTop,
    getScrollBarWidth: getScrollBarWidth,
    getTarget: getTarget,
    getType: getType,
    hasParent: hasParent,
    hexToHSV: hexToHSV,
    hexToRGB: hexToRGB,
    insertSort: insertSort,
    isDate: isDate,
    isMoment: isMoment,
    isNumber: isNumber,
    isObject: isObject,
    isString: isString,
    isValidHex: isValidHex,
    isValidRGB: isValidRGB,
    isValidRGBA: isValidRGBA,
    mergeOptions: mergeOptions,
    option: option,
    overrideOpacity: overrideOpacity,
    parseColor: parseColor,
    preventDefault: preventDefault,
    randomUUID: uuid4,
    recursiveDOMDelete: recursiveDOMDelete,
    removeClassName: removeClassName,
    removeCssText: removeCssText,
    removeEventListener: removeEventListener,
    selectiveBridgeObject: selectiveBridgeObject,
    selectiveDeepExtend: selectiveDeepExtend,
    selectiveExtend: selectiveExtend,
    selectiveNotDeepExtend: selectiveNotDeepExtend,
    throttle: throttle,
    toArray: toArray,
    topMost: topMost,
    updateProperty: updateProperty
  });

  /** 
   * vis-data - data
   * http://visjs.org/
   * 
   * Manage unstructured data using DataSet. Add, update, and remove data, and listen for changes in the data.
   * 
   * @version 6.2.1
   * @date    2019-09-13T21:24:53Z
   * 
   * @copyright (c) 2011-2017 Almende B.V, http://almende.com
   * @copyright (c) 2018-2019 visjs contributors, https://github.com/visjs
   * 
   * @license 
   * vis.js is dual licensed under both
   * 
   *   1. The Apache 2.0 License
   *      http://www.apache.org/licenses/LICENSE-2.0
   * 
   *   and
   * 
   *   2. The MIT License
   *      http://opensource.org/licenses/MIT
   * 
   * vis.js may be distributed under either license.
   */
  function createCommonjsModule$1(fn, module) {
    return module = {
      exports: {}
    }, fn(module, module.exports), module.exports;
  }

  var runtime_1 = createCommonjsModule$1(function (module) {
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var runtime = function (exports) {
      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};

      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          prototype[method] = function (arg) {
            return this._invoke(method, arg);
          };
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;

          if (!(toStringTagSymbol in genFun)) {
            genFun[toStringTagSymbol] = "GeneratorFunction";
          }
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
              return Promise.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return Promise.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new Promise(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);

      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };

      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList) {
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      Gp[iteratorSymbol] = function () {
        return this;
      };

      Gp.toString = function () {
        return "[object Generator]";
      };

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function (skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function () {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function (exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function (type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function (record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function (finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function (tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function (iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports);

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  });
  var regenerator = runtime_1;

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var defineProperty$1 = _defineProperty$1;

  function _arrayWithoutHoles$1(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
  }

  var arrayWithoutHoles = _arrayWithoutHoles$1;

  function _iterableToArray$1(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  var iterableToArray = _iterableToArray$1;

  function _nonIterableSpread$1() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  var nonIterableSpread = _nonIterableSpread$1;

  function _toConsumableArray$1(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
  }

  var toConsumableArray = _toConsumableArray$1;

  var _typeof_1 = createCommonjsModule$1(function (module) {
    function _typeof2(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof2(obj) {
          return typeof obj;
        };
      } else {
        _typeof2 = function _typeof2(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof2(obj);
    }

    function _typeof(obj) {
      if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
        module.exports = _typeof = function _typeof(obj) {
          return _typeof2(obj);
        };
      } else {
        module.exports = _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
        };
      }

      return _typeof(obj);
    }

    module.exports = _typeof;
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var classCallCheck = _classCallCheck;

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var createClass = _createClass;

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  var assertThisInitialized = _assertThisInitialized;

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
      return call;
    }

    return assertThisInitialized(self);
  }

  var possibleConstructorReturn = _possibleConstructorReturn;
  var getPrototypeOf = createCommonjsModule$1(function (module) {
    function _getPrototypeOf(o) {
      module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    module.exports = _getPrototypeOf;
  });
  var setPrototypeOf$1 = createCommonjsModule$1(function (module) {
    function _setPrototypeOf(o, p) {
      module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    module.exports = _setPrototypeOf;
  });

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) setPrototypeOf$1(subClass, superClass);
  }

  var inherits = _inherits; // Maps for number <-> hex string conversion

  var byteToHex$2 = [];

  for (var i$2 = 0; i$2 < 256; i$2++) {
    byteToHex$2[i$2] = (i$2 + 0x100).toString(16).substr(1);
  }
  /**
   * Represent binary UUID into it's string representation.
   *
   * @param buf - Buffer containing UUID bytes.
   * @param offset - Offset from the start of the buffer where the UUID is saved (not needed if the buffer starts with the UUID).
   *
   * @returns String representation of the UUID.
   */


  function stringifyUUID$1(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex$2;
    return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
  }
  /**
   * Generate 16 random bytes to be used as a base for UUID.
   *
   * @ignore
   */


  var random$1 = function () {
    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {
      // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
      // Moderately fast, high quality
      var _rnds8 = new Uint8Array(16);

      return function whatwgRNG() {
        crypto.getRandomValues(_rnds8);
        return _rnds8;
      };
    } // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().
    // It's fast, but is of unspecified quality.


    var _rnds = new Array(16);

    return function () {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) {
          r = Math.random() * 0x100000000;
        }

        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return _rnds;
    }; //     uuid.js
    //
    //     Copyright (c) 2010-2012 Robert Kieffer
    //     MIT License - http://opensource.org/licenses/mit-license.php
    // Unique ID creation requires a high quality random # generator.  We feature
    // detect to determine the best RNG source, normalizing to a function that
    // returns 128-bits of randomness, since that's what's usually required
    // return require('./rng');
  }();

  var byteToHex$1$1 = [];

  for (var i$1$2 = 0; i$1$2 < 256; i$1$2++) {
    byteToHex$1$1[i$1$2] = (i$1$2 + 0x100).toString(16).substr(1);
  } // **`v1()` - Generate time-based UUID**
  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html
  // random #'s we need to init node and clockseq


  var seedBytes$1 = random$1(); // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)

  var defaultNodeId$1 = [seedBytes$1[0] | 0x01, seedBytes$1[1], seedBytes$1[2], seedBytes$1[3], seedBytes$1[4], seedBytes$1[5]]; // Per 4.2.2, randomize (14 bit) clockseq

  var defaultClockseq$1 = (seedBytes$1[6] << 8 | seedBytes$1[7]) & 0x3fff; // Previous uuid creation time

  /**
   * UUIDv4 options.
   */

  /**
   * Generate UUIDv4
   *
   * @param options - Options to be used instead of default generated values.
   * String 'binary' is a shorthand for uuid4({}, new Array(16)).
   * @param buf - If present the buffer will be filled with the generated UUID.
   * @param offset - Offset of the UUID from the start of the buffer.
   *
   * @returns UUIDv4
   */

  function uuid4$1() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var buf = arguments.length > 1 ? arguments[1] : undefined;
    var offset = arguments.length > 2 ? arguments[2] : undefined; // Deprecated - 'format' argument, as supported in v1.2

    var i = buf && offset || 0;

    if (typeof options === 'string') {
      buf = options === 'binary' ? new Array(16) : undefined;
      options = {};
    }

    var rnds = options.random || (options.rng || random$1)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

    if (buf) {
      for (var ii = 0; ii < 16; ii++) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || stringifyUUID$1(rnds);
  } // Rollup will complain about mixing default and named exports in UMD build,


  function _typeof$1(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof$1 = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof$1 = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof$1(obj);
  }

  var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire$1() {
    throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function createCommonjsModule$1$1(fn, module) {
    return module = {
      exports: {}
    }, fn(module, module.exports), module.exports;
  }

  var moment$1 = createCommonjsModule$1$1(function (module, exports) {
    (function (global, factory) {
      module.exports = factory();
    })(commonjsGlobal$1, function () {
      var hookCallback;

      function hooks() {
        return hookCallback.apply(null, arguments);
      } // This is done to register the method called with moment()
      // without creating circular dependencies.


      function setHookCallback(callback) {
        hookCallback = callback;
      }

      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
      }

      function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
      }

      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;

          for (k in obj) {
            if (obj.hasOwnProperty(k)) {
              return false;
            }
          }

          return true;
        }
      }

      function isUndefined(input) {
        return input === void 0;
      }

      function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
      }

      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
      }

      function map(arr, fn) {
        var res = [],
            i;

        for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i));
        }

        return res;
      }

      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }

      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }

        if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf;
        }

        return a;
      }

      function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
      }

      function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }

      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }

        return m._pf;
      }

      var some;

      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function (fun) {
          var t = Object(this);
          var len = t.length >>> 0;

          for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }

          return false;
        };
      }

      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m);
          var parsedParts = some.call(flags.parsedDateParts, function (i) {
            return i != null;
          });
          var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
          }

          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }

        return m._isValid;
      }

      function createInvalid(flags) {
        var m = createUTC(NaN);

        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }

        return m;
      } // Plugins that add properties should also add the key here (null value),
      // so we can properly clone ourselves.


      var momentProperties = hooks.momentProperties = [];

      function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
          to._isAMomentObject = from._isAMomentObject;
        }

        if (!isUndefined(from._i)) {
          to._i = from._i;
        }

        if (!isUndefined(from._f)) {
          to._f = from._f;
        }

        if (!isUndefined(from._l)) {
          to._l = from._l;
        }

        if (!isUndefined(from._strict)) {
          to._strict = from._strict;
        }

        if (!isUndefined(from._tzm)) {
          to._tzm = from._tzm;
        }

        if (!isUndefined(from._isUTC)) {
          to._isUTC = from._isUTC;
        }

        if (!isUndefined(from._offset)) {
          to._offset = from._offset;
        }

        if (!isUndefined(from._pf)) {
          to._pf = getParsingFlags(from);
        }

        if (!isUndefined(from._locale)) {
          to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
          for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from[prop];

            if (!isUndefined(val)) {
              to[prop] = val;
            }
          }
        }

        return to;
      }

      var updateInProgress = false; // Moment prototype object

      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);

        if (!this.isValid()) {
          this._d = new Date(NaN);
        } // Prevent infinite loop in case updateOffset creates new moment
        // objects.


        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }

      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }

      function absFloor(number) {
        if (number < 0) {
          // -0 -> 0
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }

      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }

        return value;
      } // compare two arrays, return the number of differences


      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;

        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }

        return diffs + lengthDiff;
      }

      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
          console.warn('Deprecation warning: ' + msg);
        }
      }

      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }

          if (firstTime) {
            var args = [];
            var arg;

            for (var i = 0; i < arguments.length; i++) {
              arg = '';

              if (typeof arguments[i] === 'object') {
                arg += '\n[' + i + '] ';

                for (var key in arguments[0]) {
                  arg += key + ': ' + arguments[0][key] + ', ';
                }

                arg = arg.slice(0, -2); // Remove trailing comma and space
              } else {
                arg = arguments[i];
              }

              args.push(arg);
            }

            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
            firstTime = false;
          }

          return fn.apply(this, arguments);
        }, fn);
      }

      var deprecations = {};

      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }

        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }

      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;

      function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
      }

      function set(config) {
        var prop, i;

        for (i in config) {
          prop = config[i];

          if (isFunction(prop)) {
            this[i] = prop;
          } else {
            this['_' + i] = prop;
          }
        }

        this._config = config; // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.

        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
      }

      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;

        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }

        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
          }
        }

        return res;
      }

      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }

      var keys;

      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function (obj) {
          var i,
              res = [];

          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }

          return res;
        };
      }

      var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
      };

      function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
      }

      var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
      };

      function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
          return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
          return val.slice(1);
        });
        return this._longDateFormat[key];
      }

      var defaultInvalidDate = 'Invalid date';

      function invalidDate() {
        return this._invalidDate;
      }

      var defaultOrdinal = '%d';
      var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

      function ordinal(number) {
        return this._ordinal.replace('%d', number);
      }

      var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
      };

      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }

      function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
      }

      var aliases = {};

      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
      }

      function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
      }

      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);

            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }

        return normalizedInput;
      }

      var priorities = {};

      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }

      function getPrioritizedUnits(unitsObj) {
        var units = [];

        for (var u in unitsObj) {
          units.push({
            unit: u,
            priority: priorities[u]
          });
        }

        units.sort(function (a, b) {
          return a.priority - b.priority;
        });
        return units;
      }

      function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }

      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
      var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
      var formatFunctions = {};
      var formatTokenFunctions = {}; // token:    'M'
      // padded:   ['MM', 2]
      // ordinal:  'Mo'
      // callback: function () { this.month() + 1 }

      function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;

        if (typeof callback === 'string') {
          func = function () {
            return this[callback]();
          };
        }

        if (token) {
          formatTokenFunctions[token] = func;
        }

        if (padded) {
          formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }

        if (ordinal) {
          formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
          };
        }
      }

      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '');
        }

        return input.replace(/\\/g, '');
      }

      function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }

        return function (mom) {
          var output = '',
              i;

          for (i = 0; i < length; i++) {
            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
          }

          return output;
        };
      } // format date using native date object


      function formatMoment(m, format) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
      }

      function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
          return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;

        while (i >= 0 && localFormattingTokens.test(format)) {
          format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }

        return format;
      }

      var match1 = /\d/; //       0 - 9

      var match2 = /\d\d/; //      00 - 99

      var match3 = /\d{3}/; //     000 - 999

      var match4 = /\d{4}/; //    0000 - 9999

      var match6 = /[+-]?\d{6}/; // -999999 - 999999

      var match1to2 = /\d\d?/; //       0 - 99

      var match3to4 = /\d\d\d\d?/; //     999 - 9999

      var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999

      var match1to3 = /\d{1,3}/; //       0 - 999

      var match1to4 = /\d{1,4}/; //       0 - 9999

      var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

      var matchUnsigned = /\d+/; //       0 - inf

      var matchSigned = /[+-]?\d+/; //    -inf - inf

      var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

      var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

      var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
      // any word (or two) characters or numbers including two/three word month in arabic.
      // includes scottish gaelic two word and hyphenated months

      var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
      var regexes = {};

      function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }

      function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
          return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
      } // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript


      function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
        }));
      }

      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      }

      var tokens = {};

      function addParseToken(token, callback) {
        var i,
            func = callback;

        if (typeof token === 'string') {
          token = [token];
        }

        if (isNumber(callback)) {
          func = function (input, array) {
            array[callback] = toInt(input);
          };
        }

        for (i = 0; i < token.length; i++) {
          tokens[token[i]] = func;
        }
      }

      function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
          config._w = config._w || {};
          callback(input, config._w, config, token);
        });
      }

      function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
          tokens[token](input, config._a, config, token);
        }
      }

      var YEAR = 0;
      var MONTH = 1;
      var DATE = 2;
      var HOUR = 3;
      var MINUTE = 4;
      var SECOND = 5;
      var MILLISECOND = 6;
      var WEEK = 7;
      var WEEKDAY = 8; // FORMATTING

      addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
      });
      addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
      });
      addFormatToken(0, ['YYYY', 4], 0, 'year');
      addFormatToken(0, ['YYYYY', 5], 0, 'year');
      addFormatToken(0, ['YYYYYY', 6, true], 0, 'year'); // ALIASES

      addUnitAlias('year', 'y'); // PRIORITIES

      addUnitPriority('year', 1); // PARSING

      addRegexToken('Y', matchSigned);
      addRegexToken('YY', match1to2, match2);
      addRegexToken('YYYY', match1to4, match4);
      addRegexToken('YYYYY', match1to6, match6);
      addRegexToken('YYYYYY', match1to6, match6);
      addParseToken(['YYYYY', 'YYYYYY'], YEAR);
      addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
      }); // HELPERS

      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }

      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      } // HOOKS


      hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
      }; // MOMENTS


      var getSetYear = makeGetSet('FullYear', true);

      function getIsLeapYear() {
        return isLeapYear(this.year());
      }

      function makeGetSet(unit, keepTime) {
        return function (value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }

      function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
      }

      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
          } else {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
          }
        }
      } // MOMENTS


      function stringGet(units) {
        units = normalizeUnits(units);

        if (isFunction(this[units])) {
          return this[units]();
        }

        return this;
      }

      function stringSet(units, value) {
        if (typeof units === 'object') {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units);

          for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);

          if (isFunction(this[units])) {
            return this[units](value);
          }
        }

        return this;
      }

      function mod(n, x) {
        return (n % x + x) % x;
      }

      var indexOf;

      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function (o) {
          // I know
          var i;

          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }

          return -1;
        };
      }

      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }

        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      } // FORMATTING


      addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
      });
      addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
      });
      addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
      }); // ALIASES

      addUnitAlias('month', 'M'); // PRIORITY

      addUnitPriority('month', 8); // PARSING

      addRegexToken('M', match1to2);
      addRegexToken('MM', match1to2, match2);
      addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
      });
      addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
      });
      addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict); // if we didn't find a month name, mark the date as invalid.


        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      }); // LOCALES

      var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
      var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');

      function localeMonths(m, format) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months['standalone'];
        }

        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
      }

      var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');

      function localeMonthsShort(m, format) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        }

        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
      }

      function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();

        if (!this._monthsParse) {
          // this is not used
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];

          for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
          }
        }

        if (strict) {
          if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }

      function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        } // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse


        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);

          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
          }

          if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
          } // test the regex


          if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      } // MOMENTS


      function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
          // No op
          return mom;
        }

        if (typeof value === 'string') {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value); // TODO: Another silent failure?

            if (!isNumber(value)) {
              return mom;
            }
          }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));

        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);

        return mom;
      }

      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, 'Month');
        }
      }

      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }

      var defaultMonthsShortRegex = matchWord;

      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }

          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }

          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }

      var defaultMonthsRegex = matchWord;

      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }

          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
          }

          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }

      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;

        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          shortPieces.push(this.monthsShort(mom, ''));
          longPieces.push(this.months(mom, ''));
          mixedPieces.push(this.months(mom, ''));
          mixedPieces.push(this.monthsShort(mom, ''));
        } // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.


        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
        }

        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
      }

      function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date; // the date constructor remaps years 0-99 to 1900-1999

        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          date = new Date(y + 400, m, d, h, M, s, ms);

          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
      }

      function createUTCDate(y) {
        var date; // the Date.UTC function remaps years 0-99 to 1900-1999

        if (y < 100 && y >= 0) {
          var args = Array.prototype.slice.call(arguments); // preserve leap years using a full 400 year cycle, then reset

          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));

          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
      } // start-of-first-week - start-of-year


      function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      } // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday


      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }

        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }

      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }

        return {
          week: resWeek,
          year: resYear
        };
      }

      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      } // FORMATTING


      addFormatToken('w', ['ww', 2], 'wo', 'week');
      addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek'); // ALIASES

      addUnitAlias('week', 'w');
      addUnitAlias('isoWeek', 'W'); // PRIORITIES

      addUnitPriority('week', 5);
      addUnitPriority('isoWeek', 5); // PARSING

      addRegexToken('w', match1to2);
      addRegexToken('ww', match1to2, match2);
      addRegexToken('W', match1to2);
      addRegexToken('WW', match1to2, match2);
      addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
      }); // HELPERS
      // LOCALES

      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }

      var defaultLocaleWeek = {
        dow: 0,
        // Sunday is the first day of the week.
        doy: 6 // The week that contains Jan 6th is the first week of the year.

      };

      function localeFirstDayOfWeek() {
        return this._week.dow;
      }

      function localeFirstDayOfYear() {
        return this._week.doy;
      } // MOMENTS


      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
      }

      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
      } // FORMATTING


      addFormatToken('d', 0, 'do', 'day');
      addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
      });
      addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
      });
      addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
      });
      addFormatToken('e', 0, 0, 'weekday');
      addFormatToken('E', 0, 0, 'isoWeekday'); // ALIASES

      addUnitAlias('day', 'd');
      addUnitAlias('weekday', 'e');
      addUnitAlias('isoWeekday', 'E'); // PRIORITY

      addUnitPriority('day', 11);
      addUnitPriority('weekday', 11);
      addUnitPriority('isoWeekday', 11); // PARSING

      addRegexToken('d', match1to2);
      addRegexToken('e', match1to2);
      addRegexToken('E', match1to2);
      addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
      });
      addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
      });
      addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
      });
      addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict); // if we didn't get a weekday name, mark the date as invalid


        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
      }); // HELPERS

      function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
          return input;
        }

        if (!isNaN(input)) {
          return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);

        if (typeof input === 'number') {
          return input;
        }

        return null;
      }

      function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
          return locale.weekdaysParse(input) % 7 || 7;
        }

        return isNaN(input) ? null : input;
      } // LOCALES


      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }

      var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');

      function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }

      var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');

      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }

      var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');

      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }

      function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();

        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];

          for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
          }
        }

        if (strict) {
          if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._shortWeekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._weekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._weekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }

      function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, 1]).day(i);

          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
          }

          if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
          } // test the regex


          if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      } // MOMENTS


      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();

        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, 'd');
        } else {
          return day;
        }
      }

      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
      }

      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        } // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.


        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }

      var defaultWeekdaysRegex = matchWord;

      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }

          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }

          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }

      var defaultWeekdaysShortRegex = matchWord;

      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }

          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }

          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }

      var defaultWeekdaysMinRegex = matchWord;

      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }

          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }

          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }

      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;

        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, 1]).day(i);
          minp = this.weekdaysMin(mom, '');
          shortp = this.weekdaysShort(mom, '');
          longp = this.weekdays(mom, '');
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        } // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.


        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        for (i = 0; i < 7; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
      } // FORMATTING


      function hFormat() {
        return this.hours() % 12 || 12;
      }

      function kFormat() {
        return this.hours() || 24;
      }

      addFormatToken('H', ['HH', 2], 0, 'hour');
      addFormatToken('h', ['hh', 2], 0, hFormat);
      addFormatToken('k', ['kk', 2], 0, kFormat);
      addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });

      function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
      }

      meridiem('a', true);
      meridiem('A', false); // ALIASES

      addUnitAlias('hour', 'h'); // PRIORITY

      addUnitPriority('hour', 13); // PARSING

      function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
      }

      addRegexToken('a', matchMeridiem);
      addRegexToken('A', matchMeridiem);
      addRegexToken('H', match1to2);
      addRegexToken('h', match1to2);
      addRegexToken('k', match1to2);
      addRegexToken('HH', match1to2, match2);
      addRegexToken('hh', match1to2, match2);
      addRegexToken('kk', match1to2, match2);
      addRegexToken('hmm', match3to4);
      addRegexToken('hmmss', match5to6);
      addRegexToken('Hmm', match3to4);
      addRegexToken('Hmmss', match5to6);
      addParseToken(['H', 'HH'], HOUR);
      addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      }); // LOCALES

      function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
      }

      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

      function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
          return isLower ? 'pm' : 'PM';
        } else {
          return isLower ? 'am' : 'AM';
        }
      } // MOMENTS
      // Setting the hour should keep the time, because the user explicitly
      // specified which hour they want. So trying to maintain the same hour (in
      // a new timezone) makes sense. Adding/subtracting hours does not follow
      // this rule.


      var getSetHour = makeGetSet('Hours', true);
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      }; // internal storage for locale config files

      var locales = {};
      var localeFamilies = {};
      var globalLocale;

      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
      } // pick the locale from the array
      // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
      // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root


      function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
          split = normalizeLocale(names[i]).split('-');
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;

          while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));

            if (locale) {
              return locale;
            }

            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
              //the next array item is better than a shallower substring of this one
              break;
            }

            j--;
          }

          i++;
        }

        return globalLocale;
      }

      function loadLocale(name) {
        var oldLocale = null; // TODO: Find a better way to register and load all the locales in Node

        if (!locales[name] && 'object' !== 'undefined' && module && module.exports) {
          try {
            oldLocale = globalLocale._abbr;
            var aliasedRequire = commonjsRequire$1;
            aliasedRequire('./locale/' + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {}
        }

        return locales[name];
      } // This function will load locale and then set the global locale.  If
      // no arguments are passed in, it will simply return the current global
      // locale key.


      function getSetGlobalLocale(key, values) {
        var data;

        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }

          if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
          } else {
            if (typeof console !== 'undefined' && console.warn) {
              //warn user if arguments are passed but the locale could not be set
              console.warn('Locale ' + key + ' not found. Did you forget to load it?');
            }
          }
        }

        return globalLocale._abbr;
      }

      function defineLocale(name, config) {
        if (config !== null) {
          var locale,
              parentConfig = baseConfig;
          config.abbr = name;

          if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale = loadLocale(config.parentLocale);

              if (locale != null) {
                parentConfig = locale._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }

                localeFamilies[config.parentLocale].push({
                  name: name,
                  config: config
                });
                return null;
              }
            }
          }

          locales[name] = new Locale(mergeConfigs(parentConfig, config));

          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
              defineLocale(x.name, x.config);
            });
          } // backwards compat for now: also set the locale
          // make sure we set the locale AFTER all child locales have been
          // created, so we won't end up with the child locale set.


          getSetGlobalLocale(name);
          return locales[name];
        } else {
          // useful for testing
          delete locales[name];
          return null;
        }
      }

      function updateLocale(name, config) {
        if (config != null) {
          var locale,
              tmpLocale,
              parentConfig = baseConfig; // MERGE

          tmpLocale = loadLocale(name);

          if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
          }

          config = mergeConfigs(parentConfig, config);
          locale = new Locale(config);
          locale.parentLocale = locales[name];
          locales[name] = locale; // backwards compat for now: also set the locale

          getSetGlobalLocale(name);
        } else {
          // pass null for config to unupdate, useful for tests
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }

        return locales[name];
      } // returns locale data


      function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }

        if (!key) {
          return globalLocale;
        }

        if (!isArray(key)) {
          //short-circuit everything else
          locale = loadLocale(key);

          if (locale) {
            return locale;
          }

          key = [key];
        }

        return chooseLocale(key);
      }

      function listLocales() {
        return keys(locales);
      }

      function checkOverflow(m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }

          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }

          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }

          getParsingFlags(m).overflow = overflow;
        }

        return m;
      } // Pick the first defined of two or three arguments.


      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }

        if (b != null) {
          return b;
        }

        return c;
      }

      function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());

        if (config._useUTC) {
          return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }

        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      } // convert an array to a date.
      // the array should mirror the parameters below
      // note: all values past the year are optional and will default to the lowest possible value.
      // [year, month, day , hour, minute, second, millisecond]


      function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
          return;
        }

        currentDate = currentDateArray(config); //compute day of the year from weeks and weekdays

        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        } //if the day of the year is set, figure out what it is


        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }

          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        } // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything


        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        } // Zero out whatever was not defaulted, including time


        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        } // Check for 24:00:00.000


        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay(); // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.

        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
          config._a[HOUR] = 24;
        } // check for mismatching day of week


        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }

      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
        w = config._w;

        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4; // TODO: We need to take the current isoWeekYear, but that depends on
          // how we interpret now (local, utc, fixed offset). So create
          // a now version of current config (take local/utc/offset flags, and
          // create now).

          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);

          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          var curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year); // Default to current week.

          week = defaults(w.w, curWeek.week);

          if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;

            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            // local weekday -- counting starts from beginning of week
            weekday = w.e + dow;

            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            // default to beginning of week
            weekday = dow;
          }
        }

        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      } // iso 8601 regex
      // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)


      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
      var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
      var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
      var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], // YYYYMM is NOT allowed by the standard
      ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]]; // iso time formats and regexes

      var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];
      var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i; // date from iso format

      function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
          getParsingFlags(config).iso = true;

          for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }

          if (dateFormat == null) {
            config._isValid = false;
            return;
          }

          if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                // match[2] should be 'T' or space
                timeFormat = (match[2] || ' ') + isoTimes[i][0];
                break;
              }
            }

            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }

          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }

          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = 'Z';
            } else {
              config._isValid = false;
              return;
            }
          }

          config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      } // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3


      var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];

        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }

        return result;
      }

      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);

        if (year <= 49) {
          return 2000 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }

        return year;
      }

      function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
      }

      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
              weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();

          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }

        return true;
      }

      var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };

      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          // the only allowed military tz is Z
          return 0;
        } else {
          var hm = parseInt(numOffset, 10);
          var m = hm % 100,
              h = (hm - m) / 100;
          return h * 60 + m;
        }
      } // date and time from ref 2822 format


      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));

        if (match) {
          var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);

          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }

          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);

          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      } // date from iso format or fallback


      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }

        configFromISO(config);

        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }

        configFromRFC2822(config);

        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        } // Final attempt, use Input Fallback


        hooks.createFromInputFallback(config);
      }

      hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
      }); // constant that refers to the ISO standard

      hooks.ISO_8601 = function () {}; // constant that refers to the RFC 2822 form


      hooks.RFC_2822 = function () {}; // date from string and format string


      function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }

        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }

        config._a = [];
        getParsingFlags(config).empty = true; // This array is used to make a Date, either with `new Date` or `Date.UTC`

        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
          token = tokens[i];
          parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0]; // console.log('token', token, 'parsedInput', parsedInput,
          //         'regex', getParseRegexForToken(token, config));

          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));

            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }

            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          } // don't parse if it's not a known token


          if (formatTokenFunctions[token]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token);
            }

            addTimeToArrayFromToken(token, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
          }
        } // add remaining unparsed input length to the string


        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;

        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        } // clear _12h flag if hour is <= 12


        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem; // handle meridiem

        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        configFromArray(config);
        checkOverflow(config);
      }

      function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
          // nothing to do
          return hour;
        }

        if (locale.meridiemHour != null) {
          return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
          // Fallback
          isPm = locale.isPM(meridiem);

          if (isPm && hour < 12) {
            hour += 12;
          }

          if (!isPm && hour === 12) {
            hour = 0;
          }

          return hour;
        } else {
          // this is not supposed to happen
          return hour;
        }
      } // date from string and array of format strings


      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;

        if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }

        for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          tempConfig = copyConfig({}, config);

          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }

          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);

          if (!isValid(tempConfig)) {
            continue;
          } // if there is any input that was not parsed add a penalty for that format


          currentScore += getParsingFlags(tempConfig).charsLeftOver; //or tokens

          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;

          if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }

        extend(config, bestMoment || tempConfig);
      }

      function configFromObject(config) {
        if (config._d) {
          return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
          return obj && parseInt(obj, 10);
        });
        configFromArray(config);
      }

      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));

        if (res._nextDay) {
          // Adding is smart enough around DST
          res.add(1, 'd');
          res._nextDay = undefined;
        }

        return res;
      }

      function prepareConfig(config) {
        var input = config._i,
            format = config._f;
        config._locale = config._locale || getLocale(config._l);

        if (input === null || format === undefined && input === '') {
          return createInvalid({
            nullInput: true
          });
        }

        if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format)) {
          configFromStringAndArray(config);
        } else if (format) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }

        if (!isValid(config)) {
          config._d = null;
        }

        return config;
      }

      function configFromInput(config) {
        var input = config._i;

        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          // from milliseconds
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }

      function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
          strict = locale;
          locale = undefined;
        }

        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = undefined;
        } // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423


        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
      }

      function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
      }

      var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);

        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      });
      var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);

        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }); // Pick a moment m from moments so that m[fn](other) is true for all
      // other. This relies on the function fn to be transitive.
      //
      // moments should either be an array of moment objects or an array, whose
      // first element is an array of moment objects.

      function pickBy(fn, moments) {
        var res, i;

        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }

        if (!moments.length) {
          return createLocal();
        }

        res = moments[0];

        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }

        return res;
      } // TODO: Use [].sort instead?


      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
      }

      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
      }

      var now = function () {
        return Date.now ? Date.now() : +new Date();
      };

      var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

      function isDurationValid(m) {
        for (var key in m) {
          if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }

        var unitHasDecimal = false;

        for (var i = 0; i < ordering.length; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false; // only allow non-integers for smallest unit
            }

            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }

        return true;
      }

      function isValid$1() {
        return this._isValid;
      }

      function createInvalid$1() {
        return createDuration(NaN);
      }

      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput); // representation for dateAddRemove

        this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately

        this._days = +days + weeks * 7; // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.

        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = getLocale();

        this._bubble();
      }

      function isDuration(obj) {
        return obj instanceof Duration;
      }

      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      } // FORMATTING


      function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
          var offset = this.utcOffset();
          var sign = '+';

          if (offset < 0) {
            offset = -offset;
            sign = '-';
          }

          return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
      }

      offset('Z', ':');
      offset('ZZ', ''); // PARSING

      addRegexToken('Z', matchShortOffset);
      addRegexToken('ZZ', matchShortOffset);
      addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      }); // HELPERS
      // timezone chunker
      // '+10:00' > ['10',  '00']
      // '-1530'  > ['-15', '30']

      var chunkOffset = /([\+\-]|\d\d)/gi;

      function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
          return null;
        }

        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
      } // Return a moment from input, that is local/utc/zone equivalent to model.


      function cloneWithOffset(input, model) {
        var res, diff;

        if (model._isUTC) {
          res = model.clone();
          diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf(); // Use low-level api, because this fn is low-level api.

          res._d.setTime(res._d.valueOf() + diff);

          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }

      function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
      } // HOOKS
      // This function will be called whenever a moment is mutated.
      // It is intended to keep the offset in sync with the timezone.


      hooks.updateOffset = function () {}; // MOMENTS
      // keepLocalTime = true means only change the timezone, without
      // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
      // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
      // +0200, so we adjust the time as needed, to be valid.
      //
      // Keeping the time actually adds/subtracts (one hour)
      // from the actual represented time. That is why we call updateOffset
      // a second time. In case it wants us to change the offset again
      // _changeInProgress == true case, then we have to adjust, because
      // there is no such time in the given timezone.


      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;

        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        if (input != null) {
          if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);

            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }

          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }

          this._offset = input;
          this._isUTC = true;

          if (localAdjust != null) {
            this.add(localAdjust, 'm');
          }

          if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }

          return this;
        } else {
          return this._isUTC ? offset : getDateOffset(this);
        }
      }

      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== 'string') {
            input = -input;
          }

          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }

      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }

      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;

          if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
          }
        }

        return this;
      }

      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
          var tZone = offsetFromString(matchOffset, this._i);

          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }

        return this;
      }

      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }

        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }

      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }

      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }

        var c = {};
        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
          var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }

        return this._isDSTShifted;
      }

      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }

      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }

      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      } // ASP.NET json date format regex


      var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/; // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
      // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
      // and further modified to allow for strings containing both week and day

      var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

      function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
        match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input)) {
          duration = {};

          if (key) {
            duration[key] = input;
          } else {
            duration.milliseconds = input;
          }
        } else if (!!(match = aspNetRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign,
            h: toInt(match[HOUR]) * sign,
            m: toInt(match[MINUTE]) * sign,
            s: toInt(match[SECOND]) * sign,
            ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match

          };
        } else if (!!(match = isoRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign),
            M: parseIso(match[3], sign),
            w: parseIso(match[4], sign),
            d: parseIso(match[5], sign),
            h: parseIso(match[6], sign),
            m: parseIso(match[7], sign),
            s: parseIso(match[8], sign)
          };
        } else if (duration == null) {
          // checks for null or undefined
          duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale;
        }

        return ret;
      }

      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;

      function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.')); // apply sign while we're at it

        return (isNaN(res) ? 0 : res) * sign;
      }

      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;

        if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
      }

      function momentsDifference(base, other) {
        var res;

        if (!(base.isValid() && other.isValid())) {
          return {
            milliseconds: 0,
            months: 0
          };
        }

        other = cloneWithOffset(other, base);

        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }

        return res;
      } // TODO: remove 'name' arg after deprecation is removed


      function createAdder(direction, name) {
        return function (val, period) {
          var dur, tmp; //invert the arguments, but complain about it

          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val;
            val = period;
            period = tmp;
          }

          val = typeof val === 'string' ? +val : val;
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }

      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
          // No op
          return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
          setMonth(mom, get(mom, 'Month') + months * isAdding);
        }

        if (days) {
          set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }

        if (milliseconds) {
          mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }

        if (updateOffset) {
          hooks.updateOffset(mom, days || months);
        }
      }

      var add = createAdder(1, 'add');
      var subtract = createAdder(-1, 'subtract');

      function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
      }

      function calendar$1(time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';
        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
      }

      function clone() {
        return new Moment(this);
      }

      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);

        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }

        units = normalizeUnits(units) || 'millisecond';

        if (units === 'millisecond') {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }

      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);

        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }

        units = normalizeUnits(units) || 'millisecond';

        if (units === 'millisecond') {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }

      function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);

        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }

        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }

      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;

        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }

        units = normalizeUnits(units) || 'millisecond';

        if (units === 'millisecond') {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }

      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }

      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }

      function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
          return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
          return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);

        switch (units) {
          case 'year':
            output = monthDiff(this, that) / 12;
            break;

          case 'month':
            output = monthDiff(this, that);
            break;

          case 'quarter':
            output = monthDiff(this, that) / 3;
            break;

          case 'second':
            output = (this - that) / 1e3;
            break;
          // 1000

          case 'minute':
            output = (this - that) / 6e4;
            break;
          // 1000 * 60

          case 'hour':
            output = (this - that) / 36e5;
            break;
          // 1000 * 60 * 60

          case 'day':
            output = (this - that - zoneDelta) / 864e5;
            break;
          // 1000 * 60 * 60 * 24, negate dst

          case 'week':
            output = (this - that - zoneDelta) / 6048e5;
            break;
          // 1000 * 60 * 60 * 24 * 7, negate dst

          default:
            output = this - that;
        }

        return asFloat ? output : absFloor(output);
      }

      function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, 'months'); // linear across the month

          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, 'months'); // linear across the month

          adjust = (b - anchor) / (anchor2 - anchor);
        } //check for negative zero, return zero if negative zero


        return -(wholeMonthDiff + adjust) || 0;
      }

      hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
      hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

      function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
      }

      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }

        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;

        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }

        if (isFunction(Date.prototype.toISOString)) {
          // native implementation is ~50x faster, use it when we can
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
          }
        }

        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
      }
      /**
       * Return a human readable representation of a moment that can
       * also be evaluated to get a new moment which is the same
       *
       * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
       */


      function inspect() {
        if (!this.isValid()) {
          return 'moment.invalid(/* ' + this._i + ' */)';
        }

        var func = 'moment';
        var zone = '';

        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
          zone = 'Z';
        }

        var prefix = '[' + func + '("]';
        var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }

      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }

        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }

      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            to: this,
            from: time
          }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }

      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }

      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            from: this,
            to: time
          }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }

      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      } // If passed a locale key, it will set the locale for this
      // instance.  Otherwise, it will return the locale configuration
      // variables for this instance.


      function locale(key) {
        var newLocaleData;

        if (key === undefined) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);

          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }

          return this;
        }
      }

      var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      });

      function localeData() {
        return this._locale;
      }

      var MS_PER_SECOND = 1000;
      var MS_PER_MINUTE = 60 * MS_PER_SECOND;
      var MS_PER_HOUR = 60 * MS_PER_MINUTE;
      var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR; // actual modulo - handles negative numbers (for dates before 1970):

      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }

      function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }

      function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }

      function startOf(units) {
        var time;
        units = normalizeUnits(units);

        if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
          case 'year':
            time = startOfDate(this.year(), 0, 1);
            break;

          case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;

          case 'month':
            time = startOfDate(this.year(), this.month(), 1);
            break;

          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;

          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;

          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date());
            break;

          case 'hour':
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;

          case 'minute':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;

          case 'second':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }

        this._d.setTime(time);

        hooks.updateOffset(this, true);
        return this;
      }

      function endOf(units) {
        var time;
        units = normalizeUnits(units);

        if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
          case 'year':
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;

          case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;

          case 'month':
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;

          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;

          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;

          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;

          case 'hour':
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;

          case 'minute':
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;

          case 'second':
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }

        this._d.setTime(time);

        hooks.updateOffset(this, true);
        return this;
      }

      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
      }

      function unix() {
        return Math.floor(this.valueOf() / 1000);
      }

      function toDate() {
        return new Date(this.valueOf());
      }

      function toArray() {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
      }

      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }

      function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
      }

      function isValid$2() {
        return isValid(this);
      }

      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }

      function invalidAt() {
        return getParsingFlags(this).overflow;
      }

      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      } // FORMATTING


      addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
      });

      function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
      }

      addWeekYearFormatToken('gggg', 'weekYear');
      addWeekYearFormatToken('ggggg', 'weekYear');
      addWeekYearFormatToken('GGGG', 'isoWeekYear');
      addWeekYearFormatToken('GGGGG', 'isoWeekYear'); // ALIASES

      addUnitAlias('weekYear', 'gg');
      addUnitAlias('isoWeekYear', 'GG'); // PRIORITY

      addUnitPriority('weekYear', 1);
      addUnitPriority('isoWeekYear', 1); // PARSING

      addRegexToken('G', matchSigned);
      addRegexToken('g', matchSigned);
      addRegexToken('GG', match1to2, match2);
      addRegexToken('gg', match1to2, match2);
      addRegexToken('GGGG', match1to4, match4);
      addRegexToken('gggg', match1to4, match4);
      addRegexToken('GGGGG', match1to6, match6);
      addRegexToken('ggggg', match1to6, match6);
      addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
      });
      addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
      }); // MOMENTS

      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
      }

      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }

      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }

      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;

        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }

      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;

        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);

          if (week > weeksTarget) {
            week = weeksTarget;
          }

          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }

      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      } // FORMATTING


      addFormatToken('Q', 0, 'Qo', 'quarter'); // ALIASES

      addUnitAlias('quarter', 'Q'); // PRIORITY

      addUnitPriority('quarter', 7); // PARSING

      addRegexToken('Q', match1);
      addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      }); // MOMENTS

      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      } // FORMATTING


      addFormatToken('D', ['DD', 2], 'Do', 'date'); // ALIASES

      addUnitAlias('date', 'D'); // PRIORITY

      addUnitPriority('date', 9); // PARSING

      addRegexToken('D', match1to2);
      addRegexToken('DD', match1to2, match2);
      addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(['D', 'DD'], DATE);
      addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      }); // MOMENTS

      var getSetDayOfMonth = makeGetSet('Date', true); // FORMATTING

      addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear'); // ALIASES

      addUnitAlias('dayOfYear', 'DDD'); // PRIORITY

      addUnitPriority('dayOfYear', 4); // PARSING

      addRegexToken('DDD', match1to3);
      addRegexToken('DDDD', match3);
      addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
      }); // HELPERS
      // MOMENTS

      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
      } // FORMATTING


      addFormatToken('m', ['mm', 2], 0, 'minute'); // ALIASES

      addUnitAlias('minute', 'm'); // PRIORITY

      addUnitPriority('minute', 14); // PARSING

      addRegexToken('m', match1to2);
      addRegexToken('mm', match1to2, match2);
      addParseToken(['m', 'mm'], MINUTE); // MOMENTS

      var getSetMinute = makeGetSet('Minutes', false); // FORMATTING

      addFormatToken('s', ['ss', 2], 0, 'second'); // ALIASES

      addUnitAlias('second', 's'); // PRIORITY

      addUnitPriority('second', 15); // PARSING

      addRegexToken('s', match1to2);
      addRegexToken('ss', match1to2, match2);
      addParseToken(['s', 'ss'], SECOND); // MOMENTS

      var getSetSecond = makeGetSet('Seconds', false); // FORMATTING

      addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ['SSS', 3], 0, 'millisecond');
      addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
      });
      addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
      });
      addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
      });
      addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
      }); // ALIASES

      addUnitAlias('millisecond', 'ms'); // PRIORITY

      addUnitPriority('millisecond', 16); // PARSING

      addRegexToken('S', match1to3, match1);
      addRegexToken('SS', match1to3, match2);
      addRegexToken('SSS', match1to3, match3);
      var token;

      for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
      }

      function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
      }

      for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
      } // MOMENTS


      var getSetMillisecond = makeGetSet('Milliseconds', false); // FORMATTING

      addFormatToken('z', 0, 0, 'zoneAbbr');
      addFormatToken('zz', 0, 0, 'zoneName'); // MOMENTS

      function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
      }

      function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
      }

      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
      proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
      proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
      proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
      proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

      function createUnix(input) {
        return createLocal(input * 1000);
      }

      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }

      function preParsePostFormat(string) {
        return string;
      }

      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;

      function get$1(format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
      }

      function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
          index = format;
          format = undefined;
        }

        format = format || '';

        if (index != null) {
          return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];

        for (i = 0; i < 12; i++) {
          out[i] = get$1(format, i, field, 'month');
        }

        return out;
      } // ()
      // (5)
      // (fmt, 5)
      // (fmt)
      // (true)
      // (true, 5)
      // (true, fmt, 5)
      // (true, fmt)


      function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
          if (isNumber(format)) {
            index = format;
            format = undefined;
          }

          format = format || '';
        } else {
          format = localeSorted;
          index = format;
          localeSorted = false;

          if (isNumber(format)) {
            index = format;
            format = undefined;
          }

          format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
          return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];

        for (i = 0; i < 7; i++) {
          out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }

        return out;
      }

      function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
      }

      function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
      }

      function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
      }

      function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
      }

      function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
      }

      getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
          var b = number % 10,
              output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
          return number + output;
        }
      }); // Side effect imports

      hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
      hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
      var mathAbs = Math.abs;

      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }

      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      } // supports only 2.0-style add(1, 's') or add(duration)


      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      } // supports only 2.0-style subtract(1, 's') or subtract(duration)


      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }

      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }

      function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays; // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166

        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
          milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
          days = 0;
          months = 0;
        } // The following code bubbles up values, see the tests for
        // examples of what that means.


        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24); // convert days to months

        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays)); // 12 months -> 1 year

        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
      }

      function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
      }

      function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
      }

      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }

        var days;
        var months;
        var milliseconds = this._milliseconds;
        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
          days = this._days + milliseconds / 864e5;
          months = this._months + daysToMonths(days);

          switch (units) {
            case 'month':
              return months;

            case 'quarter':
              return months / 3;

            case 'year':
              return months / 12;
          }
        } else {
          // handle milliseconds separately because of floating point math errors (issue #1867)
          days = this._days + Math.round(monthsToDays(this._months));

          switch (units) {
            case 'week':
              return days / 7 + milliseconds / 6048e5;

            case 'day':
              return days + milliseconds / 864e5;

            case 'hour':
              return days * 24 + milliseconds / 36e5;

            case 'minute':
              return days * 1440 + milliseconds / 6e4;

            case 'second':
              return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here

            case 'millisecond':
              return Math.floor(days * 864e5) + milliseconds;

            default:
              throw new Error('Unknown unit ' + units);
          }
        }
      } // TODO: Use this.as('ms')?


      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }

        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }

      function makeAs(alias) {
        return function () {
          return this.as(alias);
        };
      }

      var asMilliseconds = makeAs('ms');
      var asSeconds = makeAs('s');
      var asMinutes = makeAs('m');
      var asHours = makeAs('h');
      var asDays = makeAs('d');
      var asWeeks = makeAs('w');
      var asMonths = makeAs('M');
      var asQuarters = makeAs('Q');
      var asYears = makeAs('y');

      function clone$1() {
        return createDuration(this);
      }

      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
      }

      function makeGetter(name) {
        return function () {
          return this.isValid() ? this._data[name] : NaN;
        };
      }

      var milliseconds = makeGetter('milliseconds');
      var seconds = makeGetter('seconds');
      var minutes = makeGetter('minutes');
      var hours = makeGetter('hours');
      var days = makeGetter('days');
      var months = makeGetter('months');
      var years = makeGetter('years');

      function weeks() {
        return absFloor(this.days() / 7);
      }

      var round = Math.round;
      var thresholds = {
        ss: 44,
        // a few seconds to seconds
        s: 45,
        // seconds to minute
        m: 45,
        // minutes to hour
        h: 22,
        // hours to day
        d: 26,
        // days to month
        M: 11 // months to year

      }; // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize

      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }

      function relativeTime$1(posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));
        var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
      } // This function allows you to set the rounding function for relative time strings


      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
          return round;
        }

        if (typeof roundingFunction === 'function') {
          round = roundingFunction;
          return true;
        }

        return false;
      } // This function allows you to set a threshold for relative time strings


      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
          return false;
        }

        if (limit === undefined) {
          return thresholds[threshold];
        }

        thresholds[threshold] = limit;

        if (threshold === 's') {
          thresholds.ss = limit - 1;
        }

        return true;
      }

      function humanize(withSuffix) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
          output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
      }

      var abs$1 = Math.abs;

      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }

      function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days = abs$1(this._days);
        var months = abs$1(this._months);
        var minutes, hours, years; // 3600 seconds -> 60 minutes -> 1 hour

        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60; // 12 months -> 1 year

        years = absFloor(months / 12);
        months %= 12; // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js

        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
          // this is the same as C#'s (Noda) and python (isodate)...
          // but not other JS (goog.date)
          return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
        return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
      }

      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
      proto$2.lang = lang; // Side effect imports
      // FORMATTING

      addFormatToken('X', 0, 0, 'unix');
      addFormatToken('x', 0, 0, 'valueOf'); // PARSING

      addRegexToken('x', matchSigned);
      addRegexToken('X', matchTimestamp);
      addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
      });
      addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
      }); // Side effect imports

      hooks.version = '2.24.0';
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto; // currently HTML5 input type only supports 24-hour formats

      hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
        // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
        // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
        // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',
        // <input type="date" />
        TIME: 'HH:mm',
        // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',
        // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',
        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',
        // <input type="week" />
        MONTH: 'YYYY-MM' // <input type="month" />

      };
      return hooks;
    });
  }); // Maps for number <-> hex string conversion

  var byteToHex$2$1 = [];

  for (var i$2$1 = 0; i$2$1 < 256; i$2$1++) {
    byteToHex$2$1[i$2$1] = (i$2$1 + 0x100).toString(16).substr(1);
  }
  /**
   * Generate 16 random bytes to be used as a base for UUID.
   *
   * @ignore
   */


  var random$1$1 = function () {
    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {
      // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
      // Moderately fast, high quality
      var _rnds8 = new Uint8Array(16);

      return function whatwgRNG() {
        crypto.getRandomValues(_rnds8);
        return _rnds8;
      };
    } // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().
    // It's fast, but is of unspecified quality.


    var _rnds = new Array(16);

    return function () {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) {
          r = Math.random() * 0x100000000;
        }

        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return _rnds;
    }; //     uuid.js
    //
    //     Copyright (c) 2010-2012 Robert Kieffer
    //     MIT License - http://opensource.org/licenses/mit-license.php
    // Unique ID creation requires a high quality random # generator.  We feature
    // detect to determine the best RNG source, normalizing to a function that
    // returns 128-bits of randomness, since that's what's usually required
    // return require('./rng');
  }();

  var byteToHex$1$1$1 = [];

  for (var i$1$1$1 = 0; i$1$1$1 < 256; i$1$1$1++) {
    byteToHex$1$1$1[i$1$1$1] = (i$1$1$1 + 0x100).toString(16).substr(1);
  } // **`v1()` - Generate time-based UUID**
  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html
  // random #'s we need to init node and clockseq


  var seedBytes$1$1 = random$1$1(); // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)

  var defaultNodeId$1$1 = [seedBytes$1$1[0] | 0x01, seedBytes$1$1[1], seedBytes$1$1[2], seedBytes$1$1[3], seedBytes$1$1[4], seedBytes$1$1[5]]; // Per 4.2.2, randomize (14 bit) clockseq

  var defaultClockseq$1$1 = (seedBytes$1$1[6] << 8 | seedBytes$1$1[7]) & 0x3fff; // Previous uuid creation time
  // for example '/Date(1198908717056)/' or '/Date(1198908717056-0700)/'
  // code from http://momentjs.com/

  var ASPDateRegex$1 = /^\/?Date\((-?\d+)/i; // Hex color

  /**
   * Hue, Saturation, Value.
   */

  /**
   * Test whether given object is a number
   *
   * @param value - Input value of unknown type.
   *
   * @returns True if number, false otherwise.
   */

  function isNumber$1(value) {
    return value instanceof Number || typeof value === 'number';
  }
  /**
   * Test whether given object is a string
   *
   * @param value - Input value of unknown type.
   *
   * @returns True if string, false otherwise.
   */


  function isString$1(value) {
    return value instanceof String || typeof value === 'string';
  }
  /**
   * Test whether given object is a Moment date.
   * @TODO: This is basically a workaround, if Moment was imported property it wouldn't necessary as moment.isMoment is a TS type guard.
   *
   * @param value - Input value of unknown type.
   *
   * @returns True if Moment instance, false otherwise.
   */


  function isMoment$1(value) {
    return moment$1.isMoment(value);
  }
  /**
   * Copy property from b to a if property present in a.
   * If property in b explicitly set to null, delete it if `allowDeletion` set.
   *
   * Internal helper routine, should not be exported. Not added to `exports` for that reason.
   *
   * @param a - Target object.
   * @param b - Source object.
   * @param prop - Name of property to copy from b to a.
   * @param allowDeletion  if true, delete property in a if explicitly set to null in b
   */


  function copyOrDelete$1(a, b, prop, allowDeletion) {
    var doDeletion = false;

    if (allowDeletion === true) {
      doDeletion = b[prop] === null && a[prop] !== undefined;
    }

    if (doDeletion) {
      delete a[prop];
    } else {
      a[prop] = b[prop]; // Remember, this is a reference copy!
    }
  }
  /**
   * Deep extend an object a with the properties of object b
   *
   * @param a - Target object.
   * @param b - Source object.
   * @param protoExtend - If true, the prototype values will also be extended
   * (ie. the options objects that inherit from others will also get the inherited options).
   * @param allowDeletion - If true, the values of fields that are null will be deleted.
   *
   * @returns Argument a.
   */


  function deepExtend$1(a, b) {
    var protoExtend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    for (var prop in b) {
      if (Object.prototype.hasOwnProperty.call(b, prop) || protoExtend === true) {
        if (b[prop] && b[prop].constructor === Object) {
          if (a[prop] === undefined) {
            a[prop] = {};
          }

          if (a[prop].constructor === Object) {
            deepExtend$1(a[prop], b[prop], protoExtend); // NOTE: allowDeletion not propagated!
          } else {
            copyOrDelete$1(a, b, prop, allowDeletion);
          }
        } else if (Array.isArray(b[prop])) {
          a[prop] = [];

          for (var i = 0; i < b[prop].length; i++) {
            a[prop].push(b[prop][i]);
          }
        } else {
          copyOrDelete$1(a, b, prop, allowDeletion);
        }
      }
    }

    return a;
  }
  /**
   * Convert an object into another type
   *
   * @param object - Value of unknown type.
   * @param type - Name of the desired type.
   *
   * @returns Object in the desired type.
   * @throws Error
   */


  function convert$1(object, type) {
    var match;

    if (object === undefined) {
      return undefined;
    }

    if (object === null) {
      return null;
    }

    if (!type) {
      return object;
    }

    if (!(typeof type === 'string') && !(type instanceof String)) {
      throw new Error('Type must be a string');
    } //noinspection FallthroughInSwitchStatementJS


    switch (type) {
      case 'boolean':
      case 'Boolean':
        return Boolean(object);

      case 'number':
      case 'Number':
        if (isString$1(object) && !isNaN(Date.parse(object))) {
          return moment$1(object).valueOf();
        } else {
          // @TODO: I don't think that Number and String constructors are a good idea.
          // This could also fail if the object doesn't have valueOf method or if it's redefined.
          // For example: Object.create(null) or { valueOf: 7 }.
          return Number(object.valueOf());
        }

      case 'string':
      case 'String':
        return String(object);

      case 'Date':
        if (isNumber$1(object)) {
          return new Date(object);
        }

        if (object instanceof Date) {
          return new Date(object.valueOf());
        } else if (isMoment$1(object)) {
          return new Date(object.valueOf());
        }

        if (isString$1(object)) {
          match = ASPDateRegex$1.exec(object);

          if (match) {
            // object is an ASP date
            return new Date(Number(match[1])); // parse number
          } else {
            return moment$1(new Date(object)).toDate(); // parse string
          }
        } else {
          throw new Error('Cannot convert object of type ' + getType$1(object) + ' to type Date');
        }

      case 'Moment':
        if (isNumber$1(object)) {
          return moment$1(object);
        }

        if (object instanceof Date) {
          return moment$1(object.valueOf());
        } else if (isMoment$1(object)) {
          return moment$1(object);
        }

        if (isString$1(object)) {
          match = ASPDateRegex$1.exec(object);

          if (match) {
            // object is an ASP date
            return moment$1(Number(match[1])); // parse number
          } else {
            return moment$1(object); // parse string
          }
        } else {
          throw new Error('Cannot convert object of type ' + getType$1(object) + ' to type Date');
        }

      case 'ISODate':
        if (isNumber$1(object)) {
          return new Date(object);
        } else if (object instanceof Date) {
          return object.toISOString();
        } else if (isMoment$1(object)) {
          return object.toDate().toISOString();
        } else if (isString$1(object)) {
          match = ASPDateRegex$1.exec(object);

          if (match) {
            // object is an ASP date
            return new Date(Number(match[1])).toISOString(); // parse number
          } else {
            return moment$1(object).format(); // ISO 8601
          }
        } else {
          throw new Error('Cannot convert object of type ' + getType$1(object) + ' to type ISODate');
        }

      case 'ASPDate':
        if (isNumber$1(object)) {
          return '/Date(' + object + ')/';
        } else if (object instanceof Date) {
          return '/Date(' + object.valueOf() + ')/';
        } else if (isString$1(object)) {
          match = ASPDateRegex$1.exec(object);

          var _value;

          if (match) {
            // object is an ASP date
            _value = new Date(Number(match[1])).valueOf(); // parse number
          } else {
            _value = new Date(object).valueOf(); // parse string
          }

          return '/Date(' + _value + ')/';
        } else {
          throw new Error('Cannot convert object of type ' + getType$1(object) + ' to type ASPDate');
        }

      default:
        var never = type;
        throw new Error("Unknown type ".concat(never));
    }
  }
  /**
   * Get the type of an object, for example exports.getType([]) returns 'Array'
   *
   * @param object - Input value of unknown type.
   *
   * @returns Detected type.
   */


  function getType$1(object) {
    var type = _typeof$1(object);

    if (type === 'object') {
      if (object === null) {
        return 'null';
      }

      if (object instanceof Boolean) {
        return 'Boolean';
      }

      if (object instanceof Number) {
        return 'Number';
      }

      if (object instanceof String) {
        return 'String';
      }

      if (Array.isArray(object)) {
        return 'Array';
      }

      if (object instanceof Date) {
        return 'Date';
      }

      return 'Object';
    }

    if (type === 'number') {
      return 'Number';
    }

    if (type === 'boolean') {
      return 'Boolean';
    }

    if (type === 'string') {
      return 'String';
    }

    if (type === undefined) {
      return 'undefined';
    }

    return type;
  }
  /**
   * Determine whether a value can be used as an id.
   *
   * @param value - Input value of unknown type.
   *
   * @returns True if the value is valid id, false otherwise.
   */


  function isId(value) {
    return typeof value === "string" || typeof value === "number";
  }
  /* eslint @typescript-eslint/member-ordering: ["error", { "classes": ["field", "constructor", "method"] }] */

  /**
   * A queue.
   *
   * @typeParam T - The type of method names to be replaced by queued versions.
   */


  var Queue =
  /*#__PURE__*/
  function () {
    /**
     * Construct a new Queue.
     *
     * @param options - Queue configuration.
     */
    function Queue(options) {
      classCallCheck(this, Queue);
      this._queue = [];
      this._timeout = null;
      this._extended = null; // options

      this.delay = null;
      this.max = Infinity;
      this.setOptions(options);
    }
    /**
     * Update the configuration of the queue.
     *
     * @param options - Queue configuration.
     */


    createClass(Queue, [{
      key: "setOptions",
      value: function setOptions(options) {
        if (options && typeof options.delay !== "undefined") {
          this.delay = options.delay;
        }

        if (options && typeof options.max !== "undefined") {
          this.max = options.max;
        }

        this._flushIfNeeded();
      }
      /**
       * Extend an object with queuing functionality.
       * The object will be extended with a function flush, and the methods provided in options.replace will be replaced with queued ones.
       *
       * @param object - The object to be extended.
       * @param options - Additional options.
       *
       * @returns The created queue.
       */

    }, {
      key: "destroy",

      /**
       * Destroy the queue. The queue will first flush all queued actions, and in case it has extended an object, will restore the original object.
       */
      value: function destroy() {
        this.flush();

        if (this._extended) {
          var object = this._extended.object;
          var methods = this._extended.methods;

          for (var i = 0; i < methods.length; i++) {
            var method = methods[i];

            if (method.original) {
              // @TODO: better solution?
              object[method.name] = method.original;
            } else {
              // @TODO: better solution?
              delete object[method.name];
            }
          }

          this._extended = null;
        }
      }
      /**
       * Replace a method on an object with a queued version.
       *
       * @param object - Object having the method.
       * @param method - The method name.
       */

    }, {
      key: "replace",
      value: function replace(object, method) {
        /* eslint-disable-next-line @typescript-eslint/no-this-alias */
        var me = this;
        var original = object[method];

        if (!original) {
          throw new Error("Method " + method + " undefined");
        }

        object[method] = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          } // add this call to the queue


          me.queue({
            args: args,
            fn: original,
            context: this
          });
        };
      }
      /**
       * Queue a call.
       *
       * @param entry - The function or entry to be queued.
       */

    }, {
      key: "queue",
      value: function queue(entry) {
        if (typeof entry === "function") {
          this._queue.push({
            fn: entry
          });
        } else {
          this._queue.push(entry);
        }

        this._flushIfNeeded();
      }
      /**
       * Check whether the queue needs to be flushed.
       */

    }, {
      key: "_flushIfNeeded",
      value: function _flushIfNeeded() {
        var _this = this; // flush when the maximum is exceeded.


        if (this._queue.length > this.max) {
          this.flush();
        } // flush after a period of inactivity when a delay is configured


        if (this._timeout != null) {
          clearTimeout(this._timeout);
          this._timeout = null;
        }

        if (this.queue.length > 0 && typeof this.delay === "number") {
          this._timeout = setTimeout(function () {
            _this.flush();
          }, this.delay);
        }
      }
      /**
       * Flush all queued calls
       */

    }, {
      key: "flush",
      value: function flush() {
        this._queue.splice(0).forEach(function (entry) {
          entry.fn.apply(entry.context || entry.fn, entry.args || []);
        });
      }
    }], [{
      key: "extend",
      value: function extend(object, options) {
        var queue = new Queue(options);

        if (object.flush !== undefined) {
          throw new Error("Target object already has a property flush");
        }

        object.flush = function () {
          queue.flush();
        };

        var methods = [{
          name: "flush",
          original: undefined
        }];

        if (options && options.replace) {
          for (var i = 0; i < options.replace.length; i++) {
            var name = options.replace[i];
            methods.push({
              name: name,
              // @TODO: better solution?
              original: object[name]
            }); // @TODO: better solution?

            queue.replace(object, name);
          }
        }

        queue._extended = {
          object: object,
          methods: methods
        };
        return queue;
      }
    }]);
    return Queue;
  }();
  /* eslint-disable @typescript-eslint/member-ordering */

  /**
   * [[DataSet]] code that can be reused in [[DataView]] or other similar implementations of [[DataInterface]].
   *
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   */


  var DataSetPart =
  /*#__PURE__*/
  function () {
    function DataSetPart() {
      classCallCheck(this, DataSetPart);
      this._subscribers = {
        "*": [],
        add: [],
        remove: [],
        update: []
      };
      /**
       * @deprecated Use on instead (PS: DataView.subscribe === DataView.on).
       */

      this.subscribe = DataSetPart.prototype.on;
      /**
       * @deprecated Use off instead (PS: DataView.unsubscribe === DataView.off).
       */

      this.unsubscribe = DataSetPart.prototype.off;
    }
    /**
     * Trigger an event
     *
     * @param event - Event name.
     * @param payload - Event payload.
     * @param senderId - Id of the sender.
     */


    createClass(DataSetPart, [{
      key: "_trigger",
      value: function _trigger(event, payload, senderId) {
        if (event === "*") {
          throw new Error("Cannot trigger event *");
        }

        [].concat(toConsumableArray(this._subscribers[event]), toConsumableArray(this._subscribers["*"])).forEach(function (subscriber) {
          subscriber(event, payload, senderId != null ? senderId : null);
        });
      }
      /**
       * Subscribe to an event, add an event listener.
       *
       * @remarks Non-function callbacks are ignored.
       *
       * @param event - Event name.
       * @param callback - Callback method.
       */

    }, {
      key: "on",
      value: function on(event, callback) {
        if (typeof callback === "function") {
          this._subscribers[event].push(callback);
        } // @TODO: Maybe throw for invalid callbacks?

      }
      /**
       * Unsubscribe from an event, remove an event listener.
       *
       * @remarks If the same callback was subscribed more than once **all** occurences will be removed.
       *
       * @param event - Event name.
       * @param callback - Callback method.
       */

    }, {
      key: "off",
      value: function off(event, callback) {
        this._subscribers[event] = this._subscribers[event].filter(function (subscriber) {
          return subscriber !== callback;
        });
      }
    }]);
    return DataSetPart;
  }();

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  var arrayWithHoles = _arrayWithHoles;

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  var iterableToArrayLimit = _iterableToArrayLimit;

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var nonIterableRest = _nonIterableRest;

  function _slicedToArray(arr, i) {
    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
  }

  var slicedToArray = _slicedToArray;
  /**
   * Data stream
   *
   * @remarks
   * [[DataStream]] offers an always up to date stream of items from a [[DataSet]] or [[DataView]].
   * That means that the stream is evaluated at the time of iteration, conversion to another data type or when [[cache]] is called, not when the [[DataStream]] was created.
   * Multiple invocations of for example [[toItemArray]] may yield different results (if the data source like for example [[DataSet]] gets modified).
   *
   * @typeparam Item - The item type this stream is going to work with.
   */

  var DataStream =
  /*#__PURE__*/
  function () {
    /**
     * Create a new data stream.
     *
     * @param _pairs - The id, item pairs.
     */
    function DataStream(_pairs) {
      classCallCheck(this, DataStream);
      this._pairs = _pairs;
    }
    /**
     * Return an iterable of key, value pairs for every entry in the stream.
     */


    createClass(DataStream, [{
      key: Symbol.iterator,
      value:
      /*#__PURE__*/
      regenerator.mark(function value() {
        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, id, item;

        return regenerator.wrap(function value$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context.prev = 3;
                _iterator = this._pairs[Symbol.iterator]();

              case 5:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context.next = 12;
                  break;
                }

                _step$value = slicedToArray(_step.value, 2), id = _step$value[0], item = _step$value[1];
                _context.next = 9;
                return [id, item];

              case 9:
                _iteratorNormalCompletion = true;
                _context.next = 5;
                break;

              case 12:
                _context.next = 18;
                break;

              case 14:
                _context.prev = 14;
                _context.t0 = _context["catch"](3);
                _didIteratorError = true;
                _iteratorError = _context.t0;

              case 18:
                _context.prev = 18;
                _context.prev = 19;

                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }

              case 21:
                _context.prev = 21;

                if (!_didIteratorError) {
                  _context.next = 24;
                  break;
                }

                throw _iteratorError;

              case 24:
                return _context.finish(21);

              case 25:
                return _context.finish(18);

              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, value, this, [[3, 14, 18, 26], [19,, 21, 25]]);
      })
      /**
       * Return an iterable of key, value pairs for every entry in the stream.
       */

    }, {
      key: "entries",
      value:
      /*#__PURE__*/
      regenerator.mark(function entries() {
        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, id, item;

        return regenerator.wrap(function entries$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context2.prev = 3;
                _iterator2 = this._pairs[Symbol.iterator]();

              case 5:
                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                  _context2.next = 12;
                  break;
                }

                _step2$value = slicedToArray(_step2.value, 2), id = _step2$value[0], item = _step2$value[1];
                _context2.next = 9;
                return [id, item];

              case 9:
                _iteratorNormalCompletion2 = true;
                _context2.next = 5;
                break;

              case 12:
                _context2.next = 18;
                break;

              case 14:
                _context2.prev = 14;
                _context2.t0 = _context2["catch"](3);
                _didIteratorError2 = true;
                _iteratorError2 = _context2.t0;

              case 18:
                _context2.prev = 18;
                _context2.prev = 19;

                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  _iterator2.return();
                }

              case 21:
                _context2.prev = 21;

                if (!_didIteratorError2) {
                  _context2.next = 24;
                  break;
                }

                throw _iteratorError2;

              case 24:
                return _context2.finish(21);

              case 25:
                return _context2.finish(18);

              case 26:
              case "end":
                return _context2.stop();
            }
          }
        }, entries, this, [[3, 14, 18, 26], [19,, 21, 25]]);
      })
      /**
       * Return an iterable of keys in the stream.
       */

    }, {
      key: "keys",
      value:
      /*#__PURE__*/
      regenerator.mark(function keys() {
        var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _step3$value, id;

        return regenerator.wrap(function keys$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _iteratorNormalCompletion3 = true;
                _didIteratorError3 = false;
                _iteratorError3 = undefined;
                _context3.prev = 3;
                _iterator3 = this._pairs[Symbol.iterator]();

              case 5:
                if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                  _context3.next = 12;
                  break;
                }

                _step3$value = slicedToArray(_step3.value, 1), id = _step3$value[0];
                _context3.next = 9;
                return id;

              case 9:
                _iteratorNormalCompletion3 = true;
                _context3.next = 5;
                break;

              case 12:
                _context3.next = 18;
                break;

              case 14:
                _context3.prev = 14;
                _context3.t0 = _context3["catch"](3);
                _didIteratorError3 = true;
                _iteratorError3 = _context3.t0;

              case 18:
                _context3.prev = 18;
                _context3.prev = 19;

                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                  _iterator3.return();
                }

              case 21:
                _context3.prev = 21;

                if (!_didIteratorError3) {
                  _context3.next = 24;
                  break;
                }

                throw _iteratorError3;

              case 24:
                return _context3.finish(21);

              case 25:
                return _context3.finish(18);

              case 26:
              case "end":
                return _context3.stop();
            }
          }
        }, keys, this, [[3, 14, 18, 26], [19,, 21, 25]]);
      })
      /**
       * Return an iterable of values in the stream.
       */

    }, {
      key: "values",
      value:
      /*#__PURE__*/
      regenerator.mark(function values() {
        var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _step4$value, item;

        return regenerator.wrap(function values$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _iteratorNormalCompletion4 = true;
                _didIteratorError4 = false;
                _iteratorError4 = undefined;
                _context4.prev = 3;
                _iterator4 = this._pairs[Symbol.iterator]();

              case 5:
                if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                  _context4.next = 12;
                  break;
                }

                _step4$value = slicedToArray(_step4.value, 2), item = _step4$value[1];
                _context4.next = 9;
                return item;

              case 9:
                _iteratorNormalCompletion4 = true;
                _context4.next = 5;
                break;

              case 12:
                _context4.next = 18;
                break;

              case 14:
                _context4.prev = 14;
                _context4.t0 = _context4["catch"](3);
                _didIteratorError4 = true;
                _iteratorError4 = _context4.t0;

              case 18:
                _context4.prev = 18;
                _context4.prev = 19;

                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                  _iterator4.return();
                }

              case 21:
                _context4.prev = 21;

                if (!_didIteratorError4) {
                  _context4.next = 24;
                  break;
                }

                throw _iteratorError4;

              case 24:
                return _context4.finish(21);

              case 25:
                return _context4.finish(18);

              case 26:
              case "end":
                return _context4.stop();
            }
          }
        }, values, this, [[3, 14, 18, 26], [19,, 21, 25]]);
      })
      /**
       * Return an array containing all the ids in this stream.
       *
       * @remarks
       * The array may contain duplicities.
       *
       * @returns The array with all ids from this stream.
       */

    }, {
      key: "toIdArray",
      value: function toIdArray() {
        return toConsumableArray(this._pairs).map(function (pair) {
          return pair[0];
        });
      }
      /**
       * Return an array containing all the items in this stream.
       *
       * @remarks
       * The array may contain duplicities.
       *
       * @returns The array with all items from this stream.
       */

    }, {
      key: "toItemArray",
      value: function toItemArray() {
        return toConsumableArray(this._pairs).map(function (pair) {
          return pair[1];
        });
      }
      /**
       * Return an array containing all the entries in this stream.
       *
       * @remarks
       * The array may contain duplicities.
       *
       * @returns The array with all entries from this stream.
       */

    }, {
      key: "toEntryArray",
      value: function toEntryArray() {
        return toConsumableArray(this._pairs);
      }
      /**
       * Return an object map containing all the items in this stream accessible by ids.
       *
       * @remarks
       * In case of duplicate ids (coerced to string so `7 == '7'`) the last encoutered appears in the returned object.
       *
       * @returns The object map of all id â item pairs from this stream.
       */

    }, {
      key: "toObjectMap",
      value: function toObjectMap() {
        var map = Object.create(null);
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = this._pairs[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var _step5$value = slicedToArray(_step5.value, 2),
                id = _step5$value[0],
                item = _step5$value[1];

            map[id] = item;
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }

        return map;
      }
      /**
       * Return a map containing all the items in this stream accessible by ids.
       *
       * @returns The map of all id â item pairs from this stream.
       */

    }, {
      key: "toMap",
      value: function toMap() {
        return new Map(this._pairs);
      }
      /**
       * Return a set containing all the (unique) ids in this stream.
       *
       * @returns The set of all ids from this stream.
       */

    }, {
      key: "toIdSet",
      value: function toIdSet() {
        return new Set(this.toIdArray());
      }
      /**
       * Return a set containing all the (unique) items in this stream.
       *
       * @returns The set of all items from this stream.
       */

    }, {
      key: "toItemSet",
      value: function toItemSet() {
        return new Set(this.toItemArray());
      }
      /**
       * Cache the items from this stream.
       *
       * @remarks
       * This method allows for items to be fetched immediatelly and used (possibly multiple times) later.
       * It can also be used to optimize performance as [[DataStream]] would otherwise reevaluate everything upon each iteration.
       *
       * ## Example
       * ```javascript
       * const ds = new DataSet([â¦])
       *
       * const cachedStream = ds.stream()
       *   .filter(â¦)
       *   .sort(â¦)
       *   .map(â¦)
       *   .cached(â¦) // Data are fetched, processed and cached here.
       *
       * ds.clear()
       * chachedStream // Still has all the items.
       * ```
       *
       * @returns A new [[DataStream]] with cached items (detached from the original [[DataSet]]).
       */

    }, {
      key: "cache",
      value: function cache() {
        return new DataStream(toConsumableArray(this._pairs));
      }
      /**
       * Get the distinct values of given property.
       *
       * @param callback - The function that picks and possibly converts the property.
       *
       * @typeparam T - The type of the distinct value.
       *
       * @returns A set of all distinct properties.
       */

    }, {
      key: "distinct",
      value: function distinct(callback) {
        var set = new Set();
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = this._pairs[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var _step6$value = slicedToArray(_step6.value, 2),
                id = _step6$value[0],
                item = _step6$value[1];

            set.add(callback(item, id));
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
              _iterator6.return();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }

        return set;
      }
      /**
       * Filter the items of the stream.
       *
       * @param callback - The function that decides whether an item will be included.
       *
       * @returns A new data stream with the filtered items.
       */

    }, {
      key: "filter",
      value: function filter(callback) {
        var pairs = this._pairs;
        return new DataStream(defineProperty$1({}, Symbol.iterator,
        /*#__PURE__*/
        regenerator.mark(function _callee() {
          var _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, _step7$value, id, item;

          return regenerator.wrap(function _callee$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _iteratorNormalCompletion7 = true;
                  _didIteratorError7 = false;
                  _iteratorError7 = undefined;
                  _context5.prev = 3;
                  _iterator7 = pairs[Symbol.iterator]();

                case 5:
                  if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
                    _context5.next = 13;
                    break;
                  }

                  _step7$value = slicedToArray(_step7.value, 2), id = _step7$value[0], item = _step7$value[1];

                  if (!callback(item, id)) {
                    _context5.next = 10;
                    break;
                  }

                  _context5.next = 10;
                  return [id, item];

                case 10:
                  _iteratorNormalCompletion7 = true;
                  _context5.next = 5;
                  break;

                case 13:
                  _context5.next = 19;
                  break;

                case 15:
                  _context5.prev = 15;
                  _context5.t0 = _context5["catch"](3);
                  _didIteratorError7 = true;
                  _iteratorError7 = _context5.t0;

                case 19:
                  _context5.prev = 19;
                  _context5.prev = 20;

                  if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
                    _iterator7.return();
                  }

                case 22:
                  _context5.prev = 22;

                  if (!_didIteratorError7) {
                    _context5.next = 25;
                    break;
                  }

                  throw _iteratorError7;

                case 25:
                  return _context5.finish(22);

                case 26:
                  return _context5.finish(19);

                case 27:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee, null, [[3, 15, 19, 27], [20,, 22, 26]]);
        })));
      }
      /**
       * Execute a callback for each item of the stream.
       *
       * @param callback - The function that will be invoked for each item.
       */

    }, {
      key: "forEach",
      value: function forEach(callback) {
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
          for (var _iterator8 = this._pairs[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var _step8$value = slicedToArray(_step8.value, 2),
                id = _step8$value[0],
                item = _step8$value[1];

            callback(item, id);
          }
        } catch (err) {
          _didIteratorError8 = true;
          _iteratorError8 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
              _iterator8.return();
            }
          } finally {
            if (_didIteratorError8) {
              throw _iteratorError8;
            }
          }
        }
      }
      /**
       * Map the items into a different type.
       *
       * @param callback - The function that does the conversion.
       *
       * @typeparam Mapped - The type of the item after mapping.
       *
       * @returns A new data stream with the mapped items.
       */

    }, {
      key: "map",
      value: function map(callback) {
        var pairs = this._pairs;
        return new DataStream(defineProperty$1({}, Symbol.iterator,
        /*#__PURE__*/
        regenerator.mark(function _callee2() {
          var _iteratorNormalCompletion9, _didIteratorError9, _iteratorError9, _iterator9, _step9, _step9$value, id, item;

          return regenerator.wrap(function _callee2$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _iteratorNormalCompletion9 = true;
                  _didIteratorError9 = false;
                  _iteratorError9 = undefined;
                  _context6.prev = 3;
                  _iterator9 = pairs[Symbol.iterator]();

                case 5:
                  if (_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done) {
                    _context6.next = 12;
                    break;
                  }

                  _step9$value = slicedToArray(_step9.value, 2), id = _step9$value[0], item = _step9$value[1];
                  _context6.next = 9;
                  return [id, callback(item, id)];

                case 9:
                  _iteratorNormalCompletion9 = true;
                  _context6.next = 5;
                  break;

                case 12:
                  _context6.next = 18;
                  break;

                case 14:
                  _context6.prev = 14;
                  _context6.t0 = _context6["catch"](3);
                  _didIteratorError9 = true;
                  _iteratorError9 = _context6.t0;

                case 18:
                  _context6.prev = 18;
                  _context6.prev = 19;

                  if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
                    _iterator9.return();
                  }

                case 21:
                  _context6.prev = 21;

                  if (!_didIteratorError9) {
                    _context6.next = 24;
                    break;
                  }

                  throw _iteratorError9;

                case 24:
                  return _context6.finish(21);

                case 25:
                  return _context6.finish(18);

                case 26:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee2, null, [[3, 14, 18, 26], [19,, 21, 25]]);
        })));
      }
      /**
       * Get the item with the maximum value of given property.
       *
       * @param callback - The function that picks and possibly converts the property.
       *
       * @returns The item with the maximum if found otherwise null.
       */

    }, {
      key: "max",
      value: function max(callback) {
        var iter = this._pairs[Symbol.iterator]();

        var curr = iter.next();

        if (curr.done) {
          return null;
        }

        var maxItem = curr.value[1];
        var maxValue = callback(curr.value[1], curr.value[0]);

        while (!(curr = iter.next()).done) {
          var _curr$value = slicedToArray(curr.value, 2),
              id = _curr$value[0],
              item = _curr$value[1];

          var _value = callback(item, id);

          if (_value > maxValue) {
            maxValue = _value;
            maxItem = item;
          }
        }

        return maxItem;
      }
      /**
       * Get the item with the minimum value of given property.
       *
       * @param callback - The function that picks and possibly converts the property.
       *
       * @returns The item with the minimum if found otherwise null.
       */

    }, {
      key: "min",
      value: function min(callback) {
        var iter = this._pairs[Symbol.iterator]();

        var curr = iter.next();

        if (curr.done) {
          return null;
        }

        var minItem = curr.value[1];
        var minValue = callback(curr.value[1], curr.value[0]);

        while (!(curr = iter.next()).done) {
          var _curr$value2 = slicedToArray(curr.value, 2),
              id = _curr$value2[0],
              item = _curr$value2[1];

          var _value2 = callback(item, id);

          if (_value2 < minValue) {
            minValue = _value2;
            minItem = item;
          }
        }

        return minItem;
      }
      /**
       * Reduce the items into a single value.
       *
       * @param callback - The function that does the reduction.
       * @param accumulator - The initial value of the accumulator.
       *
       * @typeparam T - The type of the accumulated value.
       *
       * @returns The reduced value.
       */

    }, {
      key: "reduce",
      value: function reduce(callback, accumulator) {
        var _iteratorNormalCompletion10 = true;
        var _didIteratorError10 = false;
        var _iteratorError10 = undefined;

        try {
          for (var _iterator10 = this._pairs[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
            var _step10$value = slicedToArray(_step10.value, 2),
                id = _step10$value[0],
                item = _step10$value[1];

            accumulator = callback(accumulator, item, id);
          }
        } catch (err) {
          _didIteratorError10 = true;
          _iteratorError10 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion10 && _iterator10.return != null) {
              _iterator10.return();
            }
          } finally {
            if (_didIteratorError10) {
              throw _iteratorError10;
            }
          }
        }

        return accumulator;
      }
      /**
       * Sort the items.
       *
       * @param callback - Item comparator.
       *
       * @returns A new stream with sorted items.
       */

    }, {
      key: "sort",
      value: function sort(callback) {
        var _this = this;

        return new DataStream(defineProperty$1({}, Symbol.iterator, function () {
          return toConsumableArray(_this._pairs).sort(function (_ref3, _ref4) {
            var _ref5 = slicedToArray(_ref3, 2),
                idA = _ref5[0],
                itemA = _ref5[1];

            var _ref6 = slicedToArray(_ref4, 2),
                idB = _ref6[0],
                itemB = _ref6[1];

            return callback(itemA, itemB, idA, idB);
          })[Symbol.iterator]();
        }));
      }
    }]);
    return DataStream;
  }();

  function ownKeys$1(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      keys.push.apply(keys, Object.getOwnPropertySymbols(object));
    }

    if (enumerableOnly) keys = keys.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    return keys;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys$1(source, true).forEach(function (key) {
          defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$1(source).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }
  /**
   * # DataSet
   *
   * Vis.js comes with a flexible DataSet, which can be used to hold and manipulate unstructured data and listen for changes in the data. The DataSet is key/value based. Data items can be added, updated and removed from the DataSet, and one can subscribe to changes in the DataSet. The data in the DataSet can be filtered and ordered, and fields (like dates) can be converted to a specific type. Data can be normalized when appending it to the DataSet as well.
   *
   * ## Example
   *
   * The following example shows how to use a DataSet.
   *
   * ```javascript
   * // create a DataSet
   * var options = {};
   * var data = new vis.DataSet(options);
   *
   * // add items
   * // note that the data items can contain different properties and data formats
   * data.add([
   *   {id: 1, text: 'item 1', date: new Date(2013, 6, 20), group: 1, first: true},
   *   {id: 2, text: 'item 2', date: '2013-06-23', group: 2},
   *   {id: 3, text: 'item 3', date: '2013-06-25', group: 2},
   *   {id: 4, text: 'item 4'}
   * ]);
   *
   * // subscribe to any change in the DataSet
   * data.on('*', function (event, properties, senderId) {
   *   console.log('event', event, properties);
   * });
   *
   * // update an existing item
   * data.update({id: 2, group: 1});
   *
   * // remove an item
   * data.remove(4);
   *
   * // get all ids
   * var ids = data.getIds();
   * console.log('ids', ids);
   *
   * // get a specific item
   * var item1 = data.get(1);
   * console.log('item1', item1);
   *
   * // retrieve a filtered subset of the data
   * var items = data.get({
   *   filter: function (item) {
   *     return item.group == 1;
   *   }
   * });
   * console.log('filtered items', items);
   *
   * // retrieve formatted items
   * var items = data.get({
   *   fields: ['id', 'date'],
   *   type: {
   *     date: 'ISODate'
   *   }
   * });
   * console.log('formatted items', items);
   * ```
   *
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   */


  var DataSet =
  /*#__PURE__*/
  function (_DataSetPart) {
    inherits(DataSet, _DataSetPart);
    /**
     * Construct a new DataSet.
     *
     * @param data - Initial data or options.
     * @param options - Options (type error if data is also options).
     */

    function DataSet(data, options) {
      var _this;

      classCallCheck(this, DataSet);
      _this = possibleConstructorReturn(this, getPrototypeOf(DataSet).call(this)); // correctly read optional arguments

      if (data && !Array.isArray(data)) {
        options = data;
        data = [];
      }

      _this._options = options || {};
      _this._data = new Map(); // map with data indexed by id

      _this.length = 0; // number of items in the DataSet

      _this._idProp = _this._options.fieldId || "id"; // name of the field containing id

      _this._type = {}; // internal field types (NOTE: this can differ from this._options.type)
      // all variants of a Date are internally stored as Date, so we can convert
      // from everything to everything (also from ISODate to Number for example)

      if (_this._options.type) {
        var fields = Object.keys(_this._options.type);

        for (var i = 0, len = fields.length; i < len; i++) {
          var field = fields[i];
          var value = _this._options.type[field];

          if (value == "Date" || value == "ISODate" || value == "ASPDate") {
            _this._type[field] = "Date";
          } else {
            _this._type[field] = value;
          }
        }
      } // add initial data when provided


      if (data && data.length) {
        _this.add(data);
      }

      _this.setOptions(options);

      return _this;
    }
    /**
     * Set new options.
     *
     * @param options - The new options.
     */


    createClass(DataSet, [{
      key: "setOptions",
      value: function setOptions(options) {
        if (options && options.queue !== undefined) {
          if (options.queue === false) {
            // delete queue if loaded
            if (this._queue) {
              this._queue.destroy();

              delete this._queue;
            }
          } else {
            // create queue and update its options
            if (!this._queue) {
              this._queue = Queue.extend(this, {
                replace: ["add", "update", "remove"]
              });
            }

            if (options.queue && _typeof_1(options.queue) === "object") {
              this._queue.setOptions(options.queue);
            }
          }
        }
      }
      /**
       * Add a data item or an array with items.
       *
       * After the items are added to the DataSet, the DataSet will trigger an event `add`. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * ## Example
       *
       * ```javascript
       * // create a DataSet
       * const data = new vis.DataSet()
       *
       * // add items
       * const ids = data.add([
       *   { id: 1, text: 'item 1' },
       *   { id: 2, text: 'item 2' },
       *   { text: 'item without an id' }
       * ])
       *
       * console.log(ids) // [1, 2, '<UUIDv4>']
       * ```
       *
       * @param data - Items to be added (ids will be generated if missing).
       * @param senderId - Sender id.
       *
       * @returns addedIds - Array with the ids (generated if not present) of the added items.
       *
       * @throws When an item with the same id as any of the added items already exists.
       */

    }, {
      key: "add",
      value: function add(data, senderId) {
        var _this2 = this;

        var addedIds = [];
        var id;

        if (Array.isArray(data)) {
          // Array
          var idsToAdd = data.map(function (d) {
            return d[_this2._idProp];
          });

          if (idsToAdd.some(function (id) {
            return _this2._data.has(id);
          })) {
            throw new Error("A duplicate id was found in the parameter array.");
          }

          for (var i = 0, len = data.length; i < len; i++) {
            id = this._addItem(data[i]);
            addedIds.push(id);
          }
        } else if (data && _typeof_1(data) === "object") {
          // Single item
          id = this._addItem(data);
          addedIds.push(id);
        } else {
          throw new Error("Unknown dataType");
        }

        if (addedIds.length) {
          this._trigger("add", {
            items: addedIds
          }, senderId);
        }

        return addedIds;
      }
      /**
       * Update existing items. When an item does not exist, it will be created.
       *
       * @remarks
       * The provided properties will be merged in the existing item. When an item does not exist, it will be created.
       *
       * After the items are updated, the DataSet will trigger an event `add` for the added items, and an event `update`. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * ## Example
       *
       * ```javascript
       * // create a DataSet
       * const data = new vis.DataSet([
       *   { id: 1, text: 'item 1' },
       *   { id: 2, text: 'item 2' },
       *   { id: 3, text: 'item 3' }
       * ])
       *
       * // update items
       * const ids = data.update([
       *   { id: 2, text: 'item 2 (updated)' },
       *   { id: 4, text: 'item 4 (new)' }
       * ])
       *
       * console.log(ids) // [2, 4]
       * ```
       *
       * ## Warning for TypeScript users
       * This method may introduce partial items into the data set. Use add or updateOnly instead for better type safety.
       *
       * @param data - Items to be updated (if the id is already present) or added (if the id is missing).
       * @param senderId - Sender id.
       *
       * @returns updatedIds - The ids of the added (these may be newly generated if there was no id in the item from the data) or updated items.
       *
       * @throws When the supplied data is neither an item nor an array of items.
       */

    }, {
      key: "update",
      value: function update(data, senderId) {
        var _this3 = this;

        var addedIds = [];
        var updatedIds = [];
        var oldData = [];
        var updatedData = [];
        var idProp = this._idProp;

        var addOrUpdate = function addOrUpdate(item) {
          var origId = item[idProp];

          if (origId != null && _this3._data.has(origId)) {
            var fullItem = item; // it has an id, therefore it is a fullitem

            var oldItem = Object.assign({}, _this3._data.get(origId)); // update item

            var id = _this3._updateItem(fullItem);

            updatedIds.push(id);
            updatedData.push(fullItem);
            oldData.push(oldItem);
          } else {
            // add new item
            var _id = _this3._addItem(item);

            addedIds.push(_id);
          }
        };

        if (Array.isArray(data)) {
          // Array
          for (var i = 0, len = data.length; i < len; i++) {
            if (data[i] && _typeof_1(data[i]) === "object") {
              addOrUpdate(data[i]);
            } else {
              console.warn("Ignoring input item, which is not an object at index " + i);
            }
          }
        } else if (data && _typeof_1(data) === "object") {
          // Single item
          addOrUpdate(data);
        } else {
          throw new Error("Unknown dataType");
        }

        if (addedIds.length) {
          this._trigger("add", {
            items: addedIds
          }, senderId);
        }

        if (updatedIds.length) {
          var props = {
            items: updatedIds,
            oldData: oldData,
            data: updatedData
          }; // TODO: remove deprecated property 'data' some day
          //Object.defineProperty(props, 'data', {
          //  'get': (function() {
          //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
          //    return updatedData;
          //  }).bind(this)
          //});

          this._trigger("update", props, senderId);
        }

        return addedIds.concat(updatedIds);
      }
      /**
       * Update existing items. When an item does not exist, an error will be thrown.
       *
       * @remarks
       * The provided properties will be deeply merged into the existing item.
       * When an item does not exist (id not present in the data set or absent), an error will be thrown and nothing will be changed.
       *
       * After the items are updated, the DataSet will trigger an event `update`.
       * When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * ## Example
       *
       * ```javascript
       * // create a DataSet
       * const data = new vis.DataSet([
       *   { id: 1, text: 'item 1' },
       *   { id: 2, text: 'item 2' },
       *   { id: 3, text: 'item 3' },
       * ])
       *
       * // update items
       * const ids = data.update([
       *   { id: 2, text: 'item 2 (updated)' }, // works
       *   // { id: 4, text: 'item 4 (new)' }, // would throw
       *   // { text: 'item 4 (new)' }, // would also throw
       * ])
       *
       * console.log(ids) // [2]
       * ```
       *
       * @param data - Updates (the id and optionally other props) to the items in this data set.
       * @param senderId - Sender id.
       *
       * @returns updatedIds - The ids of the updated items.
       *
       * @throws When the supplied data is neither an item nor an array of items, when the ids are missing.
       */

    }, {
      key: "updateOnly",
      value: function updateOnly(data, senderId) {
        var _this4 = this;

        if (!Array.isArray(data)) {
          data = [data];
        }

        var updateEventData = data.map(function (update) {
          var oldData = _this4._data.get(update[_this4._idProp]);

          if (oldData == null) {
            throw new Error("Updating non-existent items is not allowed.");
          }

          return {
            oldData: oldData,
            update: update
          };
        }).map(function (_ref) {
          var oldData = _ref.oldData,
              update = _ref.update;
          var id = oldData[_this4._idProp];
          var updatedData = deepExtend$1(deepExtend$1({}, oldData), update);

          _this4._data.set(id, updatedData);

          return {
            id: id,
            oldData: oldData,
            updatedData: updatedData
          };
        });

        if (updateEventData.length) {
          var props = {
            items: updateEventData.map(function (value) {
              return value.id;
            }),
            oldData: updateEventData.map(function (value) {
              return value.oldData;
            }),
            data: updateEventData.map(function (value) {
              return value.updatedData;
            })
          }; // TODO: remove deprecated property 'data' some day
          //Object.defineProperty(props, 'data', {
          //  'get': (function() {
          //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
          //    return updatedData;
          //  }).bind(this)
          //});

          this._trigger("update", props, senderId);

          return props.items;
        } else {
          return [];
        }
      }
      /** @inheritdoc */

    }, {
      key: "get",
      value: function get(first, second) {
        // @TODO: Woudn't it be better to split this into multiple methods?
        // parse the arguments
        var id = undefined;
        var ids = undefined;
        var options = undefined;

        if (isId(first)) {
          // get(id [, options])
          id = first;
          options = second;
        } else if (Array.isArray(first)) {
          // get(ids [, options])
          ids = first;
          options = second;
        } else {
          // get([, options])
          options = first;
        } // determine the return type


        var returnType = options && options.returnType === "Object" ? "Object" : "Array"; // @TODO: WTF is this? Or am I missing something?
        // var returnType
        // if (options && options.returnType) {
        //   var allowedValues = ['Array', 'Object']
        //   returnType =
        //     allowedValues.indexOf(options.returnType) == -1
        //       ? 'Array'
        //       : options.returnType
        // } else {
        //   returnType = 'Array'
        // }
        // build options

        var type = options && options.type || this._options.type;
        var filter = options && options.filter;
        var items = [];
        var item = null;
        var itemIds = null;
        var itemId = null; // convert items

        if (id != null) {
          // return a single item
          item = this._getItem(id, type);

          if (item && filter && !filter(item)) {
            item = null;
          }
        } else if (ids != null) {
          // return a subset of items
          for (var i = 0, len = ids.length; i < len; i++) {
            item = this._getItem(ids[i], type);

            if (item != null && (!filter || filter(item))) {
              items.push(item);
            }
          }
        } else {
          // return all items
          itemIds = toConsumableArray(this._data.keys());

          for (var _i = 0, _len = itemIds.length; _i < _len; _i++) {
            itemId = itemIds[_i];
            item = this._getItem(itemId, type);

            if (item != null && (!filter || filter(item))) {
              items.push(item);
            }
          }
        } // order the results


        if (options && options.order && id == undefined) {
          this._sort(items, options.order);
        } // filter fields of the items


        if (options && options.fields) {
          var fields = options.fields;

          if (id != undefined && item != null) {
            item = this._filterFields(item, fields);
          } else {
            for (var _i2 = 0, _len2 = items.length; _i2 < _len2; _i2++) {
              items[_i2] = this._filterFields(items[_i2], fields);
            }
          }
        } // return the results


        if (returnType == "Object") {
          var result = {};

          for (var _i3 = 0, _len3 = items.length; _i3 < _len3; _i3++) {
            var resultant = items[_i3]; // @TODO: Shoudn't this be this._fieldId?
            // result[resultant.id] = resultant

            var _id2 = resultant[this._idProp];
            result[_id2] = resultant;
          }

          return result;
        } else {
          if (id != null) {
            // a single item
            return item;
          } else {
            // just return our array
            return items;
          }
        }
      }
      /** @inheritdoc */

    }, {
      key: "getIds",
      value: function getIds(options) {
        var data = this._data;
        var filter = options && options.filter;
        var order = options && options.order;
        var type = options && options.type || this._options.type;
        var itemIds = toConsumableArray(data.keys());
        var ids = [];
        var item;
        var items;

        if (filter) {
          // get filtered items
          if (order) {
            // create ordered list
            items = [];

            for (var i = 0, len = itemIds.length; i < len; i++) {
              var id = itemIds[i];
              item = this._getItem(id, type);

              if (filter(item)) {
                items.push(item);
              }
            }

            this._sort(items, order);

            for (var _i4 = 0, _len4 = items.length; _i4 < _len4; _i4++) {
              ids.push(items[_i4][this._idProp]);
            }
          } else {
            // create unordered list
            for (var _i5 = 0, _len5 = itemIds.length; _i5 < _len5; _i5++) {
              var _id3 = itemIds[_i5];
              item = this._getItem(_id3, type);

              if (filter(item)) {
                ids.push(item[this._idProp]);
              }
            }
          }
        } else {
          // get all items
          if (order) {
            // create an ordered list
            items = [];

            for (var _i6 = 0, _len6 = itemIds.length; _i6 < _len6; _i6++) {
              var _id4 = itemIds[_i6];
              items.push(data.get(_id4));
            }

            this._sort(items, order);

            for (var _i7 = 0, _len7 = items.length; _i7 < _len7; _i7++) {
              ids.push(items[_i7][this._idProp]);
            }
          } else {
            // create unordered list
            for (var _i8 = 0, _len8 = itemIds.length; _i8 < _len8; _i8++) {
              var _id5 = itemIds[_i8];
              item = data.get(_id5);
              ids.push(item[this._idProp]);
            }
          }
        }

        return ids;
      }
      /** @inheritdoc */

    }, {
      key: "getDataSet",
      value: function getDataSet() {
        return this;
      }
      /** @inheritdoc */

    }, {
      key: "forEach",
      value: function forEach(callback, options) {
        var filter = options && options.filter;
        var type = options && options.type || this._options.type;
        var data = this._data;
        var itemIds = toConsumableArray(data.keys());

        if (options && options.order) {
          // execute forEach on ordered list
          var items = this.get(options);

          for (var i = 0, len = items.length; i < len; i++) {
            var item = items[i];
            var id = item[this._idProp];
            callback(item, id);
          }
        } else {
          // unordered
          for (var _i9 = 0, _len9 = itemIds.length; _i9 < _len9; _i9++) {
            var _id6 = itemIds[_i9];

            var _item = this._getItem(_id6, type);

            if (!filter || filter(_item)) {
              callback(_item, _id6);
            }
          }
        }
      }
      /** @inheritdoc */

    }, {
      key: "map",
      value: function map(callback, options) {
        var filter = options && options.filter;
        var type = options && options.type || this._options.type;
        var mappedItems = [];
        var data = this._data;
        var itemIds = toConsumableArray(data.keys()); // convert and filter items

        for (var i = 0, len = itemIds.length; i < len; i++) {
          var id = itemIds[i];

          var item = this._getItem(id, type);

          if (!filter || filter(item)) {
            mappedItems.push(callback(item, id));
          }
        } // order items


        if (options && options.order) {
          this._sort(mappedItems, options.order);
        }

        return mappedItems;
      }
      /**
       * Filter the fields of an item.
       *
       * @param item - The item whose fields should be filtered.
       * @param fields - The names of the fields that will be kept.
       *
       * @typeParam K - Field name type.
       *
       * @returns The item without any additional fields.
       */

    }, {
      key: "_filterFields",
      value: function _filterFields(item, fields) {
        if (!item) {
          // item is null
          return item;
        }

        return (Array.isArray(fields) ? // Use the supplied array
        fields : // Use the keys of the supplied object
        Object.keys(fields)).reduce(function (filteredItem, field) {
          filteredItem[field] = item[field];
          return filteredItem;
        }, {});
      }
      /**
       * Sort the provided array with items.
       *
       * @param items - Items to be sorted in place.
       * @param order - A field name or custom sort function.
       *
       * @typeParam T - The type of the items in the items array.
       */

    }, {
      key: "_sort",
      value: function _sort(items, order) {
        if (typeof order === "string") {
          // order by provided field name
          var name = order; // field name

          items.sort(function (a, b) {
            // @TODO: How to treat missing properties?
            var av = a[name];
            var bv = b[name];
            return av > bv ? 1 : av < bv ? -1 : 0;
          });
        } else if (typeof order === "function") {
          // order by sort function
          items.sort(order);
        } else {
          // TODO: extend order by an Object {field:string, direction:string}
          //       where direction can be 'asc' or 'desc'
          throw new TypeError("Order must be a function or a string");
        }
      }
      /**
       * Remove an item or multiple items by âreferenceâ (only the id is used) or by id.
       *
       * The method ignores removal of non-existing items, and returns an array containing the ids of the items which are actually removed from the DataSet.
       *
       * After the items are removed, the DataSet will trigger an event `remove` for the removed items. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * ## Example
       * ```javascript
       * // create a DataSet
       * const data = new vis.DataSet([
       *   { id: 1, text: 'item 1' },
       *   { id: 2, text: 'item 2' },
       *   { id: 3, text: 'item 3' }
       * ])
       *
       * // remove items
       * const ids = data.remove([2, { id: 3 }, 4])
       *
       * console.log(ids) // [2, 3]
       * ```
       *
       * @param id - One or more items or ids of items to be removed.
       * @param senderId - Sender id.
       *
       * @returns The ids of the removed items.
       */

    }, {
      key: "remove",
      value: function remove(id, senderId) {
        var removedIds = [];
        var removedItems = []; // force everything to be an array for simplicity

        var ids = Array.isArray(id) ? id : [id];

        for (var i = 0, len = ids.length; i < len; i++) {
          var item = this._remove(ids[i]);

          if (item) {
            var itemId = item[this._idProp];

            if (itemId != null) {
              removedIds.push(itemId);
              removedItems.push(item);
            }
          }
        }

        if (removedIds.length) {
          this._trigger("remove", {
            items: removedIds,
            oldData: removedItems
          }, senderId);
        }

        return removedIds;
      }
      /**
       * Remove an item by its id or reference.
       *
       * @param id - Id of an item or the item itself.
       *
       * @returns The removed item if removed, null otherwise.
       */

    }, {
      key: "_remove",
      value: function _remove(id) {
        // @TODO: It origianlly returned the item although the docs say id.
        // The code expects the item, so probably an error in the docs.
        var ident; // confirm the id to use based on the args type

        if (isId(id)) {
          ident = id;
        } else if (id && _typeof_1(id) === "object") {
          ident = id[this._idProp]; // look for the identifier field using ._idProp
        } // do the removing if the item is found


        if (ident != null && this._data.has(ident)) {
          var item = this._data.get(ident) || null;

          this._data.delete(ident);

          --this.length;
          return item;
        }

        return null;
      }
      /**
       * Clear the entire data set.
       *
       * After the items are removed, the [[DataSet]] will trigger an event `remove` for all removed items. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * @param senderId - Sender id.
       *
       * @returns removedIds - The ids of all removed items.
       */

    }, {
      key: "clear",
      value: function clear(senderId) {
        var ids = toConsumableArray(this._data.keys());
        var items = [];

        for (var i = 0, len = ids.length; i < len; i++) {
          items.push(this._data.get(ids[i]));
        }

        this._data.clear();

        this.length = 0;

        this._trigger("remove", {
          items: ids,
          oldData: items
        }, senderId);

        return ids;
      }
      /**
       * Find the item with maximum value of a specified field.
       *
       * @param field - Name of the property that should be searched for max value.
       *
       * @returns Item containing max value, or null if no items.
       */

    }, {
      key: "max",
      value: function max(field) {
        var max = null;
        var maxField = null;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this._data.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var item = _step.value;
            var itemField = item[field];

            if (typeof itemField === "number" && (maxField == null || itemField > maxField)) {
              max = item;
              maxField = itemField;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return max || null;
      }
      /**
       * Find the item with minimum value of a specified field.
       *
       * @param field - Name of the property that should be searched for min value.
       *
       * @returns Item containing min value, or null if no items.
       */

    }, {
      key: "min",
      value: function min(field) {
        var min = null;
        var minField = null;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this._data.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var item = _step2.value;
            var itemField = item[field];

            if (typeof itemField === "number" && (minField == null || itemField < minField)) {
              min = item;
              minField = itemField;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return min || null;
      }
      /**
       * Find all distinct values of a specified field
       *
       * @param prop - The property name whose distinct values should be returned.
       *
       * @returns Unordered array containing all distinct values. Items without specified property are ignored.
       */

    }, {
      key: "distinct",
      value: function distinct(prop) {
        var data = this._data;
        var itemIds = toConsumableArray(data.keys());
        var values = [];
        var fieldType = this._options.type && this._options.type[prop] || null;
        var count = 0;

        for (var i = 0, len = itemIds.length; i < len; i++) {
          var id = itemIds[i];
          var item = data.get(id);
          var value = item[prop];
          var exists = false;

          for (var j = 0; j < count; j++) {
            if (values[j] == value) {
              exists = true;
              break;
            }
          }

          if (!exists && value !== undefined) {
            values[count] = value;
            count++;
          }
        }

        if (fieldType) {
          for (var _i10 = 0, _len10 = values.length; _i10 < _len10; _i10++) {
            values[_i10] = convert$1(values[_i10], fieldType);
          }
        }

        return values;
      }
      /**
       * Add a single item. Will fail when an item with the same id already exists.
       *
       * @param item - A new item to be added.
       *
       * @returns Added item's id. An id is generated when it is not present in the item.
       */

    }, {
      key: "_addItem",
      value: function _addItem(item) {
        var id = item[this._idProp];

        if (id != null) {
          // check whether this id is already taken
          if (this._data.has(id)) {
            // item already exists
            throw new Error("Cannot add item: item with id " + id + " already exists");
          }
        } else {
          // generate an id
          id = uuid4$1();
          item[this._idProp] = id;
        }

        var d = {};
        var fields = Object.keys(item);

        for (var i = 0, len = fields.length; i < len; i++) {
          var field = fields[i];
          var fieldType = this._type[field]; // type may be undefined

          d[field] = convert$1(item[field], fieldType);
        }

        this._data.set(id, d);

        ++this.length;
        return id;
      }
      /**
       * Get an item. Fields can be converted to a specific type
       *
       * @param id - Id of the requested item.
       * @param types - Property name to type name object map of type converstions.
       *
       * @returns The item, optionally after type conversion.
       */

    }, {
      key: "_getItem",
      value: function _getItem(id, types) {
        // @TODO: I have no idea how to type this.
        // get the item from the dataset
        var raw = this._data.get(id);

        if (!raw) {
          return null;
        } // convert the items field types


        var converted;
        var fields = Object.keys(raw);

        if (types) {
          converted = {};

          for (var i = 0, len = fields.length; i < len; i++) {
            var field = fields[i];
            var value = raw[field];
            converted[field] = convert$1(value, types[field]);
          }
        } else {
          // no field types specified, no converting needed
          converted = _objectSpread({}, raw);
        }

        if (converted[this._idProp] == null) {
          converted[this._idProp] = raw.id;
        }

        return converted;
      }
      /**
       * Update a single item: merge with existing item.
       * Will fail when the item has no id, or when there does not exist an item with the same id.
       *
       * @param item - The new item
       *
       * @returns The id of the updated item.
       */

    }, {
      key: "_updateItem",
      value: function _updateItem(item) {
        var id = item[this._idProp];

        if (id == null) {
          throw new Error("Cannot update item: item has no id (item: " + JSON.stringify(item) + ")");
        }

        var d = this._data.get(id);

        if (!d) {
          // item doesn't exist
          throw new Error("Cannot update item: no item with id " + id + " found");
        } // merge with current item


        var fields = Object.keys(item);

        for (var i = 0, len = fields.length; i < len; i++) {
          var field = fields[i];
          var fieldType = this._type[field]; // type may be undefined

          d[field] = convert$1(item[field], fieldType);
        }

        return id;
      }
      /** @inheritdoc */

    }, {
      key: "stream",
      value: function stream(ids) {
        if (ids) {
          var data = this._data;
          return new DataStream(defineProperty$1({}, Symbol.iterator,
          /*#__PURE__*/
          regenerator.mark(function _callee() {
            var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, id, item;

            return regenerator.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _iteratorNormalCompletion3 = true;
                    _didIteratorError3 = false;
                    _iteratorError3 = undefined;
                    _context.prev = 3;
                    _iterator3 = ids[Symbol.iterator]();

                  case 5:
                    if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                      _context.next = 14;
                      break;
                    }

                    id = _step3.value;
                    item = data.get(id);

                    if (!(item != null)) {
                      _context.next = 11;
                      break;
                    }

                    _context.next = 11;
                    return [id, item];

                  case 11:
                    _iteratorNormalCompletion3 = true;
                    _context.next = 5;
                    break;

                  case 14:
                    _context.next = 20;
                    break;

                  case 16:
                    _context.prev = 16;
                    _context.t0 = _context["catch"](3);
                    _didIteratorError3 = true;
                    _iteratorError3 = _context.t0;

                  case 20:
                    _context.prev = 20;
                    _context.prev = 21;

                    if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                      _iterator3.return();
                    }

                  case 23:
                    _context.prev = 23;

                    if (!_didIteratorError3) {
                      _context.next = 26;
                      break;
                    }

                    throw _iteratorError3;

                  case 26:
                    return _context.finish(23);

                  case 27:
                    return _context.finish(20);

                  case 28:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, null, [[3, 16, 20, 28], [21,, 23, 27]]);
          })));
        } else {
          return new DataStream(defineProperty$1({}, Symbol.iterator, this._data.entries.bind(this._data)));
        }
      }
    }]);
    return DataSet;
  }(DataSetPart);
  /**
   * DataView
   *
   * A DataView offers a filtered and/or formatted view on a DataSet. One can subscribe to changes in a DataView, and easily get filtered or formatted data without having to specify filters and field types all the time.
   *
   * ## Example
   * ```javascript
   * // create a DataSet
   * var data = new vis.DataSet();
   * data.add([
   *   {id: 1, text: 'item 1', date: new Date(2013, 6, 20), group: 1, first: true},
   *   {id: 2, text: 'item 2', date: '2013-06-23', group: 2},
   *   {id: 3, text: 'item 3', date: '2013-06-25', group: 2},
   *   {id: 4, text: 'item 4'}
   * ]);
   *
   * // create a DataView
   * // the view will only contain items having a property group with value 1,
   * // and will only output fields id, text, and date.
   * var view = new vis.DataView(data, {
   *   filter: function (item) {
   *     return (item.group == 1);
   *   },
   *   fields: ['id', 'text', 'date']
   * });
   *
   * // subscribe to any change in the DataView
   * view.on('*', function (event, properties, senderId) {
   *   console.log('event', event, properties);
   * });
   *
   * // update an item in the data set
   * data.update({id: 2, group: 1});
   *
   * // get all ids in the view
   * var ids = view.getIds();
   * console.log('ids', ids); // will output [1, 2]
   *
   * // get all items in the view
   * var items = view.get();
   * ```
   *
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   */


  var DataView =
  /*#__PURE__*/
  function (_DataSetPart) {
    inherits(DataView, _DataSetPart);
    /**
     * Create a DataView.
     *
     * @param data - The instance containing data (directly or indirectly).
     * @param options - Options to configure this data view.
     */

    function DataView(data, options) {
      var _this;

      classCallCheck(this, DataView);
      _this = possibleConstructorReturn(this, getPrototypeOf(DataView).call(this));
      /** @inheritdoc */

      _this.length = 0;
      _this._ids = new Set(); // ids of the items currently in memory (just contains a boolean true)

      _this._options = options || {};
      _this._listener = _this._onEvent.bind(assertThisInitialized(_this));

      _this.setData(data);

      return _this;
    } // TODO: implement a function .config() to dynamically update things like configured filter
    // and trigger changes accordingly

    /**
     * Set a data source for the view.
     *
     * @param data - The instance containing data (directly or indirectly).
     */


    createClass(DataView, [{
      key: "setData",
      value: function setData(data) {
        if (this._data) {
          // unsubscribe from current dataset
          if (this._data.off) {
            this._data.off("*", this._listener);
          } // trigger a remove of all items in memory


          var ids = this._data.getIds({
            filter: this._options.filter
          });

          var items = this._data.get(ids);

          this._ids.clear();

          this.length = 0;

          this._trigger("remove", {
            items: ids,
            oldData: items
          });
        }

        if (data != null) {
          this._data = data; // trigger an add of all added items

          var _ids = this._data.getIds({
            filter: this._options.filter
          });

          for (var i = 0, len = _ids.length; i < len; i++) {
            var id = _ids[i];

            this._ids.add(id);
          }

          this.length = _ids.length;

          this._trigger("add", {
            items: _ids
          });
        } else {
          this._data = new DataSet();
        } // subscribe to new dataset


        if (this._data.on) {
          this._data.on("*", this._listener);
        }
      }
      /**
       * Refresh the DataView.
       * Useful when the DataView has a filter function containing a variable parameter.
       */

    }, {
      key: "refresh",
      value: function refresh() {
        var ids = this._data.getIds({
          filter: this._options.filter
        });

        var oldIds = toConsumableArray(this._ids);
        var newIds = {};
        var addedIds = [];
        var removedIds = [];
        var removedItems = []; // check for additions

        for (var i = 0, len = ids.length; i < len; i++) {
          var id = ids[i];
          newIds[id] = true;

          if (!this._ids.has(id)) {
            addedIds.push(id);

            this._ids.add(id);
          }
        } // check for removals


        for (var _i = 0, _len = oldIds.length; _i < _len; _i++) {
          var _id = oldIds[_i];

          var item = this._data.get(_id);

          if (item == null) {
            // @TODO: Investigate.
            // Doesn't happen during tests or examples.
            // Is it really impossible or could it eventually happen?
            // How to handle it if it does? The types guarantee non-nullable items.
            console.error("If you see this, report it please.");
          } else if (!newIds[_id]) {
            removedIds.push(_id);
            removedItems.push(item);

            this._ids.delete(_id);
          }
        }

        this.length += addedIds.length - removedIds.length; // trigger events

        if (addedIds.length) {
          this._trigger("add", {
            items: addedIds
          });
        }

        if (removedIds.length) {
          this._trigger("remove", {
            items: removedIds,
            oldData: removedItems
          });
        }
      }
      /** @inheritdoc */

    }, {
      key: "get",
      value: function get(first, second) {
        if (this._data == null) {
          return null;
        } // parse the arguments


        var ids = null;
        var options;

        if (isId(first) || Array.isArray(first)) {
          ids = first;
          options = second;
        } else {
          options = first;
        } // extend the options with the default options and provided options


        var viewOptions = Object.assign({}, this._options, options); // create a combined filter method when needed

        var thisFilter = this._options.filter;
        var optionsFilter = options && options.filter;

        if (thisFilter && optionsFilter) {
          viewOptions.filter = function (item) {
            return thisFilter(item) && optionsFilter(item);
          };
        }

        if (ids == null) {
          return this._data.get(viewOptions);
        } else {
          return this._data.get(ids, viewOptions);
        }
      }
      /** @inheritdoc */

    }, {
      key: "getIds",
      value: function getIds(options) {
        if (this._data.length) {
          var defaultFilter = this._options.filter;
          var optionsFilter = options != null ? options.filter : null;
          var filter;

          if (optionsFilter) {
            if (defaultFilter) {
              filter = function filter(item) {
                return defaultFilter(item) && optionsFilter(item);
              };
            } else {
              filter = optionsFilter;
            }
          } else {
            filter = defaultFilter;
          }

          return this._data.getIds({
            filter: filter,
            order: options && options.order
          });
        } else {
          return [];
        }
      }
      /** @inheritdoc */

    }, {
      key: "forEach",
      value: function forEach(callback, options) {
        if (this._data) {
          var defaultFilter = this._options.filter;
          var optionsFilter = options && options.filter;
          var filter;

          if (optionsFilter) {
            if (defaultFilter) {
              filter = function filter(item) {
                return defaultFilter(item) && optionsFilter(item);
              };
            } else {
              filter = optionsFilter;
            }
          } else {
            filter = defaultFilter;
          }

          this._data.forEach(callback, {
            filter: filter,
            order: options && options.order
          });
        }
      }
      /** @inheritdoc */

    }, {
      key: "map",
      value: function map(callback, options) {
        if (this._data) {
          var defaultFilter = this._options.filter;
          var optionsFilter = options && options.filter;
          var filter;

          if (optionsFilter) {
            if (defaultFilter) {
              filter = function filter(item) {
                return defaultFilter(item) && optionsFilter(item);
              };
            } else {
              filter = optionsFilter;
            }
          } else {
            filter = defaultFilter;
          }

          return this._data.map(callback, {
            filter: filter,
            order: options && options.order
          });
        } else {
          return [];
        }
      }
      /** @inheritdoc */

    }, {
      key: "getDataSet",
      value: function getDataSet() {
        return this._data.getDataSet();
      }
      /** @inheritdoc */

    }, {
      key: "stream",
      value: function stream(ids) {
        return this._data.stream(ids || defineProperty$1({}, Symbol.iterator, this._ids.keys.bind(this._ids)));
      }
      /**
       * Event listener. Will propagate all events from the connected data set to the subscribers of the DataView, but will filter the items and only trigger when there are changes in the filtered data set.
       *
       * @param event - The name of the event.
       * @param params - Parameters of the event.
       * @param senderId - Id supplied by the sender.
       */

    }, {
      key: "_onEvent",
      value: function _onEvent(event, params, senderId) {
        if (!params || !params.items || !this._data) {
          return;
        }

        var ids = params.items;
        var addedIds = [];
        var updatedIds = [];
        var removedIds = [];
        var oldItems = [];
        var updatedItems = [];
        var removedItems = [];

        switch (event) {
          case "add":
            // filter the ids of the added items
            for (var i = 0, len = ids.length; i < len; i++) {
              var id = ids[i];
              var item = this.get(id);

              if (item) {
                this._ids.add(id);

                addedIds.push(id);
              }
            }

            break;

          case "update":
            // determine the event from the views viewpoint: an updated
            // item can be added, updated, or removed from this view.
            for (var _i2 = 0, _len2 = ids.length; _i2 < _len2; _i2++) {
              var _id2 = ids[_i2];

              var _item = this.get(_id2);

              if (_item) {
                if (this._ids.has(_id2)) {
                  updatedIds.push(_id2);
                  updatedItems.push(params.data[_i2]);
                  oldItems.push(params.oldData[_i2]);
                } else {
                  this._ids.add(_id2);

                  addedIds.push(_id2);
                }
              } else {
                if (this._ids.has(_id2)) {
                  this._ids.delete(_id2);

                  removedIds.push(_id2);
                  removedItems.push(params.oldData[_i2]);
                }
              }
            }

            break;

          case "remove":
            // filter the ids of the removed items
            for (var _i3 = 0, _len3 = ids.length; _i3 < _len3; _i3++) {
              var _id3 = ids[_i3];

              if (this._ids.has(_id3)) {
                this._ids.delete(_id3);

                removedIds.push(_id3);
                removedItems.push(params.oldData[_i3]);
              }
            }

            break;
        }

        this.length += addedIds.length - removedIds.length;

        if (addedIds.length) {
          this._trigger("add", {
            items: addedIds
          }, senderId);
        }

        if (updatedIds.length) {
          this._trigger("update", {
            items: updatedIds,
            oldData: oldItems,
            data: updatedItems
          }, senderId);
        }

        if (removedIds.length) {
          this._trigger("remove", {
            items: removedIds,
            oldData: removedItems
          }, senderId);
        }
      }
    }]);
    return DataView;
  }(DataSetPart);

  var index = {
    DataSet: DataSet,
    DataView: DataView,
    Queue: Queue
  };

  var commonjsGlobal$2 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire$2 () {
  	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function createCommonjsModule$2(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var keycharm = createCommonjsModule$2(function (module, exports) {
    /**
     * Created by Alex on 11/6/2014.
     */
    // https://github.com/umdjs/umd/blob/master/returnExports.js#L40-L60
    // if the module has no dependencies, the above pattern can be simplified to

    (function (root, factory) {
      {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
      }
    })(commonjsGlobal$2, function () {
      function keycharm(options) {
        var preventDefault = options && options.preventDefault || false;
        var container = options && options.container || window;
        var _exportFunctions = {};
        var _bound = {
          keydown: {},
          keyup: {}
        };
        var _keys = {};
        var i; // a - z

        for (i = 97; i <= 122; i++) {
          _keys[String.fromCharCode(i)] = {
            code: 65 + (i - 97),
            shift: false
          };
        } // A - Z


        for (i = 65; i <= 90; i++) {
          _keys[String.fromCharCode(i)] = {
            code: i,
            shift: true
          };
        } // 0 - 9


        for (i = 0; i <= 9; i++) {
          _keys['' + i] = {
            code: 48 + i,
            shift: false
          };
        } // F1 - F12


        for (i = 1; i <= 12; i++) {
          _keys['F' + i] = {
            code: 111 + i,
            shift: false
          };
        } // num0 - num9


        for (i = 0; i <= 9; i++) {
          _keys['num' + i] = {
            code: 96 + i,
            shift: false
          };
        } // numpad misc


        _keys['num*'] = {
          code: 106,
          shift: false
        };
        _keys['num+'] = {
          code: 107,
          shift: false
        };
        _keys['num-'] = {
          code: 109,
          shift: false
        };
        _keys['num/'] = {
          code: 111,
          shift: false
        };
        _keys['num.'] = {
          code: 110,
          shift: false
        }; // arrows

        _keys['left'] = {
          code: 37,
          shift: false
        };
        _keys['up'] = {
          code: 38,
          shift: false
        };
        _keys['right'] = {
          code: 39,
          shift: false
        };
        _keys['down'] = {
          code: 40,
          shift: false
        }; // extra keys

        _keys['space'] = {
          code: 32,
          shift: false
        };
        _keys['enter'] = {
          code: 13,
          shift: false
        };
        _keys['shift'] = {
          code: 16,
          shift: undefined
        };
        _keys['esc'] = {
          code: 27,
          shift: false
        };
        _keys['backspace'] = {
          code: 8,
          shift: false
        };
        _keys['tab'] = {
          code: 9,
          shift: false
        };
        _keys['ctrl'] = {
          code: 17,
          shift: false
        };
        _keys['alt'] = {
          code: 18,
          shift: false
        };
        _keys['delete'] = {
          code: 46,
          shift: false
        };
        _keys['pageup'] = {
          code: 33,
          shift: false
        };
        _keys['pagedown'] = {
          code: 34,
          shift: false
        }; // symbols

        _keys['='] = {
          code: 187,
          shift: false
        };
        _keys['-'] = {
          code: 189,
          shift: false
        };
        _keys[']'] = {
          code: 221,
          shift: false
        };
        _keys['['] = {
          code: 219,
          shift: false
        };

        var down = function (event) {
          handleEvent(event, 'keydown');
        };

        var up = function (event) {
          handleEvent(event, 'keyup');
        }; // handle the actualy bound key with the event


        var handleEvent = function (event, type) {
          if (_bound[type][event.keyCode] !== undefined) {
            var bound = _bound[type][event.keyCode];

            for (var i = 0; i < bound.length; i++) {
              if (bound[i].shift === undefined) {
                bound[i].fn(event);
              } else if (bound[i].shift == true && event.shiftKey == true) {
                bound[i].fn(event);
              } else if (bound[i].shift == false && event.shiftKey == false) {
                bound[i].fn(event);
              }
            }

            if (preventDefault == true) {
              event.preventDefault();
            }
          }
        }; // bind a key to a callback


        _exportFunctions.bind = function (key, callback, type) {
          if (type === undefined) {
            type = 'keydown';
          }

          if (_keys[key] === undefined) {
            throw new Error("unsupported key: " + key);
          }

          if (_bound[type][_keys[key].code] === undefined) {
            _bound[type][_keys[key].code] = [];
          }

          _bound[type][_keys[key].code].push({
            fn: callback,
            shift: _keys[key].shift
          });
        }; // bind all keys to a call back (demo purposes)


        _exportFunctions.bindAll = function (callback, type) {
          if (type === undefined) {
            type = 'keydown';
          }

          for (var key in _keys) {
            if (_keys.hasOwnProperty(key)) {
              _exportFunctions.bind(key, callback, type);
            }
          }
        }; // get the key label from an event


        _exportFunctions.getKey = function (event) {
          for (var key in _keys) {
            if (_keys.hasOwnProperty(key)) {
              if (event.shiftKey == true && _keys[key].shift == true && event.keyCode == _keys[key].code) {
                return key;
              } else if (event.shiftKey == false && _keys[key].shift == false && event.keyCode == _keys[key].code) {
                return key;
              } else if (event.keyCode == _keys[key].code && key == 'shift') {
                return key;
              }
            }
          }

          return "unknown key, currently not supported";
        }; // unbind either a specific callback from a key or all of them (by leaving callback undefined)


        _exportFunctions.unbind = function (key, callback, type) {
          if (type === undefined) {
            type = 'keydown';
          }

          if (_keys[key] === undefined) {
            throw new Error("unsupported key: " + key);
          }

          if (callback !== undefined) {
            var newBindings = [];
            var bound = _bound[type][_keys[key].code];

            if (bound !== undefined) {
              for (var i = 0; i < bound.length; i++) {
                if (!(bound[i].fn == callback && bound[i].shift == _keys[key].shift)) {
                  newBindings.push(_bound[type][_keys[key].code][i]);
                }
              }
            }

            _bound[type][_keys[key].code] = newBindings;
          } else {
            _bound[type][_keys[key].code] = [];
          }
        }; // reset all bound variables.


        _exportFunctions.reset = function () {
          _bound = {
            keydown: {},
            keyup: {}
          };
        }; // unbind all listeners and reset all variables.


        _exportFunctions.destroy = function () {
          _bound = {
            keydown: {},
            keyup: {}
          };
          container.removeEventListener('keydown', down, true);
          container.removeEventListener('keyup', up, true);
        }; // create listeners.


        container.addEventListener('keydown', down, true);
        container.addEventListener('keyup', up, true); // return the public functions.

        return _exportFunctions;
      }

      return keycharm;
    });
  });

  /**
   * vis-network - network
   * http://visjs.org/
   *
   * A dynamic, browser-based visualization library.
   *
   * @version 6.3.2
   * @date    2019-11-08T19:05:41Z
   *
   * @copyright (c) 2011-2017 Almende B.V, http://almende.com
   * @copyright (c) 2018-2019 visjs contributors, https://github.com/visjs
   *
   * @license 
   * vis.js is dual licensed under both
   *
   *   1. The Apache 2.0 License
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   *   and
   *
   *   2. The MIT License
   *      http://opensource.org/licenses/MIT
   *
   * vis.js may be distributed under either license.
   */
  "undefined" != typeof CanvasRenderingContext2D && (CanvasRenderingContext2D.prototype.circle = function (t, e, i) {
    this.beginPath(), this.arc(t, e, i, 0, 2 * Math.PI, !1), this.closePath();
  }, CanvasRenderingContext2D.prototype.square = function (t, e, i) {
    this.beginPath(), this.rect(t - i, e - i, 2 * i, 2 * i), this.closePath();
  }, CanvasRenderingContext2D.prototype.triangle = function (t, e, i) {
    this.beginPath(), e += .275 * (i *= 1.15);
    var o = 2 * i,
        n = o / 2,
        s = Math.sqrt(3) / 6 * o,
        r = Math.sqrt(o * o - n * n);
    this.moveTo(t, e - (r - s)), this.lineTo(t + n, e + s), this.lineTo(t - n, e + s), this.lineTo(t, e - (r - s)), this.closePath();
  }, CanvasRenderingContext2D.prototype.triangleDown = function (t, e, i) {
    this.beginPath(), e -= .275 * (i *= 1.15);
    var o = 2 * i,
        n = o / 2,
        s = Math.sqrt(3) / 6 * o,
        r = Math.sqrt(o * o - n * n);
    this.moveTo(t, e + (r - s)), this.lineTo(t + n, e - s), this.lineTo(t - n, e - s), this.lineTo(t, e + (r - s)), this.closePath();
  }, CanvasRenderingContext2D.prototype.star = function (t, e, i) {
    this.beginPath(), e += .1 * (i *= .82);

    for (var o = 0; o < 10; o++) {
      var n = o % 2 == 0 ? 1.3 * i : .5 * i;
      this.lineTo(t + n * Math.sin(2 * o * Math.PI / 10), e - n * Math.cos(2 * o * Math.PI / 10));
    }

    this.closePath();
  }, CanvasRenderingContext2D.prototype.diamond = function (t, e, i) {
    this.beginPath(), this.lineTo(t, e + i), this.lineTo(t + i, e), this.lineTo(t, e - i), this.lineTo(t - i, e), this.closePath();
  }, CanvasRenderingContext2D.prototype.roundRect = function (t, e, i, o, n) {
    var s = Math.PI / 180;
    i - 2 * n < 0 && (n = i / 2), o - 2 * n < 0 && (n = o / 2), this.beginPath(), this.moveTo(t + n, e), this.lineTo(t + i - n, e), this.arc(t + i - n, e + n, n, 270 * s, 360 * s, !1), this.lineTo(t + i, e + o - n), this.arc(t + i - n, e + o - n, n, 0, 90 * s, !1), this.lineTo(t + n, e + o), this.arc(t + n, e + o - n, n, 90 * s, 180 * s, !1), this.lineTo(t, e + n), this.arc(t + n, e + n, n, 180 * s, 270 * s, !1), this.closePath();
  }, CanvasRenderingContext2D.prototype.ellipse_vis = function (t, e, i, o) {
    var n = i / 2 * .5522848,
        s = o / 2 * .5522848,
        r = t + i,
        a = e + o,
        h = t + i / 2,
        d = e + o / 2;
    this.beginPath(), this.moveTo(t, d), this.bezierCurveTo(t, d - s, h - n, e, h, e), this.bezierCurveTo(h + n, e, r, d - s, r, d), this.bezierCurveTo(r, d + s, h + n, a, h, a), this.bezierCurveTo(h - n, a, t, d + s, t, d), this.closePath();
  }, CanvasRenderingContext2D.prototype.database = function (t, e, i, o) {
    var n = o * (1 / 3),
        s = i / 2 * .5522848,
        r = n / 2 * .5522848,
        a = t + i,
        h = e + n,
        d = t + i / 2,
        l = e + n / 2,
        c = e + (o - n / 2),
        u = e + o;
    this.beginPath(), this.moveTo(a, l), this.bezierCurveTo(a, l + r, d + s, h, d, h), this.bezierCurveTo(d - s, h, t, l + r, t, l), this.bezierCurveTo(t, l - r, d - s, e, d, e), this.bezierCurveTo(d + s, e, a, l - r, a, l), this.lineTo(a, c), this.bezierCurveTo(a, c + r, d + s, u, d, u), this.bezierCurveTo(d - s, u, t, c + r, t, c), this.lineTo(t, l);
  }, CanvasRenderingContext2D.prototype.dashedLine = function (t, e, i, o, n) {
    this.beginPath(), this.moveTo(t, e);

    for (var s = n.length, r = i - t, a = o - e, h = a / r, d = Math.sqrt(r * r + a * a), l = 0, c = !0, u = 0, p = +n[0]; d >= .1;) (p = +n[l++ % s]) > d && (p = d), u = Math.sqrt(p * p / (1 + h * h)), t += u = r < 0 ? -u : u, e += h * u, !0 === c ? this.lineTo(t, e) : this.moveTo(t, e), d -= p, c = !c;
  }, CanvasRenderingContext2D.prototype.hexagon = function (t, e, i) {
    this.beginPath();
    var o = 2 * Math.PI / 6;
    this.moveTo(t + i, e);

    for (var n = 1; n < 6; n++) this.lineTo(t + i * Math.cos(o * n), e + i * Math.sin(o * n));

    this.closePath();
  });
  var P = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};

  function F(t, e) {
    return t(e = {
      exports: {}
    }, e.exports), e.exports;
  }

  function z(t) {
    return t && t.default || t;
  }

  var N,
      B,
      A,
      R = function (t) {
    return t && t.Math == Math && t;
  },
      j$2 = R("object" == typeof globalThis && globalThis) || R("object" == typeof window && window) || R("object" == typeof self && self) || R("object" == typeof P && P) || Function("return this")(),
      L = function (t) {
    try {
      return !!t();
    } catch (t) {
      return !0;
    }
  },
      H = !L(function () {
    return 7 != Object.defineProperty({}, "a", {
      get: function () {
        return 7;
      }
    }).a;
  }),
      W = {}.propertyIsEnumerable,
      V = Object.getOwnPropertyDescriptor,
      q = {
    f: V && !W.call({
      1: 2
    }, 1) ? function (t) {
      var e = V(this, t);
      return !!e && e.enumerable;
    } : W
  },
      U = function (t, e) {
    return {
      enumerable: !(1 & t),
      configurable: !(2 & t),
      writable: !(4 & t),
      value: e
    };
  },
      Y = {}.toString,
      X = function (t) {
    return Y.call(t).slice(8, -1);
  },
      G = "".split,
      K = L(function () {
    return !Object("z").propertyIsEnumerable(0);
  }) ? function (t) {
    return "String" == X(t) ? G.call(t, "") : Object(t);
  } : Object,
      $ = function (t) {
    if (null == t) throw TypeError("Can't call method on " + t);
    return t;
  },
      Z = function (t) {
    return K($(t));
  },
      J = function (t) {
    return "object" == typeof t ? null !== t : "function" == typeof t;
  },
      Q = function (t, e) {
    if (!J(t)) return t;
    var i, o;
    if (e && "function" == typeof (i = t.toString) && !J(o = i.call(t))) return o;
    if ("function" == typeof (i = t.valueOf) && !J(o = i.call(t))) return o;
    if (!e && "function" == typeof (i = t.toString) && !J(o = i.call(t))) return o;
    throw TypeError("Can't convert object to primitive value");
  },
      tt = {}.hasOwnProperty,
      et = function (t, e) {
    return tt.call(t, e);
  },
      it = j$2.document,
      ot = J(it) && J(it.createElement),
      nt = function (t) {
    return ot ? it.createElement(t) : {};
  },
      st = !H && !L(function () {
    return 7 != Object.defineProperty(nt("div"), "a", {
      get: function () {
        return 7;
      }
    }).a;
  }),
      rt = Object.getOwnPropertyDescriptor,
      at$1 = {
    f: H ? rt : function (t, e) {
      if (t = Z(t), e = Q(e, !0), st) try {
        return rt(t, e);
      } catch (t) {}
      if (et(t, e)) return U(!q.f.call(t, e), t[e]);
    }
  },
      ht = function (t) {
    if (!J(t)) throw TypeError(String(t) + " is not an object");
    return t;
  },
      dt = Object.defineProperty,
      lt = {
    f: H ? dt : function (t, e, i) {
      if (ht(t), e = Q(e, !0), ht(i), st) try {
        return dt(t, e, i);
      } catch (t) {}
      if ("get" in i || "set" in i) throw TypeError("Accessors not supported");
      return "value" in i && (t[e] = i.value), t;
    }
  },
      ct = H ? function (t, e, i) {
    return lt.f(t, e, U(1, i));
  } : function (t, e, i) {
    return t[e] = i, t;
  },
      ut = function (t, e) {
    try {
      ct(j$2, t, e);
    } catch (i) {
      j$2[t] = e;
    }

    return e;
  },
      pt = j$2["__core-js_shared__"] || ut("__core-js_shared__", {}),
      ft = F(function (t) {
    (t.exports = function (t, e) {
      return pt[t] || (pt[t] = void 0 !== e ? e : {});
    })("versions", []).push({
      version: "3.3.4",
      mode: "global",
      copyright: "Â© 2019 Denis Pushkarev (zloirock.ru)"
    });
  }),
      vt = ft("native-function-to-string", Function.toString),
      gt = j$2.WeakMap,
      yt = "function" == typeof gt && /native code/.test(vt.call(gt)),
      mt = 0,
      bt = Math.random(),
      wt = function (t) {
    return "Symbol(" + String(void 0 === t ? "" : t) + ")_" + (++mt + bt).toString(36);
  },
      kt = ft("keys"),
      _t = function (t) {
    return kt[t] || (kt[t] = wt(t));
  },
      xt = {},
      Et = j$2.WeakMap;

  if (yt) {
    var Ot = new Et(),
        Ct = Ot.get,
        St = Ot.has,
        Tt = Ot.set;
    N = function (t, e) {
      return Tt.call(Ot, t, e), e;
    }, B = function (t) {
      return Ct.call(Ot, t) || {};
    }, A = function (t) {
      return St.call(Ot, t);
    };
  } else {
    var Mt = _t("state");

    xt[Mt] = !0, N = function (t, e) {
      return ct(t, Mt, e), e;
    }, B = function (t) {
      return et(t, Mt) ? t[Mt] : {};
    }, A = function (t) {
      return et(t, Mt);
    };
  }

  var Dt,
      It,
      Pt = {
    set: N,
    get: B,
    has: A,
    enforce: function (t) {
      return A(t) ? B(t) : N(t, {});
    },
    getterFor: function (t) {
      return function (e) {
        var i;
        if (!J(e) || (i = B(e)).type !== t) throw TypeError("Incompatible receiver, " + t + " required");
        return i;
      };
    }
  },
      Ft = F(function (t) {
    var e = Pt.get,
        i = Pt.enforce,
        o = String(vt).split("toString");
    ft("inspectSource", function (t) {
      return vt.call(t);
    }), (t.exports = function (t, e, n, s) {
      var r = !!s && !!s.unsafe,
          a = !!s && !!s.enumerable,
          h = !!s && !!s.noTargetGet;
      "function" == typeof n && ("string" != typeof e || et(n, "name") || ct(n, "name", e), i(n).source = o.join("string" == typeof e ? e : "")), t !== j$2 ? (r ? !h && t[e] && (a = !0) : delete t[e], a ? t[e] = n : ct(t, e, n)) : a ? t[e] = n : ut(e, n);
    })(Function.prototype, "toString", function () {
      return "function" == typeof this && e(this).source || vt.call(this);
    });
  }),
      zt = j$2,
      Nt = function (t) {
    return "function" == typeof t ? t : void 0;
  },
      Bt = function (t, e) {
    return arguments.length < 2 ? Nt(zt[t]) || Nt(j$2[t]) : zt[t] && zt[t][e] || j$2[t] && j$2[t][e];
  },
      At = Math.ceil,
      Rt = Math.floor,
      jt = function (t) {
    return isNaN(t = +t) ? 0 : (t > 0 ? Rt : At)(t);
  },
      Lt = Math.min,
      Ht = function (t) {
    return t > 0 ? Lt(jt(t), 9007199254740991) : 0;
  },
      Wt = Math.max,
      Vt = Math.min,
      qt = function (t, e) {
    var i = jt(t);
    return i < 0 ? Wt(i + e, 0) : Vt(i, e);
  },
      Ut = function (t) {
    return function (e, i, o) {
      var n,
          s = Z(e),
          r = Ht(s.length),
          a = qt(o, r);

      if (t && i != i) {
        for (; r > a;) if ((n = s[a++]) != n) return !0;
      } else for (; r > a; a++) if ((t || a in s) && s[a] === i) return t || a || 0;

      return !t && -1;
    };
  },
      Yt = {
    includes: Ut(!0),
    indexOf: Ut(!1)
  },
      Xt = Yt.indexOf,
      Gt = function (t, e) {
    var i,
        o = Z(t),
        n = 0,
        s = [];

    for (i in o) !et(xt, i) && et(o, i) && s.push(i);

    for (; e.length > n;) et(o, i = e[n++]) && (~Xt(s, i) || s.push(i));

    return s;
  },
      Kt = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"],
      $t = Kt.concat("length", "prototype"),
      Zt = {
    f: Object.getOwnPropertyNames || function (t) {
      return Gt(t, $t);
    }
  },
      Jt = {
    f: Object.getOwnPropertySymbols
  },
      Qt = Bt("Reflect", "ownKeys") || function (t) {
    var e = Zt.f(ht(t)),
        i = Jt.f;
    return i ? e.concat(i(t)) : e;
  },
      te = function (t, e) {
    for (var i = Qt(e), o = lt.f, n = at$1.f, s = 0; s < i.length; s++) {
      var r = i[s];
      et(t, r) || o(t, r, n(e, r));
    }
  },
      ee = /#|\.prototype\./,
      ie = function (t, e) {
    var i = ne[oe(t)];
    return i == re || i != se && ("function" == typeof e ? L(e) : !!e);
  },
      oe = ie.normalize = function (t) {
    return String(t).replace(ee, ".").toLowerCase();
  },
      ne = ie.data = {},
      se = ie.NATIVE = "N",
      re = ie.POLYFILL = "P",
      ae = ie,
      he = at$1.f,
      de = function (t, e) {
    var i,
        o,
        n,
        s,
        r,
        a = t.target,
        h = t.global,
        d = t.stat;
    if (i = h ? j$2 : d ? j$2[a] || ut(a, {}) : (j$2[a] || {}).prototype) for (o in e) {
      if (s = e[o], n = t.noTargetGet ? (r = he(i, o)) && r.value : i[o], !ae(h ? o : a + (d ? "." : "#") + o, t.forced) && void 0 !== n) {
        if (typeof s == typeof n) continue;
        te(s, n);
      }

      (t.sham || n && n.sham) && ct(s, "sham", !0), Ft(i, o, s, t);
    }
  },
      le = Array.isArray || function (t) {
    return "Array" == X(t);
  },
      ce = function (t, e, i) {
    var o = Q(e);
    o in t ? lt.f(t, o, U(0, i)) : t[o] = i;
  },
      ue = !!Object.getOwnPropertySymbols && !L(function () {
    return !String(Symbol());
  }),
      pe = j$2.Symbol,
      fe = ft("wks"),
      ve = function (t) {
    return fe[t] || (fe[t] = ue && pe[t] || (ue ? pe : wt)("Symbol." + t));
  },
      ge = Bt("navigator", "userAgent") || "",
      ye = j$2.process,
      me = ye && ye.versions,
      be = me && me.v8;

  be ? It = (Dt = be.split("."))[0] + Dt[1] : ge && (Dt = ge.match(/Chrome\/(\d+)/)) && (It = Dt[1]);

  var we = It && +It,
      ke = ve("species"),
      _e = function (t) {
    return we >= 51 || !L(function () {
      var e = [];
      return (e.constructor = {})[ke] = function () {
        return {
          foo: 1
        };
      }, 1 !== e[t](Boolean).foo;
    });
  },
      xe = ve("species"),
      Ee = [].slice,
      Oe = Math.max;

  de({
    target: "Array",
    proto: !0,
    forced: !_e("slice")
  }, {
    slice: function (t, e) {
      var i,
          o,
          n,
          s = Z(this),
          r = Ht(s.length),
          a = qt(t, r),
          h = qt(void 0 === e ? r : e, r);
      if (le(s) && ("function" != typeof (i = s.constructor) || i !== Array && !le(i.prototype) ? J(i) && null === (i = i[xe]) && (i = void 0) : i = void 0, i === Array || void 0 === i)) return Ee.call(s, a, h);

      for (o = new (void 0 === i ? Array : i)(Oe(h - a, 0)), n = 0; a < h; a++, n++) a in s && ce(o, n, s[a]);

      return o.length = n, o;
    }
  });

  var Ce = function (t) {
    return Object($(t));
  },
      Se = ve("species"),
      Te = function (t, e) {
    var i;
    return le(t) && ("function" != typeof (i = t.constructor) || i !== Array && !le(i.prototype) ? J(i) && null === (i = i[Se]) && (i = void 0) : i = void 0), new (void 0 === i ? Array : i)(0 === e ? 0 : e);
  },
      Me = Math.max,
      De = Math.min;

  de({
    target: "Array",
    proto: !0,
    forced: !_e("splice")
  }, {
    splice: function (t, e) {
      var i,
          o,
          n,
          s,
          r,
          a,
          h = Ce(this),
          d = Ht(h.length),
          l = qt(t, d),
          c = arguments.length;
      if (0 === c ? i = o = 0 : 1 === c ? (i = 0, o = d - l) : (i = c - 2, o = De(Me(jt(e), 0), d - l)), d + i - o > 9007199254740991) throw TypeError("Maximum allowed length exceeded");

      for (n = Te(h, o), s = 0; s < o; s++) (r = l + s) in h && ce(n, s, h[r]);

      if (n.length = o, i < o) {
        for (s = l; s < d - o; s++) a = s + i, (r = s + o) in h ? h[a] = h[r] : delete h[a];

        for (s = d; s > d - o + i; s--) delete h[s - 1];
      } else if (i > o) for (s = d - o; s > l; s--) a = s + i - 1, (r = s + o - 1) in h ? h[a] = h[r] : delete h[a];

      for (s = 0; s < i; s++) h[s + l] = arguments[s + 2];

      return h.length = d - o + i, n;
    }
  });

  var Ie = F(function (t) {
    function e(t) {
      if (t) return function (t) {
        for (var i in e.prototype) t[i] = e.prototype[i];

        return t;
      }(t);
    }

    t.exports = e, e.prototype.on = e.prototype.addEventListener = function (t, e) {
      return this._callbacks = this._callbacks || {}, (this._callbacks["$" + t] = this._callbacks["$" + t] || []).push(e), this;
    }, e.prototype.once = function (t, e) {
      function i() {
        this.off(t, i), e.apply(this, arguments);
      }

      return i.fn = e, this.on(t, i), this;
    }, e.prototype.off = e.prototype.removeListener = e.prototype.removeAllListeners = e.prototype.removeEventListener = function (t, e) {
      if (this._callbacks = this._callbacks || {}, 0 == arguments.length) return this._callbacks = {}, this;
      var i,
          o = this._callbacks["$" + t];
      if (!o) return this;
      if (1 == arguments.length) return delete this._callbacks["$" + t], this;

      for (var n = 0; n < o.length; n++) if ((i = o[n]) === e || i.fn === e) {
        o.splice(n, 1);
        break;
      }

      return 0 === o.length && delete this._callbacks["$" + t], this;
    }, e.prototype.emit = function (t) {
      this._callbacks = this._callbacks || {};

      for (var e = new Array(arguments.length - 1), i = this._callbacks["$" + t], o = 1; o < arguments.length; o++) e[o - 1] = arguments[o];

      if (i) {
        o = 0;

        for (var n = (i = i.slice(0)).length; o < n; ++o) i[o].apply(this, e);
      }

      return this;
    }, e.prototype.listeners = function (t) {
      return this._callbacks = this._callbacks || {}, this._callbacks["$" + t] || [];
    }, e.prototype.hasListeners = function (t) {
      return !!this.listeners(t).length;
    };
  }),
      Pe = function (t) {
    if ("function" != typeof t) throw TypeError(String(t) + " is not a function");
    return t;
  },
      Fe = function (t, e, i) {
    if (Pe(t), void 0 === e) return t;

    switch (i) {
      case 0:
        return function () {
          return t.call(e);
        };

      case 1:
        return function (i) {
          return t.call(e, i);
        };

      case 2:
        return function (i, o) {
          return t.call(e, i, o);
        };

      case 3:
        return function (i, o, n) {
          return t.call(e, i, o, n);
        };
    }

    return function () {
      return t.apply(e, arguments);
    };
  },
      ze = [].push,
      Ne = function (t) {
    var e = 1 == t,
        i = 2 == t,
        o = 3 == t,
        n = 4 == t,
        s = 6 == t,
        r = 5 == t || s;
    return function (a, h, d, l) {
      for (var c, u, p = Ce(a), f = K(p), v = Fe(h, d, 3), g = Ht(f.length), y = 0, m = l || Te, b = e ? m(a, g) : i ? m(a, 0) : void 0; g > y; y++) if ((r || y in f) && (u = v(c = f[y], y, p), t)) if (e) b[y] = u;else if (u) switch (t) {
        case 3:
          return !0;

        case 5:
          return c;

        case 6:
          return y;

        case 2:
          ze.call(b, c);
      } else if (n) return !1;

      return s ? -1 : o || n ? n : b;
    };
  },
      Be = {
    forEach: Ne(0),
    map: Ne(1),
    filter: Ne(2),
    some: Ne(3),
    every: Ne(4),
    find: Ne(5),
    findIndex: Ne(6)
  },
      Ae = function (t, e) {
    var i = [][t];
    return !i || !L(function () {
      i.call(null, e || function () {
        throw 1;
      }, 1);
    });
  },
      Re = Be.forEach,
      je = Ae("forEach") ? function (t) {
    return Re(this, t, arguments.length > 1 ? arguments[1] : void 0);
  } : [].forEach;

  de({
    target: "Array",
    proto: !0,
    forced: [].forEach != je
  }, {
    forEach: je
  });

  var Le = Object.keys || function (t) {
    return Gt(t, Kt);
  },
      He = H ? Object.defineProperties : function (t, e) {
    ht(t);

    for (var i, o = Le(e), n = o.length, s = 0; n > s;) lt.f(t, i = o[s++], e[i]);

    return t;
  },
      We = Bt("document", "documentElement"),
      Ve = _t("IE_PROTO"),
      qe = function () {},
      Ue = function () {
    var t,
        e = nt("iframe"),
        i = Kt.length;

    for (e.style.display = "none", We.appendChild(e), e.src = String("javascript:"), (t = e.contentWindow.document).open(), t.write("<script>document.F=Object<\/script>"), t.close(), Ue = t.F; i--;) delete Ue.prototype[Kt[i]];

    return Ue();
  },
      Ye = Object.create || function (t, e) {
    var i;
    return null !== t ? (qe.prototype = ht(t), i = new qe(), qe.prototype = null, i[Ve] = t) : i = Ue(), void 0 === e ? i : He(i, e);
  };

  xt[Ve] = !0;
  var Xe = ve("unscopables"),
      Ge = Array.prototype;
  null == Ge[Xe] && ct(Ge, Xe, Ye(null));

  var Ke = function (t) {
    Ge[Xe][t] = !0;
  },
      $e = Yt.includes;

  de({
    target: "Array",
    proto: !0
  }, {
    includes: function (t) {
      return $e(this, t, arguments.length > 1 ? arguments[1] : void 0);
    }
  }), Ke("includes");
  var Ze = Yt.indexOf,
      Je = [].indexOf,
      Qe = !!Je && 1 / [1].indexOf(1, -0) < 0,
      ti = Ae("indexOf");
  de({
    target: "Array",
    proto: !0,
    forced: Qe || ti
  }, {
    indexOf: function (t) {
      return Qe ? Je.apply(this, arguments) || 0 : Ze(this, t, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  var ei = lt.f,
      ii = Function.prototype,
      oi = ii.toString,
      ni = /^\s*function ([^ (]*)/;
  !H || "name" in ii || ei(ii, "name", {
    configurable: !0,
    get: function () {
      try {
        return oi.call(this).match(ni)[1];
      } catch (t) {
        return "";
      }
    }
  });

  var si = Object.setPrototypeOf || ("__proto__" in {} ? function () {
    var t,
        e = !1,
        i = {};

    try {
      (t = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(i, []), e = i instanceof Array;
    } catch (t) {}

    return function (i, o) {
      return ht(i), function (t) {
        if (!J(t) && null !== t) throw TypeError("Can't set " + String(t) + " as a prototype");
      }(o), e ? t.call(i, o) : i.__proto__ = o, i;
    };
  }() : void 0),
      ri = function (t, e, i) {
    var o, n;
    return si && "function" == typeof (o = e.constructor) && o !== i && J(n = o.prototype) && n !== i.prototype && si(t, n), t;
  },
      ai = "\t\n\v\f\r Â áââââââââââââ¯âã\u2028\u2029\ufeff",
      hi = "[" + ai + "]",
      di = RegExp("^" + hi + hi + "*"),
      li = RegExp(hi + hi + "*$"),
      ci = function (t) {
    return function (e) {
      var i = String($(e));
      return 1 & t && (i = i.replace(di, "")), 2 & t && (i = i.replace(li, "")), i;
    };
  },
      ui = {
    start: ci(1),
    end: ci(2),
    trim: ci(3)
  },
      pi = Zt.f,
      fi = at$1.f,
      vi = lt.f,
      gi = ui.trim,
      yi = j$2.Number,
      mi = yi.prototype,
      bi = "Number" == X(Ye(mi)),
      wi = function (t) {
    var e,
        i,
        o,
        n,
        s,
        r,
        a,
        h,
        d = Q(t, !1);
    if ("string" == typeof d && d.length > 2) if (43 === (e = (d = gi(d)).charCodeAt(0)) || 45 === e) {
      if (88 === (i = d.charCodeAt(2)) || 120 === i) return NaN;
    } else if (48 === e) {
      switch (d.charCodeAt(1)) {
        case 66:
        case 98:
          o = 2, n = 49;
          break;

        case 79:
        case 111:
          o = 8, n = 55;
          break;

        default:
          return +d;
      }

      for (r = (s = d.slice(2)).length, a = 0; a < r; a++) if ((h = s.charCodeAt(a)) < 48 || h > n) return NaN;

      return parseInt(s, o);
    }
    return +d;
  };

  if (ae("Number", !yi(" 0o1") || !yi("0b1") || yi("+0x1"))) {
    for (var ki, _i = function (t) {
      var e = arguments.length < 1 ? 0 : t,
          i = this;
      return i instanceof _i && (bi ? L(function () {
        mi.valueOf.call(i);
      }) : "Number" != X(i)) ? ri(new yi(wi(e)), i, _i) : wi(e);
    }, xi = H ? pi(yi) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","), Ei = 0; xi.length > Ei; Ei++) et(yi, ki = xi[Ei]) && !et(_i, ki) && vi(_i, ki, fi(yi, ki));

    _i.prototype = mi, mi.constructor = _i, Ft(j$2, "Number", _i);
  }

  var Oi = function () {
    var t = ht(this),
        e = "";
    return t.global && (e += "g"), t.ignoreCase && (e += "i"), t.multiline && (e += "m"), t.dotAll && (e += "s"), t.unicode && (e += "u"), t.sticky && (e += "y"), e;
  },
      Ci = RegExp.prototype.exec,
      Si = String.prototype.replace,
      Ti = Ci,
      Mi = function () {
    var t = /a/,
        e = /b*/g;
    return Ci.call(t, "a"), Ci.call(e, "a"), 0 !== t.lastIndex || 0 !== e.lastIndex;
  }(),
      Di = void 0 !== /()??/.exec("")[1];

  (Mi || Di) && (Ti = function (t) {
    var e,
        i,
        o,
        n,
        s = this;
    return Di && (i = new RegExp("^" + s.source + "$(?!\\s)", Oi.call(s))), Mi && (e = s.lastIndex), o = Ci.call(s, t), Mi && o && (s.lastIndex = s.global ? o.index + o[0].length : e), Di && o && o.length > 1 && Si.call(o[0], i, function () {
      for (n = 1; n < arguments.length - 2; n++) void 0 === arguments[n] && (o[n] = void 0);
    }), o;
  });
  var Ii = Ti;
  de({
    target: "RegExp",
    proto: !0,
    forced: /./.exec !== Ii
  }, {
    exec: Ii
  });

  var Pi = ve("match"),
      Fi = function (t) {
    var e;
    return J(t) && (void 0 !== (e = t[Pi]) ? !!e : "RegExp" == X(t));
  },
      zi = function (t) {
    if (Fi(t)) throw TypeError("The method doesn't accept regular expressions");
    return t;
  },
      Ni = ve("match");

  de({
    target: "String",
    proto: !0,
    forced: !function (t) {
      var e = /./;

      try {
        "/./"[t](e);
      } catch (i) {
        try {
          return e[Ni] = !1, "/./"[t](e);
        } catch (t) {}
      }

      return !1;
    }("includes")
  }, {
    includes: function (t) {
      return !!~String($(this)).indexOf(zi(t), arguments.length > 1 ? arguments[1] : void 0);
    }
  });

  var Bi = ve("species"),
      Ai = !L(function () {
    var t = /./;
    return t.exec = function () {
      var t = [];
      return t.groups = {
        a: "7"
      }, t;
    }, "7" !== "".replace(t, "$<a>");
  }),
      Ri = !L(function () {
    var t = /(?:)/,
        e = t.exec;

    t.exec = function () {
      return e.apply(this, arguments);
    };

    var i = "ab".split(t);
    return 2 !== i.length || "a" !== i[0] || "b" !== i[1];
  }),
      ji = function (t, e, i, o) {
    var n = ve(t),
        s = !L(function () {
      var e = {};
      return e[n] = function () {
        return 7;
      }, 7 != ""[t](e);
    }),
        r = s && !L(function () {
      var e = !1,
          i = /a/;
      return "split" === t && ((i = {}).constructor = {}, i.constructor[Bi] = function () {
        return i;
      }, i.flags = "", i[n] = /./[n]), i.exec = function () {
        return e = !0, null;
      }, i[n](""), !e;
    });

    if (!s || !r || "replace" === t && !Ai || "split" === t && !Ri) {
      var a = /./[n],
          h = i(n, ""[t], function (t, e, i, o, n) {
        return e.exec === Ii ? s && !n ? {
          done: !0,
          value: a.call(e, i, o)
        } : {
          done: !0,
          value: t.call(i, e, o)
        } : {
          done: !1
        };
      }),
          d = h[0],
          l = h[1];
      Ft(String.prototype, t, d), Ft(RegExp.prototype, n, 2 == e ? function (t, e) {
        return l.call(t, this, e);
      } : function (t) {
        return l.call(t, this);
      }), o && ct(RegExp.prototype[n], "sham", !0);
    }
  },
      Li = ve("species"),
      Hi = function (t) {
    return function (e, i) {
      var o,
          n,
          s = String($(e)),
          r = jt(i),
          a = s.length;
      return r < 0 || r >= a ? t ? "" : void 0 : (o = s.charCodeAt(r)) < 55296 || o > 56319 || r + 1 === a || (n = s.charCodeAt(r + 1)) < 56320 || n > 57343 ? t ? s.charAt(r) : o : t ? s.slice(r, r + 2) : n - 56320 + (o - 55296 << 10) + 65536;
    };
  },
      Wi = {
    codeAt: Hi(!1),
    charAt: Hi(!0)
  },
      Vi = Wi.charAt,
      qi = function (t, e, i) {
    return e + (i ? Vi(t, e).length : 1);
  },
      Ui = function (t, e) {
    var i = t.exec;

    if ("function" == typeof i) {
      var o = i.call(t, e);
      if ("object" != typeof o) throw TypeError("RegExp exec method returned something other than an Object or null");
      return o;
    }

    if ("RegExp" !== X(t)) throw TypeError("RegExp#exec called on incompatible receiver");
    return Ii.call(t, e);
  },
      Yi = [].push,
      Xi = Math.min,
      Gi = !L(function () {
    return !RegExp(4294967295, "y");
  });

  ji("split", 2, function (t, e, i) {
    var o;
    return o = "c" == "abbc".split(/(b)*/)[1] || 4 != "test".split(/(?:)/, -1).length || 2 != "ab".split(/(?:ab)*/).length || 4 != ".".split(/(.?)(.?)/).length || ".".split(/()()/).length > 1 || "".split(/.?/).length ? function (t, i) {
      var o = String($(this)),
          n = void 0 === i ? 4294967295 : i >>> 0;
      if (0 === n) return [];
      if (void 0 === t) return [o];
      if (!Fi(t)) return e.call(o, t, n);

      for (var s, r, a, h = [], d = (t.ignoreCase ? "i" : "") + (t.multiline ? "m" : "") + (t.unicode ? "u" : "") + (t.sticky ? "y" : ""), l = 0, c = new RegExp(t.source, d + "g"); (s = Ii.call(c, o)) && !((r = c.lastIndex) > l && (h.push(o.slice(l, s.index)), s.length > 1 && s.index < o.length && Yi.apply(h, s.slice(1)), a = s[0].length, l = r, h.length >= n));) c.lastIndex === s.index && c.lastIndex++;

      return l === o.length ? !a && c.test("") || h.push("") : h.push(o.slice(l)), h.length > n ? h.slice(0, n) : h;
    } : "0".split(void 0, 0).length ? function (t, i) {
      return void 0 === t && 0 === i ? [] : e.call(this, t, i);
    } : e, [function (e, i) {
      var n = $(this),
          s = null == e ? void 0 : e[t];
      return void 0 !== s ? s.call(e, n, i) : o.call(String(n), e, i);
    }, function (t, n) {
      var s = i(o, t, this, n, o !== e);
      if (s.done) return s.value;

      var r = ht(t),
          a = String(this),
          h = function (t, e) {
        var i,
            o = ht(t).constructor;
        return void 0 === o || null == (i = ht(o)[Li]) ? e : Pe(i);
      }(r, RegExp),
          d = r.unicode,
          l = (r.ignoreCase ? "i" : "") + (r.multiline ? "m" : "") + (r.unicode ? "u" : "") + (Gi ? "y" : "g"),
          c = new h(Gi ? r : "^(?:" + r.source + ")", l),
          u = void 0 === n ? 4294967295 : n >>> 0;

      if (0 === u) return [];
      if (0 === a.length) return null === Ui(c, a) ? [a] : [];

      for (var p = 0, f = 0, v = []; f < a.length;) {
        c.lastIndex = Gi ? f : 0;
        var g,
            y = Ui(c, Gi ? a : a.slice(f));
        if (null === y || (g = Xi(Ht(c.lastIndex + (Gi ? 0 : f)), a.length)) === p) f = qi(a, f, d);else {
          if (v.push(a.slice(p, f)), v.length === u) return v;

          for (var m = 1; m <= y.length - 1; m++) if (v.push(y[m]), v.length === u) return v;

          f = p = g;
        }
      }

      return v.push(a.slice(p)), v;
    }];
  }, !Gi);
  var Ki = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
  };

  for (var $i in Ki) {
    var Zi = j$2[$i],
        Ji = Zi && Zi.prototype;
    if (Ji && Ji.forEach !== je) try {
      ct(Ji, "forEach", je);
    } catch (t) {
      Ji.forEach = je;
    }
  }

  function Qi(t) {
    return no = t, function () {
      var t = {};
      so = 0, void (ro = no.charAt(0)), bo(), "strict" === ao && (t.strict = !0, bo());
      "graph" !== ao && "digraph" !== ao || (t.type = ao, bo());
      ho === io.IDENTIFIER && (t.id = ao, bo());
      if ("{" != ao) throw Oo("Angle bracket { expected");
      if (bo(), wo(t), "}" != ao) throw Oo("Angle bracket } expected");
      if (bo(), "" !== ao) throw Oo("End of file expected");
      return bo(), delete t.node, delete t.edge, delete t.graph, t;
    }();
  }

  var to = {
    fontsize: "font.size",
    fontcolor: "font.color",
    labelfontcolor: "font.color",
    fontname: "font.face",
    color: ["color.border", "color.background"],
    fillcolor: "color.background",
    tooltip: "title",
    labeltooltip: "title"
  },
      eo = Object.create(to);
  eo.color = "color.color", eo.style = "dashes";
  var io = {
    NULL: 0,
    DELIMITER: 1,
    IDENTIFIER: 2,
    UNKNOWN: 3
  },
      oo = {
    "{": !0,
    "}": !0,
    "[": !0,
    "]": !0,
    ";": !0,
    "=": !0,
    ",": !0,
    "->": !0,
    "--": !0
  },
      no = "",
      so = 0,
      ro = "",
      ao = "",
      ho = io.NULL;

  function lo() {
    so++, ro = no.charAt(so);
  }

  function co() {
    return no.charAt(so + 1);
  }

  var uo = /[a-zA-Z_0-9.:#]/;

  function po(t) {
    return uo.test(t);
  }

  function fo(t, e) {
    if (t || (t = {}), e) for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
    return t;
  }

  function vo(t, e, i) {
    for (var o = e.split("."), n = t; o.length;) {
      var s = o.shift();
      o.length ? (n[s] || (n[s] = {}), n = n[s]) : n[s] = i;
    }
  }

  function go(t, e) {
    for (var i, o, n = null, s = [t], r = t; r.parent;) s.push(r.parent), r = r.parent;

    if (r.nodes) for (i = 0, o = r.nodes.length; i < o; i++) if (e.id === r.nodes[i].id) {
      n = r.nodes[i];
      break;
    }

    for (n || (n = {
      id: e.id
    }, t.node && (n.attr = fo(n.attr, t.node))), i = s.length - 1; i >= 0; i--) {
      var a = s[i];
      a.nodes || (a.nodes = []), -1 === a.nodes.indexOf(n) && a.nodes.push(n);
    }

    e.attr && (n.attr = fo(n.attr, e.attr));
  }

  function yo(t, e) {
    if (t.edges || (t.edges = []), t.edges.push(e), t.edge) {
      var i = fo({}, t.edge);
      e.attr = fo(i, e.attr);
    }
  }

  function mo(t, e, i, o, n) {
    var s = {
      from: e,
      to: i,
      type: o
    };
    return t.edge && (s.attr = fo({}, t.edge)), s.attr = fo(s.attr || {}, n), null != n && n.hasOwnProperty("arrows") && null != n.arrows && (s.arrows = {
      to: {
        enabled: !0,
        type: n.arrows.type
      }
    }, n.arrows = null), s;
  }

  function bo() {
    for (ho = io.NULL, ao = ""; " " === ro || "\t" === ro || "\n" === ro || "\r" === ro;) lo();

    do {
      var t = !1;

      if ("#" === ro) {
        for (var e = so - 1; " " === no.charAt(e) || "\t" === no.charAt(e);) e--;

        if ("\n" === no.charAt(e) || "" === no.charAt(e)) {
          for (; "" != ro && "\n" != ro;) lo();

          t = !0;
        }
      }

      if ("/" === ro && "/" === co()) {
        for (; "" != ro && "\n" != ro;) lo();

        t = !0;
      }

      if ("/" === ro && "*" === co()) {
        for (; "" != ro;) {
          if ("*" === ro && "/" === co()) {
            lo(), lo();
            break;
          }

          lo();
        }

        t = !0;
      }

      for (; " " === ro || "\t" === ro || "\n" === ro || "\r" === ro;) lo();
    } while (t);

    if ("" !== ro) {
      var i = ro + co();
      if (oo[i]) return ho = io.DELIMITER, ao = i, lo(), void lo();
      if (oo[ro]) return ho = io.DELIMITER, ao = ro, void lo();

      if (po(ro) || "-" === ro) {
        for (ao += ro, lo(); po(ro);) ao += ro, lo();

        return "false" === ao ? ao = !1 : "true" === ao ? ao = !0 : isNaN(Number(ao)) || (ao = Number(ao)), void (ho = io.IDENTIFIER);
      }

      if ('"' === ro) {
        for (lo(); "" != ro && ('"' != ro || '"' === ro && '"' === co());) '"' === ro ? (ao += ro, lo()) : "\\" === ro && "n" === co() ? (ao += "\n", lo()) : ao += ro, lo();

        if ('"' != ro) throw Oo('End of string " expected');
        return lo(), void (ho = io.IDENTIFIER);
      }

      for (ho = io.UNKNOWN; "" != ro;) ao += ro, lo();

      throw new SyntaxError('Syntax error in part "' + Co(ao, 30) + '"');
    }

    ho = io.DELIMITER;
  }

  function wo(t) {
    for (; "" !== ao && "}" != ao;) ko(t), ";" === ao && bo();
  }

  function ko(t) {
    var e = _o(t);

    if (e) xo(t, e);else if (!function (t) {
      if ("node" === ao) return bo(), t.node = Eo(), "node";
      if ("edge" === ao) return bo(), t.edge = Eo(), "edge";
      if ("graph" === ao) return bo(), t.graph = Eo(), "graph";
      return null;
    }(t)) {
      if (ho != io.IDENTIFIER) throw Oo("Identifier expected");
      var i = ao;

      if (bo(), "=" === ao) {
        if (bo(), ho != io.IDENTIFIER) throw Oo("Identifier expected");
        t[i] = ao, bo();
      } else !function (t, e) {
        var i = {
          id: e
        },
            o = Eo();
        o && (i.attr = o);
        go(t, i), xo(t, e);
      }(t, i);
    }
  }

  function _o(t) {
    var e = null;

    if ("subgraph" === ao && ((e = {}).type = "subgraph", bo(), ho === io.IDENTIFIER && (e.id = ao, bo())), "{" === ao) {
      if (bo(), e || (e = {}), e.parent = t, e.node = t.node, e.edge = t.edge, e.graph = t.graph, wo(e), "}" != ao) throw Oo("Angle bracket } expected");
      bo(), delete e.node, delete e.edge, delete e.graph, delete e.parent, t.subgraphs || (t.subgraphs = []), t.subgraphs.push(e);
    }

    return e;
  }

  function xo(t, e) {
    for (; "->" === ao || "--" === ao;) {
      var i,
          o = ao;
      bo();

      var n = _o(t);

      if (n) i = n;else {
        if (ho != io.IDENTIFIER) throw Oo("Identifier or subgraph expected");
        go(t, {
          id: i = ao
        }), bo();
      }
      yo(t, mo(t, e, i, o, Eo())), e = i;
    }
  }

  function Eo() {
    for (var t, e, i = null, o = {
      dashed: !0,
      solid: !1,
      dotted: [1, 5]
    }, n = {
      dot: "circle",
      box: "box",
      crow: "crow",
      curve: "curve",
      icurve: "inv_curve",
      normal: "triangle",
      inv: "inv_triangle",
      diamond: "diamond",
      tee: "bar",
      vee: "vee"
    }, s = new Array(), r = new Array(); "[" === ao;) {
      for (bo(), i = {}; "" !== ao && "]" != ao;) {
        if (ho != io.IDENTIFIER) throw Oo("Attribute name expected");
        var a = ao;
        if (bo(), "=" != ao) throw Oo("Equal sign = expected");
        if (bo(), ho != io.IDENTIFIER) throw Oo("Attribute value expected");
        var h = ao;
        "style" === a && (h = o[h]), "arrowhead" === a && (a = "arrows", h = {
          to: {
            enabled: !0,
            type: n[h]
          }
        }), "arrowtail" === a && (a = "arrows", h = {
          from: {
            enabled: !0,
            type: n[h]
          }
        }), s.push({
          attr: i,
          name: a,
          value: h
        }), r.push(a), bo(), "," == ao && bo();
      }

      if ("]" != ao) throw Oo("Bracket ] expected");
      bo();
    }

    if (r.includes("dir")) {
      var d = {
        arrows: {}
      };

      for (t = 0; t < s.length; t++) if ("arrows" === s[t].name) {
        if (null != s[t].value.to) d.arrows.to = t;else {
          if (null == s[t].value.from) throw Oo("Invalid value of arrows");
          d.arrows.from = t;
        }
      } else "dir" === s[t].name && (d.dir = t);

      var l,
          c,
          u = s[d.dir].value;
      if (!r.includes("arrows")) if ("both" === u) s.push({
        attr: s[d.dir].attr,
        name: "arrows",
        value: {
          to: {
            enabled: !0
          }
        }
      }), d.arrows.to = s.length - 1, s.push({
        attr: s[d.dir].attr,
        name: "arrows",
        value: {
          from: {
            enabled: !0
          }
        }
      }), d.arrows.from = s.length - 1;else if ("forward" === u) s.push({
        attr: s[d.dir].attr,
        name: "arrows",
        value: {
          to: {
            enabled: !0
          }
        }
      }), d.arrows.to = s.length - 1;else if ("back" === u) s.push({
        attr: s[d.dir].attr,
        name: "arrows",
        value: {
          from: {
            enabled: !0
          }
        }
      }), d.arrows.from = s.length - 1;else {
        if ("none" !== u) throw Oo('Invalid dir type "' + u + '"');
        s.push({
          attr: s[d.dir].attr,
          name: "arrows",
          value: ""
        }), d.arrows.to = s.length - 1;
      }
      if ("both" === u) d.arrows.to && d.arrows.from ? (c = s[d.arrows.to].value.to.type, l = s[d.arrows.from].value.from.type, s[d.arrows.to] = {
        attr: s[d.arrows.to].attr,
        name: s[d.arrows.to].name,
        value: {
          to: {
            enabled: !0,
            type: c
          },
          from: {
            enabled: !0,
            type: l
          }
        }
      }, s.splice(d.arrows.from, 1)) : d.arrows.to ? (c = s[d.arrows.to].value.to.type, l = "arrow", s[d.arrows.to] = {
        attr: s[d.arrows.to].attr,
        name: s[d.arrows.to].name,
        value: {
          to: {
            enabled: !0,
            type: c
          },
          from: {
            enabled: !0,
            type: l
          }
        }
      }) : d.arrows.from && (c = "arrow", l = s[d.arrows.from].value.from.type, s[d.arrows.from] = {
        attr: s[d.arrows.from].attr,
        name: s[d.arrows.from].name,
        value: {
          to: {
            enabled: !0,
            type: c
          },
          from: {
            enabled: !0,
            type: l
          }
        }
      });else if ("back" === u) d.arrows.to && d.arrows.from ? (c = "", l = s[d.arrows.from].value.from.type, s[d.arrows.from] = {
        attr: s[d.arrows.from].attr,
        name: s[d.arrows.from].name,
        value: {
          to: {
            enabled: !0,
            type: c
          },
          from: {
            enabled: !0,
            type: l
          }
        }
      }) : d.arrows.to ? (c = "", l = "arrow", d.arrows.from = d.arrows.to, s[d.arrows.from] = {
        attr: s[d.arrows.from].attr,
        name: s[d.arrows.from].name,
        value: {
          to: {
            enabled: !0,
            type: c
          },
          from: {
            enabled: !0,
            type: l
          }
        }
      }) : d.arrows.from && (c = "", l = s[d.arrows.from].value.from.type, s[d.arrows.to] = {
        attr: s[d.arrows.from].attr,
        name: s[d.arrows.from].name,
        value: {
          to: {
            enabled: !0,
            type: c
          },
          from: {
            enabled: !0,
            type: l
          }
        }
      }), s[d.arrows.from] = {
        attr: s[d.arrows.from].attr,
        name: s[d.arrows.from].name,
        value: {
          from: {
            enabled: !0,
            type: s[d.arrows.from].value.from.type
          }
        }
      };else if ("none" === u) {
        var p;
        s[p = d.arrows.to ? d.arrows.to : d.arrows.from] = {
          attr: s[p].attr,
          name: s[p].name,
          value: ""
        };
      } else {
        if ("forward" !== u) throw Oo('Invalid dir type "' + u + '"');
        d.arrows.to && d.arrows.from ? (c = s[d.arrows.to].value.to.type, l = "", s[d.arrows.to] = {
          attr: s[d.arrows.to].attr,
          name: s[d.arrows.to].name,
          value: {
            to: {
              enabled: !0,
              type: c
            },
            from: {
              enabled: !0,
              type: l
            }
          }
        }) : d.arrows.to ? (c = s[d.arrows.to].value.to.type, l = "", s[d.arrows.to] = {
          attr: s[d.arrows.to].attr,
          name: s[d.arrows.to].name,
          value: {
            to: {
              enabled: !0,
              type: c
            },
            from: {
              enabled: !0,
              type: l
            }
          }
        }) : d.arrows.from && (c = "arrow", l = "", d.arrows.to = d.arrows.from, s[d.arrows.to] = {
          attr: s[d.arrows.to].attr,
          name: s[d.arrows.to].name,
          value: {
            to: {
              enabled: !0,
              type: c
            },
            from: {
              enabled: !0,
              type: l
            }
          }
        }), s[d.arrows.to] = {
          attr: s[d.arrows.to].attr,
          name: s[d.arrows.to].name,
          value: {
            to: {
              enabled: !0,
              type: s[d.arrows.to].value.to.type
            }
          }
        };
      }
      s.splice(d.dir, 1);
    }

    if (r.includes("penwidth")) {
      var f = [];

      for (e = s.length, t = 0; t < e; t++) "width" !== s[t].name && ("penwidth" === s[t].name && (s[t].name = "width"), f.push(s[t]));

      s = f;
    }

    for (e = s.length, t = 0; t < e; t++) vo(s[t].attr, s[t].name, s[t].value);

    return i;
  }

  function Oo(t) {
    return new SyntaxError(t + ', got "' + Co(ao, 30) + '" (char ' + so + ")");
  }

  function Co(t, e) {
    return t.length <= e ? t : t.substr(0, 27) + "...";
  }

  function So(t, e, i) {
    for (var o = e.split("."), n = o.pop(), s = t, r = 0; r < o.length; r++) {
      var a = o[r];
      a in s || (s[a] = {}), s = s[a];
    }

    return s[n] = i, t;
  }

  function To(t, e) {
    var i = {};

    for (var o in t) if (t.hasOwnProperty(o)) {
      var n = e[o];
      Array.isArray(n) ? n.forEach(function (e) {
        So(i, e, t[o]);
      }) : So(i, "string" == typeof n ? n : o, t[o]);
    }

    return i;
  }

  var Mo = Qi,
      Do = function (t) {
    var e = Qi(t),
        i = {
      nodes: [],
      edges: [],
      options: {}
    };

    if (e.nodes && e.nodes.forEach(function (t) {
      var e = {
        id: t.id,
        label: String(t.label || t.id)
      };
      fo(e, To(t.attr, to)), e.image && (e.shape = "image"), i.nodes.push(e);
    }), e.edges) {
      var o = function (t) {
        var e = {
          from: t.from,
          to: t.to
        };
        return fo(e, To(t.attr, eo)), null == e.arrows && "->" === t.type && (e.arrows = "to"), e;
      };

      e.edges.forEach(function (t) {
        var e, n, s, r, a;
        e = t.from instanceof Object ? t.from.nodes : {
          id: t.from
        }, n = t.to instanceof Object ? t.to.nodes : {
          id: t.to
        }, t.from instanceof Object && t.from.edges && t.from.edges.forEach(function (t) {
          var e = o(t);
          i.edges.push(e);
        }), s = e, r = n, a = function (e, n) {
          var s = mo(i, e.id, n.id, t.type, t.attr),
              r = o(s);
          i.edges.push(r);
        }, Array.isArray(s) ? s.forEach(function (t) {
          Array.isArray(r) ? r.forEach(function (e) {
            a(t, e);
          }) : a(t, r);
        }) : Array.isArray(r) ? r.forEach(function (t) {
          a(s, t);
        }) : a(s, r), t.to instanceof Object && t.to.edges && t.to.edges.forEach(function (t) {
          var e = o(t);
          i.edges.push(e);
        });
      });
    }

    return e.attr && (i.options = e.attr), i;
  },
      Io = {
    parseDOT: Mo,
    DOTToGraph: Do
  },
      Po = Object.freeze({
    __proto__: null,
    default: Io,
    __moduleExports: Io,
    parseDOT: Mo,
    DOTToGraph: Do
  }),
      Fo = Be.map;

  de({
    target: "Array",
    proto: !0,
    forced: !_e("map")
  }, {
    map: function (t) {
      return Fo(this, t, arguments.length > 1 ? arguments[1] : void 0);
    }
  });

  var zo = /"/g,
      No = function (t, e, i, o) {
    var n = String($(t)),
        s = "<" + e;
    return "" !== i && (s += " " + i + '="' + String(o).replace(zo, "&quot;") + '"'), s + ">" + n + "</" + e + ">";
  },
      Bo = function (t) {
    return L(function () {
      var e = ""[t]('"');
      return e !== e.toLowerCase() || e.split('"').length > 3;
    });
  };

  function Ao(t, e) {
    var i = {
      edges: {
        inheritColor: !1
      },
      nodes: {
        fixed: !1,
        parseColor: !1
      }
    };
    null != e && (null != e.fixed && (i.nodes.fixed = e.fixed), null != e.parseColor && (i.nodes.parseColor = e.parseColor), null != e.inheritColor && (i.edges.inheritColor = e.inheritColor));
    var o = t.edges.map(function (t) {
      var e = {
        from: t.source,
        id: t.id,
        to: t.target
      };
      return null != t.attributes && (e.attributes = t.attributes), null != t.label && (e.label = t.label), null != t.attributes && null != t.attributes.title && (e.title = t.attributes.title), "Directed" === t.type && (e.arrows = "to"), t.color && !1 === i.edges.inheritColor && (e.color = t.color), e;
    });
    return {
      nodes: t.nodes.map(function (t) {
        var e = {
          id: t.id,
          fixed: i.nodes.fixed && null != t.x && null != t.y
        };
        return null != t.attributes && (e.attributes = t.attributes), null != t.label && (e.label = t.label), null != t.size && (e.size = t.size), null != t.attributes && null != t.attributes.title && (e.title = t.attributes.title), null != t.title && (e.title = t.title), null != t.x && (e.x = t.x), null != t.y && (e.y = t.y), null != t.color && (!0 === i.nodes.parseColor ? e.color = t.color : e.color = {
          background: t.color,
          border: t.color,
          highlight: {
            background: t.color,
            border: t.color
          },
          hover: {
            background: t.color,
            border: t.color
          }
        }), e;
      }),
      edges: o
    };
  }

  de({
    target: "String",
    proto: !0,
    forced: Bo("fixed")
  }, {
    fixed: function () {
      return No(this, "tt", "", "");
    }
  });

  var Ro = Object.freeze({
    __proto__: null,
    parseGephi: Ao
  }),
      jo = Object.freeze({
    __proto__: null,
    default: void 0
  }),
      Lo = ve("isConcatSpreadable"),
      Ho = !L(function () {
    var t = [];
    return t[Lo] = !1, t.concat()[0] !== t;
  }),
      Wo = _e("concat"),
      Vo = function (t) {
    if (!J(t)) return !1;
    var e = t[Lo];
    return void 0 !== e ? !!e : le(t);
  };

  de({
    target: "Array",
    proto: !0,
    forced: !Ho || !Wo
  }, {
    concat: function (t) {
      var e,
          i,
          o,
          n,
          s,
          r = Ce(this),
          a = Te(r, 0),
          h = 0;

      for (e = -1, o = arguments.length; e < o; e++) if (s = -1 === e ? r : arguments[e], Vo(s)) {
        if (h + (n = Ht(s.length)) > 9007199254740991) throw TypeError("Maximum allowed index exceeded");

        for (i = 0; i < n; i++, h++) i in s && ce(a, h, s[i]);
      } else {
        if (h >= 9007199254740991) throw TypeError("Maximum allowed index exceeded");
        ce(a, h++, s);
      }

      return a.length = h, a;
    }
  });
  var qo = Be.filter;
  de({
    target: "Array",
    proto: !0,
    forced: !_e("filter")
  }, {
    filter: function (t) {
      return qo(this, t, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  var Uo = [].join,
      Yo = K != Object,
      Xo = Ae("join", ",");
  de({
    target: "Array",
    proto: !0,
    forced: Yo || Xo
  }, {
    join: function (t) {
      return Uo.call(Z(this), void 0 === t ? "," : t);
    }
  });
  var Go = [].sort,
      Ko = [1, 2, 3],
      $o = L(function () {
    Ko.sort(void 0);
  }),
      Zo = L(function () {
    Ko.sort(null);
  }),
      Jo = Ae("sort");
  de({
    target: "Array",
    proto: !0,
    forced: $o || !Zo || Jo
  }, {
    sort: function (t) {
      return void 0 === t ? Go.call(Ce(this)) : Go.call(Ce(this), Pe(t));
    }
  });
  var Qo = Date.prototype,
      tn = Qo.toString,
      en = Qo.getTime;
  new Date(NaN) + "" != "Invalid Date" && Ft(Qo, "toString", function () {
    var t = en.call(this);
    return t == t ? tn.call(this) : "Invalid Date";
  });
  var on = Object.assign,
      nn = !on || L(function () {
    var t = {},
        e = {},
        i = Symbol();
    return t[i] = 7, "abcdefghijklmnopqrst".split("").forEach(function (t) {
      e[t] = t;
    }), 7 != on({}, t)[i] || "abcdefghijklmnopqrst" != Le(on({}, e)).join("");
  }) ? function (t, e) {
    for (var i = Ce(t), o = arguments.length, n = 1, s = Jt.f, r = q.f; o > n;) for (var a, h = K(arguments[n++]), d = s ? Le(h).concat(s(h)) : Le(h), l = d.length, c = 0; l > c;) a = d[c++], H && !r.call(h, a) || (i[a] = h[a]);

    return i;
  } : on;
  de({
    target: "Object",
    stat: !0,
    forced: Object.assign !== nn
  }, {
    assign: nn
  });
  var sn = L(function () {
    Le(1);
  });
  de({
    target: "Object",
    stat: !0,
    forced: sn
  }, {
    keys: function (t) {
      return Le(Ce(t));
    }
  });
  var rn = Math.max,
      an = Math.min,
      hn = Math.floor,
      dn = /\$([$&'`]|\d\d?|<[^>]*>)/g,
      ln = /\$([$&'`]|\d\d?)/g;
  ji("replace", 2, function (t, e, i) {
    return [function (i, o) {
      var n = $(this),
          s = null == i ? void 0 : i[t];
      return void 0 !== s ? s.call(i, n, o) : e.call(String(n), i, o);
    }, function (t, n) {
      var s = i(e, t, this, n);
      if (s.done) return s.value;
      var r = ht(t),
          a = String(this),
          h = "function" == typeof n;
      h || (n = String(n));
      var d = r.global;

      if (d) {
        var l = r.unicode;
        r.lastIndex = 0;
      }

      for (var c = [];;) {
        var u = Ui(r, a);
        if (null === u) break;
        if (c.push(u), !d) break;
        "" === String(u[0]) && (r.lastIndex = qi(a, Ht(r.lastIndex), l));
      }

      for (var p, f = "", v = 0, g = 0; g < c.length; g++) {
        u = c[g];

        for (var y = String(u[0]), m = rn(an(jt(u.index), a.length), 0), b = [], w = 1; w < u.length; w++) b.push(void 0 === (p = u[w]) ? p : String(p));

        var k = u.groups;

        if (h) {
          var _ = [y].concat(b, m, a);

          void 0 !== k && _.push(k);
          var x = String(n.apply(void 0, _));
        } else x = o(y, a, m, b, k, n);

        m >= v && (f += a.slice(v, m) + x, v = m + y.length);
      }

      return f + a.slice(v);
    }];

    function o(t, i, o, n, s, r) {
      var a = o + t.length,
          h = n.length,
          d = ln;
      return void 0 !== s && (s = Ce(s), d = dn), e.call(r, d, function (e, r) {
        var d;

        switch (r.charAt(0)) {
          case "$":
            return "$";

          case "&":
            return t;

          case "`":
            return i.slice(0, o);

          case "'":
            return i.slice(a);

          case "<":
            d = s[r.slice(1, -1)];
            break;

          default:
            var l = +r;
            if (0 === l) return e;

            if (l > h) {
              var c = hn(l / 10);
              return 0 === c ? e : c <= h ? void 0 === n[c - 1] ? r.charAt(1) : n[c - 1] + r.charAt(1) : e;
            }

            d = n[l - 1];
        }

        return void 0 === d ? "" : d;
      });
    }
  });
  var cn = ui.trim;

  function un(t) {
    return (un = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {
      return typeof t;
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
    })(t);
  }

  function pn(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  }

  function fn(t, e) {
    for (var i = 0; i < e.length; i++) {
      var o = e[i];
      o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(t, o.key, o);
    }
  }

  function vn(t, e, i) {
    return e && fn(t.prototype, e), i && fn(t, i), t;
  }

  function gn(t, e, i) {
    return e in t ? Object.defineProperty(t, e, {
      value: i,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : t[e] = i, t;
  }

  function yn(t, e) {
    var i = Object.keys(t);

    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(t);
      e && (o = o.filter(function (e) {
        return Object.getOwnPropertyDescriptor(t, e).enumerable;
      })), i.push.apply(i, o);
    }

    return i;
  }

  function mn(t) {
    for (var e = 1; e < arguments.length; e++) {
      var i = null != arguments[e] ? arguments[e] : {};
      e % 2 ? yn(i, !0).forEach(function (e) {
        gn(t, e, i[e]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : yn(i).forEach(function (e) {
        Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e));
      });
    }

    return t;
  }

  function bn(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: !0,
        configurable: !0
      }
    }), e && kn(t, e);
  }

  function wn(t) {
    return (wn = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    })(t);
  }

  function kn(t, e) {
    return (kn = Object.setPrototypeOf || function (t, e) {
      return t.__proto__ = e, t;
    })(t, e);
  }

  function _n(t, e) {
    return !e || "object" != typeof e && "function" != typeof e ? function (t) {
      if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return t;
    }(t) : e;
  }

  function xn(t, e, i) {
    return (xn = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function (t, e, i) {
      var o = function (t, e) {
        for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = wn(t)););

        return t;
      }(t, e);

      if (o) {
        var n = Object.getOwnPropertyDescriptor(o, e);
        return n.get ? n.get.call(i) : n.value;
      }
    })(t, e, i || t);
  }

  function En(t) {
    throw new Error('"' + t + '" is read-only');
  }

  function On(t, e) {
    return function (t) {
      if (Array.isArray(t)) return t;
    }(t) || function (t, e) {
      if (!(Symbol.iterator in Object(t) || "[object Arguments]" === Object.prototype.toString.call(t))) return;
      var i = [],
          o = !0,
          n = !1,
          s = void 0;

      try {
        for (var r, a = t[Symbol.iterator](); !(o = (r = a.next()).done) && (i.push(r.value), !e || i.length !== e); o = !0);
      } catch (t) {
        n = !0, s = t;
      } finally {
        try {
          o || null == a.return || a.return();
        } finally {
          if (n) throw s;
        }
      }

      return i;
    }(t, e) || function () {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }();
  }

  function Cn() {
    return (Cn = Object.assign || function (t) {
      for (var e = 1; e < arguments.length; e++) {
        var i = arguments[e];

        for (var o in i) Object.prototype.hasOwnProperty.call(i, o) && (t[o] = i[o]);
      }

      return t;
    }).apply(this, arguments);
  }

  function Sn(t, e) {
    t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
  }

  function Tn(t) {
    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return t;
  }

  de({
    target: "String",
    proto: !0,
    forced: function (t) {
      return L(function () {
        return !!ai[t]() || "âÂá " != "âÂá "[t]() || ai[t].name !== t;
      });
    }("trim")
  }, {
    trim: function () {
      return cn(this);
    }
  });
  var Mn,
      Dn = "function" != typeof Object.assign ? function (t) {
    if (null == t) throw new TypeError("Cannot convert undefined or null to object");

    for (var e = Object(t), i = 1; i < arguments.length; i++) {
      var o = arguments[i];
      if (null != o) for (var n in o) o.hasOwnProperty(n) && (e[n] = o[n]);
    }

    return e;
  } : Object.assign,
      In = ["", "webkit", "Moz", "MS", "ms", "o"],
      Pn = "undefined" == typeof document ? {
    style: {}
  } : document.createElement("div"),
      Fn = "function",
      zn = Math.round,
      Nn = Math.abs,
      Bn = Date.now;

  function An(t, e) {
    for (var i, o, n = e[0].toUpperCase() + e.slice(1), s = 0; s < In.length;) {
      if ((o = (i = In[s]) ? i + n : e) in t) return o;
      s++;
    }
  }

  Mn = "undefined" == typeof window ? {} : window;
  var Rn = An(Pn.style, "touchAction"),
      jn = void 0 !== Rn;

  var Ln = "auto",
      Hn = "manipulation",
      Wn = "none",
      Vn = "pan-x",
      qn = "pan-y",
      Un = function () {
    if (!jn) return !1;
    var t = {},
        e = Mn.CSS && Mn.CSS.supports;
    return ["auto", "manipulation", "pan-y", "pan-x", "pan-x pan-y", "none"].forEach(function (i) {
      return t[i] = !e || Mn.CSS.supports("touch-action", i);
    }), t;
  }(),
      Yn = "ontouchstart" in Mn,
      Xn = void 0 !== An(Mn, "PointerEvent"),
      Gn = Yn && /mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),
      Kn = "touch",
      $n = "mouse",
      Zn = 25,
      Jn = 1,
      Qn = 2,
      ts = 4,
      es = 8,
      is$1 = 1,
      os = 2,
      ns = 4,
      ss = 8,
      rs = 16,
      as = os | ns,
      hs = ss | rs,
      ds = as | hs,
      ls = ["x", "y"],
      cs = ["clientX", "clientY"];

  function us(t, e, i) {
    var o;
    if (t) if (t.forEach) t.forEach(e, i);else if (void 0 !== t.length) for (o = 0; o < t.length;) e.call(i, t[o], o, t), o++;else for (o in t) t.hasOwnProperty(o) && e.call(i, t[o], o, t);
  }

  function ps(t, e) {
    return un(t) === Fn ? t.apply(e && e[0] || void 0, e) : t;
  }

  function fs(t, e) {
    return t.indexOf(e) > -1;
  }

  var vs = function () {
    function t(t, e) {
      this.manager = t, this.set(e);
    }

    var e = t.prototype;
    return e.set = function (t) {
      "compute" === t && (t = this.compute()), jn && this.manager.element.style && Un[t] && (this.manager.element.style[Rn] = t), this.actions = t.toLowerCase().trim();
    }, e.update = function () {
      this.set(this.manager.options.touchAction);
    }, e.compute = function () {
      var t = [];
      return us(this.manager.recognizers, function (e) {
        ps(e.options.enable, [e]) && (t = t.concat(e.getTouchAction()));
      }), function (t) {
        if (fs(t, Wn)) return Wn;
        var e = fs(t, Vn),
            i = fs(t, qn);
        return e && i ? Wn : e || i ? e ? Vn : qn : fs(t, Hn) ? Hn : Ln;
      }(t.join(" "));
    }, e.preventDefaults = function (t) {
      var e = t.srcEvent,
          i = t.offsetDirection;
      if (this.manager.session.prevented) e.preventDefault();else {
        var o = this.actions,
            n = fs(o, Wn) && !Un[Wn],
            s = fs(o, qn) && !Un[qn],
            r = fs(o, Vn) && !Un[Vn];

        if (n) {
          var a = 1 === t.pointers.length,
              h = t.distance < 2,
              d = t.deltaTime < 250;
          if (a && h && d) return;
        }

        if (!r || !s) return n || s && i & as || r && i & hs ? this.preventSrc(e) : void 0;
      }
    }, e.preventSrc = function (t) {
      this.manager.session.prevented = !0, t.preventDefault();
    }, t;
  }();

  function gs(t, e) {
    for (; t;) {
      if (t === e) return !0;
      t = t.parentNode;
    }

    return !1;
  }

  function ys(t) {
    var e = t.length;
    if (1 === e) return {
      x: zn(t[0].clientX),
      y: zn(t[0].clientY)
    };

    for (var i = 0, o = 0, n = 0; n < e;) i += t[n].clientX, o += t[n].clientY, n++;

    return {
      x: zn(i / e),
      y: zn(o / e)
    };
  }

  function ms(t) {
    for (var e = [], i = 0; i < t.pointers.length;) e[i] = {
      clientX: zn(t.pointers[i].clientX),
      clientY: zn(t.pointers[i].clientY)
    }, i++;

    return {
      timeStamp: Bn(),
      pointers: e,
      center: ys(e),
      deltaX: t.deltaX,
      deltaY: t.deltaY
    };
  }

  function bs(t, e, i) {
    i || (i = ls);
    var o = e[i[0]] - t[i[0]],
        n = e[i[1]] - t[i[1]];
    return Math.sqrt(o * o + n * n);
  }

  function ws(t, e, i) {
    i || (i = ls);
    var o = e[i[0]] - t[i[0]],
        n = e[i[1]] - t[i[1]];
    return 180 * Math.atan2(n, o) / Math.PI;
  }

  function ks(t, e) {
    return t === e ? is$1 : Nn(t) >= Nn(e) ? t < 0 ? os : ns : e < 0 ? ss : rs;
  }

  function _s(t, e, i) {
    return {
      x: e / t || 0,
      y: i / t || 0
    };
  }

  function xs(t, e) {
    var i = t.session,
        o = e.pointers,
        n = o.length;
    i.firstInput || (i.firstInput = ms(e)), n > 1 && !i.firstMultiple ? i.firstMultiple = ms(e) : 1 === n && (i.firstMultiple = !1);
    var s = i.firstInput,
        r = i.firstMultiple,
        a = r ? r.center : s.center,
        h = e.center = ys(o);
    e.timeStamp = Bn(), e.deltaTime = e.timeStamp - s.timeStamp, e.angle = ws(a, h), e.distance = bs(a, h), function (t, e) {
      var i = e.center,
          o = t.offsetDelta || {},
          n = t.prevDelta || {},
          s = t.prevInput || {};
      e.eventType !== Jn && s.eventType !== ts || (n = t.prevDelta = {
        x: s.deltaX || 0,
        y: s.deltaY || 0
      }, o = t.offsetDelta = {
        x: i.x,
        y: i.y
      }), e.deltaX = n.x + (i.x - o.x), e.deltaY = n.y + (i.y - o.y);
    }(i, e), e.offsetDirection = ks(e.deltaX, e.deltaY);

    var d,
        l,
        c = _s(e.deltaTime, e.deltaX, e.deltaY);

    e.overallVelocityX = c.x, e.overallVelocityY = c.y, e.overallVelocity = Nn(c.x) > Nn(c.y) ? c.x : c.y, e.scale = r ? (d = r.pointers, bs((l = o)[0], l[1], cs) / bs(d[0], d[1], cs)) : 1, e.rotation = r ? function (t, e) {
      return ws(e[1], e[0], cs) + ws(t[1], t[0], cs);
    }(r.pointers, o) : 0, e.maxPointers = i.prevInput ? e.pointers.length > i.prevInput.maxPointers ? e.pointers.length : i.prevInput.maxPointers : e.pointers.length, function (t, e) {
      var i,
          o,
          n,
          s,
          r = t.lastInterval || e,
          a = e.timeStamp - r.timeStamp;

      if (e.eventType !== es && (a > Zn || void 0 === r.velocity)) {
        var h = e.deltaX - r.deltaX,
            d = e.deltaY - r.deltaY,
            l = _s(a, h, d);

        o = l.x, n = l.y, i = Nn(l.x) > Nn(l.y) ? l.x : l.y, s = ks(h, d), t.lastInterval = e;
      } else i = r.velocity, o = r.velocityX, n = r.velocityY, s = r.direction;

      e.velocity = i, e.velocityX = o, e.velocityY = n, e.direction = s;
    }(i, e);
    var u = t.element;
    gs(e.srcEvent.target, u) && (u = e.srcEvent.target), e.target = u;
  }

  function Es(t, e, i) {
    var o = i.pointers.length,
        n = i.changedPointers.length,
        s = e & Jn && o - n == 0,
        r = e & (ts | es) && o - n == 0;
    i.isFirst = !!s, i.isFinal = !!r, s && (t.session = {}), i.eventType = e, xs(t, i), t.emit("hammer.input", i), t.recognize(i), t.session.prevInput = i;
  }

  function Os(t) {
    return t.trim().split(/\s+/g);
  }

  function Cs(t, e, i) {
    us(Os(e), function (e) {
      t.addEventListener(e, i, !1);
    });
  }

  function Ss(t, e, i) {
    us(Os(e), function (e) {
      t.removeEventListener(e, i, !1);
    });
  }

  function Ts(t) {
    var e = t.ownerDocument || t;
    return e.defaultView || e.parentWindow || window;
  }

  var Ms = function () {
    function t(t, e) {
      var i = this;
      this.manager = t, this.callback = e, this.element = t.element, this.target = t.options.inputTarget, this.domHandler = function (e) {
        ps(t.options.enable, [t]) && i.handler(e);
      }, this.init();
    }

    var e = t.prototype;
    return e.handler = function () {}, e.init = function () {
      this.evEl && Cs(this.element, this.evEl, this.domHandler), this.evTarget && Cs(this.target, this.evTarget, this.domHandler), this.evWin && Cs(Ts(this.element), this.evWin, this.domHandler);
    }, e.destroy = function () {
      this.evEl && Ss(this.element, this.evEl, this.domHandler), this.evTarget && Ss(this.target, this.evTarget, this.domHandler), this.evWin && Ss(Ts(this.element), this.evWin, this.domHandler);
    }, t;
  }();

  function Ds(t, e, i) {
    if (t.indexOf && !i) return t.indexOf(e);

    for (var o = 0; o < t.length;) {
      if (i && t[o][i] == e || !i && t[o] === e) return o;
      o++;
    }

    return -1;
  }

  var Is = {
    pointerdown: Jn,
    pointermove: Qn,
    pointerup: ts,
    pointercancel: es,
    pointerout: es
  },
      Ps = {
    2: Kn,
    3: "pen",
    4: $n,
    5: "kinect"
  },
      Fs = "pointerdown",
      zs = "pointermove pointerup pointercancel";
  Mn.MSPointerEvent && !Mn.PointerEvent && (Fs = "MSPointerDown", zs = "MSPointerMove MSPointerUp MSPointerCancel");

  var Ns = function (t) {
    function e() {
      var i,
          o = e.prototype;
      return o.evEl = Fs, o.evWin = zs, (i = t.apply(this, arguments) || this).store = i.manager.session.pointerEvents = [], i;
    }

    return Sn(e, t), e.prototype.handler = function (t) {
      var e = this.store,
          i = !1,
          o = t.type.toLowerCase().replace("ms", ""),
          n = Is[o],
          s = Ps[t.pointerType] || t.pointerType,
          r = s === Kn,
          a = Ds(e, t.pointerId, "pointerId");
      n & Jn && (0 === t.button || r) ? a < 0 && (e.push(t), a = e.length - 1) : n & (ts | es) && (i = !0), a < 0 || (e[a] = t, this.callback(this.manager, n, {
        pointers: e,
        changedPointers: [t],
        pointerType: s,
        srcEvent: t
      }), i && e.splice(a, 1));
    }, e;
  }(Ms);

  function Bs(t) {
    return Array.prototype.slice.call(t, 0);
  }

  function As(t, e, i) {
    for (var o = [], n = [], s = 0; s < t.length;) {
      var r = e ? t[s][e] : t[s];
      Ds(n, r) < 0 && o.push(t[s]), n[s] = r, s++;
    }

    return i && (o = e ? o.sort(function (t, i) {
      return t[e] > i[e];
    }) : o.sort()), o;
  }

  var Rs = {
    touchstart: Jn,
    touchmove: Qn,
    touchend: ts,
    touchcancel: es
  },
      js = "touchstart touchmove touchend touchcancel",
      Ls = function (t) {
    function e() {
      var i;
      return e.prototype.evTarget = js, (i = t.apply(this, arguments) || this).targetIds = {}, i;
    }

    return Sn(e, t), e.prototype.handler = function (t) {
      var e = Rs[t.type],
          i = Hs.call(this, t, e);
      i && this.callback(this.manager, e, {
        pointers: i[0],
        changedPointers: i[1],
        pointerType: Kn,
        srcEvent: t
      });
    }, e;
  }(Ms);

  function Hs(t, e) {
    var i,
        o,
        n = Bs(t.touches),
        s = this.targetIds;
    if (e & (Jn | Qn) && 1 === n.length) return s[n[0].identifier] = !0, [n, n];
    var r = Bs(t.changedTouches),
        a = [],
        h = this.target;
    if (o = n.filter(function (t) {
      return gs(t.target, h);
    }), e === Jn) for (i = 0; i < o.length;) s[o[i].identifier] = !0, i++;

    for (i = 0; i < r.length;) s[r[i].identifier] && a.push(r[i]), e & (ts | es) && delete s[r[i].identifier], i++;

    return a.length ? [As(o.concat(a), "identifier", !0), a] : void 0;
  }

  var Ws = {
    mousedown: Jn,
    mousemove: Qn,
    mouseup: ts
  },
      Vs = "mousedown",
      qs = "mousemove mouseup",
      Us = function (t) {
    function e() {
      var i,
          o = e.prototype;
      return o.evEl = Vs, o.evWin = qs, (i = t.apply(this, arguments) || this).pressed = !1, i;
    }

    return Sn(e, t), e.prototype.handler = function (t) {
      var e = Ws[t.type];
      e & Jn && 0 === t.button && (this.pressed = !0), e & Qn && 1 !== t.which && (e = ts), this.pressed && (e & ts && (this.pressed = !1), this.callback(this.manager, e, {
        pointers: [t],
        changedPointers: [t],
        pointerType: $n,
        srcEvent: t
      }));
    }, e;
  }(Ms),
      Ys = 2500,
      Xs = 25;

  function Gs(t) {
    var e = t.changedPointers[0];

    if (e.identifier === this.primaryTouch) {
      var i = {
        x: e.clientX,
        y: e.clientY
      },
          o = this.lastTouches;
      this.lastTouches.push(i);
      setTimeout(function () {
        var t = o.indexOf(i);
        t > -1 && o.splice(t, 1);
      }, Ys);
    }
  }

  function Ks(t, e) {
    t & Jn ? (this.primaryTouch = e.changedPointers[0].identifier, Gs.call(this, e)) : t & (ts | es) && Gs.call(this, e);
  }

  function $s(t) {
    for (var e = t.srcEvent.clientX, i = t.srcEvent.clientY, o = 0; o < this.lastTouches.length; o++) {
      var n = this.lastTouches[o],
          s = Math.abs(e - n.x),
          r = Math.abs(i - n.y);
      if (s <= Xs && r <= Xs) return !0;
    }

    return !1;
  }

  var Zs = function () {
    return function (t) {
      function e(e, i) {
        var o;
        return (o = t.call(this, e, i) || this).handler = function (t, e, i) {
          var n = i.pointerType === Kn,
              s = i.pointerType === $n;

          if (!(s && i.sourceCapabilities && i.sourceCapabilities.firesTouchEvents)) {
            if (n) Ks.call(Tn(Tn(o)), e, i);else if (s && $s.call(Tn(Tn(o)), i)) return;
            o.callback(t, e, i);
          }
        }, o.touch = new Ls(o.manager, o.handler), o.mouse = new Us(o.manager, o.handler), o.primaryTouch = null, o.lastTouches = [], o;
      }

      return Sn(e, t), e.prototype.destroy = function () {
        this.touch.destroy(), this.mouse.destroy();
      }, e;
    }(Ms);
  }();

  function Js(t, e, i) {
    return !!Array.isArray(t) && (us(t, i[e], i), !0);
  }

  var Qs = 1,
      tr = 2,
      er = 4,
      ir = 8,
      or = ir,
      nr = 16,
      sr = 1;

  function rr(t, e) {
    var i = e.manager;
    return i ? i.get(t) : t;
  }

  function ar(t) {
    return t & nr ? "cancel" : t & ir ? "end" : t & er ? "move" : t & tr ? "start" : "";
  }

  var hr = function () {
    function t(t) {
      void 0 === t && (t = {}), this.options = Cn({
        enable: !0
      }, t), this.id = sr++, this.manager = null, this.state = Qs, this.simultaneous = {}, this.requireFail = [];
    }

    var e = t.prototype;
    return e.set = function (t) {
      return Dn(this.options, t), this.manager && this.manager.touchAction.update(), this;
    }, e.recognizeWith = function (t) {
      if (Js(t, "recognizeWith", this)) return this;
      var e = this.simultaneous;
      return e[(t = rr(t, this)).id] || (e[t.id] = t, t.recognizeWith(this)), this;
    }, e.dropRecognizeWith = function (t) {
      return Js(t, "dropRecognizeWith", this) ? this : (t = rr(t, this), delete this.simultaneous[t.id], this);
    }, e.requireFailure = function (t) {
      if (Js(t, "requireFailure", this)) return this;
      var e = this.requireFail;
      return -1 === Ds(e, t = rr(t, this)) && (e.push(t), t.requireFailure(this)), this;
    }, e.dropRequireFailure = function (t) {
      if (Js(t, "dropRequireFailure", this)) return this;
      t = rr(t, this);
      var e = Ds(this.requireFail, t);
      return e > -1 && this.requireFail.splice(e, 1), this;
    }, e.hasRequireFailures = function () {
      return this.requireFail.length > 0;
    }, e.canRecognizeWith = function (t) {
      return !!this.simultaneous[t.id];
    }, e.emit = function (t) {
      var e = this,
          i = this.state;

      function o(i) {
        e.manager.emit(i, t);
      }

      i < ir && o(e.options.event + ar(i)), o(e.options.event), t.additionalEvent && o(t.additionalEvent), i >= ir && o(e.options.event + ar(i));
    }, e.tryEmit = function (t) {
      if (this.canEmit()) return this.emit(t);
      this.state = 32;
    }, e.canEmit = function () {
      for (var t = 0; t < this.requireFail.length;) {
        if (!(this.requireFail[t].state & (32 | Qs))) return !1;
        t++;
      }

      return !0;
    }, e.recognize = function (t) {
      var e = Dn({}, t);
      if (!ps(this.options.enable, [this, e])) return this.reset(), void (this.state = 32);
      this.state & (or | nr | 32) && (this.state = Qs), this.state = this.process(e), this.state & (tr | er | ir | nr) && this.tryEmit(e);
    }, e.process = function (t) {}, e.getTouchAction = function () {}, e.reset = function () {}, t;
  }(),
      dr = {
    domEvents: !1,
    touchAction: "compute",
    enable: !0,
    inputTarget: null,
    inputClass: null,
    preset: [],
    cssProps: {
      userSelect: "none",
      touchSelect: "none",
      touchCallout: "none",
      contentZooming: "none",
      userDrag: "none",
      tapHighlightColor: "rgba(0,0,0,0)"
    }
  };

  function lr(t, e) {
    var i,
        o = t.element;
    o.style && (us(t.options.cssProps, function (n, s) {
      i = An(o.style, s), e ? (t.oldCssProps[i] = o.style[i], o.style[i] = n) : o.style[i] = t.oldCssProps[i] || "";
    }), e || (t.oldCssProps = {}));
  }

  var cr = function () {
    function t(t, e) {
      var i,
          o = this;
      this.options = Dn({}, dr, e || {}), this.options.inputTarget = this.options.inputTarget || t, this.handlers = {}, this.session = {}, this.recognizers = [], this.oldCssProps = {}, this.element = t, this.input = new ((i = this).options.inputClass || (Xn ? Ns : Gn ? Ls : Yn ? Zs : Us))(i, Es), this.touchAction = new vs(this, this.options.touchAction), lr(this, !0), us(this.options.recognizers, function (t) {
        var e = o.add(new t[0](t[1]));
        t[2] && e.recognizeWith(t[2]), t[3] && e.requireFailure(t[3]);
      }, this);
    }

    var e = t.prototype;
    return e.set = function (t) {
      return Dn(this.options, t), t.touchAction && this.touchAction.update(), t.inputTarget && (this.input.destroy(), this.input.target = t.inputTarget, this.input.init()), this;
    }, e.stop = function (t) {
      this.session.stopped = t ? 2 : 1;
    }, e.recognize = function (t) {
      var e = this.session;

      if (!e.stopped) {
        var i;
        this.touchAction.preventDefaults(t);
        var o = this.recognizers,
            n = e.curRecognizer;
        (!n || n && n.state & or) && (e.curRecognizer = null, n = null);

        for (var s = 0; s < o.length;) i = o[s], 2 === e.stopped || n && i !== n && !i.canRecognizeWith(n) ? i.reset() : i.recognize(t), !n && i.state & (tr | er | ir) && (e.curRecognizer = i, n = i), s++;
      }
    }, e.get = function (t) {
      if (t instanceof hr) return t;

      for (var e = this.recognizers, i = 0; i < e.length; i++) if (e[i].options.event === t) return e[i];

      return null;
    }, e.add = function (t) {
      if (Js(t, "add", this)) return this;
      var e = this.get(t.options.event);
      return e && this.remove(e), this.recognizers.push(t), t.manager = this, this.touchAction.update(), t;
    }, e.remove = function (t) {
      if (Js(t, "remove", this)) return this;
      var e = this.get(t);

      if (t) {
        var i = this.recognizers,
            o = Ds(i, e);
        -1 !== o && (i.splice(o, 1), this.touchAction.update());
      }

      return this;
    }, e.on = function (t, e) {
      if (void 0 === t || void 0 === e) return this;
      var i = this.handlers;
      return us(Os(t), function (t) {
        i[t] = i[t] || [], i[t].push(e);
      }), this;
    }, e.off = function (t, e) {
      if (void 0 === t) return this;
      var i = this.handlers;
      return us(Os(t), function (t) {
        e ? i[t] && i[t].splice(Ds(i[t], e), 1) : delete i[t];
      }), this;
    }, e.emit = function (t, e) {
      this.options.domEvents && function (t, e) {
        var i = document.createEvent("Event");
        i.initEvent(t, !0, !0), i.gesture = e, e.target.dispatchEvent(i);
      }(t, e);
      var i = this.handlers[t] && this.handlers[t].slice();

      if (i && i.length) {
        e.type = t, e.preventDefault = function () {
          e.srcEvent.preventDefault();
        };

        for (var o = 0; o < i.length;) i[o](e), o++;
      }
    }, e.destroy = function () {
      this.element && lr(this, !1), this.handlers = {}, this.session = {}, this.input.destroy(), this.element = null;
    }, t;
  }(),
      ur = {
    touchstart: Jn,
    touchmove: Qn,
    touchend: ts,
    touchcancel: es
  },
      pr = "touchstart",
      fr = "touchstart touchmove touchend touchcancel",
      vr = function (t) {
    function e() {
      var i,
          o = e.prototype;
      return o.evTarget = pr, o.evWin = fr, (i = t.apply(this, arguments) || this).started = !1, i;
    }

    return Sn(e, t), e.prototype.handler = function (t) {
      var e = ur[t.type];

      if (e === Jn && (this.started = !0), this.started) {
        var i = gr.call(this, t, e);
        e & (ts | es) && i[0].length - i[1].length == 0 && (this.started = !1), this.callback(this.manager, e, {
          pointers: i[0],
          changedPointers: i[1],
          pointerType: Kn,
          srcEvent: t
        });
      }
    }, e;
  }(Ms);

  function gr(t, e) {
    var i = Bs(t.touches),
        o = Bs(t.changedTouches);
    return e & (ts | es) && (i = As(i.concat(o), "identifier", !0)), [i, o];
  }

  var yr = function (t) {
    function e(e) {
      return void 0 === e && (e = {}), t.call(this, Cn({
        pointers: 1
      }, e)) || this;
    }

    Sn(e, t);
    var i = e.prototype;
    return i.attrTest = function (t) {
      var e = this.options.pointers;
      return 0 === e || t.pointers.length === e;
    }, i.process = function (t) {
      var e = this.state,
          i = t.eventType,
          o = e & (tr | er),
          n = this.attrTest(t);
      return o && (i & es || !n) ? e | nr : o || n ? i & ts ? e | ir : e & tr ? e | er : tr : 32;
    }, e;
  }(hr),
      mr = function (t) {
    function e(e) {
      var i;
      return void 0 === e && (e = {}), (i = t.call(this, Cn({
        event: "tap",
        pointers: 1,
        taps: 1,
        interval: 300,
        time: 250,
        threshold: 9,
        posThreshold: 10
      }, e)) || this).pTime = !1, i.pCenter = !1, i._timer = null, i._input = null, i.count = 0, i;
    }

    Sn(e, t);
    var i = e.prototype;
    return i.getTouchAction = function () {
      return [Hn];
    }, i.process = function (t) {
      var e = this,
          i = this.options,
          o = t.pointers.length === i.pointers,
          n = t.distance < i.threshold,
          s = t.deltaTime < i.time;
      if (this.reset(), t.eventType & Jn && 0 === this.count) return this.failTimeout();

      if (n && s && o) {
        if (t.eventType !== ts) return this.failTimeout();
        var r = !this.pTime || t.timeStamp - this.pTime < i.interval,
            a = !this.pCenter || bs(this.pCenter, t.center) < i.posThreshold;
        if (this.pTime = t.timeStamp, this.pCenter = t.center, a && r ? this.count += 1 : this.count = 1, this._input = t, 0 === this.count % i.taps) return this.hasRequireFailures() ? (this._timer = setTimeout(function () {
          e.state = or, e.tryEmit();
        }, i.interval), tr) : or;
      }

      return 32;
    }, i.failTimeout = function () {
      var t = this;
      return this._timer = setTimeout(function () {
        t.state = 32;
      }, this.options.interval), 32;
    }, i.reset = function () {
      clearTimeout(this._timer);
    }, i.emit = function () {
      this.state === or && (this._input.tapCount = this.count, this.manager.emit(this.options.event, this._input));
    }, e;
  }(hr);

  function br(t) {
    return t === rs ? "down" : t === ss ? "up" : t === os ? "left" : t === ns ? "right" : "";
  }

  var wr = function (t) {
    function e(e) {
      var i;
      return void 0 === e && (e = {}), (i = t.call(this, Cn({
        event: "pan",
        threshold: 10,
        pointers: 1,
        direction: ds
      }, e)) || this).pX = null, i.pY = null, i;
    }

    Sn(e, t);
    var i = e.prototype;
    return i.getTouchAction = function () {
      var t = this.options.direction,
          e = [];
      return t & as && e.push(qn), t & hs && e.push(Vn), e;
    }, i.directionTest = function (t) {
      var e = this.options,
          i = !0,
          o = t.distance,
          n = t.direction,
          s = t.deltaX,
          r = t.deltaY;
      return n & e.direction || (e.direction & as ? (n = 0 === s ? is$1 : s < 0 ? os : ns, i = s !== this.pX, o = Math.abs(t.deltaX)) : (n = 0 === r ? is$1 : r < 0 ? ss : rs, i = r !== this.pY, o = Math.abs(t.deltaY))), t.direction = n, i && o > e.threshold && n & e.direction;
    }, i.attrTest = function (t) {
      return yr.prototype.attrTest.call(this, t) && (this.state & tr || !(this.state & tr) && this.directionTest(t));
    }, i.emit = function (e) {
      this.pX = e.deltaX, this.pY = e.deltaY;
      var i = br(e.direction);
      i && (e.additionalEvent = this.options.event + i), t.prototype.emit.call(this, e);
    }, e;
  }(yr),
      kr = function (t) {
    function e(e) {
      return void 0 === e && (e = {}), t.call(this, Cn({
        event: "swipe",
        threshold: 10,
        velocity: .3,
        direction: as | hs,
        pointers: 1
      }, e)) || this;
    }

    Sn(e, t);
    var i = e.prototype;
    return i.getTouchAction = function () {
      return wr.prototype.getTouchAction.call(this);
    }, i.attrTest = function (e) {
      var i,
          o = this.options.direction;
      return o & (as | hs) ? i = e.overallVelocity : o & as ? i = e.overallVelocityX : o & hs && (i = e.overallVelocityY), t.prototype.attrTest.call(this, e) && o & e.offsetDirection && e.distance > this.options.threshold && e.maxPointers === this.options.pointers && Nn(i) > this.options.velocity && e.eventType & ts;
    }, i.emit = function (t) {
      var e = br(t.offsetDirection);
      e && this.manager.emit(this.options.event + e, t), this.manager.emit(this.options.event, t);
    }, e;
  }(yr),
      _r = function (t) {
    function e(e) {
      return void 0 === e && (e = {}), t.call(this, Cn({
        event: "pinch",
        threshold: 0,
        pointers: 2
      }, e)) || this;
    }

    Sn(e, t);
    var i = e.prototype;
    return i.getTouchAction = function () {
      return [Wn];
    }, i.attrTest = function (e) {
      return t.prototype.attrTest.call(this, e) && (Math.abs(e.scale - 1) > this.options.threshold || this.state & tr);
    }, i.emit = function (e) {
      if (1 !== e.scale) {
        var i = e.scale < 1 ? "in" : "out";
        e.additionalEvent = this.options.event + i;
      }

      t.prototype.emit.call(this, e);
    }, e;
  }(yr),
      xr = function (t) {
    function e(e) {
      return void 0 === e && (e = {}), t.call(this, Cn({
        event: "rotate",
        threshold: 0,
        pointers: 2
      }, e)) || this;
    }

    Sn(e, t);
    var i = e.prototype;
    return i.getTouchAction = function () {
      return [Wn];
    }, i.attrTest = function (e) {
      return t.prototype.attrTest.call(this, e) && (Math.abs(e.rotation) > this.options.threshold || this.state & tr);
    }, e;
  }(yr),
      Er = function (t) {
    function e(e) {
      var i;
      return void 0 === e && (e = {}), (i = t.call(this, Cn({
        event: "press",
        pointers: 1,
        time: 251,
        threshold: 9
      }, e)) || this)._timer = null, i._input = null, i;
    }

    Sn(e, t);
    var i = e.prototype;
    return i.getTouchAction = function () {
      return [Ln];
    }, i.process = function (t) {
      var e = this,
          i = this.options,
          o = t.pointers.length === i.pointers,
          n = t.distance < i.threshold,
          s = t.deltaTime > i.time;
      if (this._input = t, !n || !o || t.eventType & (ts | es) && !s) this.reset();else if (t.eventType & Jn) this.reset(), this._timer = setTimeout(function () {
        e.state = or, e.tryEmit();
      }, i.time);else if (t.eventType & ts) return or;
      return 32;
    }, i.reset = function () {
      clearTimeout(this._timer);
    }, i.emit = function (t) {
      this.state === or && (t && t.eventType & ts ? this.manager.emit(this.options.event + "up", t) : (this._input.timeStamp = Bn(), this.manager.emit(this.options.event, this._input)));
    }, e;
  }(hr);

  function Or(t, e, i) {
    var o = "DEPRECATED METHOD: " + e + "\n" + i + " AT \n";
    return function () {
      var e = new Error("get-stack-trace"),
          i = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace",
          n = window.console && (window.console.warn || window.console.log);
      return n && n.call(window.console, o, i), t.apply(this, arguments);
    };
  }

  var Cr = Or(function (t, e, i) {
    for (var o = Object.keys(e), n = 0; n < o.length;) (!i || i && void 0 === t[o[n]]) && (t[o[n]] = e[o[n]]), n++;

    return t;
  }, "extend", "Use `assign`."),
      Sr = Or(function (t, e) {
    return Cr(t, e, !0);
  }, "merge", "Use `assign`.");

  function Tr(t, e, i) {
    var o,
        n = e.prototype;
    (o = t.prototype = Object.create(n)).constructor = t, o._super = n, i && Dn(o, i);
  }

  function Mr(t, e) {
    return function () {
      return t.apply(e, arguments);
    };
  }

  var Dr = function () {
    var t = function (t, e) {
      return void 0 === e && (e = {}), new cr(t, Cn({
        recognizers: [[xr, {
          enable: !1
        }], [_r, {
          enable: !1
        }, ["rotate"]], [kr, {
          direction: as
        }], [wr, {
          direction: as
        }, ["swipe"]], [mr], [mr, {
          event: "doubletap",
          taps: 2
        }, ["tap"]], [Er]]
      }, e));
    };

    return t.VERSION = "2.0.15", t.DIRECTION_ALL = ds, t.DIRECTION_DOWN = rs, t.DIRECTION_LEFT = os, t.DIRECTION_RIGHT = ns, t.DIRECTION_UP = ss, t.DIRECTION_HORIZONTAL = as, t.DIRECTION_VERTICAL = hs, t.DIRECTION_NONE = is$1, t.DIRECTION_DOWN = rs, t.INPUT_START = Jn, t.INPUT_MOVE = Qn, t.INPUT_END = ts, t.INPUT_CANCEL = es, t.STATE_POSSIBLE = Qs, t.STATE_BEGAN = tr, t.STATE_CHANGED = er, t.STATE_ENDED = ir, t.STATE_RECOGNIZED = or, t.STATE_CANCELLED = nr, t.STATE_FAILED = 32, t.Manager = cr, t.Input = Ms, t.TouchAction = vs, t.TouchInput = Ls, t.MouseInput = Us, t.PointerEventInput = Ns, t.TouchMouseInput = Zs, t.SingleTouchInput = vr, t.Recognizer = hr, t.AttrRecognizer = yr, t.Tap = mr, t.Pan = wr, t.Swipe = kr, t.Pinch = _r, t.Rotate = xr, t.Press = Er, t.on = Cs, t.off = Ss, t.each = us, t.merge = Sr, t.extend = Cr, t.bindFn = Mr, t.assign = Dn, t.inherit = Tr, t.bindFn = Mr, t.prefixed = An, t.toArray = Bs, t.inArray = Ds, t.uniqueArray = As, t.splitStr = Os, t.boolOrFn = ps, t.hasParent = gs, t.addEventListeners = Cs, t.removeEventListeners = Ss, t.defaults = dr, t;
  }(),
      Ir = z(Object.freeze({
    __proto__: null,
    default: Dr,
    INPUT_START: Jn,
    INPUT_MOVE: Qn,
    INPUT_END: ts,
    INPUT_CANCEL: es,
    STATE_POSSIBLE: Qs,
    STATE_BEGAN: tr,
    STATE_CHANGED: er,
    STATE_ENDED: ir,
    STATE_RECOGNIZED: or,
    STATE_CANCELLED: nr,
    STATE_FAILED: 32,
    DIRECTION_NONE: is$1,
    DIRECTION_LEFT: os,
    DIRECTION_RIGHT: ns,
    DIRECTION_UP: ss,
    DIRECTION_DOWN: rs,
    DIRECTION_HORIZONTAL: as,
    DIRECTION_VERTICAL: hs,
    DIRECTION_ALL: ds,
    Manager: cr,
    Input: Ms,
    TouchAction: vs,
    TouchInput: Ls,
    MouseInput: Us,
    PointerEventInput: Ns,
    TouchMouseInput: Zs,
    SingleTouchInput: vr,
    Recognizer: hr,
    AttrRecognizer: yr,
    Tap: mr,
    Pan: wr,
    Swipe: kr,
    Pinch: _r,
    Rotate: xr,
    Press: Er,
    on: Cs,
    off: Ss,
    each: us,
    merge: Sr,
    extend: Cr,
    assign: Dn,
    inherit: Tr,
    bindFn: Mr,
    prefixed: An,
    toArray: Bs,
    inArray: Ds,
    uniqueArray: As,
    splitStr: Os,
    boolOrFn: ps,
    hasParent: gs,
    addEventListeners: Cs,
    removeEventListeners: Ss,
    defaults: dr
  })),
      Pr = F(function (t) {
    if ("undefined" != typeof window) {
      var e = window.Hammer || Ir;
      t.exports = e;
    } else t.exports = function () {
      return {
        on: t = function () {},
        off: t,
        destroy: t,
        emit: t,
        get: function (e) {
          return {
            set: t
          };
        }
      };
      var t;
    };
  });

  function Fr(t) {
    var e = this;
    this.active = !1, this.dom = {
      container: t
    }, this.dom.overlay = document.createElement("div"), this.dom.overlay.className = "vis-overlay", this.dom.container.appendChild(this.dom.overlay), this.hammer = Pr(this.dom.overlay), this.hammer.on("tap", this._onTapOverlay.bind(this));
    ["tap", "doubletap", "press", "pinch", "pan", "panstart", "panmove", "panend"].forEach(function (t) {
      e.hammer.on(t, function (t) {
        t.srcEvent.stopPropagation();
      });
    }), document && document.body && (this.onClick = function (i) {
      (function (t, e) {
        for (; t;) {
          if (t === e) return !0;
          t = t.parentNode;
        }

        return !1;
      })(i.target, t) || e.deactivate();
    }, document.body.addEventListener("click", this.onClick)), void 0 !== this.keycharm && this.keycharm.destroy(), this.keycharm = keycharm(), this.escListener = this.deactivate.bind(this);
  }

  z(jo), Ie(Fr.prototype), Fr.current = null, Fr.prototype.destroy = function () {
    this.deactivate(), this.dom.overlay.parentNode.removeChild(this.dom.overlay), this.onClick && document.body.removeEventListener("click", this.onClick), void 0 !== this.keycharm && this.keycharm.destroy(), this.keycharm = null, this.hammer.destroy(), this.hammer = null;
  }, Fr.prototype.activate = function () {
    Fr.current && Fr.current.deactivate(), Fr.current = this, this.active = !0, this.dom.overlay.style.display = "none", util.addClassName(this.dom.container, "vis-active"), this.emit("change"), this.emit("activate"), this.keycharm.bind("esc", this.escListener);
  }, Fr.prototype.deactivate = function () {
    this.active = !1, this.dom.overlay.style.display = "block", util.removeClassName(this.dom.container, "vis-active"), this.keycharm.unbind("esc", this.escListener), this.emit("change"), this.emit("deactivate");
  }, Fr.prototype._onTapOverlay = function (t) {
    this.activate(), t.srcEvent.stopPropagation();
  };

  var zr = Fr,
      Nr = F(function (t, e) {
    e.en = {
      edit: "Edit",
      del: "Delete selected",
      back: "Back",
      addNode: "Add Node",
      addEdge: "Add Edge",
      editNode: "Edit Node",
      editEdge: "Edit Edge",
      addDescription: "Click in an empty space to place a new node.",
      edgeDescription: "Click on a node and drag the edge to another node to connect them.",
      editEdgeDescription: "Click on the control points and drag them to a node to connect to it.",
      createEdgeError: "Cannot link edges to a cluster.",
      deleteClusterError: "Clusters cannot be deleted.",
      editClusterError: "Clusters cannot be edited."
    }, e.en_EN = e.en, e.en_US = e.en, e.de = {
      edit: "Editieren",
      del: "LÃ¶sche Auswahl",
      back: "ZurÃ¼ck",
      addNode: "Knoten hinzufÃ¼gen",
      addEdge: "Kante hinzufÃ¼gen",
      editNode: "Knoten editieren",
      editEdge: "Kante editieren",
      addDescription: "Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.",
      edgeDescription: "Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.",
      editEdgeDescription: "Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.",
      createEdgeError: "Es ist nicht mÃ¶glich, Kanten mit Clustern zu verbinden.",
      deleteClusterError: "Cluster kÃ¶nnen nicht gelÃ¶scht werden.",
      editClusterError: "Cluster kÃ¶nnen nicht editiert werden."
    }, e.de_DE = e.de, e.es = {
      edit: "Editar",
      del: "Eliminar selecciÃ³n",
      back: "AtrÃ¡s",
      addNode: "AÃ±adir nodo",
      addEdge: "AÃ±adir arista",
      editNode: "Editar nodo",
      editEdge: "Editar arista",
      addDescription: "Haga clic en un lugar vacÃ­o para colocar un nuevo nodo.",
      edgeDescription: "Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.",
      editEdgeDescription: "Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.",
      createEdgeError: "No se puede conectar una arista a un grupo.",
      deleteClusterError: "No es posible eliminar grupos.",
      editClusterError: "No es posible editar grupos."
    }, e.es_ES = e.es, e.it = {
      edit: "Modifica",
      del: "Cancella la selezione",
      back: "Indietro",
      addNode: "Aggiungi un nodo",
      addEdge: "Aggiungi un vertice",
      editNode: "Modifica il nodo",
      editEdge: "Modifica il vertice",
      addDescription: "Clicca per aggiungere un nuovo nodo",
      edgeDescription: "Clicca su un nodo e trascinalo ad un altro nodo per connetterli.",
      editEdgeDescription: "Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.",
      createEdgeError: "Non si possono collegare vertici ad un cluster",
      deleteClusterError: "I cluster non possono essere cancellati",
      editClusterError: "I clusters non possono essere modificati."
    }, e.it_IT = e.it, e.nl = {
      edit: "Wijzigen",
      del: "Selectie verwijderen",
      back: "Terug",
      addNode: "Node toevoegen",
      addEdge: "Link toevoegen",
      editNode: "Node wijzigen",
      editEdge: "Link wijzigen",
      addDescription: "Klik op een leeg gebied om een nieuwe node te maken.",
      edgeDescription: "Klik op een node en sleep de link naar een andere node om ze te verbinden.",
      editEdgeDescription: "Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.",
      createEdgeError: "Kan geen link maken naar een cluster.",
      deleteClusterError: "Clusters kunnen niet worden verwijderd.",
      editClusterError: "Clusters kunnen niet worden aangepast."
    }, e.nl_NL = e.nl, e.nl_BE = e.nl, e["pt-br"] = {
      edit: "Editar",
      del: "Remover selecionado",
      back: "Voltar",
      addNode: "Adicionar nÃ³",
      addEdge: "Adicionar aresta",
      editNode: "Editar nÃ³",
      editEdge: "Editar aresta",
      addDescription: "Clique em um espaÃ§o em branco para adicionar um novo nÃ³",
      edgeDescription: "Clique em um nÃ³ e arraste a aresta atÃ© outro nÃ³ para conectÃ¡-los",
      editEdgeDescription: "Clique nos pontos de controle e os arraste para um nÃ³ para conectÃ¡-los",
      createEdgeError: "NÃ£o foi possÃ­vel linkar arestas a um cluster.",
      deleteClusterError: "Clusters nÃ£o puderam ser removidos.",
      editClusterError: "Clusters nÃ£o puderam ser editados."
    }, e["pt-BR"] = e["pt-br"], e.pt_BR = e["pt-br"], e.pt_br = e["pt-br"], e.ru = {
      edit: "Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°ÑÑ",
      del: "Ð£Ð´Ð°Ð»Ð¸ÑÑ Ð²ÑÐ±ÑÐ°Ð½Ð½Ð¾Ðµ",
      back: "ÐÐ°Ð·Ð°Ð´",
      addNode: "ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐ·ÐµÐ»",
      addEdge: "ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐµÐ±ÑÐ¾",
      editNode: "Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°ÑÑ ÑÐ·ÐµÐ»",
      editEdge: "Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°ÑÑ ÑÐµÐ±ÑÐ¾",
      addDescription: "ÐÐ»Ð¸ÐºÐ½Ð¸ÑÐµ Ð² ÑÐ²Ð¾Ð±Ð¾Ð´Ð½Ð¾Ðµ Ð¼ÐµÑÑÐ¾, ÑÑÐ¾Ð±Ñ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ Ð½Ð¾Ð²ÑÐ¹ ÑÐ·ÐµÐ».",
      edgeDescription: "ÐÐ»Ð¸ÐºÐ½Ð¸ÑÐµ Ð½Ð° ÑÐ·ÐµÐ» Ð¸ Ð¿ÑÐ¾ÑÑÐ½Ð¸ÑÐµ ÑÐµÐ±ÑÐ¾ Ðº Ð´ÑÑÐ³Ð¾Ð¼Ñ ÑÐ·Ð»Ñ, ÑÑÐ¾Ð±Ñ ÑÐ¾ÐµÐ´Ð¸Ð½Ð¸ÑÑ Ð¸Ñ.",
      editEdgeDescription: "ÐÐ»Ð¸ÐºÐ½Ð¸ÑÐµ Ð½Ð° ÐºÐ¾Ð½ÑÑÐ¾Ð»ÑÐ½ÑÐµ ÑÐ¾ÑÐºÐ¸ Ð¸ Ð¿ÐµÑÐµÑÐ°ÑÐ¸ÑÐµ Ð¸Ñ Ð² ÑÐ·ÐµÐ», ÑÑÐ¾Ð±Ñ Ð¿Ð¾Ð´ÐºÐ»ÑÑÐ¸ÑÑÑÑ Ðº Ð½ÐµÐ¼Ñ.",
      createEdgeError: "ÐÐµÐ²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ ÑÐ¾ÐµÐ´Ð¸Ð½Ð¸ÑÑ ÑÐµÐ±ÑÐ° Ð² ÐºÐ»Ð°ÑÑÐµÑ.",
      deleteClusterError: "ÐÐ»Ð°ÑÑÐµÑÑ Ð½Ðµ Ð¼Ð¾Ð³ÑÑ Ð±ÑÑÑ ÑÐ´Ð°Ð»ÐµÐ½Ñ",
      editClusterError: "ÐÐ»Ð°ÑÑÐµÑÑ Ð½ÐµÐ´Ð¾ÑÑÑÐ¿Ð½Ñ Ð´Ð»Ñ ÑÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ."
    }, e.ru_RU = e.ru, e.cn = {
      edit: "ç¼è¾",
      del: "å é¤éå®",
      back: "è¿å",
      addNode: "æ·»å èç¹",
      addEdge: "æ·»å è¿æ¥çº¿",
      editNode: "ç¼è¾èç¹",
      editEdge: "ç¼è¾è¿æ¥çº¿",
      addDescription: "åå»ç©ºç½å¤æ¾ç½®æ°èç¹ã",
      edgeDescription: "åå»æä¸ªèç¹å¹¶å°è¯¥è¿æ¥çº¿æå¨å°å¦ä¸ä¸ªèç¹ä»¥è¿æ¥å®ä»¬ã",
      editEdgeDescription: "åå»æ§å¶èç¹å¹¶å°å®ä»¬æå°èç¹ä¸è¿æ¥ã",
      createEdgeError: "æ æ³å°è¿æ¥çº¿è¿æ¥å°ç¾¤éã",
      deleteClusterError: "æ æ³å é¤ç¾¤éã",
      editClusterError: "æ æ³ç¼è¾ç¾¤éã"
    }, e.zh_CN = e.cn, e.uk = {
      edit: "Ð ÐµÐ´Ð°Ð³ÑÐ²Ð°ÑÐ¸",
      del: "ÐÐ¸Ð´Ð°Ð»Ð¸ÑÐ¸ Ð¾Ð±ÑÐ°Ð½Ðµ",
      back: "ÐÐ°Ð·Ð°Ð´",
      addNode: "ÐÐ¾Ð´Ð°ÑÐ¸ Ð²ÑÐ·Ð¾Ð»",
      addEdge: "ÐÐ¾Ð´Ð°ÑÐ¸ ÐºÑÐ°Ð¹",
      editNode: "Ð ÐµÐ´Ð°Ð³ÑÐ²Ð°ÑÐ¸ Ð²ÑÐ·Ð¾Ð»",
      editEdge: "Ð ÐµÐ´Ð°Ð³ÑÐ²Ð°ÑÐ¸ ÐºÑÐ°Ð¹",
      addDescription: "KÐ»ÑÐºÐ½ÑÑÑ Ð½Ð° Ð²ÑÐ»ÑÐ½Ðµ Ð¼ÑÑÑÐµ, ÑÐ¾Ð± Ð´Ð¾Ð´Ð°ÑÐ¸ Ð½Ð¾Ð²Ð¸Ð¹ Ð²ÑÐ·Ð¾Ð».",
      edgeDescription: "ÐÐ»ÑÐºÐ½ÑÑÑ Ð½Ð° Ð²ÑÐ·Ð¾Ð» Ñ Ð¿ÐµÑÐµÑÑÐ³Ð½ÑÑÑ ÐºÑÐ°Ð¹ Ð´Ð¾ ÑÐ½ÑÐ¾Ð³Ð¾ Ð²ÑÐ·Ð»Ð°, ÑÐ¾Ð± ÑÑ Ð·'ÑÐ´Ð½Ð°ÑÐ¸.",
      editEdgeDescription: "ÐÐ»ÑÐºÐ½ÑÑÑ Ð½Ð° ÐºÐ¾Ð½ÑÑÐ¾Ð»ÑÐ½Ñ ÑÐ¾ÑÐºÐ¸ Ñ Ð¿ÐµÑÐµÑÑÐ³Ð½ÑÑÑ ÑÑ Ñ Ð²ÑÐ·Ð¾Ð», ÑÐ¾Ð± Ð¿ÑÐ´ÐºÐ»ÑÑÐ¸ÑÐ¸ÑÑ Ð´Ð¾ Ð½ÑÐ¾Ð³Ð¾.",
      createEdgeError: "ÐÐµ Ð¼Ð¾Ð¶Ð»Ð¸Ð²Ð¾ Ð¾Ð±'ÑÐ´Ð½Ð°ÑÐ¸ ÐºÑÐ°Ñ Ð² Ð³ÑÑÐ¿Ñ.",
      deleteClusterError: "ÐÑÑÐ¿Ð¸ Ð½Ðµ Ð¼Ð¾Ð¶ÑÑÑ Ð±ÑÑÐ¸ Ð²Ð¸Ð´Ð°Ð»ÐµÐ½Ñ.",
      editClusterError: "ÐÑÑÐ¿Ð¸ Ð½ÐµÐ´Ð¾ÑÑÑÐ¿Ð½Ñ Ð´Ð»Ñ ÑÐµÐ´Ð°Ð³ÑÐ²Ð°Ð½Ð½Ñ."
    }, e.uk_UA = e.uk, e.fr = {
      edit: "Editer",
      del: "Effacer la selection",
      back: "Retour",
      addNode: "Ajouter un noeud",
      addEdge: "Ajouter un lien",
      editNode: "Editer le noeud",
      editEdge: "Editer le lien",
      addDescription: "Cliquez dans un endroit vide pour placer un noeud.",
      edgeDescription: "Cliquez sur un noeud et glissez le lien vers un autre noeud pour les connecter.",
      editEdgeDescription: "Cliquez sur les points de contrÃ´le et glissez-les pour connecter un noeud.",
      createEdgeError: "Impossible de crÃ©er un lien vers un cluster.",
      deleteClusterError: "Les clusters ne peuvent pas Ãªtre Ã©ffacÃ©s.",
      editClusterError: "Les clusters ne peuvent pas Ãªtre Ã©dites."
    }, e.fr_FR = e.fr, e.cs = {
      edit: "Upravit",
      del: "Smazat vÃ½bÄr",
      back: "ZpÄt",
      addNode: "PÅidat vrchol",
      addEdge: "PÅidat hranu",
      editNode: "Upravit vrchol",
      editEdge: "Upravit hranu",
      addDescription: "KluknutÃ­m do prÃ¡zdnÃ©ho prostoru mÅ¯Å¾ete pÅidat novÃ½ vrchol.",
      edgeDescription: "PÅetaÅ¾enÃ­m z jednoho vrcholu do druhÃ©ho mÅ¯Å¾ete spojit tyto vrcholy novou hranou.",
      editEdgeDescription: "PÅetaÅ¾enÃ­m kontrolnÃ­ho vrcholu hrany ji mÅ¯Å¾ete pÅipojit k jinÃ©mu vrcholu.",
      createEdgeError: "Nelze pÅipojit hranu ke shluku.",
      deleteClusterError: "Nelze mazat shluky.",
      editClusterError: "Nelze upravovat shluky."
    }, e.cs_CZ = e.cs;
  }),
      Br = function () {
    function t() {
      pn(this, t), this.NUM_ITERATIONS = 4, this.image = new Image(), this.canvas = document.createElement("canvas");
    }

    return vn(t, [{
      key: "init",
      value: function () {
        if (!this.initialized()) {
          this.src = this.image.src;
          var t = this.image.width,
              e = this.image.height;
          this.width = t, this.height = e;
          var i = Math.floor(e / 2),
              o = Math.floor(e / 4),
              n = Math.floor(e / 8),
              s = Math.floor(e / 16),
              r = Math.floor(t / 2),
              a = Math.floor(t / 4),
              h = Math.floor(t / 8),
              d = Math.floor(t / 16);
          this.canvas.width = 3 * a, this.canvas.height = i, this.coordinates = [[0, 0, r, i], [r, 0, a, o], [r, o, h, n], [5 * h, o, d, s]], this._fillMipMap();
        }
      }
    }, {
      key: "initialized",
      value: function () {
        return void 0 !== this.coordinates;
      }
    }, {
      key: "_fillMipMap",
      value: function () {
        var t = this.canvas.getContext("2d"),
            e = this.coordinates[0];
        t.drawImage(this.image, e[0], e[1], e[2], e[3]);

        for (var i = 1; i < this.NUM_ITERATIONS; i++) {
          var o = this.coordinates[i - 1],
              n = this.coordinates[i];
          t.drawImage(this.canvas, o[0], o[1], o[2], o[3], n[0], n[1], n[2], n[3]);
        }
      }
    }, {
      key: "drawImageAtPosition",
      value: function (t, e, i, o, n, s) {
        if (this.initialized()) if (e > 2) {
          e *= .5;

          for (var r = 0; e > 2 && r < this.NUM_ITERATIONS;) e *= .5, r += 1;

          r >= this.NUM_ITERATIONS && (r = this.NUM_ITERATIONS - 1);
          var a = this.coordinates[r];
          t.drawImage(this.canvas, a[0], a[1], a[2], a[3], i, o, n, s);
        } else t.drawImage(this.image, i, o, n, s);
      }
    }]), t;
  }(),
      Ar = function () {
    function t(e) {
      pn(this, t), this.images = {}, this.imageBroken = {}, this.callback = e;
    }

    return vn(t, [{
      key: "_tryloadBrokenUrl",
      value: function (t, e, i) {
        void 0 !== t && void 0 !== i && (void 0 !== e ? (i.image.onerror = function () {
          console.error("Could not load brokenImage:", e);
        }, i.image.src = e) : console.warn("No broken url image defined"));
      }
    }, {
      key: "_redrawWithImage",
      value: function (t) {
        this.callback && this.callback(t);
      }
    }, {
      key: "load",
      value: function (t, e) {
        var i = this,
            o = this.images[t];
        if (o) return o;
        var n = new Br();
        return this.images[t] = n, n.image.onload = function () {
          i._fixImageCoordinates(n.image), n.init(), i._redrawWithImage(n);
        }, n.image.onerror = function () {
          console.error("Could not load image:", t), i._tryloadBrokenUrl(t, e, n);
        }, n.image.src = t, n;
      }
    }, {
      key: "_fixImageCoordinates",
      value: function (t) {
        0 === t.width && (document.body.appendChild(t), t.width = t.offsetWidth, t.height = t.offsetHeight, document.body.removeChild(t));
      }
    }]), t;
  }(),
      Rr = function () {
    function t() {
      pn(this, t), this.clear(), this.defaultIndex = 0, this.groupsArray = [], this.groupIndex = 0, this.defaultGroups = [{
        border: "#2B7CE9",
        background: "#97C2FC",
        highlight: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        },
        hover: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        }
      }, {
        border: "#FFA500",
        background: "#FFFF00",
        highlight: {
          border: "#FFA500",
          background: "#FFFFA3"
        },
        hover: {
          border: "#FFA500",
          background: "#FFFFA3"
        }
      }, {
        border: "#FA0A10",
        background: "#FB7E81",
        highlight: {
          border: "#FA0A10",
          background: "#FFAFB1"
        },
        hover: {
          border: "#FA0A10",
          background: "#FFAFB1"
        }
      }, {
        border: "#41A906",
        background: "#7BE141",
        highlight: {
          border: "#41A906",
          background: "#A1EC76"
        },
        hover: {
          border: "#41A906",
          background: "#A1EC76"
        }
      }, {
        border: "#E129F0",
        background: "#EB7DF4",
        highlight: {
          border: "#E129F0",
          background: "#F0B3F5"
        },
        hover: {
          border: "#E129F0",
          background: "#F0B3F5"
        }
      }, {
        border: "#7C29F0",
        background: "#AD85E4",
        highlight: {
          border: "#7C29F0",
          background: "#D3BDF0"
        },
        hover: {
          border: "#7C29F0",
          background: "#D3BDF0"
        }
      }, {
        border: "#C37F00",
        background: "#FFA807",
        highlight: {
          border: "#C37F00",
          background: "#FFCA66"
        },
        hover: {
          border: "#C37F00",
          background: "#FFCA66"
        }
      }, {
        border: "#4220FB",
        background: "#6E6EFD",
        highlight: {
          border: "#4220FB",
          background: "#9B9BFD"
        },
        hover: {
          border: "#4220FB",
          background: "#9B9BFD"
        }
      }, {
        border: "#FD5A77",
        background: "#FFC0CB",
        highlight: {
          border: "#FD5A77",
          background: "#FFD1D9"
        },
        hover: {
          border: "#FD5A77",
          background: "#FFD1D9"
        }
      }, {
        border: "#4AD63A",
        background: "#C2FABC",
        highlight: {
          border: "#4AD63A",
          background: "#E6FFE3"
        },
        hover: {
          border: "#4AD63A",
          background: "#E6FFE3"
        }
      }, {
        border: "#990000",
        background: "#EE0000",
        highlight: {
          border: "#BB0000",
          background: "#FF3333"
        },
        hover: {
          border: "#BB0000",
          background: "#FF3333"
        }
      }, {
        border: "#FF6000",
        background: "#FF6000",
        highlight: {
          border: "#FF6000",
          background: "#FF6000"
        },
        hover: {
          border: "#FF6000",
          background: "#FF6000"
        }
      }, {
        border: "#97C2FC",
        background: "#2B7CE9",
        highlight: {
          border: "#D2E5FF",
          background: "#2B7CE9"
        },
        hover: {
          border: "#D2E5FF",
          background: "#2B7CE9"
        }
      }, {
        border: "#399605",
        background: "#255C03",
        highlight: {
          border: "#399605",
          background: "#255C03"
        },
        hover: {
          border: "#399605",
          background: "#255C03"
        }
      }, {
        border: "#B70054",
        background: "#FF007E",
        highlight: {
          border: "#B70054",
          background: "#FF007E"
        },
        hover: {
          border: "#B70054",
          background: "#FF007E"
        }
      }, {
        border: "#AD85E4",
        background: "#7C29F0",
        highlight: {
          border: "#D3BDF0",
          background: "#7C29F0"
        },
        hover: {
          border: "#D3BDF0",
          background: "#7C29F0"
        }
      }, {
        border: "#4557FA",
        background: "#000EA1",
        highlight: {
          border: "#6E6EFD",
          background: "#000EA1"
        },
        hover: {
          border: "#6E6EFD",
          background: "#000EA1"
        }
      }, {
        border: "#FFC0CB",
        background: "#FD5A77",
        highlight: {
          border: "#FFD1D9",
          background: "#FD5A77"
        },
        hover: {
          border: "#FFD1D9",
          background: "#FD5A77"
        }
      }, {
        border: "#C2FABC",
        background: "#74D66A",
        highlight: {
          border: "#E6FFE3",
          background: "#74D66A"
        },
        hover: {
          border: "#E6FFE3",
          background: "#74D66A"
        }
      }, {
        border: "#EE0000",
        background: "#990000",
        highlight: {
          border: "#FF3333",
          background: "#BB0000"
        },
        hover: {
          border: "#FF3333",
          background: "#BB0000"
        }
      }], this.options = {}, this.defaultOptions = {
        useDefaultGroups: !0
      }, extend(this.options, this.defaultOptions);
    }

    return vn(t, [{
      key: "setOptions",
      value: function (t) {
        var e = ["useDefaultGroups"];
        if (void 0 !== t) for (var i in t) if (t.hasOwnProperty(i) && -1 === e.indexOf(i)) {
          var o = t[i];
          this.add(i, o);
        }
      }
    }, {
      key: "clear",
      value: function () {
        this.groups = {}, this.groupsArray = [];
      }
    }, {
      key: "get",
      value: function (t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = this.groups[t];
        if (void 0 === i && e) if (!1 === this.options.useDefaultGroups && this.groupsArray.length > 0) {
          var o = this.groupIndex % this.groupsArray.length;
          this.groupIndex++, (i = {}).color = this.groups[this.groupsArray[o]], this.groups[t] = i;
        } else {
          var n = this.defaultIndex % this.defaultGroups.length;
          this.defaultIndex++, (i = {}).color = this.defaultGroups[n], this.groups[t] = i;
        }
        return i;
      }
    }, {
      key: "add",
      value: function (t, e) {
        return this.groups[t] = e, this.groupsArray.push(t), e;
      }
    }]), t;
  }(),
      jr = Be.some;

  de({
    target: "Array",
    proto: !0,
    forced: Ae("some")
  }, {
    some: function (t) {
      return jr(this, t, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  var Lr = ui.trim,
      Hr = j$2.parseFloat,
      Wr = 1 / Hr(ai + "-0") != -1 / 0 ? function (t) {
    var e = Lr(String(t)),
        i = Hr(e);
    return 0 === i && "-" == e.charAt(0) ? -0 : i;
  } : Hr;
  de({
    global: !0,
    forced: parseFloat != Wr
  }, {
    parseFloat: Wr
  });
  var Vr = ui.trim,
      qr = j$2.parseInt,
      Ur = /^[+-]?0[Xx]/,
      Yr = 8 !== qr(ai + "08") || 22 !== qr(ai + "0x16") ? function (t, e) {
    var i = Vr(String(t));
    return qr(i, e >>> 0 || (Ur.test(i) ? 16 : 10));
  } : qr;
  de({
    global: !0,
    forced: parseInt != Yr
  }, {
    parseInt: Yr
  });

  var Xr = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "choosify",
      value: function (t, e) {
        var o = ["node", "edge", "label"],
            n = !0,
            s = topMost(e, "chosen");
        if ("boolean" == typeof s) n = s;else if ("object" === un(s)) {
          if (-1 === o.indexOf(t)) throw new Error("choosify: subOption '" + t + "' should be one of '" + o.join("', '") + "'");
          var r = topMost(e, ["chosen", t]);
          "boolean" != typeof r && "function" != typeof r || (n = r);
        }
        return n;
      }
    }, {
      key: "pointInRect",
      value: function (t, e, i) {
        if (t.width <= 0 || t.height <= 0) return !1;

        if (void 0 !== i) {
          var o = {
            x: e.x - i.x,
            y: e.y - i.y
          };

          if (0 !== i.angle) {
            var n = -i.angle;
            e = {
              x: Math.cos(n) * o.x - Math.sin(n) * o.y,
              y: Math.sin(n) * o.x + Math.cos(n) * o.y
            };
          } else e = o;
        }

        var s = t.x + t.width,
            r = t.y + t.width;
        return t.left < e.x && s > e.x && t.top < e.y && r > e.y;
      }
    }, {
      key: "isValidLabel",
      value: function (t) {
        return "string" == typeof t && "" !== t;
      }
    }]), t;
  }(),
      Gr = ve("species"),
      Kr = function (t) {
    var e = Bt(t),
        i = lt.f;
    H && e && !e[Gr] && i(e, Gr, {
      configurable: !0,
      get: function () {
        return this;
      }
    });
  },
      $r = lt.f,
      Zr = Zt.f,
      Jr = ve("match"),
      Qr = j$2.RegExp,
      ta = Qr.prototype,
      ea = /a/g,
      ia = /a/g,
      oa = new Qr(ea) !== ea;

  if (H && ae("RegExp", !oa || L(function () {
    return ia[Jr] = !1, Qr(ea) != ea || Qr(ia) == ia || "/a/i" != Qr(ea, "i");
  }))) {
    for (var na = function (t, e) {
      var i = this instanceof na,
          o = Fi(t),
          n = void 0 === e;
      return !i && o && t.constructor === na && n ? t : ri(oa ? new Qr(o && !n ? t.source : t, e) : Qr((o = t instanceof na) ? t.source : t, o && n ? Oi.call(t) : e), i ? this : ta, na);
    }, sa = function (t) {
      (t in na) || $r(na, t, {
        configurable: !0,
        get: function () {
          return Qr[t];
        },
        set: function (e) {
          Qr[t] = e;
        }
      });
    }, ra = Zr(Qr), aa = 0; ra.length > aa;) sa(ra[aa++]);

    ta.constructor = na, na.prototype = ta, Ft(j$2, "RegExp", na);
  }

  Kr("RegExp");
  var ha = RegExp.prototype,
      da = ha.toString,
      la = L(function () {
    return "/a/b" != da.call({
      source: "a",
      flags: "b"
    });
  }),
      ca = "toString" != da.name;
  (la || ca) && Ft(RegExp.prototype, "toString", function () {
    var t = ht(this),
        e = String(t.source),
        i = t.flags;
    return "/" + e + "/" + String(void 0 === i && t instanceof RegExp && !("flags" in ha) ? Oi.call(t) : i);
  }, {
    unsafe: !0
  }), ji("match", 1, function (t, e, i) {
    return [function (e) {
      var i = $(this),
          o = null == e ? void 0 : e[t];
      return void 0 !== o ? o.call(e, i) : new RegExp(e)[t](String(i));
    }, function (t) {
      var o = i(e, t, this);
      if (o.done) return o.value;
      var n = ht(t),
          s = String(this);
      if (!n.global) return Ui(n, s);
      var r = n.unicode;
      n.lastIndex = 0;

      for (var a, h = [], d = 0; null !== (a = Ui(n, s));) {
        var l = String(a[0]);
        h[d] = l, "" === l && (n.lastIndex = qi(s, Ht(n.lastIndex), r)), d++;
      }

      return 0 === d ? null : h;
    }];
  }), de({
    target: "String",
    proto: !0,
    forced: Bo("bold")
  }, {
    bold: function () {
      return No(this, "b", "", "");
    }
  });

  var ua,
      pa,
      fa,
      va = {},
      ga = !L(function () {
    function t() {}

    return t.prototype.constructor = null, Object.getPrototypeOf(new t()) !== t.prototype;
  }),
      ya = _t("IE_PROTO"),
      ma = Object.prototype,
      ba = ga ? Object.getPrototypeOf : function (t) {
    return t = Ce(t), et(t, ya) ? t[ya] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? ma : null;
  },
      wa = ve("iterator"),
      ka = !1;

  [].keys && ("next" in (fa = [].keys()) ? (pa = ba(ba(fa))) !== Object.prototype && (ua = pa) : ka = !0), null == ua && (ua = {}), et(ua, wa) || ct(ua, wa, function () {
    return this;
  });

  var _a = {
    IteratorPrototype: ua,
    BUGGY_SAFARI_ITERATORS: ka
  },
      xa = lt.f,
      Ea = ve("toStringTag"),
      Oa = function (t, e, i) {
    t && !et(t = i ? t : t.prototype, Ea) && xa(t, Ea, {
      configurable: !0,
      value: e
    });
  },
      Ca = _a.IteratorPrototype,
      Sa = function () {
    return this;
  },
      Ta = _a.IteratorPrototype,
      Ma = _a.BUGGY_SAFARI_ITERATORS,
      Da = ve("iterator"),
      Ia = function () {
    return this;
  },
      Pa = function (t, e, i, o, n, s, r) {
    !function (t, e, i) {
      var o = e + " Iterator";
      t.prototype = Ye(Ca, {
        next: U(1, i)
      }), Oa(t, o, !1), va[o] = Sa;
    }(i, e, o);

    var a,
        h,
        d,
        l = function (t) {
      if (t === n && v) return v;
      if (!Ma && t in p) return p[t];

      switch (t) {
        case "keys":
        case "values":
        case "entries":
          return function () {
            return new i(this, t);
          };
      }

      return function () {
        return new i(this);
      };
    },
        c = e + " Iterator",
        u = !1,
        p = t.prototype,
        f = p[Da] || p["@@iterator"] || n && p[n],
        v = !Ma && f || l(n),
        g = "Array" == e && p.entries || f;

    if (g && (a = ba(g.call(new t())), Ta !== Object.prototype && a.next && (ba(a) !== Ta && (si ? si(a, Ta) : "function" != typeof a[Da] && ct(a, Da, Ia)), Oa(a, c, !0))), "values" == n && f && "values" !== f.name && (u = !0, v = function () {
      return f.call(this);
    }), p[Da] !== v && ct(p, Da, v), va[e] = v, n) if (h = {
      values: l("values"),
      keys: s ? v : l("keys"),
      entries: l("entries")
    }, r) for (d in h) !Ma && !u && d in p || Ft(p, d, h[d]);else de({
      target: e,
      proto: !0,
      forced: Ma || u
    }, h);
    return h;
  },
      Fa = Pt.set,
      za = Pt.getterFor("Array Iterator"),
      Na = Pa(Array, "Array", function (t, e) {
    Fa(this, {
      type: "Array Iterator",
      target: Z(t),
      index: 0,
      kind: e
    });
  }, function () {
    var t = za(this),
        e = t.target,
        i = t.kind,
        o = t.index++;
    return !e || o >= e.length ? (t.target = void 0, {
      value: void 0,
      done: !0
    }) : "keys" == i ? {
      value: o,
      done: !1
    } : "values" == i ? {
      value: e[o],
      done: !1
    } : {
      value: [o, e[o]],
      done: !1
    };
  }, "values");

  va.Arguments = va.Array, Ke("keys"), Ke("values"), Ke("entries");

  var Ba = ve("toStringTag"),
      Aa = "Arguments" == X(function () {
    return arguments;
  }()),
      Ra = function (t) {
    var e, i, o;
    return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (i = function (t, e) {
      try {
        return t[e];
      } catch (t) {}
    }(e = Object(t), Ba)) ? i : Aa ? X(e) : "Object" == (o = X(e)) && "function" == typeof e.callee ? "Arguments" : o;
  },
      ja = {};

  ja[ve("toStringTag")] = "z";
  var La = "[object z]" !== String(ja) ? function () {
    return "[object " + Ra(this) + "]";
  } : ja.toString,
      Ha = Object.prototype;
  La !== Ha.toString && Ft(Ha, "toString", La, {
    unsafe: !0
  });
  var Wa = ve("iterator"),
      Va = ve("toStringTag"),
      qa = Na.values;

  for (var Ua in Ki) {
    var Ya = j$2[Ua],
        Xa = Ya && Ya.prototype;

    if (Xa) {
      if (Xa[Wa] !== qa) try {
        ct(Xa, Wa, qa);
      } catch (t) {
        Xa[Wa] = qa;
      }
      if (Xa[Va] || ct(Xa, Va, Ua), Ki[Ua]) for (var Ga in Na) if (Xa[Ga] !== Na[Ga]) try {
        ct(Xa, Ga, Na[Ga]);
      } catch (t) {
        Xa[Ga] = Na[Ga];
      }
    }
  }

  var Ka = function () {
    function t(e) {
      pn(this, t), this.measureText = e, this.current = 0, this.width = 0, this.height = 0, this.lines = [];
    }

    return vn(t, [{
      key: "_add",
      value: function (t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "normal";
        void 0 === this.lines[t] && (this.lines[t] = {
          width: 0,
          height: 0,
          blocks: []
        });
        var o = e;
        void 0 !== e && "" !== e || (o = " ");
        var n = this.measureText(o, i),
            s = Object.assign({}, n.values);
        s.text = e, s.width = n.width, s.mod = i, void 0 !== e && "" !== e || (s.width = 0), this.lines[t].blocks.push(s), this.lines[t].width += s.width;
      }
    }, {
      key: "curWidth",
      value: function () {
        var t = this.lines[this.current];
        return void 0 === t ? 0 : t.width;
      }
    }, {
      key: "append",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "normal";

        this._add(this.current, t, e);
      }
    }, {
      key: "newLine",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "normal";
        this._add(this.current, t, e), this.current++;
      }
    }, {
      key: "determineLineHeights",
      value: function () {
        for (var t = 0; t < this.lines.length; t++) {
          var e = this.lines[t],
              i = 0;
          if (void 0 !== e.blocks) for (var o = 0; o < e.blocks.length; o++) {
            var n = e.blocks[o];
            i < n.height && (i = n.height);
          }
          e.height = i;
        }
      }
    }, {
      key: "determineLabelSize",
      value: function () {
        for (var t = 0, e = 0, i = 0; i < this.lines.length; i++) {
          var o = this.lines[i];
          o.width > t && (t = o.width), e += o.height;
        }

        this.width = t, this.height = e;
      }
    }, {
      key: "removeEmptyBlocks",
      value: function () {
        for (var t = [], e = 0; e < this.lines.length; e++) {
          var i = this.lines[e];

          if (0 !== i.blocks.length && (e !== this.lines.length - 1 || 0 !== i.width)) {
            var o = {};
            Object.assign(o, i), o.blocks = [];

            for (var n = void 0, s = [], r = 0; r < i.blocks.length; r++) {
              var a = i.blocks[r];
              0 !== a.width ? s.push(a) : void 0 === n && (n = a);
            }

            0 === s.length && void 0 !== n && s.push(n), o.blocks = s, t.push(o);
          }
        }

        return t;
      }
    }, {
      key: "finalize",
      value: function () {
        this.determineLineHeights(), this.determineLabelSize();
        var t = this.removeEmptyBlocks();
        return {
          width: this.width,
          height: this.height,
          lines: t
        };
      }
    }]), t;
  }(),
      $a = {
    "<b>": /<b>/,
    "<i>": /<i>/,
    "<code>": /<code>/,
    "</b>": /<\/b>/,
    "</i>": /<\/i>/,
    "</code>": /<\/code>/,
    "*": /\*/,
    _: /\_/,
    "`": /`/,
    afterBold: /[^\*]/,
    afterItal: /[^_]/,
    afterMono: /[^`]/
  },
      Za = function () {
    function t(e) {
      pn(this, t), this.text = e, this.bold = !1, this.ital = !1, this.mono = !1, this.spacing = !1, this.position = 0, this.buffer = "", this.modStack = [], this.blocks = [];
    }

    return vn(t, [{
      key: "mod",
      value: function () {
        return 0 === this.modStack.length ? "normal" : this.modStack[0];
      }
    }, {
      key: "modName",
      value: function () {
        return 0 === this.modStack.length ? "normal" : "mono" === this.modStack[0] ? "mono" : this.bold && this.ital ? "boldital" : this.bold ? "bold" : this.ital ? "ital" : void 0;
      }
    }, {
      key: "emitBlock",
      value: function () {
        this.spacing && (this.add(" "), this.spacing = !1), this.buffer.length > 0 && (this.blocks.push({
          text: this.buffer,
          mod: this.modName()
        }), this.buffer = "");
      }
    }, {
      key: "add",
      value: function (t) {
        " " === t && (this.spacing = !0), this.spacing && (this.buffer += " ", this.spacing = !1), " " != t && (this.buffer += t);
      }
    }, {
      key: "parseWS",
      value: function (t) {
        return !!/[ \t]/.test(t) && (this.mono ? this.add(t) : this.spacing = !0, !0);
      }
    }, {
      key: "setTag",
      value: function (t) {
        this.emitBlock(), this[t] = !0, this.modStack.unshift(t);
      }
    }, {
      key: "unsetTag",
      value: function (t) {
        this.emitBlock(), this[t] = !1, this.modStack.shift();
      }
    }, {
      key: "parseStartTag",
      value: function (t, e) {
        return !(this.mono || this[t] || !this.match(e)) && (this.setTag(t), !0);
      }
    }, {
      key: "match",
      value: function (t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = this.prepareRegExp(t),
            o = On(i, 2),
            n = o[0],
            s = o[1],
            r = n.test(this.text.substr(this.position, s));
        return r && e && (this.position += s - 1), r;
      }
    }, {
      key: "parseEndTag",
      value: function (t, e, i) {
        var o = this.mod() === t;
        return !(!(o = "mono" === t ? o && this.mono : o && !this.mono) || !this.match(e)) && (void 0 !== i ? (this.position === this.text.length - 1 || this.match(i, !1)) && this.unsetTag(t) : this.unsetTag(t), !0);
      }
    }, {
      key: "replace",
      value: function (t, e) {
        return !!this.match(t) && (this.add(e), this.position += length - 1, !0);
      }
    }, {
      key: "prepareRegExp",
      value: function (t) {
        var e, i;
        if (t instanceof RegExp) i = t, e = 1;else {
          var o = $a[t];
          i = void 0 !== o ? o : new RegExp(t), e = t.length;
        }
        return [i, e];
      }
    }]), t;
  }(),
      Ja = function () {
    function t(e, i, o, n) {
      var s = this;
      pn(this, t), this.ctx = e, this.parent = i, this.selected = o, this.hover = n;
      this.lines = new Ka(function (t, i) {
        if (void 0 === t) return 0;
        var r = s.parent.getFormattingValues(e, o, n, i),
            a = 0;
        "" !== t && (a = s.ctx.measureText(t).width);
        return {
          width: a,
          values: r
        };
      });
    }

    return vn(t, [{
      key: "process",
      value: function (t) {
        if (!Xr.isValidLabel(t)) return this.lines.finalize();
        var e = this.parent.fontOptions;
        t = (t = t.replace(/\r\n/g, "\n")).replace(/\r/g, "\n");
        var i = String(t).split("\n"),
            o = i.length;
        if (e.multi) for (var n = 0; n < o; n++) {
          var s = this.splitBlocks(i[n], e.multi);
          if (void 0 !== s) if (0 !== s.length) {
            if (e.maxWdt > 0) for (var r = 0; r < s.length; r++) {
              var a = s[r].mod,
                  h = s[r].text;
              this.splitStringIntoLines(h, a, !0);
            } else for (var d = 0; d < s.length; d++) {
              var l = s[d].mod,
                  c = s[d].text;
              this.lines.append(c, l);
            }
            this.lines.newLine();
          } else this.lines.newLine("");
        } else if (e.maxWdt > 0) for (var u = 0; u < o; u++) this.splitStringIntoLines(i[u]);else for (var p = 0; p < o; p++) this.lines.newLine(i[p]);
        return this.lines.finalize();
      }
    }, {
      key: "decodeMarkupSystem",
      value: function (t) {
        var e = "none";
        return "markdown" === t || "md" === t ? e = "markdown" : !0 !== t && "html" !== t || (e = "html"), e;
      }
    }, {
      key: "splitHtmlBlocks",
      value: function (t) {
        for (var e = new Za(t), i = function (t) {
          return !!/&/.test(t) && (e.replace(e.text, "&lt;", "<") || e.replace(e.text, "&amp;", "&") || e.add("&"), !0);
        }; e.position < e.text.length;) {
          var o = e.text.charAt(e.position);
          e.parseWS(o) || /</.test(o) && (e.parseStartTag("bold", "<b>") || e.parseStartTag("ital", "<i>") || e.parseStartTag("mono", "<code>") || e.parseEndTag("bold", "</b>") || e.parseEndTag("ital", "</i>") || e.parseEndTag("mono", "</code>")) || i(o) || e.add(o), e.position++;
        }

        return e.emitBlock(), e.blocks;
      }
    }, {
      key: "splitMarkdownBlocks",
      value: function (t) {
        for (var e = this, i = new Za(t), o = !0, n = function (t) {
          return !!/\\/.test(t) && (i.position < e.text.length + 1 && (i.position++, t = e.text.charAt(i.position), / \t/.test(t) ? i.spacing = !0 : (i.add(t), o = !1)), !0);
        }; i.position < i.text.length;) {
          var s = i.text.charAt(i.position);
          i.parseWS(s) || n(s) || (o || i.spacing) && (i.parseStartTag("bold", "*") || i.parseStartTag("ital", "_") || i.parseStartTag("mono", "`")) || i.parseEndTag("bold", "*", "afterBold") || i.parseEndTag("ital", "_", "afterItal") || i.parseEndTag("mono", "`", "afterMono") || (i.add(s), o = !1), i.position++;
        }

        return i.emitBlock(), i.blocks;
      }
    }, {
      key: "splitBlocks",
      value: function (t, e) {
        var i = this.decodeMarkupSystem(e);
        return "none" === i ? [{
          text: t,
          mod: "normal"
        }] : "markdown" === i ? this.splitMarkdownBlocks(t) : "html" === i ? this.splitHtmlBlocks(t) : void 0;
      }
    }, {
      key: "overMaxWidth",
      value: function (t) {
        var e = this.ctx.measureText(t).width;
        return this.lines.curWidth() + e > this.parent.fontOptions.maxWdt;
      }
    }, {
      key: "getLongestFit",
      value: function (t) {
        for (var e = "", i = 0; i < t.length;) {
          var o = e + ("" === e ? "" : " ") + t[i];
          if (this.overMaxWidth(o)) break;
          e = o, i++;
        }

        return i;
      }
    }, {
      key: "getLongestFitWord",
      value: function (t) {
        for (var e = 0; e < t.length && !this.overMaxWidth(t.slice(0, e));) e++;

        return e;
      }
    }, {
      key: "splitStringIntoLines",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "normal",
            i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        this.parent.getFormattingValues(this.ctx, this.selected, this.hover, e);

        for (var o = (t = (t = t.replace(/^( +)/g, "$1\r")).replace(/([^\r][^ ]*)( +)/g, "$1\r$2\r")).split("\r"); o.length > 0;) {
          var n = this.getLongestFit(o);

          if (0 === n) {
            var s = o[0],
                r = this.getLongestFitWord(s);
            this.lines.newLine(s.slice(0, r), e), o[0] = s.slice(r);
          } else {
            var a = n;
            " " === o[n - 1] ? n-- : " " === o[a] && a++;
            var h = o.slice(0, n).join("");
            n == o.length && i ? this.lines.append(h, e) : this.lines.newLine(h, e), o = o.slice(a);
          }
        }
      }
    }]), t;
  }(),
      Qa = ["bold", "ital", "boldital", "mono"],
      th = function () {
    function t(e, i) {
      var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
      pn(this, t), this.body = e, this.pointToSelf = !1, this.baseSize = void 0, this.fontOptions = {}, this.setOptions(i), this.size = {
        top: 0,
        left: 0,
        width: 0,
        height: 0,
        yLine: 0
      }, this.isEdgeLabel = o;
    }

    return vn(t, [{
      key: "setOptions",
      value: function (t) {
        if (this.elementOptions = t, this.initFontOptions(t.font), Xr.isValidLabel(t.label) ? this.labelDirty = !0 : t.label = void 0, void 0 !== t.font && null !== t.font) if ("string" == typeof t.font) this.baseSize = this.fontOptions.size;else if ("object" === un(t.font)) {
          var e = t.font.size;
          void 0 !== e && (this.baseSize = e);
        }
      }
    }, {
      key: "initFontOptions",
      value: function (e) {
        var i = this;
        forEach(Qa, function (t) {
          i.fontOptions[t] = {};
        }), t.parseFontString(this.fontOptions, e) ? this.fontOptions.vadjust = 0 : forEach(e, function (t, e) {
          null != t && "object" !== un(t) && (i.fontOptions[e] = t);
        });
      }
    }, {
      key: "constrain",
      value: function (t) {
        var e = {
          constrainWidth: !1,
          maxWdt: -1,
          minWdt: -1,
          constrainHeight: !1,
          minHgt: -1,
          valign: "middle"
        },
            o = topMost(t, "widthConstraint");
        if ("number" == typeof o) e.maxWdt = Number(o), e.minWdt = Number(o);else if ("object" === un(o)) {
          var n = topMost(t, ["widthConstraint", "maximum"]);
          "number" == typeof n && (e.maxWdt = Number(n));
          var s = topMost(t, ["widthConstraint", "minimum"]);
          "number" == typeof s && (e.minWdt = Number(s));
        }
        var r = topMost(t, "heightConstraint");
        if ("number" == typeof r) e.minHgt = Number(r);else if ("object" === un(r)) {
          var a = topMost(t, ["heightConstraint", "minimum"]);
          "number" == typeof a && (e.minHgt = Number(a));
          var h = topMost(t, ["heightConstraint", "valign"]);
          "string" == typeof h && ("top" !== h && "bottom" !== h || (e.valign = h));
        }
        return e;
      }
    }, {
      key: "update",
      value: function (t, e) {
        this.setOptions(t, !0), this.propagateFonts(e), deepExtend(this.fontOptions, this.constrain(e)), this.fontOptions.chooser = Xr.choosify("label", e);
      }
    }, {
      key: "adjustSizes",
      value: function (t) {
        var e = t ? t.right + t.left : 0;
        this.fontOptions.constrainWidth && (this.fontOptions.maxWdt -= e, this.fontOptions.minWdt -= e);
        var i = t ? t.top + t.bottom : 0;
        this.fontOptions.constrainHeight && (this.fontOptions.minHgt -= i);
      }
    }, {
      key: "addFontOptionsToPile",
      value: function (t, e) {
        for (var i = 0; i < e.length; ++i) this.addFontToPile(t, e[i]);
      }
    }, {
      key: "addFontToPile",
      value: function (t, e) {
        if (void 0 !== e && void 0 !== e.font && null !== e.font) {
          var i = e.font;
          t.push(i);
        }
      }
    }, {
      key: "getBasicOptions",
      value: function (e) {
        for (var i = {}, n = 0; n < e.length; ++n) {
          var s = e[n],
              r = {};
          t.parseFontString(r, s) && (s = r), forEach(s, function (t, e) {
            void 0 !== t && (i.hasOwnProperty(e) || (-1 !== Qa.indexOf(e) ? i[e] = {} : i[e] = t));
          });
        }

        return i;
      }
    }, {
      key: "getFontOption",
      value: function (e, i, o) {
        for (var n, s = 0; s < e.length; ++s) {
          var r = e[s];

          if (r.hasOwnProperty(i)) {
            if (null == (n = r[i])) continue;
            var a = {};
            if (t.parseFontString(a, n) && (n = a), n.hasOwnProperty(o)) return n[o];
          }
        }

        if (this.fontOptions.hasOwnProperty(o)) return this.fontOptions[o];
        throw new Error("Did not find value for multi-font for property: '" + o + "'");
      }
    }, {
      key: "getFontOptions",
      value: function (t, e) {
        for (var i = {}, o = ["color", "size", "face", "mod", "vadjust"], n = 0; n < o.length; ++n) {
          var s = o[n];
          i[s] = this.getFontOption(t, e, s);
        }

        return i;
      }
    }, {
      key: "propagateFonts",
      value: function (t) {
        var e = this,
            i = [];
        this.addFontOptionsToPile(i, t), this.fontOptions = this.getBasicOptions(i);

        for (var n = function (t) {
          var n = Qa[t],
              s = e.fontOptions[n],
              r = e.getFontOptions(i, n);
          forEach(r, function (t, e) {
            s[e] = t;
          }), s.size = Number(s.size), s.vadjust = Number(s.vadjust);
        }, s = 0; s < Qa.length; ++s) n(s);
      }
    }, {
      key: "draw",
      value: function (t, e, i, o, n) {
        var s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "middle";

        if (void 0 !== this.elementOptions.label) {
          var r = this.fontOptions.size * this.body.view.scale;
          this.elementOptions.label && r < this.elementOptions.scaling.label.drawThreshold - 1 || (r >= this.elementOptions.scaling.label.maxVisible && (r = Number(this.elementOptions.scaling.label.maxVisible) / this.body.view.scale), this.calculateLabelSize(t, o, n, e, i, s), this._drawBackground(t), this._drawText(t, e, this.size.yLine, s, r));
        }
      }
    }, {
      key: "_drawBackground",
      value: function (t) {
        if (void 0 !== this.fontOptions.background && "none" !== this.fontOptions.background) {
          t.fillStyle = this.fontOptions.background;
          var e = this.getSize();
          t.fillRect(e.left, e.top, e.width, e.height);
        }
      }
    }, {
      key: "_drawText",
      value: function (t, e, i) {
        var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "middle",
            n = arguments.length > 4 ? arguments[4] : void 0,
            s = this._setAlignment(t, e, i, o),
            r = On(s, 2);

        e = r[0], i = r[1], t.textAlign = "left", e -= this.size.width / 2, this.fontOptions.valign && this.size.height > this.size.labelHeight && ("top" === this.fontOptions.valign && (i -= (this.size.height - this.size.labelHeight) / 2), "bottom" === this.fontOptions.valign && (i += (this.size.height - this.size.labelHeight) / 2));

        for (var a = 0; a < this.lineCount; a++) {
          var h = this.lines[a];

          if (h && h.blocks) {
            var d = 0;
            this.isEdgeLabel || "center" === this.fontOptions.align ? d += (this.size.width - h.width) / 2 : "right" === this.fontOptions.align && (d += this.size.width - h.width);

            for (var l = 0; l < h.blocks.length; l++) {
              var c = h.blocks[l];
              t.font = c.font;

              var u = this._getColor(c.color, n, c.strokeColor),
                  p = On(u, 2),
                  f = p[0],
                  v = p[1];

              c.strokeWidth > 0 && (t.lineWidth = c.strokeWidth, t.strokeStyle = v, t.lineJoin = "round"), t.fillStyle = f, c.strokeWidth > 0 && t.strokeText(c.text, e + d, i + c.vadjust), t.fillText(c.text, e + d, i + c.vadjust), d += c.width;
            }

            i += h.height;
          }
        }
      }
    }, {
      key: "_setAlignment",
      value: function (t, e, i, o) {
        if (this.isEdgeLabel && "horizontal" !== this.fontOptions.align && !1 === this.pointToSelf) {
          e = 0, i = 0;
          "top" === this.fontOptions.align ? (t.textBaseline = "alphabetic", i -= 4) : "bottom" === this.fontOptions.align ? (t.textBaseline = "hanging", i += 4) : t.textBaseline = "middle";
        } else t.textBaseline = o;

        return [e, i];
      }
    }, {
      key: "_getColor",
      value: function (t, e, i) {
        var o = t || "#000000",
            n = i || "#ffffff";

        if (e <= this.elementOptions.scaling.label.drawThreshold) {
          var r = Math.max(0, Math.min(1, 1 - (this.elementOptions.scaling.label.drawThreshold - e)));
          o = overrideOpacity(o, r), n = overrideOpacity(n, r);
        }

        return [o, n];
      }
    }, {
      key: "getTextSize",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        return this._processLabel(t, e, i), {
          width: this.size.width,
          height: this.size.height,
          lineCount: this.lineCount
        };
      }
    }, {
      key: "getSize",
      value: function () {
        var t = this.size.left,
            e = this.size.top - 1;

        if (this.isEdgeLabel) {
          var i = .5 * -this.size.width;

          switch (this.fontOptions.align) {
            case "middle":
              t = i, e = .5 * -this.size.height;
              break;

            case "top":
              t = i, e = -(this.size.height + 2);
              break;

            case "bottom":
              t = i, e = 2;
          }
        }

        return {
          left: t,
          top: e,
          width: this.size.width,
          height: this.size.height
        };
      }
    }, {
      key: "calculateLabelSize",
      value: function (t, e, i) {
        var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
            n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,
            s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "middle";
        this._processLabel(t, e, i), this.size.left = o - .5 * this.size.width, this.size.top = n - .5 * this.size.height, this.size.yLine = n + .5 * (1 - this.lineCount) * this.fontOptions.size, "hanging" === s && (this.size.top += .5 * this.fontOptions.size, this.size.top += 4, this.size.yLine += 4);
      }
    }, {
      key: "getFormattingValues",
      value: function (t, e, i, o) {
        var n = function (t, e, i) {
          return "normal" === e ? "mod" === i ? "" : t[i] : void 0 !== t[e][i] ? t[e][i] : t[i];
        },
            s = {
          color: n(this.fontOptions, o, "color"),
          size: n(this.fontOptions, o, "size"),
          face: n(this.fontOptions, o, "face"),
          mod: n(this.fontOptions, o, "mod"),
          vadjust: n(this.fontOptions, o, "vadjust"),
          strokeWidth: this.fontOptions.strokeWidth,
          strokeColor: this.fontOptions.strokeColor
        };

        (e || i) && ("normal" === o && !0 === this.fontOptions.chooser && this.elementOptions.labelHighlightBold ? s.mod = "bold" : "function" == typeof this.fontOptions.chooser && this.fontOptions.chooser(s, this.elementOptions.id, e, i));
        var r = "";
        return void 0 !== s.mod && "" !== s.mod && (r += s.mod + " "), r += s.size + "px " + s.face, t.font = r.replace(/"/g, ""), s.font = t.font, s.height = s.size, s;
      }
    }, {
      key: "differentState",
      value: function (t, e) {
        return t !== this.selectedState || e !== this.hoverState;
      }
    }, {
      key: "_processLabelText",
      value: function (t, e, i, o) {
        return new Ja(t, this, e, i).process(o);
      }
    }, {
      key: "_processLabel",
      value: function (t, e, i) {
        if (!1 !== this.labelDirty || this.differentState(e, i)) {
          var o = this._processLabelText(t, e, i, this.elementOptions.label);

          this.fontOptions.minWdt > 0 && o.width < this.fontOptions.minWdt && (o.width = this.fontOptions.minWdt), this.size.labelHeight = o.height, this.fontOptions.minHgt > 0 && o.height < this.fontOptions.minHgt && (o.height = this.fontOptions.minHgt), this.lines = o.lines, this.lineCount = o.lines.length, this.size.width = o.width, this.size.height = o.height, this.selectedState = e, this.hoverState = i, this.labelDirty = !1;
        }
      }
    }, {
      key: "visible",
      value: function () {
        return 0 !== this.size.width && 0 !== this.size.height && void 0 !== this.elementOptions.label && !(this.fontOptions.size * this.body.view.scale < this.elementOptions.scaling.label.drawThreshold - 1);
      }
    }], [{
      key: "parseFontString",
      value: function (t, e) {
        if (!e || "string" != typeof e) return !1;
        var i = e.split(" ");
        return t.size = +i[0].replace("px", ""), t.face = i[1], t.color = i[2], !0;
      }
    }]), t;
  }();

  de({
    target: "Array",
    proto: !0
  }, {
    fill: function (t) {
      for (var e = Ce(this), i = Ht(e.length), o = arguments.length, n = qt(o > 1 ? arguments[1] : void 0, i), s = o > 2 ? arguments[2] : void 0, r = void 0 === s ? i : qt(s, i); r > n;) e[n++] = t;

      return e;
    }
  }), Ke("fill");

  var eh,
      ih = function () {
    function t(e, i, o) {
      pn(this, t), this.body = i, this.labelModule = o, this.setOptions(e), this.top = void 0, this.left = void 0, this.height = void 0, this.width = void 0, this.radius = void 0, this.margin = void 0, this.refreshNeeded = !0, this.boundingBox = {
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      };
    }

    return vn(t, [{
      key: "setOptions",
      value: function (t) {
        this.options = t;
      }
    }, {
      key: "_setMargins",
      value: function (t) {
        this.margin = {}, this.options.margin && ("object" == un(this.options.margin) ? (this.margin.top = this.options.margin.top, this.margin.right = this.options.margin.right, this.margin.bottom = this.options.margin.bottom, this.margin.left = this.options.margin.left) : (this.margin.top = this.options.margin, this.margin.right = this.options.margin, this.margin.bottom = this.options.margin, this.margin.left = this.options.margin)), t.adjustSizes(this.margin);
      }
    }, {
      key: "_distanceToBorder",
      value: function (t, e) {
        var i = this.options.borderWidth;
        return this.resize(t), Math.min(Math.abs(this.width / 2 / Math.cos(e)), Math.abs(this.height / 2 / Math.sin(e))) + i;
      }
    }, {
      key: "enableShadow",
      value: function (t, e) {
        e.shadow && (t.shadowColor = e.shadowColor, t.shadowBlur = e.shadowSize, t.shadowOffsetX = e.shadowX, t.shadowOffsetY = e.shadowY);
      }
    }, {
      key: "disableShadow",
      value: function (t, e) {
        e.shadow && (t.shadowColor = "rgba(0,0,0,0)", t.shadowBlur = 0, t.shadowOffsetX = 0, t.shadowOffsetY = 0);
      }
    }, {
      key: "enableBorderDashes",
      value: function (t, e) {
        if (!1 !== e.borderDashes) if (void 0 !== t.setLineDash) {
          var i = e.borderDashes;
          !0 === i && (i = [5, 15]), t.setLineDash(i);
        } else console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used."), this.options.shapeProperties.borderDashes = !1, e.borderDashes = !1;
      }
    }, {
      key: "disableBorderDashes",
      value: function (t, e) {
        !1 !== e.borderDashes && (void 0 !== t.setLineDash ? t.setLineDash([0]) : (console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used."), this.options.shapeProperties.borderDashes = !1, e.borderDashes = !1));
      }
    }, {
      key: "needsRefresh",
      value: function (t, e) {
        return !0 === this.refreshNeeded ? (this.refreshNeeded = !1, !0) : void 0 === this.width || this.labelModule.differentState(t, e);
      }
    }, {
      key: "initContextForDraw",
      value: function (t, e) {
        var i = e.borderWidth / this.body.view.scale;
        t.lineWidth = Math.min(this.width, i), t.strokeStyle = e.borderColor, t.fillStyle = e.color;
      }
    }, {
      key: "performStroke",
      value: function (t, e) {
        var i = e.borderWidth / this.body.view.scale;
        t.save(), i > 0 && (this.enableBorderDashes(t, e), t.stroke(), this.disableBorderDashes(t, e)), t.restore();
      }
    }, {
      key: "performFill",
      value: function (t, e) {
        this.enableShadow(t, e), t.fill(), this.disableShadow(t, e), this.performStroke(t, e);
      }
    }, {
      key: "_addBoundingBoxMargin",
      value: function (t) {
        this.boundingBox.left -= t, this.boundingBox.top -= t, this.boundingBox.bottom += t, this.boundingBox.right += t;
      }
    }, {
      key: "_updateBoundingBox",
      value: function (t, e, i, o, n) {
        void 0 !== i && this.resize(i, o, n), this.left = t - this.width / 2, this.top = e - this.height / 2, this.boundingBox.left = this.left, this.boundingBox.top = this.top, this.boundingBox.bottom = this.top + this.height, this.boundingBox.right = this.left + this.width;
      }
    }, {
      key: "updateBoundingBox",
      value: function (t, e, i, o, n) {
        this._updateBoundingBox(t, e, i, o, n);
      }
    }, {
      key: "getDimensionsFromLabel",
      value: function (t, e, i) {
        this.textSize = this.labelModule.getTextSize(t, e, i);
        var o = this.textSize.width,
            n = this.textSize.height;
        return 0 === o && (o = 14, n = 14), {
          width: o,
          height: n
        };
      }
    }]), t;
  }(),
      oh = function (t) {
    function e(t, i, o) {
      var n;
      return pn(this, e), (n = _n(this, wn(e).call(this, t, i, o)))._setMargins(o), n;
    }

    return bn(e, ih), vn(e, [{
      key: "resize",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;

        if (this.needsRefresh(e, i)) {
          var o = this.getDimensionsFromLabel(t, e, i);
          this.width = o.width + this.margin.right + this.margin.left, this.height = o.height + this.margin.top + this.margin.bottom, this.radius = this.width / 2;
        }
      }
    }, {
      key: "draw",
      value: function (t, e, i, o, n, s) {
        this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this.initContextForDraw(t, s), t.roundRect(this.left, this.top, this.width, this.height, s.borderRadius), this.performFill(t, s), this.updateBoundingBox(e, i, t, o, n), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o, n);
      }
    }, {
      key: "updateBoundingBox",
      value: function (t, e, i, o, n) {
        this._updateBoundingBox(t, e, i, o, n);

        var s = this.options.shapeProperties.borderRadius;

        this._addBoundingBoxMargin(s);
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        this.resize(t);
        var i = this.options.borderWidth;
        return Math.min(Math.abs(this.width / 2 / Math.cos(e)), Math.abs(this.height / 2 / Math.sin(e))) + i;
      }
    }]), e;
  }(),
      nh = function (t) {
    function e(t, i, o) {
      var n;
      return pn(this, e), (n = _n(this, wn(e).call(this, t, i, o))).labelOffset = 0, n.selected = !1, n;
    }

    return bn(e, ih), vn(e, [{
      key: "setOptions",
      value: function (t, e, i) {
        this.options = t, void 0 === e && void 0 === i || this.setImages(e, i);
      }
    }, {
      key: "setImages",
      value: function (t, e) {
        e && this.selected ? (this.imageObj = e, this.imageObjAlt = t) : (this.imageObj = t, this.imageObjAlt = e);
      }
    }, {
      key: "switchImages",
      value: function (t) {
        var e = t && !this.selected || !t && this.selected;

        if (this.selected = t, void 0 !== this.imageObjAlt && e) {
          var i = this.imageObj;
          this.imageObj = this.imageObjAlt, this.imageObjAlt = i;
        }
      }
    }, {
      key: "_getImagePadding",
      value: function () {
        var t = {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        };

        if (this.options.imagePadding) {
          var e = this.options.imagePadding;
          "object" == un(e) ? (t.top = e.top, t.right = e.right, t.bottom = e.bottom, t.left = e.left) : (t.top = e, t.right = e, t.bottom = e, t.left = e);
        }

        return t;
      }
    }, {
      key: "_resizeImage",
      value: function () {
        var t, e;

        if (!1 === this.options.shapeProperties.useImageSize) {
          var i = 1,
              o = 1;
          this.imageObj.width && this.imageObj.height && (this.imageObj.width > this.imageObj.height ? i = this.imageObj.width / this.imageObj.height : o = this.imageObj.height / this.imageObj.width), t = 2 * this.options.size * i, e = 2 * this.options.size * o;
        } else {
          var n = this._getImagePadding();

          t = this.imageObj.width + n.left + n.right, e = this.imageObj.height + n.top + n.bottom;
        }

        this.width = t, this.height = e, this.radius = .5 * this.width;
      }
    }, {
      key: "_drawRawCircle",
      value: function (t, e, i, o) {
        this.initContextForDraw(t, o), t.circle(e, i, o.size), this.performFill(t, o);
      }
    }, {
      key: "_drawImageAtPosition",
      value: function (t, e) {
        if (0 != this.imageObj.width) {
          t.globalAlpha = 1, this.enableShadow(t, e);
          var i = 1;
          !0 === this.options.shapeProperties.interpolation && (i = this.imageObj.width / this.width / this.body.view.scale);

          var o = this._getImagePadding(),
              n = this.left + o.left,
              s = this.top + o.top,
              r = this.width - o.left - o.right,
              a = this.height - o.top - o.bottom;

          this.imageObj.drawImageAtPosition(t, i, n, s, r, a), this.disableShadow(t, e);
        }
      }
    }, {
      key: "_drawImageLabel",
      value: function (t, e, i, o, n) {
        var s,
            r = 0;

        if (void 0 !== this.height) {
          r = .5 * this.height;
          var a = this.labelModule.getTextSize(t, o, n);
          a.lineCount >= 1 && (r += a.height / 2);
        }

        s = i + r, this.options.label && (this.labelOffset = r), this.labelModule.draw(t, e, s, o, n, "hanging");
      }
    }]), e;
  }(),
      sh = function (t) {
    function e(t, i, o) {
      var n;
      return pn(this, e), (n = _n(this, wn(e).call(this, t, i, o)))._setMargins(o), n;
    }

    return bn(e, nh), vn(e, [{
      key: "resize",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;

        if (this.needsRefresh(e, i)) {
          var o = this.getDimensionsFromLabel(t, e, i),
              n = Math.max(o.width + this.margin.right + this.margin.left, o.height + this.margin.top + this.margin.bottom);
          this.options.size = n / 2, this.width = n, this.height = n, this.radius = this.width / 2;
        }
      }
    }, {
      key: "draw",
      value: function (t, e, i, o, n, s) {
        this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this._drawRawCircle(t, e, i, s), this.updateBoundingBox(e, i), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, i, o, n);
      }
    }, {
      key: "updateBoundingBox",
      value: function (t, e) {
        this.boundingBox.top = e - this.options.size, this.boundingBox.left = t - this.options.size, this.boundingBox.right = t + this.options.size, this.boundingBox.bottom = e + this.options.size;
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this.resize(t), .5 * this.width;
      }
    }]), e;
  }(),
      rh = function (t) {
    function e(t, i, o, n, s) {
      var r;
      return pn(this, e), (r = _n(this, wn(e).call(this, t, i, o))).setImages(n, s), r;
    }

    return bn(e, nh), vn(e, [{
      key: "resize",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover,
            o = void 0 === this.imageObj.src || void 0 === this.imageObj.width || void 0 === this.imageObj.height;

        if (o) {
          var n = 2 * this.options.size;
          return this.width = n, this.height = n, void (this.radius = .5 * this.width);
        }

        this.needsRefresh(e, i) && this._resizeImage();
      }
    }, {
      key: "draw",
      value: function (t, e, i, o, n, s) {
        this.switchImages(o), this.resize(), this.left = e - this.width / 2, this.top = i - this.height / 2, this._drawRawCircle(t, e, i, s), t.save(), t.clip(), this._drawImageAtPosition(t, s), t.restore(), this._drawImageLabel(t, e, i, o, n), this.updateBoundingBox(e, i);
      }
    }, {
      key: "updateBoundingBox",
      value: function (t, e) {
        this.boundingBox.top = e - this.options.size, this.boundingBox.left = t - this.options.size, this.boundingBox.right = t + this.options.size, this.boundingBox.bottom = e + this.options.size, this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this.resize(t), .5 * this.width;
      }
    }]), e;
  }(),
      ah = function (t) {
    function e(t, i, o) {
      var n;
      return pn(this, e), (n = _n(this, wn(e).call(this, t, i, o)))._setMargins(o), n;
    }

    return bn(e, ih), vn(e, [{
      key: "resize",
      value: function (t, e, i) {
        if (this.needsRefresh(e, i)) {
          var o = this.getDimensionsFromLabel(t, e, i).width + this.margin.right + this.margin.left;
          this.width = o, this.height = o, this.radius = this.width / 2;
        }
      }
    }, {
      key: "draw",
      value: function (t, e, i, o, n, s) {
        this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this.initContextForDraw(t, s), t.database(e - this.width / 2, i - this.height / 2, this.width, this.height), this.performFill(t, s), this.updateBoundingBox(e, i, t, o, n), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o, n);
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this._distanceToBorder(t, e);
      }
    }]), e;
  }(),
      hh = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, ih), vn(e, [{
      key: "resize",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover,
            o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {
          size: this.options.size
        };

        if (this.needsRefresh(e, i)) {
          this.labelModule.getTextSize(t, e, i);
          var n = 2 * o.size;
          this.width = n, this.height = n, this.radius = .5 * this.width;
        }
      }
    }, {
      key: "_drawShape",
      value: function (t, e, i, o, n, s, r, a) {
        if (this.resize(t, s, r, a), this.left = o - this.width / 2, this.top = n - this.height / 2, this.initContextForDraw(t, a), t[e](o, n, a.size), this.performFill(t, a), void 0 !== this.options.icon && void 0 !== this.options.icon.code && (t.font = (s ? "bold " : "") + this.height / 2 + "px " + (this.options.icon.face || "FontAwesome"), t.fillStyle = this.options.icon.color || "black", t.textAlign = "center", t.textBaseline = "middle", t.fillText(this.options.icon.code, o, n)), void 0 !== this.options.label) {
          this.labelModule.calculateLabelSize(t, s, r, o, n, "hanging");
          var h = n + .5 * this.height + .5 * this.labelModule.size.height;
          this.labelModule.draw(t, o, h, s, r, "hanging");
        }

        this.updateBoundingBox(o, n);
      }
    }, {
      key: "updateBoundingBox",
      value: function (t, e) {
        this.boundingBox.top = e - this.options.size, this.boundingBox.left = t - this.options.size, this.boundingBox.right = t + this.options.size, this.boundingBox.bottom = e + this.options.size, void 0 !== this.options.label && this.labelModule.size.width > 0 && (this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height));
      }
    }]), e;
  }(),
      dh = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, hh), vn(e, [{
      key: "draw",
      value: function (t, e, i, o, n, s) {
        this._drawShape(t, "diamond", 4, e, i, o, n, s);
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this._distanceToBorder(t, e);
      }
    }]), e;
  }(),
      lh = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, hh), vn(e, [{
      key: "draw",
      value: function (t, e, i, o, n, s) {
        this._drawShape(t, "circle", 2, e, i, o, n, s);
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this.resize(t), this.options.size;
      }
    }]), e;
  }(),
      ch = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, ih), vn(e, [{
      key: "resize",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;

        if (this.needsRefresh(e, i)) {
          var o = this.getDimensionsFromLabel(t, e, i);
          this.height = 2 * o.height, this.width = o.width + o.height, this.radius = .5 * this.width;
        }
      }
    }, {
      key: "draw",
      value: function (t, e, i, o, n, s) {
        this.resize(t, o, n), this.left = e - .5 * this.width, this.top = i - .5 * this.height, this.initContextForDraw(t, s), t.ellipse_vis(this.left, this.top, this.width, this.height), this.performFill(t, s), this.updateBoundingBox(e, i, t, o, n), this.labelModule.draw(t, e, i, o, n);
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        this.resize(t);
        var i = .5 * this.width,
            o = .5 * this.height,
            n = Math.sin(e) * i,
            s = Math.cos(e) * o;
        return i * o / Math.sqrt(n * n + s * s);
      }
    }]), e;
  }(),
      uh = function (t) {
    function e(t, i, o) {
      var n;
      return pn(this, e), (n = _n(this, wn(e).call(this, t, i, o)))._setMargins(o), n;
    }

    return bn(e, ih), vn(e, [{
      key: "resize",
      value: function (t, e, i) {
        this.needsRefresh(e, i) && (this.iconSize = {
          width: Number(this.options.icon.size),
          height: Number(this.options.icon.size)
        }, this.width = this.iconSize.width + this.margin.right + this.margin.left, this.height = this.iconSize.height + this.margin.top + this.margin.bottom, this.radius = .5 * this.width);
      }
    }, {
      key: "draw",
      value: function (t, e, i, o, n, s) {
        if (this.resize(t, o, n), this.options.icon.size = this.options.icon.size || 50, this.left = e - this.width / 2, this.top = i - this.height / 2, this._icon(t, e, i, o, n, s), void 0 !== this.options.label) {
          this.labelModule.draw(t, this.left + this.iconSize.width / 2 + this.margin.left, i + this.height / 2 + 5, o);
        }

        this.updateBoundingBox(e, i);
      }
    }, {
      key: "updateBoundingBox",
      value: function (t, e) {
        if (this.boundingBox.top = e - .5 * this.options.icon.size, this.boundingBox.left = t - .5 * this.options.icon.size, this.boundingBox.right = t + .5 * this.options.icon.size, this.boundingBox.bottom = e + .5 * this.options.icon.size, void 0 !== this.options.label && this.labelModule.size.width > 0) {
          this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + 5);
        }
      }
    }, {
      key: "_icon",
      value: function (t, e, i, o, n, s) {
        var r = Number(this.options.icon.size);
        void 0 !== this.options.icon.code ? (t.font = [null != this.options.icon.weight ? this.options.icon.weight : o ? "bold" : "", (null != this.options.icon.weight && o ? 5 : 0) + r + "px", this.options.icon.face].join(" "), t.fillStyle = this.options.icon.color || "black", t.textAlign = "center", t.textBaseline = "middle", this.enableShadow(t, s), t.fillText(this.options.icon.code, e, i), this.disableShadow(t, s)) : console.error("When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.");
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this._distanceToBorder(t, e);
      }
    }]), e;
  }(),
      ph = function (t) {
    function e(t, i, o, n, s) {
      var r;
      return pn(this, e), (r = _n(this, wn(e).call(this, t, i, o))).setImages(n, s), r;
    }

    return bn(e, nh), vn(e, [{
      key: "resize",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover,
            o = void 0 === this.imageObj.src || void 0 === this.imageObj.width || void 0 === this.imageObj.height;

        if (o) {
          var n = 2 * this.options.size;
          return this.width = n, void (this.height = n);
        }

        this.needsRefresh(e, i) && this._resizeImage();
      }
    }, {
      key: "draw",
      value: function (t, e, i, o, n, s) {
        if (this.switchImages(o), this.resize(), this.left = e - this.width / 2, this.top = i - this.height / 2, !0 === this.options.shapeProperties.useBorderWithImage) {
          var r = this.options.borderWidth,
              a = this.options.borderWidthSelected || 2 * this.options.borderWidth,
              h = (o ? a : r) / this.body.view.scale;
          t.lineWidth = Math.min(this.width, h), t.beginPath(), t.strokeStyle = o ? this.options.color.highlight.border : n ? this.options.color.hover.border : this.options.color.border, t.fillStyle = o ? this.options.color.highlight.background : n ? this.options.color.hover.background : this.options.color.background, t.rect(this.left - .5 * t.lineWidth, this.top - .5 * t.lineWidth, this.width + t.lineWidth, this.height + t.lineWidth), t.fill(), this.performStroke(t, s), t.closePath();
        }

        this._drawImageAtPosition(t, s), this._drawImageLabel(t, e, i, o, n), this.updateBoundingBox(e, i);
      }
    }, {
      key: "updateBoundingBox",
      value: function (t, e) {
        this.resize(), this._updateBoundingBox(t, e), void 0 !== this.options.label && this.labelModule.size.width > 0 && (this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset));
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this._distanceToBorder(t, e);
      }
    }]), e;
  }(),
      fh = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, hh), vn(e, [{
      key: "draw",
      value: function (t, e, i, o, n, s) {
        this._drawShape(t, "square", 2, e, i, o, n, s);
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this._distanceToBorder(t, e);
      }
    }]), e;
  }(),
      vh = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, hh), vn(e, [{
      key: "draw",
      value: function (t, e, i, o, n, s) {
        this._drawShape(t, "hexagon", 4, e, i, o, n, s);
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this._distanceToBorder(t, e);
      }
    }]), e;
  }(),
      gh = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, hh), vn(e, [{
      key: "draw",
      value: function (t, e, i, o, n, s) {
        this._drawShape(t, "star", 4, e, i, o, n, s);
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this._distanceToBorder(t, e);
      }
    }]), e;
  }(),
      yh = function (t) {
    function e(t, i, o) {
      var n;
      return pn(this, e), (n = _n(this, wn(e).call(this, t, i, o)))._setMargins(o), n;
    }

    return bn(e, ih), vn(e, [{
      key: "resize",
      value: function (t, e, i) {
        this.needsRefresh(e, i) && (this.textSize = this.labelModule.getTextSize(t, e, i), this.width = this.textSize.width + this.margin.right + this.margin.left, this.height = this.textSize.height + this.margin.top + this.margin.bottom, this.radius = .5 * this.width);
      }
    }, {
      key: "draw",
      value: function (t, e, i, o, n, s) {
        this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this.enableShadow(t, s), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o, n), this.disableShadow(t, s), this.updateBoundingBox(e, i, t, o, n);
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this._distanceToBorder(t, e);
      }
    }]), e;
  }(),
      mh = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, hh), vn(e, [{
      key: "draw",
      value: function (t, e, i, o, n, s) {
        this._drawShape(t, "triangle", 3, e, i, o, n, s);
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this._distanceToBorder(t, e);
      }
    }]), e;
  }(),
      bh = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, hh), vn(e, [{
      key: "draw",
      value: function (t, e, i, o, n, s) {
        this._drawShape(t, "triangleDown", 3, e, i, o, n, s);
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this._distanceToBorder(t, e);
      }
    }]), e;
  }(),
      wh = !1,
      kh = "background: #FFeeee; color: #dd0000",
      _h = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "validate",
      value: function (e, i, o) {
        wh = !1, eh = i;
        var n = i;
        return void 0 !== o && (n = i[o]), t.parse(e, n, []), wh;
      }
    }, {
      key: "parse",
      value: function (e, i, o) {
        for (var n in e) e.hasOwnProperty(n) && t.check(n, e, i, o);
      }
    }, {
      key: "check",
      value: function (e, i, o, n) {
        if (void 0 !== o[e] || void 0 !== o.__any__) {
          var s = e,
              r = !0;
          void 0 === o[e] && void 0 !== o.__any__ && (s = "__any__", r = "object" === t.getType(i[e]));
          var a = o[s];
          r && void 0 !== a.__type__ && (a = a.__type__), t.checkFields(e, i, o, s, a, n);
        } else t.getSuggestion(e, o, n);
      }
    }, {
      key: "checkFields",
      value: function (e, i, o, n, s, a) {
        var h = function (i) {
          console.log("%c" + i + t.printLocation(a, e), kh);
        },
            d = t.getType(i[e]),
            l = s[d];

        void 0 !== l ? "array" === t.getType(l) && -1 === l.indexOf(i[e]) ? (h('Invalid option detected in "' + e + '". Allowed values are:' + t.print(l) + ' not "' + i[e] + '". '), wh = !0) : "object" === d && "__any__" !== n && (a = copyAndExtendArray(a, e), t.parse(i[e], o[n], a)) : void 0 === s.any && (h('Invalid type received for "' + e + '". Expected: ' + t.print(Object.keys(s)) + ". Received [" + d + '] "' + i[e] + '"'), wh = !0);
      }
    }, {
      key: "getType",
      value: function (t) {
        var e = un(t);
        return "object" === e ? null === t ? "null" : t instanceof Boolean ? "boolean" : t instanceof Number ? "number" : t instanceof String ? "string" : Array.isArray(t) ? "array" : t instanceof Date ? "date" : void 0 !== t.nodeType ? "dom" : !0 === t._isAMomentObject ? "moment" : "object" : "number" === e ? "number" : "boolean" === e ? "boolean" : "string" === e ? "string" : void 0 === e ? "undefined" : e;
      }
    }, {
      key: "getSuggestion",
      value: function (e, i, o) {
        var n,
            s = t.findInOptions(e, i, o, !1),
            r = t.findInOptions(e, eh, [], !0);
        n = void 0 !== s.indexMatch ? " in " + t.printLocation(s.path, e, "") + 'Perhaps it was incomplete? Did you mean: "' + s.indexMatch + '"?\n\n' : r.distance <= 4 && s.distance > r.distance ? " in " + t.printLocation(s.path, e, "") + "Perhaps it was misplaced? Matching option found at: " + t.printLocation(r.path, r.closestMatch, "") : s.distance <= 8 ? '. Did you mean "' + s.closestMatch + '"?' + t.printLocation(s.path, e) : ". Did you mean one of these: " + t.print(Object.keys(i)) + t.printLocation(o, e), console.log('%cUnknown option detected: "' + e + '"' + n, kh), wh = !0;
      }
    }, {
      key: "findInOptions",
      value: function (e, i, o) {
        var n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
            s = 1e9,
            h = "",
            d = [],
            l = e.toLowerCase(),
            c = void 0;

        for (var u in i) {
          var p = void 0;

          if (void 0 !== i[u].__type__ && !0 === n) {
            var f = t.findInOptions(e, i[u], copyAndExtendArray(o, u));
            s > f.distance && (h = f.closestMatch, d = f.path, s = f.distance, c = f.indexMatch);
          } else -1 !== u.toLowerCase().indexOf(l) && (c = u), s > (p = t.levenshteinDistance(e, u)) && (h = u, d = copyArray(o), s = p);
        }

        return {
          closestMatch: h,
          path: d,
          distance: s,
          indexMatch: c
        };
      }
    }, {
      key: "printLocation",
      value: function (t, e) {
        for (var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "Problem value found at: \n", o = "\n\n" + i + "options = {\n", n = 0; n < t.length; n++) {
          for (var s = 0; s < n + 1; s++) o += "  ";

          o += t[n] + ": {\n";
        }

        for (var r = 0; r < t.length + 1; r++) o += "  ";

        o += e + "\n";

        for (var a = 0; a < t.length + 1; a++) {
          for (var h = 0; h < t.length - a; h++) o += "  ";

          o += "}\n";
        }

        return o + "\n\n";
      }
    }, {
      key: "print",
      value: function (t) {
        return JSON.stringify(t).replace(/(\")|(\[)|(\])|(,"__type__")/g, "").replace(/(\,)/g, ", ");
      }
    }, {
      key: "levenshteinDistance",
      value: function (t, e) {
        if (0 === t.length) return e.length;
        if (0 === e.length) return t.length;
        var i,
            o,
            n = [];

        for (i = 0; i <= e.length; i++) n[i] = [i];

        for (o = 0; o <= t.length; o++) n[0][o] = o;

        for (i = 1; i <= e.length; i++) for (o = 1; o <= t.length; o++) e.charAt(i - 1) == t.charAt(o - 1) ? n[i][o] = n[i - 1][o - 1] : n[i][o] = Math.min(n[i - 1][o - 1] + 1, Math.min(n[i][o - 1] + 1, n[i - 1][o] + 1));

        return n[e.length][t.length];
      }
    }]), t;
  }(),
      xh = function () {
    function t(e, i, o, n, s, r) {
      pn(this, t), this.options = bridgeObject(s), this.globalOptions = s, this.defaultOptions = r, this.body = i, this.edges = [], this.id = void 0, this.imagelist = o, this.grouplist = n, this.x = void 0, this.y = void 0, this.baseSize = this.options.size, this.baseFontSize = this.options.font.size, this.predefinedPosition = !1, this.selected = !1, this.hover = !1, this.labelModule = new th(this.body, this.options, !1), this.setOptions(e);
    }

    return vn(t, [{
      key: "attachEdge",
      value: function (t) {
        -1 === this.edges.indexOf(t) && this.edges.push(t);
      }
    }, {
      key: "detachEdge",
      value: function (t) {
        var e = this.edges.indexOf(t);
        -1 != e && this.edges.splice(e, 1);
      }
    }, {
      key: "setOptions",
      value: function (e) {
        var i = this.options.shape;

        if (e) {
          if (void 0 !== e.color && (this._localColor = e.color), void 0 !== e.id && (this.id = e.id), void 0 === this.id) throw new Error("Node must have an id");
          t.checkMass(e, this.id), void 0 !== e.x && (null === e.x ? (this.x = void 0, this.predefinedPosition = !1) : (this.x = parseInt(e.x), this.predefinedPosition = !0)), void 0 !== e.y && (null === e.y ? (this.y = void 0, this.predefinedPosition = !1) : (this.y = parseInt(e.y), this.predefinedPosition = !0)), void 0 !== e.size && (this.baseSize = e.size), void 0 !== e.value && (e.value = parseFloat(e.value)), t.parseOptions(this.options, e, !0, this.globalOptions, this.grouplist);
          var o = [e, this.options, this.defaultOptions];
          return this.chooser = Xr.choosify("node", o), this._load_images(), this.updateLabelModule(e), this.updateShape(i), void 0 !== e.hidden || void 0 !== e.physics;
        }
      }
    }, {
      key: "_load_images",
      value: function () {
        if (("circularImage" === this.options.shape || "image" === this.options.shape) && void 0 === this.options.image) throw new Error("Option image must be defined for node type '" + this.options.shape + "'");

        if (void 0 !== this.options.image) {
          if (void 0 === this.imagelist) throw new Error("Internal Error: No images provided");
          if ("string" == typeof this.options.image) this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);else {
            if (void 0 === this.options.image.unselected) throw new Error("No unselected image provided");
            this.imageObj = this.imagelist.load(this.options.image.unselected, this.options.brokenImage, this.id), void 0 !== this.options.image.selected ? this.imageObjAlt = this.imagelist.load(this.options.image.selected, this.options.brokenImage, this.id) : this.imageObjAlt = void 0;
          }
        }
      }
    }, {
      key: "getFormattingValues",
      value: function () {
        var t = {
          color: this.options.color.background,
          borderWidth: this.options.borderWidth,
          borderColor: this.options.color.border,
          size: this.options.size,
          borderDashes: this.options.shapeProperties.borderDashes,
          borderRadius: this.options.shapeProperties.borderRadius,
          shadow: this.options.shadow.enabled,
          shadowColor: this.options.shadow.color,
          shadowSize: this.options.shadow.size,
          shadowX: this.options.shadow.x,
          shadowY: this.options.shadow.y
        };
        return this.selected || this.hover ? !0 === this.chooser ? this.selected ? (t.borderWidth *= 2, t.color = this.options.color.highlight.background, t.borderColor = this.options.color.highlight.border, t.shadow = this.options.shadow.enabled) : this.hover && (t.color = this.options.color.hover.background, t.borderColor = this.options.color.hover.border, t.shadow = this.options.shadow.enabled) : "function" == typeof this.chooser && (this.chooser(t, this.options.id, this.selected, this.hover), !1 === t.shadow && (t.shadowColor === this.options.shadow.color && t.shadowSize === this.options.shadow.size && t.shadowX === this.options.shadow.x && t.shadowY === this.options.shadow.y || (t.shadow = !0))) : t.shadow = this.options.shadow.enabled, t;
      }
    }, {
      key: "updateLabelModule",
      value: function (e) {
        void 0 !== this.options.label && null !== this.options.label || (this.options.label = ""), t.updateGroupOptions(this.options, mn({}, e, {
          color: e && e.color || this._localColor || void 0
        }), this.grouplist);
        var i = this.grouplist.get(this.options.group, !1),
            o = [e, this.options, i, this.globalOptions, this.defaultOptions];
        this.labelModule.update(this.options, o), void 0 !== this.labelModule.baseSize && (this.baseFontSize = this.labelModule.baseSize);
      }
    }, {
      key: "updateShape",
      value: function (t) {
        if (t === this.options.shape && this.shape) this.shape.setOptions(this.options, this.imageObj, this.imageObjAlt);else switch (this.options.shape) {
          case "box":
            this.shape = new oh(this.options, this.body, this.labelModule);
            break;

          case "circle":
            this.shape = new sh(this.options, this.body, this.labelModule);
            break;

          case "circularImage":
            this.shape = new rh(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
            break;

          case "database":
            this.shape = new ah(this.options, this.body, this.labelModule);
            break;

          case "diamond":
            this.shape = new dh(this.options, this.body, this.labelModule);
            break;

          case "dot":
            this.shape = new lh(this.options, this.body, this.labelModule);
            break;

          case "ellipse":
            this.shape = new ch(this.options, this.body, this.labelModule);
            break;

          case "icon":
            this.shape = new uh(this.options, this.body, this.labelModule);
            break;

          case "image":
            this.shape = new ph(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
            break;

          case "square":
            this.shape = new fh(this.options, this.body, this.labelModule);
            break;

          case "hexagon":
            this.shape = new vh(this.options, this.body, this.labelModule);
            break;

          case "star":
            this.shape = new gh(this.options, this.body, this.labelModule);
            break;

          case "text":
            this.shape = new yh(this.options, this.body, this.labelModule);
            break;

          case "triangle":
            this.shape = new mh(this.options, this.body, this.labelModule);
            break;

          case "triangleDown":
            this.shape = new bh(this.options, this.body, this.labelModule);
            break;

          default:
            this.shape = new ch(this.options, this.body, this.labelModule);
        }
        this.needsRefresh();
      }
    }, {
      key: "select",
      value: function () {
        this.selected = !0, this.needsRefresh();
      }
    }, {
      key: "unselect",
      value: function () {
        this.selected = !1, this.needsRefresh();
      }
    }, {
      key: "needsRefresh",
      value: function () {
        this.shape.refreshNeeded = !0;
      }
    }, {
      key: "getTitle",
      value: function () {
        return this.options.title;
      }
    }, {
      key: "distanceToBorder",
      value: function (t, e) {
        return this.shape.distanceToBorder(t, e);
      }
    }, {
      key: "isFixed",
      value: function () {
        return this.options.fixed.x && this.options.fixed.y;
      }
    }, {
      key: "isSelected",
      value: function () {
        return this.selected;
      }
    }, {
      key: "getValue",
      value: function () {
        return this.options.value;
      }
    }, {
      key: "getLabelSize",
      value: function () {
        return this.labelModule.size();
      }
    }, {
      key: "setValueRange",
      value: function (t, e, i) {
        if (void 0 !== this.options.value) {
          var o = this.options.scaling.customScalingFunction(t, e, i, this.options.value),
              n = this.options.scaling.max - this.options.scaling.min;

          if (!0 === this.options.scaling.label.enabled) {
            var s = this.options.scaling.label.max - this.options.scaling.label.min;
            this.options.font.size = this.options.scaling.label.min + o * s;
          }

          this.options.size = this.options.scaling.min + o * n;
        } else this.options.size = this.baseSize, this.options.font.size = this.baseFontSize;

        this.updateLabelModule();
      }
    }, {
      key: "draw",
      value: function (t) {
        var e = this.getFormattingValues();
        this.shape.draw(t, this.x, this.y, this.selected, this.hover, e);
      }
    }, {
      key: "updateBoundingBox",
      value: function (t) {
        this.shape.updateBoundingBox(this.x, this.y, t);
      }
    }, {
      key: "resize",
      value: function (t) {
        var e = this.getFormattingValues();
        this.shape.resize(t, this.selected, this.hover, e);
      }
    }, {
      key: "getItemsOnPoint",
      value: function (t) {
        var e = [];
        return this.labelModule.visible() && Xr.pointInRect(this.labelModule.getSize(), t) && e.push({
          nodeId: this.id,
          labelId: 0
        }), Xr.pointInRect(this.shape.boundingBox, t) && e.push({
          nodeId: this.id
        }), e;
      }
    }, {
      key: "isOverlappingWith",
      value: function (t) {
        return this.shape.left < t.right && this.shape.left + this.shape.width > t.left && this.shape.top < t.bottom && this.shape.top + this.shape.height > t.top;
      }
    }, {
      key: "isBoundingBoxOverlappingWith",
      value: function (t) {
        return this.shape.boundingBox.left < t.right && this.shape.boundingBox.right > t.left && this.shape.boundingBox.top < t.bottom && this.shape.boundingBox.bottom > t.top;
      }
    }], [{
      key: "updateGroupOptions",
      value: function (t, e, i) {
        if (void 0 !== i) {
          var o = t.group;
          if (void 0 !== e && void 0 !== e.group && o !== e.group) throw new Error("updateGroupOptions: group values in options don't match.");

          if ("number" == typeof o || "string" == typeof o && "" != o) {
            var n = i.get(o),
                s = ["font"];
            void 0 !== e && void 0 !== e.color && null != e.color && s.push("color"), selectiveNotDeepExtend(s, t, n), t.color = parseColor(t.color);
          }
        }
      }
    }, {
      key: "parseOptions",
      value: function (e, i) {
        var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},
            s = arguments.length > 4 ? arguments[4] : void 0,
            r = ["color", "fixed", "shadow"];

        if (selectiveNotDeepExtend(r, e, i, o), t.checkMass(i), mergeOptions(e, i, "shadow", n), void 0 !== i.color && null !== i.color) {
          var a = parseColor(i.color);
          fillIfDefined(e.color, a);
        } else !0 === o && null === i.color && (e.color = bridgeObject(n.color));

        void 0 !== i.fixed && null !== i.fixed && ("boolean" == typeof i.fixed ? (e.fixed.x = i.fixed, e.fixed.y = i.fixed) : (void 0 !== i.fixed.x && "boolean" == typeof i.fixed.x && (e.fixed.x = i.fixed.x), void 0 !== i.fixed.y && "boolean" == typeof i.fixed.y && (e.fixed.y = i.fixed.y))), !0 === o && null === i.font && (e.font = bridgeObject(n.font)), t.updateGroupOptions(e, i, s), void 0 !== i.scaling && mergeOptions(e.scaling, i.scaling, "label", n.scaling);
      }
    }, {
      key: "checkMass",
      value: function (t, e) {
        if (void 0 !== t.mass && t.mass <= 0) {
          var i = "";
          void 0 !== e && (i = " in node id: " + e), console.log("%cNegative or zero mass disallowed" + i + ", setting mass to 1.", kh), t.mass = 1;
        }
      }
    }]), t;
  }(),
      Eh = function () {
    function t(e, i, o, n) {
      var s = this;
      if (pn(this, t), this.body = e, this.images = i, this.groups = o, this.layoutEngine = n, this.body.functions.createNode = this.create.bind(this), this.nodesListeners = {
        add: function (t, e) {
          s.add(e.items);
        },
        update: function (t, e) {
          s.update(e.items, e.data, e.oldData);
        },
        remove: function (t, e) {
          s.remove(e.items);
        }
      }, this.defaultOptions = {
        borderWidth: 1,
        borderWidthSelected: 2,
        brokenImage: void 0,
        color: {
          border: "#2B7CE9",
          background: "#97C2FC",
          highlight: {
            border: "#2B7CE9",
            background: "#D2E5FF"
          },
          hover: {
            border: "#2B7CE9",
            background: "#D2E5FF"
          }
        },
        fixed: {
          x: !1,
          y: !1
        },
        font: {
          color: "#343434",
          size: 14,
          face: "arial",
          background: "none",
          strokeWidth: 0,
          strokeColor: "#ffffff",
          align: "center",
          vadjust: 0,
          multi: !1,
          bold: {
            mod: "bold"
          },
          boldital: {
            mod: "bold italic"
          },
          ital: {
            mod: "italic"
          },
          mono: {
            mod: "",
            size: 15,
            face: "monospace",
            vadjust: 2
          }
        },
        group: void 0,
        hidden: !1,
        icon: {
          face: "FontAwesome",
          code: void 0,
          size: 50,
          color: "#2B7CE9"
        },
        image: void 0,
        imagePadding: {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        },
        label: void 0,
        labelHighlightBold: !0,
        level: void 0,
        margin: {
          top: 5,
          right: 5,
          bottom: 5,
          left: 5
        },
        mass: 1,
        physics: !0,
        scaling: {
          min: 10,
          max: 30,
          label: {
            enabled: !1,
            min: 14,
            max: 30,
            maxVisible: 30,
            drawThreshold: 5
          },
          customScalingFunction: function (t, e, i, o) {
            if (e === t) return .5;
            var n = 1 / (e - t);
            return Math.max(0, (o - t) * n);
          }
        },
        shadow: {
          enabled: !1,
          color: "rgba(0,0,0,0.5)",
          size: 10,
          x: 5,
          y: 5
        },
        shape: "ellipse",
        shapeProperties: {
          borderDashes: !1,
          borderRadius: 6,
          interpolation: !0,
          useImageSize: !1,
          useBorderWithImage: !1
        },
        size: 25,
        title: void 0,
        value: void 0,
        x: void 0,
        y: void 0
      }, this.defaultOptions.mass <= 0) throw "Internal error: mass in defaultOptions of NodesHandler may not be zero or negative";
      this.options = bridgeObject(this.defaultOptions), this.bindEventListeners();
    }

    return vn(t, [{
      key: "bindEventListeners",
      value: function () {
        var t = this;
        this.body.emitter.on("refreshNodes", this.refresh.bind(this)), this.body.emitter.on("refresh", this.refresh.bind(this)), this.body.emitter.on("destroy", function () {
          forEach(t.nodesListeners, function (e, i) {
            t.body.data.nodes && t.body.data.nodes.off(i, e);
          }), delete t.body.functions.createNode, delete t.nodesListeners.add, delete t.nodesListeners.update, delete t.nodesListeners.remove, delete t.nodesListeners;
        });
      }
    }, {
      key: "setOptions",
      value: function (t) {
        if (void 0 !== t) {
          if (xh.parseOptions(this.options, t), void 0 !== t.shape) for (var e in this.body.nodes) this.body.nodes.hasOwnProperty(e) && this.body.nodes[e].updateShape();
          if (void 0 !== t.font) for (var i in this.body.nodes) this.body.nodes.hasOwnProperty(i) && (this.body.nodes[i].updateLabelModule(), this.body.nodes[i].needsRefresh());
          if (void 0 !== t.size) for (var o in this.body.nodes) this.body.nodes.hasOwnProperty(o) && this.body.nodes[o].needsRefresh();
          void 0 === t.hidden && void 0 === t.physics || this.body.emitter.emit("_dataChanged");
        }
      }
    }, {
      key: "setData",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            i = this.body.data.nodes;
        if (t instanceof DataSet || t instanceof DataView) this.body.data.nodes = t;else if (Array.isArray(t)) this.body.data.nodes = new DataSet(), this.body.data.nodes.add(t);else {
          if (t) throw new TypeError("Array or DataSet expected");
          this.body.data.nodes = new DataSet();
        }

        if (i && forEach(this.nodesListeners, function (t, e) {
          i.off(e, t);
        }), this.body.nodes = {}, this.body.data.nodes) {
          var n = this;
          forEach(this.nodesListeners, function (t, e) {
            n.body.data.nodes.on(e, t);
          });
          var s = this.body.data.nodes.getIds();
          this.add(s, !0);
        }

        !1 === e && this.body.emitter.emit("_dataChanged");
      }
    }, {
      key: "add",
      value: function (t) {
        for (var e, i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], o = [], n = 0; n < t.length; n++) {
          e = t[n];
          var s = this.body.data.nodes.get(e),
              r = this.create(s);
          o.push(r), this.body.nodes[e] = r;
        }

        this.layoutEngine.positionInitially(o), !1 === i && this.body.emitter.emit("_dataChanged");
      }
    }, {
      key: "update",
      value: function (t, e, i) {
        for (var o = this.body.nodes, n = !1, s = 0; s < t.length; s++) {
          var r = t[s],
              a = o[r],
              h = e[s];
          void 0 !== a ? a.setOptions(h) && (n = !0) : (n = !0, a = this.create(h), o[r] = a);
        }

        n || void 0 === i || (n = e.some(function (t, e) {
          var o = i[e];
          return o && o.level !== t.level;
        })), !0 === n ? this.body.emitter.emit("_dataChanged") : this.body.emitter.emit("_dataUpdated");
      }
    }, {
      key: "remove",
      value: function (t) {
        for (var e = this.body.nodes, i = 0; i < t.length; i++) {
          delete e[t[i]];
        }

        this.body.emitter.emit("_dataChanged");
      }
    }, {
      key: "create",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : xh;
        return new e(t, this.body, this.images, this.groups, this.options, this.defaultOptions);
      }
    }, {
      key: "refresh",
      value: function () {
        var t = this,
            e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
        forEach(this.body.nodes, function (i, o) {
          var n = t.body.data.nodes.get(o);
          void 0 !== n && (!0 === e && i.setOptions({
            x: null,
            y: null
          }), i.setOptions({
            fixed: !1
          }), i.setOptions(n));
        });
      }
    }, {
      key: "getPositions",
      value: function (t) {
        var e = {};

        if (void 0 !== t) {
          if (!0 === Array.isArray(t)) {
            for (var i = 0; i < t.length; i++) if (void 0 !== this.body.nodes[t[i]]) {
              var o = this.body.nodes[t[i]];
              e[t[i]] = {
                x: Math.round(o.x),
                y: Math.round(o.y)
              };
            }
          } else if (void 0 !== this.body.nodes[t]) {
            var n = this.body.nodes[t];
            e[t] = {
              x: Math.round(n.x),
              y: Math.round(n.y)
            };
          }
        } else for (var s = 0; s < this.body.nodeIndices.length; s++) {
          var r = this.body.nodes[this.body.nodeIndices[s]];
          e[this.body.nodeIndices[s]] = {
            x: Math.round(r.x),
            y: Math.round(r.y)
          };
        }

        return e;
      }
    }, {
      key: "storePositions",
      value: function () {
        var t = [],
            e = this.body.data.nodes.getDataSet();

        for (var i in e._data) if (e._data.hasOwnProperty(i)) {
          var o = this.body.nodes[i];
          e._data[i].x == Math.round(o.x) && e._data[i].y == Math.round(o.y) || t.push({
            id: o.id,
            x: Math.round(o.x),
            y: Math.round(o.y)
          });
        }

        e.update(t);
      }
    }, {
      key: "getBoundingBox",
      value: function (t) {
        if (void 0 !== this.body.nodes[t]) return this.body.nodes[t].shape.boundingBox;
      }
    }, {
      key: "getConnectedNodes",
      value: function (t, e) {
        var i = [];
        if (void 0 !== this.body.nodes[t]) for (var o = this.body.nodes[t], n = {}, s = 0; s < o.edges.length; s++) {
          var r = o.edges[s];
          "to" !== e && r.toId == o.id ? void 0 === n[r.fromId] && (i.push(r.fromId), n[r.fromId] = !0) : "from" !== e && r.fromId == o.id && void 0 === n[r.toId] && (i.push(r.toId), n[r.toId] = !0);
        }
        return i;
      }
    }, {
      key: "getConnectedEdges",
      value: function (t) {
        var e = [];
        if (void 0 !== this.body.nodes[t]) for (var i = this.body.nodes[t], o = 0; o < i.edges.length; o++) e.push(i.edges[o].id);else console.log("NodeId provided for getConnectedEdges does not exist. Provided: ", t);
        return e;
      }
    }, {
      key: "moveNode",
      value: function (t, e, i) {
        var o = this;
        void 0 !== this.body.nodes[t] ? (this.body.nodes[t].x = Number(e), this.body.nodes[t].y = Number(i), setTimeout(function () {
          o.body.emitter.emit("startSimulation");
        }, 0)) : console.log("Node id supplied to moveNode does not exist. Provided: ", t);
      }
    }]), t;
  }(),
      Oh = Math.hypot,
      Ch = Math.abs,
      Sh = Math.sqrt,
      Th = !!Oh && Oh(1 / 0, NaN) !== 1 / 0;

  de({
    target: "Math",
    stat: !0,
    forced: Th
  }, {
    hypot: function (t, e) {
      for (var i, o, n = 0, s = 0, r = arguments.length, a = 0; s < r;) a < (i = Ch(arguments[s++])) ? (n = n * (o = a / i) * o + 1, a = i) : n += i > 0 ? (o = i / a) * o : i;

      return a === 1 / 0 ? 1 / 0 : a * Sh(n);
    }
  });

  var Mh = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "transform",
      value: function (t, e) {
        Array.isArray(t) || (t = [t]);

        for (var i = e.point.x, o = e.point.y, n = e.angle, s = e.length, r = 0; r < t.length; ++r) {
          var a = t[r],
              h = a.x * Math.cos(n) - a.y * Math.sin(n),
              d = a.x * Math.sin(n) + a.y * Math.cos(n);
          a.x = i + s * h, a.y = o + s * d;
        }
      }
    }, {
      key: "drawPath",
      value: function (t, e) {
        t.beginPath(), t.moveTo(e[0].x, e[0].y);

        for (var i = 1; i < e.length; ++i) t.lineTo(e[i].x, e[i].y);

        t.closePath();
      }
    }]), t;
  }(),
      Dh = function (t) {
    function e() {
      return pn(this, e), _n(this, wn(e).apply(this, arguments));
    }

    return bn(e, Mh), vn(e, null, [{
      key: "draw",
      value: function (t, e) {
        if (e.image) {
          t.save(), t.translate(e.point.x, e.point.y), t.rotate(Math.PI / 2 + e.angle);
          var i = null != e.imageWidth ? e.imageWidth : e.image.width,
              o = null != e.imageHeight ? e.imageHeight : e.image.height;
          e.image.drawImageAtPosition(t, 1, -i / 2, 0, i, o), t.restore();
        }

        return !1;
      }
    }]), e;
  }(),
      Ih = function (t) {
    function e() {
      return pn(this, e), _n(this, wn(e).apply(this, arguments));
    }

    return bn(e, Mh), vn(e, null, [{
      key: "draw",
      value: function (t, e) {
        var i = [{
          x: 0,
          y: 0
        }, {
          x: -1,
          y: .3
        }, {
          x: -.9,
          y: 0
        }, {
          x: -1,
          y: -.3
        }];
        return Mh.transform(i, e), Mh.drawPath(t, i), !0;
      }
    }]), e;
  }(),
      Ph = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "draw",
      value: function (t, e) {
        var i = [{
          x: -1,
          y: 0
        }, {
          x: 0,
          y: .3
        }, {
          x: -.4,
          y: 0
        }, {
          x: 0,
          y: -.3
        }];
        return Mh.transform(i, e), Mh.drawPath(t, i), !0;
      }
    }]), t;
  }(),
      Fh = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "draw",
      value: function (t, e) {
        var i = {
          x: -.4,
          y: 0
        };
        Mh.transform(i, e), t.strokeStyle = t.fillStyle, t.fillStyle = "rgba(0, 0, 0, 0)";
        var o = Math.PI,
            n = e.angle - o / 2,
            s = e.angle + o / 2;
        return t.beginPath(), t.arc(i.x, i.y, .4 * e.length, n, s, !1), t.stroke(), !0;
      }
    }]), t;
  }(),
      zh = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "draw",
      value: function (t, e) {
        var i = {
          x: -.3,
          y: 0
        };
        Mh.transform(i, e), t.strokeStyle = t.fillStyle, t.fillStyle = "rgba(0, 0, 0, 0)";
        var o = Math.PI,
            n = e.angle + o / 2,
            s = e.angle + 3 * o / 2;
        return t.beginPath(), t.arc(i.x, i.y, .4 * e.length, n, s, !1), t.stroke(), !0;
      }
    }]), t;
  }(),
      Nh = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "draw",
      value: function (t, e) {
        var i = [{
          x: .02,
          y: 0
        }, {
          x: -1,
          y: .3
        }, {
          x: -1,
          y: -.3
        }];
        return Mh.transform(i, e), Mh.drawPath(t, i), !0;
      }
    }]), t;
  }(),
      Bh = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "draw",
      value: function (t, e) {
        var i = [{
          x: 0,
          y: .3
        }, {
          x: 0,
          y: -.3
        }, {
          x: -1,
          y: 0
        }];
        return Mh.transform(i, e), Mh.drawPath(t, i), !0;
      }
    }]), t;
  }(),
      Ah = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "draw",
      value: function (t, e) {
        var i = {
          x: -.4,
          y: 0
        };
        return Mh.transform(i, e), t.circle(i.x, i.y, .4 * e.length), !0;
      }
    }]), t;
  }(),
      Rh = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "draw",
      value: function (t, e) {
        var i = [{
          x: 0,
          y: .5
        }, {
          x: 0,
          y: -.5
        }, {
          x: -.15,
          y: -.5
        }, {
          x: -.15,
          y: .5
        }];
        return Mh.transform(i, e), Mh.drawPath(t, i), !0;
      }
    }]), t;
  }(),
      jh = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "draw",
      value: function (t, e) {
        var i = [{
          x: 0,
          y: .3
        }, {
          x: 0,
          y: -.3
        }, {
          x: -.6,
          y: -.3
        }, {
          x: -.6,
          y: .3
        }];
        return Mh.transform(i, e), Mh.drawPath(t, i), !0;
      }
    }]), t;
  }(),
      Lh = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "draw",
      value: function (t, e) {
        var i = [{
          x: 0,
          y: 0
        }, {
          x: -.5,
          y: -.3
        }, {
          x: -1,
          y: 0
        }, {
          x: -.5,
          y: .3
        }];
        return Mh.transform(i, e), Mh.drawPath(t, i), !0;
      }
    }]), t;
  }(),
      Hh = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "draw",
      value: function (t, e) {
        var i = [{
          x: -1,
          y: .3
        }, {
          x: -.5,
          y: 0
        }, {
          x: -1,
          y: -.3
        }, {
          x: 0,
          y: 0
        }];
        return Mh.transform(i, e), Mh.drawPath(t, i), !0;
      }
    }]), t;
  }(),
      Wh = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "draw",
      value: function (t, e) {
        var i;

        switch (e.type && (i = e.type.toLowerCase()), i) {
          case "image":
            return Dh.draw(t, e);

          case "circle":
            return Ah.draw(t, e);

          case "box":
            return jh.draw(t, e);

          case "crow":
            return Ph.draw(t, e);

          case "curve":
            return Fh.draw(t, e);

          case "diamond":
            return Lh.draw(t, e);

          case "inv_curve":
            return zh.draw(t, e);

          case "triangle":
            return Nh.draw(t, e);

          case "inv_triangle":
            return Bh.draw(t, e);

          case "bar":
            return Rh.draw(t, e);

          case "vee":
            return Hh.draw(t, e);

          case "arrow":
          default:
            return Ih.draw(t, e);
        }
      }
    }]), t;
  }(),
      Vh = function () {
    function t(e, i, o) {
      pn(this, t), this._body = i, this._labelModule = o, this.color = {}, this.colorDirty = !0, this.hoverWidth = 1.5, this.selectionWidth = 2, this.setOptions(e), this.fromPoint = this.from, this.toPoint = this.to;
    }

    return vn(t, [{
      key: "connect",
      value: function () {
        this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to];
      }
    }, {
      key: "cleanup",
      value: function () {
        return !1;
      }
    }, {
      key: "setOptions",
      value: function (t) {
        this.options = t, this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], this.id = this.options.id;
      }
    }, {
      key: "drawLine",
      value: function (t, e, i, o) {
        var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.getViaNode();
        t.strokeStyle = this.getColor(t, e), t.lineWidth = e.width, !1 !== e.dashes ? this._drawDashedLine(t, e, n) : this._drawLine(t, e, n);
      }
    }, {
      key: "_drawLine",
      value: function (t, e, i, o, n) {
        if (this.from != this.to) this._line(t, e, i, o, n);else {
          var s = On(this._getCircleData(t), 3),
              r = s[0],
              a = s[1],
              h = s[2];

          this._circle(t, e, r, a, h);
        }
      }
    }, {
      key: "_drawDashedLine",
      value: function (t, e, i, o, n) {
        t.lineCap = "round";
        var s = Array.isArray(e.dashes) ? e.dashes : [5, 5];

        if (void 0 !== t.setLineDash) {
          if (t.save(), t.setLineDash(s), t.lineDashOffset = 0, this.from != this.to) this._line(t, e, i);else {
            var r = On(this._getCircleData(t), 3),
                a = r[0],
                h = r[1],
                d = r[2];

            this._circle(t, e, a, h, d);
          }
          t.setLineDash([0]), t.lineDashOffset = 0, t.restore();
        } else {
          if (this.from != this.to) t.dashedLine(this.from.x, this.from.y, this.to.x, this.to.y, s);else {
            var l = On(this._getCircleData(t), 3),
                c = l[0],
                u = l[1],
                p = l[2];

            this._circle(t, e, c, u, p);
          }
          this.enableShadow(t, e), t.stroke(), this.disableShadow(t, e);
        }
      }
    }, {
      key: "findBorderPosition",
      value: function (t, e, i) {
        return this.from != this.to ? this._findBorderPosition(t, e, i) : this._findBorderPositionCircle(t, e, i);
      }
    }, {
      key: "findBorderPositions",
      value: function (t) {
        if (this.from != this.to) return {
          from: this._findBorderPosition(this.from, t),
          to: this._findBorderPosition(this.to, t)
        };
        var e = On(this._getCircleData(t).slice(0, 2), 2),
            i = e[0],
            o = e[1];
        return {
          from: this._findBorderPositionCircle(this.from, t, {
            x: i,
            y: o,
            low: .25,
            high: .6,
            direction: -1
          }),
          to: this._findBorderPositionCircle(this.from, t, {
            x: i,
            y: o,
            low: .6,
            high: .8,
            direction: 1
          })
        };
      }
    }, {
      key: "_getCircleData",
      value: function (t) {
        var e,
            i,
            o = this.from,
            n = this.options.selfReferenceSize;
        return void 0 !== t && void 0 === o.shape.width && o.shape.resize(t), o.shape.width > o.shape.height ? (e = o.x + .5 * o.shape.width, i = o.y - n) : (e = o.x + n, i = o.y - .5 * o.shape.height), [e, i, n];
      }
    }, {
      key: "_pointOnCircle",
      value: function (t, e, i, o) {
        var n = 2 * o * Math.PI;
        return {
          x: t + i * Math.cos(n),
          y: e - i * Math.sin(n)
        };
      }
    }, {
      key: "_findBorderPositionCircle",
      value: function (t, e, i) {
        var o,
            n = i.x,
            s = i.y,
            r = i.low,
            a = i.high,
            h = i.direction,
            d = this.options.selfReferenceSize,
            l = .5 * (r + a),
            c = 0;

        do {
          l = .5 * (r + a), o = this._pointOnCircle(n, s, d, l);
          var u = Math.atan2(t.y - o.y, t.x - o.x),
              p = t.distanceToBorder(e, u) - Math.sqrt(Math.pow(o.x - t.x, 2) + Math.pow(o.y - t.y, 2));
          if (Math.abs(p) < .05) break;
          p > 0 ? h > 0 ? r = l : a = l : h > 0 ? a = l : r = l, ++c;
        } while (r <= a && c < 10);

        return mn({}, o, {
          t: l
        });
      }
    }, {
      key: "getLineWidth",
      value: function (t, e) {
        return !0 === t ? Math.max(this.selectionWidth, .3 / this._body.view.scale) : !0 === e ? Math.max(this.hoverWidth, .3 / this._body.view.scale) : Math.max(this.options.width, .3 / this._body.view.scale);
      }
    }, {
      key: "getColor",
      value: function (t, e) {
        if (!1 !== e.inheritsColor) {
          if ("both" === e.inheritsColor && this.from.id !== this.to.id) {
            var i = t.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y),
                o = this.from.options.color.highlight.border,
                n = this.to.options.color.highlight.border;
            return !1 === this.from.selected && !1 === this.to.selected ? (o = overrideOpacity(this.from.options.color.border, e.opacity), n = overrideOpacity(this.to.options.color.border, e.opacity)) : !0 === this.from.selected && !1 === this.to.selected ? n = this.to.options.color.border : !1 === this.from.selected && !0 === this.to.selected && (o = this.from.options.color.border), i.addColorStop(0, o), i.addColorStop(1, n), i;
          }

          return "to" === e.inheritsColor ? overrideOpacity(this.to.options.color.border, e.opacity) : overrideOpacity(this.from.options.color.border, e.opacity);
        }

        return overrideOpacity(e.color, e.opacity);
      }
    }, {
      key: "_circle",
      value: function (t, e, i, o, n) {
        this.enableShadow(t, e), t.beginPath(), t.arc(i, o, n, 0, 2 * Math.PI, !1), t.stroke(), this.disableShadow(t, e);
      }
    }, {
      key: "getDistanceToEdge",
      value: function (t, e, i, o, n, s) {
        if (this.from != this.to) return this._getDistanceToEdge(t, e, i, o, n, s);
        var r = On(this._getCircleData(void 0), 3),
            a = r[0],
            h = r[1],
            d = r[2],
            l = a - n,
            c = h - s;
        return Math.abs(Math.sqrt(l * l + c * c) - d);
      }
    }, {
      key: "_getDistanceToLine",
      value: function (t, e, i, o, n, s) {
        var r = i - t,
            a = o - e,
            h = ((n - t) * r + (s - e) * a) / (r * r + a * a);
        h > 1 ? h = 1 : h < 0 && (h = 0);
        var d = t + h * r - n,
            l = e + h * a - s;
        return Math.sqrt(d * d + l * l);
      }
    }, {
      key: "getArrowData",
      value: function (t, e, i, o, n, s) {
        var r,
            a,
            h,
            d,
            l,
            c,
            u,
            p = s.width;
        "from" === e ? (h = this.from, d = this.to, l = s.fromArrowScale < 0, c = Math.abs(s.fromArrowScale), u = s.fromArrowType) : "to" === e ? (h = this.to, d = this.from, l = s.toArrowScale < 0, c = Math.abs(s.toArrowScale), u = s.toArrowType) : (h = this.to, d = this.from, l = s.middleArrowScale < 0, c = Math.abs(s.middleArrowScale), u = s.middleArrowType);
        var f = 15 * c + 3 * p;

        if (h != d) {
          var v = f / Math.hypot(h.x - d.x, h.y - d.y);
          if ("middle" !== e) {
            if (!0 === this.options.smooth.enabled) {
              var g = this._findBorderPosition(h, t, {
                via: i
              }),
                  y = this.getPoint(g.t + v * ("from" === e ? 1 : -1), i);

              r = Math.atan2(g.y - y.y, g.x - y.x), a = g;
            } else r = Math.atan2(h.y - d.y, h.x - d.x), a = this._findBorderPosition(h, t);
          } else {
            var m = (l ? -v : v) / 2,
                b = this.getPoint(.5 + m, i),
                w = this.getPoint(.5 - m, i);
            r = Math.atan2(b.y - w.y, b.x - w.x), a = this.getPoint(.5, i);
          }
        } else {
          var k = On(this._getCircleData(t), 3),
              _ = k[0],
              x = k[1],
              E = k[2];

          if ("from" === e) {
            var O = this._findBorderPositionCircle(this.from, t, {
              x: _,
              y: x,
              low: .25,
              high: .6,
              direction: -1
            });

            r = -2 * O.t * Math.PI + 1.5 * Math.PI + .1 * Math.PI, a = O;
          } else if ("to" === e) {
            var C = this._findBorderPositionCircle(this.from, t, {
              x: _,
              y: x,
              low: .6,
              high: 1,
              direction: 1
            });

            r = -2 * C.t * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI, a = C;
          } else a = this._pointOnCircle(_, x, E, .175), r = 3.9269908169872414;
        }

        return {
          point: a,
          core: {
            x: a.x - .9 * f * Math.cos(r),
            y: a.y - .9 * f * Math.sin(r)
          },
          angle: r,
          length: f,
          type: u
        };
      }
    }, {
      key: "drawArrowHead",
      value: function (t, e, i, o, n) {
        t.strokeStyle = this.getColor(t, e), t.fillStyle = t.strokeStyle, t.lineWidth = e.width, Wh.draw(t, n) && (this.enableShadow(t, e), t.fill(), this.disableShadow(t, e));
      }
    }, {
      key: "enableShadow",
      value: function (t, e) {
        !0 === e.shadow && (t.shadowColor = e.shadowColor, t.shadowBlur = e.shadowSize, t.shadowOffsetX = e.shadowX, t.shadowOffsetY = e.shadowY);
      }
    }, {
      key: "disableShadow",
      value: function (t, e) {
        !0 === e.shadow && (t.shadowColor = "rgba(0,0,0,0)", t.shadowBlur = 0, t.shadowOffsetX = 0, t.shadowOffsetY = 0);
      }
    }, {
      key: "drawBackground",
      value: function (t, e) {
        if (!1 !== e.background) {
          var i = {
            strokeStyle: t.strokeStyle,
            lineWidth: t.lineWidth,
            dashes: t.dashes
          };
          t.strokeStyle = e.backgroundColor, t.lineWidth = e.backgroundSize, this.setStrokeDashed(t, e.backgroundDashes), t.stroke(), t.strokeStyle = i.strokeStyle, t.lineWidth = i.lineWidth, t.dashes = i.dashes, this.setStrokeDashed(t, e.dashes);
        }
      }
    }, {
      key: "setStrokeDashed",
      value: function (t, e) {
        if (!1 !== e) {
          if (void 0 !== t.setLineDash) {
            var i = Array.isArray(e) ? e : [5, 5];
            t.setLineDash(i);
          } else console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
        } else void 0 !== t.setLineDash ? t.setLineDash([]) : console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
      }
    }]), t;
  }(),
      qh = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, Vh), vn(e, [{
      key: "_findBorderPositionBezier",
      value: function (t, e) {
        var i,
            o,
            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this._getViaCoordinates(),
            s = 10,
            r = .2,
            a = !1,
            h = 1,
            d = 0,
            l = this.to;
        t.id === this.from.id && (l = this.from, a = !0);
        var c = 0;

        do {
          o = .5 * (d + h), i = this.getPoint(o, n);
          var u = Math.atan2(l.y - i.y, l.x - i.x),
              p = l.distanceToBorder(e, u),
              f = Math.sqrt(Math.pow(i.x - l.x, 2) + Math.pow(i.y - l.y, 2)),
              v = p - f;
          if (Math.abs(v) < r) break;
          v < 0 ? !1 === a ? d = o : h = o : !1 === a ? h = o : d = o, ++c;
        } while (d <= h && c < s);

        return mn({}, i, {
          t: o
        });
      }
    }, {
      key: "_getDistanceToBezierEdge",
      value: function (t, e, i, o, n, s, r) {
        var a,
            h,
            d,
            l,
            c,
            u = 1e9,
            p = t,
            f = e;

        for (h = 1; h < 10; h++) d = .1 * h, l = Math.pow(1 - d, 2) * t + 2 * d * (1 - d) * r.x + Math.pow(d, 2) * i, c = Math.pow(1 - d, 2) * e + 2 * d * (1 - d) * r.y + Math.pow(d, 2) * o, h > 0 && (u = (a = this._getDistanceToLine(p, f, l, c, n, s)) < u ? a : u), p = l, f = c;

        return u;
      }
    }, {
      key: "_bezierCurve",
      value: function (t, e, i, o) {
        t.beginPath(), t.moveTo(this.fromPoint.x, this.fromPoint.y), null != i && null != i.x ? null != o && null != o.x ? t.bezierCurveTo(i.x, i.y, o.x, o.y, this.toPoint.x, this.toPoint.y) : t.quadraticCurveTo(i.x, i.y, this.toPoint.x, this.toPoint.y) : t.lineTo(this.toPoint.x, this.toPoint.y), this.drawBackground(t, e), this.enableShadow(t, e), t.stroke(), this.disableShadow(t, e);
      }
    }, {
      key: "getViaNode",
      value: function () {
        return this._getViaCoordinates();
      }
    }]), e;
  }(),
      Uh = function (t) {
    function e(t, i, o) {
      var n;
      return pn(this, e), (n = _n(this, wn(e).call(this, t, i, o))).via = n.via, n._boundFunction = function () {
        n.positionBezierNode();
      }, n._body.emitter.on("_repositionBezierNodes", n._boundFunction), n;
    }

    return bn(e, qh), vn(e, [{
      key: "setOptions",
      value: function (t) {
        xn(wn(e.prototype), "setOptions", this).call(this, t);
        var i = !1;
        this.options.physics !== t.physics && (i = !0), this.options = t, this.id = this.options.id, this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], this.setupSupportNode(), this.connect(), !0 === i && (this.via.setOptions({
          physics: this.options.physics
        }), this.positionBezierNode());
      }
    }, {
      key: "connect",
      value: function () {
        this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], void 0 === this.from || void 0 === this.to || !1 === this.options.physics ? this.via.setOptions({
          physics: !1
        }) : this.from.id === this.to.id ? this.via.setOptions({
          physics: !1
        }) : this.via.setOptions({
          physics: !0
        });
      }
    }, {
      key: "cleanup",
      value: function () {
        return this._body.emitter.off("_repositionBezierNodes", this._boundFunction), void 0 !== this.via && (delete this._body.nodes[this.via.id], this.via = void 0, !0);
      }
    }, {
      key: "setupSupportNode",
      value: function () {
        if (void 0 === this.via) {
          var t = "edgeId:" + this.id,
              e = this._body.functions.createNode({
            id: t,
            shape: "circle",
            physics: !0,
            hidden: !0
          });

          this._body.nodes[t] = e, this.via = e, this.via.parentEdgeId = this.id, this.positionBezierNode();
        }
      }
    }, {
      key: "positionBezierNode",
      value: function () {
        void 0 !== this.via && void 0 !== this.from && void 0 !== this.to ? (this.via.x = .5 * (this.from.x + this.to.x), this.via.y = .5 * (this.from.y + this.to.y)) : void 0 !== this.via && (this.via.x = 0, this.via.y = 0);
      }
    }, {
      key: "_line",
      value: function (t, e, i) {
        this._bezierCurve(t, e, i);
      }
    }, {
      key: "_getViaCoordinates",
      value: function () {
        return this.via;
      }
    }, {
      key: "getViaNode",
      value: function () {
        return this.via;
      }
    }, {
      key: "getPoint",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.via;

        if (this.from === this.to) {
          var i = this._getCircleData(),
              o = On(i, 3),
              n = o[0],
              s = o[1],
              r = o[2],
              a = 2 * Math.PI * (1 - t);

          return {
            x: n + r * Math.sin(a),
            y: s + r - r * (1 - Math.cos(a))
          };
        }

        return {
          x: Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * e.x + Math.pow(t, 2) * this.toPoint.x,
          y: Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * e.y + Math.pow(t, 2) * this.toPoint.y
        };
      }
    }, {
      key: "_findBorderPosition",
      value: function (t, e) {
        return this._findBorderPositionBezier(t, e, this.via);
      }
    }, {
      key: "_getDistanceToEdge",
      value: function (t, e, i, o, n, s) {
        return this._getDistanceToBezierEdge(t, e, i, o, n, s, this.via);
      }
    }]), e;
  }(),
      Yh = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, qh), vn(e, [{
      key: "_line",
      value: function (t, e, i) {
        this._bezierCurve(t, e, i);
      }
    }, {
      key: "getViaNode",
      value: function () {
        return this._getViaCoordinates();
      }
    }, {
      key: "_getViaCoordinates",
      value: function () {
        var t,
            e,
            i = this.options.smooth.roundness,
            o = this.options.smooth.type,
            n = Math.abs(this.from.x - this.to.x),
            s = Math.abs(this.from.y - this.to.y);

        if ("discrete" === o || "diagonalCross" === o) {
          var r, a;
          r = a = n <= s ? i * s : i * n, this.from.x > this.to.x && (r = -r), this.from.y >= this.to.y && (a = -a);
          var h = this.from.x + r,
              d = this.from.y + a;
          return "discrete" === o && (n <= s ? h = n < i * s ? this.from.x : h : d = s < i * n ? this.from.y : d), {
            x: h,
            y: d
          };
        }

        if ("straightCross" === o) {
          var l = (1 - i) * n,
              c = (1 - i) * s;
          return n <= s ? (l = 0, this.from.y < this.to.y && (c = -c)) : (this.from.x < this.to.x && (l = -l), c = 0), {
            x: this.to.x + l,
            y: this.to.y + c
          };
        }

        if ("horizontal" === o) {
          var u = (1 - i) * n;
          return this.from.x < this.to.x && (u = -u), {
            x: this.to.x + u,
            y: this.from.y
          };
        }

        if ("vertical" === o) {
          var p = (1 - i) * s;
          return this.from.y < this.to.y && (p = -p), {
            x: this.from.x,
            y: this.to.y + p
          };
        }

        if ("curvedCW" === o) {
          n = this.to.x - this.from.x, s = this.from.y - this.to.y;
          var f = Math.sqrt(n * n + s * s),
              v = Math.PI,
              g = (Math.atan2(s, n) + (.5 * i + .5) * v) % (2 * v);
          return {
            x: this.from.x + (.5 * i + .5) * f * Math.sin(g),
            y: this.from.y + (.5 * i + .5) * f * Math.cos(g)
          };
        }

        if ("curvedCCW" === o) {
          n = this.to.x - this.from.x, s = this.from.y - this.to.y;
          var y = Math.sqrt(n * n + s * s),
              m = Math.PI,
              b = (Math.atan2(s, n) + (.5 * -i + .5) * m) % (2 * m);
          return {
            x: this.from.x + (.5 * i + .5) * y * Math.sin(b),
            y: this.from.y + (.5 * i + .5) * y * Math.cos(b)
          };
        }

        t = e = n <= s ? i * s : i * n, this.from.x > this.to.x && (t = -t), this.from.y >= this.to.y && (e = -e);
        var w = this.from.x + t,
            k = this.from.y + e;
        return n <= s ? w = this.from.x <= this.to.x ? this.to.x < w ? this.to.x : w : this.to.x > w ? this.to.x : w : k = this.from.y >= this.to.y ? this.to.y > k ? this.to.y : k : this.to.y < k ? this.to.y : k, {
          x: w,
          y: k
        };
      }
    }, {
      key: "_findBorderPosition",
      value: function (t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        return this._findBorderPositionBezier(t, e, i.via);
      }
    }, {
      key: "_getDistanceToEdge",
      value: function (t, e, i, o, n, s) {
        var r = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : this._getViaCoordinates();
        return this._getDistanceToBezierEdge(t, e, i, o, n, s, r);
      }
    }, {
      key: "getPoint",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._getViaCoordinates(),
            i = t,
            o = Math.pow(1 - i, 2) * this.fromPoint.x + 2 * i * (1 - i) * e.x + Math.pow(i, 2) * this.toPoint.x,
            n = Math.pow(1 - i, 2) * this.fromPoint.y + 2 * i * (1 - i) * e.y + Math.pow(i, 2) * this.toPoint.y;
        return {
          x: o,
          y: n
        };
      }
    }]), e;
  }(),
      Xh = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, qh), vn(e, [{
      key: "_getDistanceToBezierEdge2",
      value: function (t, e, i, o, n, s, r, a) {
        for (var h = 1e9, d = t, l = e, c = [0, 0, 0, 0], u = 1; u < 10; u++) {
          var p = .1 * u;
          c[0] = Math.pow(1 - p, 3), c[1] = 3 * p * Math.pow(1 - p, 2), c[2] = 3 * Math.pow(p, 2) * (1 - p), c[3] = Math.pow(p, 3);
          var f = c[0] * t + c[1] * r.x + c[2] * a.x + c[3] * i,
              v = c[0] * e + c[1] * r.y + c[2] * a.y + c[3] * o;

          if (u > 0) {
            var g = this._getDistanceToLine(d, l, f, v, n, s);

            h = g < h ? g : h;
          }

          d = f, l = v;
        }

        return h;
      }
    }]), e;
  }(),
      Gh = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, Xh), vn(e, [{
      key: "_line",
      value: function (t, e, i) {
        var o = i[0],
            n = i[1];

        this._bezierCurve(t, e, o, n);
      }
    }, {
      key: "_getViaCoordinates",
      value: function () {
        var t,
            e,
            i,
            o,
            n = this.from.x - this.to.x,
            s = this.from.y - this.to.y,
            r = this.options.smooth.roundness;
        return (Math.abs(n) > Math.abs(s) || !0 === this.options.smooth.forceDirection || "horizontal" === this.options.smooth.forceDirection) && "vertical" !== this.options.smooth.forceDirection ? (e = this.from.y, o = this.to.y, t = this.from.x - r * n, i = this.to.x + r * n) : (e = this.from.y - r * s, o = this.to.y + r * s, t = this.from.x, i = this.to.x), [{
          x: t,
          y: e
        }, {
          x: i,
          y: o
        }];
      }
    }, {
      key: "getViaNode",
      value: function () {
        return this._getViaCoordinates();
      }
    }, {
      key: "_findBorderPosition",
      value: function (t, e) {
        return this._findBorderPositionBezier(t, e);
      }
    }, {
      key: "_getDistanceToEdge",
      value: function (t, e, i, o, n, s) {
        var r = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : this._getViaCoordinates(),
            a = On(r, 2),
            h = a[0],
            d = a[1];
        return this._getDistanceToBezierEdge2(t, e, i, o, n, s, h, d);
      }
    }, {
      key: "getPoint",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._getViaCoordinates(),
            i = On(e, 2),
            o = i[0],
            n = i[1],
            s = t,
            r = [Math.pow(1 - s, 3), 3 * s * Math.pow(1 - s, 2), 3 * Math.pow(s, 2) * (1 - s), Math.pow(s, 3)],
            a = r[0] * this.fromPoint.x + r[1] * o.x + r[2] * n.x + r[3] * this.toPoint.x,
            h = r[0] * this.fromPoint.y + r[1] * o.y + r[2] * n.y + r[3] * this.toPoint.y;
        return {
          x: a,
          y: h
        };
      }
    }]), e;
  }(),
      Kh = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, Vh), vn(e, [{
      key: "_line",
      value: function (t, e) {
        t.beginPath(), t.moveTo(this.fromPoint.x, this.fromPoint.y), t.lineTo(this.toPoint.x, this.toPoint.y), this.enableShadow(t, e), t.stroke(), this.disableShadow(t, e);
      }
    }, {
      key: "getViaNode",
      value: function () {}
    }, {
      key: "getPoint",
      value: function (t) {
        return {
          x: (1 - t) * this.fromPoint.x + t * this.toPoint.x,
          y: (1 - t) * this.fromPoint.y + t * this.toPoint.y
        };
      }
    }, {
      key: "_findBorderPosition",
      value: function (t, e) {
        var i = this.to,
            o = this.from;
        t.id === this.from.id && (i = this.from, o = this.to);
        var n = Math.atan2(i.y - o.y, i.x - o.x),
            s = i.x - o.x,
            r = i.y - o.y,
            a = Math.sqrt(s * s + r * r),
            h = (a - t.distanceToBorder(e, n)) / a;
        return {
          x: (1 - h) * o.x + h * i.x,
          y: (1 - h) * o.y + h * i.y,
          t: 0
        };
      }
    }, {
      key: "_getDistanceToEdge",
      value: function (t, e, i, o, n, s) {
        return this._getDistanceToLine(t, e, i, o, n, s);
      }
    }]), e;
  }(),
      $h = function () {
    function t(e, i, o, n, s) {
      if (pn(this, t), void 0 === i) throw new Error("No body provided");
      this.options = bridgeObject(n), this.globalOptions = n, this.defaultOptions = s, this.body = i, this.imagelist = o, this.id = void 0, this.fromId = void 0, this.toId = void 0, this.selected = !1, this.hover = !1, this.labelDirty = !0, this.baseWidth = this.options.width, this.baseFontSize = this.options.font.size, this.from = void 0, this.to = void 0, this.edgeType = void 0, this.connected = !1, this.labelModule = new th(this.body, this.options, !0), this.setOptions(e);
    }

    return vn(t, [{
      key: "setOptions",
      value: function (e) {
        if (e) {
          var i = void 0 !== e.physics && this.options.physics !== e.physics || void 0 !== e.hidden && (this.options.hidden || !1) !== (e.hidden || !1) || void 0 !== e.from && this.options.from !== e.from || void 0 !== e.to && this.options.to !== e.to;
          t.parseOptions(this.options, e, !0, this.globalOptions), void 0 !== e.id && (this.id = e.id), void 0 !== e.from && (this.fromId = e.from), void 0 !== e.to && (this.toId = e.to), void 0 !== e.title && (this.title = e.title), void 0 !== e.value && (e.value = parseFloat(e.value));
          var o = [e, this.options, this.defaultOptions];
          return this.chooser = Xr.choosify("edge", o), this.updateLabelModule(e), i = this.updateEdgeType() || i, this._setInteractionWidths(), this.connect(), i;
        }
      }
    }, {
      key: "getFormattingValues",
      value: function () {
        var t = !0 === this.options.arrows.to || !0 === this.options.arrows.to.enabled,
            e = !0 === this.options.arrows.from || !0 === this.options.arrows.from.enabled,
            i = !0 === this.options.arrows.middle || !0 === this.options.arrows.middle.enabled,
            o = this.options.color.inherit,
            n = {
          toArrow: t,
          toArrowScale: this.options.arrows.to.scaleFactor,
          toArrowType: this.options.arrows.to.type,
          toArrowSrc: this.options.arrows.to.src,
          toArrowImageWidth: this.options.arrows.to.imageWidth,
          toArrowImageHeight: this.options.arrows.to.imageHeight,
          middleArrow: i,
          middleArrowScale: this.options.arrows.middle.scaleFactor,
          middleArrowType: this.options.arrows.middle.type,
          middleArrowSrc: this.options.arrows.middle.src,
          middleArrowImageWidth: this.options.arrows.middle.imageWidth,
          middleArrowImageHeight: this.options.arrows.middle.imageHeight,
          fromArrow: e,
          fromArrowScale: this.options.arrows.from.scaleFactor,
          fromArrowType: this.options.arrows.from.type,
          fromArrowSrc: this.options.arrows.from.src,
          fromArrowImageWidth: this.options.arrows.from.imageWidth,
          fromArrowImageHeight: this.options.arrows.from.imageHeight,
          arrowStrikethrough: this.options.arrowStrikethrough,
          color: o ? void 0 : this.options.color.color,
          inheritsColor: o,
          opacity: this.options.color.opacity,
          hidden: this.options.hidden,
          length: this.options.length,
          shadow: this.options.shadow.enabled,
          shadowColor: this.options.shadow.color,
          shadowSize: this.options.shadow.size,
          shadowX: this.options.shadow.x,
          shadowY: this.options.shadow.y,
          dashes: this.options.dashes,
          width: this.options.width,
          background: this.options.background.enabled,
          backgroundColor: this.options.background.color,
          backgroundSize: this.options.background.size,
          backgroundDashes: this.options.background.dashes
        };
        if (this.selected || this.hover) {
          if (!0 === this.chooser) {
            if (this.selected) {
              var s = this.options.selectionWidth;
              "function" == typeof s ? n.width = s(n.width) : "number" == typeof s && (n.width += s), n.width = Math.max(n.width, .3 / this.body.view.scale), n.color = this.options.color.highlight, n.shadow = this.options.shadow.enabled;
            } else if (this.hover) {
              var r = this.options.hoverWidth;
              "function" == typeof r ? n.width = r(n.width) : "number" == typeof r && (n.width += r), n.width = Math.max(n.width, .3 / this.body.view.scale), n.color = this.options.color.hover, n.shadow = this.options.shadow.enabled;
            }
          } else "function" == typeof this.chooser && (this.chooser(n, this.options.id, this.selected, this.hover), void 0 !== n.color && (n.inheritsColor = !1), !1 === n.shadow && (n.shadowColor === this.options.shadow.color && n.shadowSize === this.options.shadow.size && n.shadowX === this.options.shadow.x && n.shadowY === this.options.shadow.y || (n.shadow = !0)));
        } else n.shadow = this.options.shadow.enabled, n.width = Math.max(n.width, .3 / this.body.view.scale);
        return n;
      }
    }, {
      key: "updateLabelModule",
      value: function (t) {
        var e = [t, this.options, this.globalOptions, this.defaultOptions];
        this.labelModule.update(this.options, e), void 0 !== this.labelModule.baseSize && (this.baseFontSize = this.labelModule.baseSize);
      }
    }, {
      key: "updateEdgeType",
      value: function () {
        var t = this.options.smooth,
            e = !1,
            i = !0;
        return void 0 !== this.edgeType && ((this.edgeType instanceof Uh && !0 === t.enabled && "dynamic" === t.type || this.edgeType instanceof Gh && !0 === t.enabled && "cubicBezier" === t.type || this.edgeType instanceof Yh && !0 === t.enabled && "dynamic" !== t.type && "cubicBezier" !== t.type || this.edgeType instanceof Kh && !1 === t.type.enabled) && (i = !1), !0 === i && (e = this.cleanup())), !0 === i ? !0 === t.enabled ? "dynamic" === t.type ? (e = !0, this.edgeType = new Uh(this.options, this.body, this.labelModule)) : "cubicBezier" === t.type ? this.edgeType = new Gh(this.options, this.body, this.labelModule) : this.edgeType = new Yh(this.options, this.body, this.labelModule) : this.edgeType = new Kh(this.options, this.body, this.labelModule) : this.edgeType.setOptions(this.options), e;
      }
    }, {
      key: "connect",
      value: function () {
        this.disconnect(), this.from = this.body.nodes[this.fromId] || void 0, this.to = this.body.nodes[this.toId] || void 0, this.connected = void 0 !== this.from && void 0 !== this.to, !0 === this.connected ? (this.from.attachEdge(this), this.to.attachEdge(this)) : (this.from && this.from.detachEdge(this), this.to && this.to.detachEdge(this)), this.edgeType.connect();
      }
    }, {
      key: "disconnect",
      value: function () {
        this.from && (this.from.detachEdge(this), this.from = void 0), this.to && (this.to.detachEdge(this), this.to = void 0), this.connected = !1;
      }
    }, {
      key: "getTitle",
      value: function () {
        return this.title;
      }
    }, {
      key: "isSelected",
      value: function () {
        return this.selected;
      }
    }, {
      key: "getValue",
      value: function () {
        return this.options.value;
      }
    }, {
      key: "setValueRange",
      value: function (t, e, i) {
        if (void 0 !== this.options.value) {
          var o = this.options.scaling.customScalingFunction(t, e, i, this.options.value),
              n = this.options.scaling.max - this.options.scaling.min;

          if (!0 === this.options.scaling.label.enabled) {
            var s = this.options.scaling.label.max - this.options.scaling.label.min;
            this.options.font.size = this.options.scaling.label.min + o * s;
          }

          this.options.width = this.options.scaling.min + o * n;
        } else this.options.width = this.baseWidth, this.options.font.size = this.baseFontSize;

        this._setInteractionWidths(), this.updateLabelModule();
      }
    }, {
      key: "_setInteractionWidths",
      value: function () {
        "function" == typeof this.options.hoverWidth ? this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width) : this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width, "function" == typeof this.options.selectionWidth ? this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width) : this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;
      }
    }, {
      key: "draw",
      value: function (t) {
        var e = this.getFormattingValues();

        if (!e.hidden) {
          var i = this.edgeType.getViaNode(),
              o = {};
          this.edgeType.fromPoint = this.edgeType.from, this.edgeType.toPoint = this.edgeType.to, e.fromArrow && (o.from = this.edgeType.getArrowData(t, "from", i, this.selected, this.hover, e), !1 === e.arrowStrikethrough && (this.edgeType.fromPoint = o.from.core), e.fromArrowSrc && (o.from.image = this.imagelist.load(e.fromArrowSrc)), e.fromArrowImageWidth && (o.from.imageWidth = e.fromArrowImageWidth), e.fromArrowImageHeight && (o.from.imageHeight = e.fromArrowImageHeight)), e.toArrow && (o.to = this.edgeType.getArrowData(t, "to", i, this.selected, this.hover, e), !1 === e.arrowStrikethrough && (this.edgeType.toPoint = o.to.core), e.toArrowSrc && (o.to.image = this.imagelist.load(e.toArrowSrc)), e.toArrowImageWidth && (o.to.imageWidth = e.toArrowImageWidth), e.toArrowImageHeight && (o.to.imageHeight = e.toArrowImageHeight)), e.middleArrow && (o.middle = this.edgeType.getArrowData(t, "middle", i, this.selected, this.hover, e), e.middleArrowSrc && (o.middle.image = this.imagelist.load(e.middleArrowSrc)), e.middleArrowImageWidth && (o.middle.imageWidth = e.middleArrowImageWidth), e.middleArrowImageHeight && (o.middle.imageHeight = e.middleArrowImageHeight)), this.edgeType.drawLine(t, e, this.selected, this.hover, i), this.drawArrows(t, o, e), this.drawLabel(t, i);
        }
      }
    }, {
      key: "drawArrows",
      value: function (t, e, i) {
        i.fromArrow && this.edgeType.drawArrowHead(t, i, this.selected, this.hover, e.from), i.middleArrow && this.edgeType.drawArrowHead(t, i, this.selected, this.hover, e.middle), i.toArrow && this.edgeType.drawArrowHead(t, i, this.selected, this.hover, e.to);
      }
    }, {
      key: "drawLabel",
      value: function (t, e) {
        if (void 0 !== this.options.label) {
          var i = this.from,
              o = this.to;

          if (this.labelModule.differentState(this.selected, this.hover) && this.labelModule.getTextSize(t, this.selected, this.hover), i.id != o.id) {
            this.labelModule.pointToSelf = !1;
            var n = this.edgeType.getPoint(.5, e);
            t.save();

            var s = this._getRotation(t);

            0 != s.angle && (t.translate(s.x, s.y), t.rotate(s.angle)), this.labelModule.draw(t, n.x, n.y, this.selected, this.hover), t.restore();
          } else {
            var r, a;
            this.labelModule.pointToSelf = !0;
            var h = this.options.selfReferenceSize;
            i.shape.width > i.shape.height ? (r = i.x + .5 * i.shape.width, a = i.y - h) : (r = i.x + h, a = i.y - .5 * i.shape.height), n = this._pointOnCircle(r, a, h, .125), this.labelModule.draw(t, n.x, n.y, this.selected, this.hover);
          }
        }
      }
    }, {
      key: "getItemsOnPoint",
      value: function (t) {
        var e = [];

        if (this.labelModule.visible()) {
          var i = this._getRotation();

          Xr.pointInRect(this.labelModule.getSize(), t, i) && e.push({
            edgeId: this.id,
            labelId: 0
          });
        }

        var o = {
          left: t.x,
          top: t.y
        };
        return this.isOverlappingWith(o) && e.push({
          edgeId: this.id
        }), e;
      }
    }, {
      key: "isOverlappingWith",
      value: function (t) {
        if (this.connected) {
          var e = this.from.x,
              i = this.from.y,
              o = this.to.x,
              n = this.to.y,
              s = t.left,
              r = t.top;
          return this.edgeType.getDistanceToEdge(e, i, o, n, s, r) < 10;
        }

        return !1;
      }
    }, {
      key: "_getRotation",
      value: function (t) {
        var e = this.edgeType.getViaNode(),
            i = this.edgeType.getPoint(.5, e);
        void 0 !== t && this.labelModule.calculateLabelSize(t, this.selected, this.hover, i.x, i.y);
        var o = {
          x: i.x,
          y: this.labelModule.size.yLine,
          angle: 0
        };
        if (!this.labelModule.visible()) return o;
        if ("horizontal" === this.options.font.align) return o;
        var n = this.from.y - this.to.y,
            s = this.from.x - this.to.x,
            r = Math.atan2(n, s);
        return (r < -1 && s < 0 || r > 0 && s < 0) && (r += Math.PI), o.angle = r, o;
      }
    }, {
      key: "_pointOnCircle",
      value: function (t, e, i, o) {
        var n = 2 * o * Math.PI;
        return {
          x: t + i * Math.cos(n),
          y: e - i * Math.sin(n)
        };
      }
    }, {
      key: "select",
      value: function () {
        this.selected = !0;
      }
    }, {
      key: "unselect",
      value: function () {
        this.selected = !1;
      }
    }, {
      key: "cleanup",
      value: function () {
        return this.edgeType.cleanup();
      }
    }, {
      key: "remove",
      value: function () {
        this.cleanup(), this.disconnect(), delete this.body.edges[this.id];
      }
    }, {
      key: "endPointsValid",
      value: function () {
        return void 0 !== this.body.nodes[this.fromId] && void 0 !== this.body.nodes[this.toId];
      }
    }], [{
      key: "parseOptions",
      value: function (t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},
            s = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
            r = ["arrowStrikethrough", "id", "from", "hidden", "hoverWidth", "labelHighlightBold", "length", "line", "opacity", "physics", "scaling", "selectionWidth", "selfReferenceSize", "to", "title", "value", "width", "font", "chosen", "widthConstraint"];
        if (selectiveDeepExtend(r, t, e, i), Xr.isValidLabel(e.label) ? t.label = e.label : Xr.isValidLabel(t.label) || (t.label = void 0), mergeOptions(t, e, "smooth", o), mergeOptions(t, e, "shadow", o), mergeOptions(t, e, "background", o), void 0 !== e.dashes && null !== e.dashes ? t.dashes = e.dashes : !0 === i && null === e.dashes && (t.dashes = Object.create(o.dashes)), void 0 !== e.scaling && null !== e.scaling ? (void 0 !== e.scaling.min && (t.scaling.min = e.scaling.min), void 0 !== e.scaling.max && (t.scaling.max = e.scaling.max), mergeOptions(t.scaling, e.scaling, "label", o.scaling)) : !0 === i && null === e.scaling && (t.scaling = Object.create(o.scaling)), void 0 !== e.arrows && null !== e.arrows) {
          if ("string" == typeof e.arrows) {
            var a = e.arrows.toLowerCase();
            t.arrows.to.enabled = -1 != a.indexOf("to"), t.arrows.middle.enabled = -1 != a.indexOf("middle"), t.arrows.from.enabled = -1 != a.indexOf("from");
          } else {
            if ("object" !== un(e.arrows)) throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:" + JSON.stringify(e.arrows));
            mergeOptions(t.arrows, e.arrows, "to", o.arrows), mergeOptions(t.arrows, e.arrows, "middle", o.arrows), mergeOptions(t.arrows, e.arrows, "from", o.arrows);
          }
        } else !0 === i && null === e.arrows && (t.arrows = Object.create(o.arrows));

        if (void 0 !== e.color && null !== e.color) {
          var h = isString(e.color) ? {
            color: e.color,
            highlight: e.color,
            hover: e.color,
            inherit: !1,
            opacity: 1
          } : e.color,
              d = t.color;
          if (s) deepExtend(d, o.color, !1, i);else for (var c in d) d.hasOwnProperty(c) && delete d[c];
          if (isString(d)) d.color = d, d.highlight = d, d.hover = d, d.inherit = !1, void 0 === h.opacity && (d.opacity = 1);else {
            var v = !1;
            void 0 !== h.color && (d.color = h.color, v = !0), void 0 !== h.highlight && (d.highlight = h.highlight, v = !0), void 0 !== h.hover && (d.hover = h.hover, v = !0), void 0 !== h.inherit && (d.inherit = h.inherit), void 0 !== h.opacity && (d.opacity = Math.min(1, Math.max(0, h.opacity))), !0 === v ? d.inherit = !1 : void 0 === d.inherit && (d.inherit = "from");
          }
        } else !0 === i && null === e.color && (t.color = bridgeObject(o.color));

        !0 === i && null === e.font && (t.font = bridgeObject(o.font));
      }
    }]), t;
  }(),
      Zh = function () {
    function t(e, i, o) {
      var s = this;
      pn(this, t), this.body = e, this.images = i, this.groups = o, this.body.functions.createEdge = this.create.bind(this), this.edgesListeners = {
        add: function (t, e) {
          s.add(e.items);
        },
        update: function (t, e) {
          s.update(e.items);
        },
        remove: function (t, e) {
          s.remove(e.items);
        }
      }, this.options = {}, this.defaultOptions = {
        arrows: {
          to: {
            enabled: !1,
            scaleFactor: 1,
            type: "arrow"
          },
          middle: {
            enabled: !1,
            scaleFactor: 1,
            type: "arrow"
          },
          from: {
            enabled: !1,
            scaleFactor: 1,
            type: "arrow"
          }
        },
        arrowStrikethrough: !0,
        color: {
          color: "#848484",
          highlight: "#848484",
          hover: "#848484",
          inherit: "from",
          opacity: 1
        },
        dashes: !1,
        font: {
          color: "#343434",
          size: 14,
          face: "arial",
          background: "none",
          strokeWidth: 2,
          strokeColor: "#ffffff",
          align: "horizontal",
          multi: !1,
          vadjust: 0,
          bold: {
            mod: "bold"
          },
          boldital: {
            mod: "bold italic"
          },
          ital: {
            mod: "italic"
          },
          mono: {
            mod: "",
            size: 15,
            face: "courier new",
            vadjust: 2
          }
        },
        hidden: !1,
        hoverWidth: 1.5,
        label: void 0,
        labelHighlightBold: !0,
        length: void 0,
        physics: !0,
        scaling: {
          min: 1,
          max: 15,
          label: {
            enabled: !0,
            min: 14,
            max: 30,
            maxVisible: 30,
            drawThreshold: 5
          },
          customScalingFunction: function (t, e, i, o) {
            if (e === t) return .5;
            var n = 1 / (e - t);
            return Math.max(0, (o - t) * n);
          }
        },
        selectionWidth: 1.5,
        selfReferenceSize: 20,
        shadow: {
          enabled: !1,
          color: "rgba(0,0,0,0.5)",
          size: 10,
          x: 5,
          y: 5
        },
        background: {
          enabled: !1,
          color: "rgba(111,111,111,1)",
          size: 10,
          dashes: !1
        },
        smooth: {
          enabled: !0,
          type: "dynamic",
          forceDirection: "none",
          roundness: .5
        },
        title: void 0,
        width: 1,
        value: void 0
      }, deepExtend(this.options, this.defaultOptions), this.bindEventListeners();
    }

    return vn(t, [{
      key: "bindEventListeners",
      value: function () {
        var t = this;
        this.body.emitter.on("_forceDisableDynamicCurves", function (e) {
          var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          "dynamic" === e && (e = "continuous");
          var o = !1;

          for (var n in t.body.edges) if (t.body.edges.hasOwnProperty(n)) {
            var s = t.body.edges[n],
                r = t.body.data.edges._data[n];

            if (void 0 !== r) {
              var a = r.smooth;
              void 0 !== a && !0 === a.enabled && "dynamic" === a.type && (void 0 === e ? s.setOptions({
                smooth: !1
              }) : s.setOptions({
                smooth: {
                  type: e
                }
              }), o = !0);
            }
          }

          !0 === i && !0 === o && t.body.emitter.emit("_dataChanged");
        }), this.body.emitter.on("_dataUpdated", function () {
          t.reconnectEdges();
        }), this.body.emitter.on("refreshEdges", this.refresh.bind(this)), this.body.emitter.on("refresh", this.refresh.bind(this)), this.body.emitter.on("destroy", function () {
          forEach(t.edgesListeners, function (e, i) {
            t.body.data.edges && t.body.data.edges.off(i, e);
          }), delete t.body.functions.createEdge, delete t.edgesListeners.add, delete t.edgesListeners.update, delete t.edgesListeners.remove, delete t.edgesListeners;
        });
      }
    }, {
      key: "setOptions",
      value: function (t) {
        if (void 0 !== t) {
          $h.parseOptions(this.options, t, !0, this.defaultOptions, !0);
          var e = !1;
          if (void 0 !== t.smooth) for (var i in this.body.edges) this.body.edges.hasOwnProperty(i) && (e = this.body.edges[i].updateEdgeType() || e);
          if (void 0 !== t.font) for (var o in this.body.edges) this.body.edges.hasOwnProperty(o) && this.body.edges[o].updateLabelModule();
          void 0 === t.hidden && void 0 === t.physics && !0 !== e || this.body.emitter.emit("_dataChanged");
        }
      }
    }, {
      key: "setData",
      value: function (t) {
        var e = this,
            i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            n = this.body.data.edges;
        if (t instanceof DataSet || t instanceof DataView) this.body.data.edges = t;else if (Array.isArray(t)) this.body.data.edges = new DataSet(), this.body.data.edges.add(t);else {
          if (t) throw new TypeError("Array or DataSet expected");
          this.body.data.edges = new DataSet();
        }

        if (n && forEach(this.edgesListeners, function (t, e) {
          n.off(e, t);
        }), this.body.edges = {}, this.body.data.edges) {
          forEach(this.edgesListeners, function (t, i) {
            e.body.data.edges.on(i, t);
          });
          var s = this.body.data.edges.getIds();
          this.add(s, !0);
        }

        this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), !1 === i && this.body.emitter.emit("_dataChanged");
      }
    }, {
      key: "add",
      value: function (t) {
        for (var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = this.body.edges, o = this.body.data.edges, n = 0; n < t.length; n++) {
          var s = t[n],
              r = i[s];
          r && r.disconnect();
          var a = o.get(s, {
            showInternalIds: !0
          });
          i[s] = this.create(a);
        }

        this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), !1 === e && this.body.emitter.emit("_dataChanged");
      }
    }, {
      key: "update",
      value: function (t) {
        for (var e = this.body.edges, i = this.body.data.edges, o = !1, n = 0; n < t.length; n++) {
          var s = t[n],
              r = i.get(s),
              a = e[s];
          void 0 !== a ? (a.disconnect(), o = a.setOptions(r) || o, a.connect()) : (this.body.edges[s] = this.create(r), o = !0);
        }

        !0 === o ? (this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), this.body.emitter.emit("_dataChanged")) : this.body.emitter.emit("_dataUpdated");
      }
    }, {
      key: "remove",
      value: function (t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];

        if (0 !== t.length) {
          var i = this.body.edges;
          forEach(t, function (t) {
            var e = i[t];
            void 0 !== e && e.remove();
          }), e && this.body.emitter.emit("_dataChanged");
        }
      }
    }, {
      key: "refresh",
      value: function () {
        var t = this;
        forEach(this.body.edges, function (e, i) {
          var o = t.body.data.edges._data[i];
          void 0 !== o && e.setOptions(o);
        });
      }
    }, {
      key: "create",
      value: function (t) {
        return new $h(t, this.body, this.images, this.options, this.defaultOptions);
      }
    }, {
      key: "reconnectEdges",
      value: function () {
        var t,
            e = this.body.nodes,
            i = this.body.edges;

        for (t in e) e.hasOwnProperty(t) && (e[t].edges = []);

        for (t in i) if (i.hasOwnProperty(t)) {
          var o = i[t];
          o.from = null, o.to = null, o.connect();
        }
      }
    }, {
      key: "getConnectedNodes",
      value: function (t) {
        var e = [];

        if (void 0 !== this.body.edges[t]) {
          var i = this.body.edges[t];
          void 0 !== i.fromId && e.push(i.fromId), void 0 !== i.toId && e.push(i.toId);
        }

        return e;
      }
    }, {
      key: "_updateState",
      value: function () {
        this._addMissingEdges(), this._removeInvalidEdges();
      }
    }, {
      key: "_removeInvalidEdges",
      value: function () {
        var t = this,
            e = [];
        forEach(this.body.edges, function (i, o) {
          var n = t.body.nodes[i.toId],
              s = t.body.nodes[i.fromId];
          void 0 !== n && !0 === n.isCluster || void 0 !== s && !0 === s.isCluster || void 0 !== n && void 0 !== s || e.push(o);
        }), this.remove(e, !1);
      }
    }, {
      key: "_addMissingEdges",
      value: function () {
        var t = this.body.data.edges;

        if (null != t) {
          var e = this.body.edges,
              i = [];
          t.forEach(function (t, o) {
            void 0 === e[o] && i.push(o);
          }), this.add(i, !0);
        }
      }
    }]), t;
  }(),
      Jh = function () {
    function t(e, i, o) {
      pn(this, t), this.body = e, this.physicsBody = i, this.barnesHutTree, this.setOptions(o), this.randomSeed = 5;
    }

    return vn(t, [{
      key: "setOptions",
      value: function (t) {
        this.options = t, this.thetaInversed = 1 / this.options.theta, this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap));
      }
    }, {
      key: "seededRandom",
      value: function () {
        var t = 1e4 * Math.sin(this.randomSeed++);
        return t - Math.floor(t);
      }
    }, {
      key: "solve",
      value: function () {
        if (0 !== this.options.gravitationalConstant && this.physicsBody.physicsNodeIndices.length > 0) {
          var t,
              e = this.body.nodes,
              i = this.physicsBody.physicsNodeIndices,
              o = i.length,
              n = this._formBarnesHutTree(e, i);

          this.barnesHutTree = n;

          for (var s = 0; s < o; s++) (t = e[i[s]]).options.mass > 0 && this._getForceContributions(n.root, t);
        }
      }
    }, {
      key: "_getForceContributions",
      value: function (t, e) {
        this._getForceContribution(t.children.NW, e), this._getForceContribution(t.children.NE, e), this._getForceContribution(t.children.SW, e), this._getForceContribution(t.children.SE, e);
      }
    }, {
      key: "_getForceContribution",
      value: function (t, e) {
        var i, o, n;
        t.childrenCount > 0 && (i = t.centerOfMass.x - e.x, o = t.centerOfMass.y - e.y, (n = Math.sqrt(i * i + o * o)) * t.calcSize > this.thetaInversed ? this._calculateForces(n, i, o, e, t) : 4 === t.childrenCount ? this._getForceContributions(t, e) : t.children.data.id != e.id && this._calculateForces(n, i, o, e, t));
      }
    }, {
      key: "_calculateForces",
      value: function (t, e, i, o, n) {
        0 === t && (e = t = .1), this.overlapAvoidanceFactor < 1 && o.shape.radius && (t = Math.max(.1 + this.overlapAvoidanceFactor * o.shape.radius, t - o.shape.radius));
        var s = this.options.gravitationalConstant * n.mass * o.options.mass / Math.pow(t, 3),
            r = e * s,
            a = i * s;
        this.physicsBody.forces[o.id].x += r, this.physicsBody.forces[o.id].y += a;
      }
    }, {
      key: "_formBarnesHutTree",
      value: function (t, e) {
        for (var i, o = e.length, n = t[e[0]].x, s = t[e[0]].y, r = t[e[0]].x, a = t[e[0]].y, h = 1; h < o; h++) {
          var d = t[e[h]],
              l = d.x,
              c = d.y;
          d.options.mass > 0 && (l < n && (n = l), l > r && (r = l), c < s && (s = c), c > a && (a = c));
        }

        var u = Math.abs(r - n) - Math.abs(a - s);
        u > 0 ? (s -= .5 * u, a += .5 * u) : (n += .5 * u, r -= .5 * u);
        var p = Math.max(1e-5, Math.abs(r - n)),
            f = .5 * p,
            v = .5 * (n + r),
            g = .5 * (s + a),
            y = {
          root: {
            centerOfMass: {
              x: 0,
              y: 0
            },
            mass: 0,
            range: {
              minX: v - f,
              maxX: v + f,
              minY: g - f,
              maxY: g + f
            },
            size: p,
            calcSize: 1 / p,
            children: {
              data: null
            },
            maxWidth: 0,
            level: 0,
            childrenCount: 4
          }
        };

        this._splitBranch(y.root);

        for (var m = 0; m < o; m++) (i = t[e[m]]).options.mass > 0 && this._placeInTree(y.root, i);

        return y;
      }
    }, {
      key: "_updateBranchMass",
      value: function (t, e) {
        var i = t.centerOfMass,
            o = t.mass + e.options.mass,
            n = 1 / o;
        i.x = i.x * t.mass + e.x * e.options.mass, i.x *= n, i.y = i.y * t.mass + e.y * e.options.mass, i.y *= n, t.mass = o;
        var s = Math.max(Math.max(e.height, e.radius), e.width);
        t.maxWidth = t.maxWidth < s ? s : t.maxWidth;
      }
    }, {
      key: "_placeInTree",
      value: function (t, e, i) {
        1 == i && void 0 !== i || this._updateBranchMass(t, e);
        var o,
            n = t.children.NW.range;
        o = n.maxX > e.x ? n.maxY > e.y ? "NW" : "SW" : n.maxY > e.y ? "NE" : "SE", this._placeInRegion(t, e, o);
      }
    }, {
      key: "_placeInRegion",
      value: function (t, e, i) {
        var o = t.children[i];

        switch (o.childrenCount) {
          case 0:
            o.children.data = e, o.childrenCount = 1, this._updateBranchMass(o, e);
            break;

          case 1:
            o.children.data.x === e.x && o.children.data.y === e.y ? (e.x += this.seededRandom(), e.y += this.seededRandom()) : (this._splitBranch(o), this._placeInTree(o, e));
            break;

          case 4:
            this._placeInTree(o, e);

        }
      }
    }, {
      key: "_splitBranch",
      value: function (t) {
        var e = null;
        1 === t.childrenCount && (e = t.children.data, t.mass = 0, t.centerOfMass.x = 0, t.centerOfMass.y = 0), t.childrenCount = 4, t.children.data = null, this._insertRegion(t, "NW"), this._insertRegion(t, "NE"), this._insertRegion(t, "SW"), this._insertRegion(t, "SE"), null != e && this._placeInTree(t, e);
      }
    }, {
      key: "_insertRegion",
      value: function (t, e) {
        var i,
            o,
            n,
            s,
            r = .5 * t.size;

        switch (e) {
          case "NW":
            i = t.range.minX, o = t.range.minX + r, n = t.range.minY, s = t.range.minY + r;
            break;

          case "NE":
            i = t.range.minX + r, o = t.range.maxX, n = t.range.minY, s = t.range.minY + r;
            break;

          case "SW":
            i = t.range.minX, o = t.range.minX + r, n = t.range.minY + r, s = t.range.maxY;
            break;

          case "SE":
            i = t.range.minX + r, o = t.range.maxX, n = t.range.minY + r, s = t.range.maxY;
        }

        t.children[e] = {
          centerOfMass: {
            x: 0,
            y: 0
          },
          mass: 0,
          range: {
            minX: i,
            maxX: o,
            minY: n,
            maxY: s
          },
          size: .5 * t.size,
          calcSize: 2 * t.calcSize,
          children: {
            data: null
          },
          maxWidth: 0,
          level: t.level + 1,
          childrenCount: 0
        };
      }
    }, {
      key: "_debug",
      value: function (t, e) {
        void 0 !== this.barnesHutTree && (t.lineWidth = 1, this._drawBranch(this.barnesHutTree.root, t, e));
      }
    }, {
      key: "_drawBranch",
      value: function (t, e, i) {
        void 0 === i && (i = "#FF0000"), 4 === t.childrenCount && (this._drawBranch(t.children.NW, e), this._drawBranch(t.children.NE, e), this._drawBranch(t.children.SE, e), this._drawBranch(t.children.SW, e)), e.strokeStyle = i, e.beginPath(), e.moveTo(t.range.minX, t.range.minY), e.lineTo(t.range.maxX, t.range.minY), e.stroke(), e.beginPath(), e.moveTo(t.range.maxX, t.range.minY), e.lineTo(t.range.maxX, t.range.maxY), e.stroke(), e.beginPath(), e.moveTo(t.range.maxX, t.range.maxY), e.lineTo(t.range.minX, t.range.maxY), e.stroke(), e.beginPath(), e.moveTo(t.range.minX, t.range.maxY), e.lineTo(t.range.minX, t.range.minY), e.stroke();
      }
    }]), t;
  }(),
      Qh = function () {
    function t(e, i, o) {
      pn(this, t), this.body = e, this.physicsBody = i, this.setOptions(o);
    }

    return vn(t, [{
      key: "setOptions",
      value: function (t) {
        this.options = t;
      }
    }, {
      key: "solve",
      value: function () {
        for (var t, e, i, o, n, s, r, a, h = this.body.nodes, d = this.physicsBody.physicsNodeIndices, l = this.physicsBody.forces, c = this.options.nodeDistance, u = -2 / 3 / c, p = 0; p < d.length - 1; p++) {
          r = h[d[p]];

          for (var f = p + 1; f < d.length; f++) t = (a = h[d[f]]).x - r.x, e = a.y - r.y, 0 === (i = Math.sqrt(t * t + e * e)) && (t = i = .1 * Math.random()), i < 2 * c && (s = i < .5 * c ? 1 : u * i + 4 / 3, o = t * (s /= i), n = e * s, l[r.id].x -= o, l[r.id].y -= n, l[a.id].x += o, l[a.id].y += n);
        }
      }
    }]), t;
  }(),
      td = function () {
    function t(e, i, o) {
      pn(this, t), this.body = e, this.physicsBody = i, this.setOptions(o);
    }

    return vn(t, [{
      key: "setOptions",
      value: function (t) {
        this.options = t, this.overlapAvoidanceFactor = Math.max(0, Math.min(1, this.options.avoidOverlap || 0));
      }
    }, {
      key: "solve",
      value: function () {
        for (var t = this.body.nodes, e = this.physicsBody.physicsNodeIndices, i = this.physicsBody.forces, o = this.options.nodeDistance, n = 0; n < e.length - 1; n++) for (var s = t[e[n]], r = n + 1; r < e.length; r++) {
          var a = t[e[r]];

          if (s.level === a.level) {
            var h = o + this.overlapAvoidanceFactor * ((s.shape.radius || 0) / 2 + (a.shape.radius || 0) / 2),
                d = a.x - s.x,
                l = a.y - s.y,
                c = Math.sqrt(d * d + l * l),
                u = void 0;
            u = c < h ? -Math.pow(.05 * c, 2) + Math.pow(.05 * h, 2) : 0, 0 === c ? (En("distance"), c = .01) : u /= c;
            var p = d * u,
                f = l * u;
            i[s.id].x -= p, i[s.id].y -= f, i[a.id].x += p, i[a.id].y += f;
          }
        }
      }
    }]), t;
  }(),
      ed = function () {
    function t(e, i, o) {
      pn(this, t), this.body = e, this.physicsBody = i, this.setOptions(o);
    }

    return vn(t, [{
      key: "setOptions",
      value: function (t) {
        this.options = t;
      }
    }, {
      key: "solve",
      value: function () {
        for (var t, e, i, o, n, s = this.physicsBody.physicsEdgeIndices, r = this.body.edges, a = 0; a < s.length; a++) !0 === (e = r[s[a]]).connected && e.toId !== e.fromId && void 0 !== this.body.nodes[e.toId] && void 0 !== this.body.nodes[e.fromId] && (void 0 !== e.edgeType.via ? (t = void 0 === e.options.length ? this.options.springLength : e.options.length, i = e.to, o = e.edgeType.via, n = e.from, this._calculateSpringForce(i, o, .5 * t), this._calculateSpringForce(o, n, .5 * t)) : (t = void 0 === e.options.length ? 1.5 * this.options.springLength : e.options.length, this._calculateSpringForce(e.from, e.to, t)));
      }
    }, {
      key: "_calculateSpringForce",
      value: function (t, e, i) {
        var o = t.x - e.x,
            n = t.y - e.y,
            s = Math.max(Math.sqrt(o * o + n * n), .01),
            r = this.options.springConstant * (i - s) / s,
            a = o * r,
            h = n * r;
        void 0 !== this.physicsBody.forces[t.id] && (this.physicsBody.forces[t.id].x += a, this.physicsBody.forces[t.id].y += h), void 0 !== this.physicsBody.forces[e.id] && (this.physicsBody.forces[e.id].x -= a, this.physicsBody.forces[e.id].y -= h);
      }
    }]), t;
  }(),
      id$1 = function () {
    function t(e, i, o) {
      pn(this, t), this.body = e, this.physicsBody = i, this.setOptions(o);
    }

    return vn(t, [{
      key: "setOptions",
      value: function (t) {
        this.options = t;
      }
    }, {
      key: "solve",
      value: function () {
        for (var t, e, i, o, n, s, r, a, h, d, l = this.body.edges, c = this.physicsBody.physicsEdgeIndices, u = this.physicsBody.physicsNodeIndices, p = this.physicsBody.forces, f = 0; f < u.length; f++) {
          var v = u[f];
          p[v].springFx = 0, p[v].springFy = 0;
        }

        for (var g = 0; g < c.length; g++) !0 === (e = l[c[g]]).connected && (t = void 0 === e.options.length ? this.options.springLength : e.options.length, i = e.from.x - e.to.x, o = e.from.y - e.to.y, a = 0 === (a = Math.sqrt(i * i + o * o)) ? .01 : a, n = i * (r = this.options.springConstant * (t - a) / a), s = o * r, e.to.level != e.from.level ? (void 0 !== p[e.toId] && (p[e.toId].springFx -= n, p[e.toId].springFy -= s), void 0 !== p[e.fromId] && (p[e.fromId].springFx += n, p[e.fromId].springFy += s)) : (void 0 !== p[e.toId] && (p[e.toId].x -= .5 * n, p[e.toId].y -= .5 * s), void 0 !== p[e.fromId] && (p[e.fromId].x += .5 * n, p[e.fromId].y += .5 * s)));

        r = 1;

        for (var y = 0; y < u.length; y++) {
          var m = u[y];
          h = Math.min(r, Math.max(-r, p[m].springFx)), d = Math.min(r, Math.max(-r, p[m].springFy)), p[m].x += h, p[m].y += d;
        }

        for (var b = 0, w = 0, k = 0; k < u.length; k++) {
          var _ = u[k];
          b += p[_].x, w += p[_].y;
        }

        for (var x = b / u.length, E = w / u.length, O = 0; O < u.length; O++) {
          var C = u[O];
          p[C].x -= x, p[C].y -= E;
        }
      }
    }]), t;
  }(),
      od = function () {
    function t(e, i, o) {
      pn(this, t), this.body = e, this.physicsBody = i, this.setOptions(o);
    }

    return vn(t, [{
      key: "setOptions",
      value: function (t) {
        this.options = t;
      }
    }, {
      key: "solve",
      value: function () {
        for (var t, e, i, o, n = this.body.nodes, s = this.physicsBody.physicsNodeIndices, r = this.physicsBody.forces, a = 0; a < s.length; a++) {
          t = -(o = n[s[a]]).x, e = -o.y, i = Math.sqrt(t * t + e * e), this._calculateForces(i, t, e, r, o);
        }
      }
    }, {
      key: "_calculateForces",
      value: function (t, e, i, o, n) {
        var s = 0 === t ? 0 : this.options.centralGravity / t;
        o[n.id].x = e * s, o[n.id].y = i * s;
      }
    }]), t;
  }(),
      nd = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, Jh), vn(e, [{
      key: "_calculateForces",
      value: function (t, e, i, o, n) {
        0 === t && (e = t = .1 * Math.random()), this.overlapAvoidanceFactor < 1 && o.shape.radius && (t = Math.max(.1 + this.overlapAvoidanceFactor * o.shape.radius, t - o.shape.radius));
        var s = o.edges.length + 1,
            r = this.options.gravitationalConstant * n.mass * o.options.mass * s / Math.pow(t, 2),
            a = e * r,
            h = i * r;
        this.physicsBody.forces[o.id].x += a, this.physicsBody.forces[o.id].y += h;
      }
    }]), e;
  }(),
      sd = function (t) {
    function e(t, i, o) {
      return pn(this, e), _n(this, wn(e).call(this, t, i, o));
    }

    return bn(e, od), vn(e, [{
      key: "_calculateForces",
      value: function (t, e, i, o, n) {
        if (t > 0) {
          var s = n.edges.length + 1,
              r = this.options.centralGravity * s * n.options.mass;
          o[n.id].x = e * r, o[n.id].y = i * r;
        }
      }
    }]), e;
  }(),
      rd = function () {
    function t(i) {
      pn(this, t), this.body = i, this.physicsBody = {
        physicsNodeIndices: [],
        physicsEdgeIndices: [],
        forces: {},
        velocities: {}
      }, this.physicsEnabled = !0, this.simulationInterval = 1e3 / 60, this.requiresTimeout = !0, this.previousStates = {}, this.referenceState = {}, this.freezeCache = {}, this.renderTimer = void 0, this.adaptiveTimestep = !1, this.adaptiveTimestepEnabled = !1, this.adaptiveCounter = 0, this.adaptiveInterval = 3, this.stabilized = !1, this.startedStabilization = !1, this.stabilizationIterations = 0, this.ready = !1, this.options = {}, this.defaultOptions = {
        enabled: !0,
        barnesHut: {
          theta: .5,
          gravitationalConstant: -2e3,
          centralGravity: .3,
          springLength: 95,
          springConstant: .04,
          damping: .09,
          avoidOverlap: 0
        },
        forceAtlas2Based: {
          theta: .5,
          gravitationalConstant: -50,
          centralGravity: .01,
          springConstant: .08,
          springLength: 100,
          damping: .4,
          avoidOverlap: 0
        },
        repulsion: {
          centralGravity: .2,
          springLength: 200,
          springConstant: .05,
          nodeDistance: 100,
          damping: .09,
          avoidOverlap: 0
        },
        hierarchicalRepulsion: {
          centralGravity: 0,
          springLength: 100,
          springConstant: .01,
          nodeDistance: 120,
          damping: .09
        },
        maxVelocity: 50,
        minVelocity: .75,
        solver: "barnesHut",
        stabilization: {
          enabled: !0,
          iterations: 1e3,
          updateInterval: 50,
          onlyDynamicEdges: !1,
          fit: !0
        },
        timestep: .5,
        adaptiveTimestep: !0
      }, extend(this.options, this.defaultOptions), this.timestep = .5, this.layoutFailed = !1, this.bindEventListeners();
    }

    return vn(t, [{
      key: "bindEventListeners",
      value: function () {
        var t = this;
        this.body.emitter.on("initPhysics", function () {
          t.initPhysics();
        }), this.body.emitter.on("_layoutFailed", function () {
          t.layoutFailed = !0;
        }), this.body.emitter.on("resetPhysics", function () {
          t.stopSimulation(), t.ready = !1;
        }), this.body.emitter.on("disablePhysics", function () {
          t.physicsEnabled = !1, t.stopSimulation();
        }), this.body.emitter.on("restorePhysics", function () {
          t.setOptions(t.options), !0 === t.ready && t.startSimulation();
        }), this.body.emitter.on("startSimulation", function () {
          !0 === t.ready && t.startSimulation();
        }), this.body.emitter.on("stopSimulation", function () {
          t.stopSimulation();
        }), this.body.emitter.on("destroy", function () {
          t.stopSimulation(!1), t.body.emitter.off();
        }), this.body.emitter.on("_dataChanged", function () {
          t.updatePhysicsData();
        });
      }
    }, {
      key: "setOptions",
      value: function (t) {
        void 0 !== t && (!1 === t ? (this.options.enabled = !1, this.physicsEnabled = !1, this.stopSimulation()) : !0 === t ? (this.options.enabled = !0, this.physicsEnabled = !0, this.startSimulation()) : (this.physicsEnabled = !0, selectiveNotDeepExtend(["stabilization"], this.options, t), mergeOptions(this.options, t, "stabilization"), void 0 === t.enabled && (this.options.enabled = !0), !1 === this.options.enabled && (this.physicsEnabled = !1, this.stopSimulation()), this.timestep = this.options.timestep)), this.init();
      }
    }, {
      key: "init",
      value: function () {
        var t;
        "forceAtlas2Based" === this.options.solver ? (t = this.options.forceAtlas2Based, this.nodesSolver = new nd(this.body, this.physicsBody, t), this.edgesSolver = new ed(this.body, this.physicsBody, t), this.gravitySolver = new sd(this.body, this.physicsBody, t)) : "repulsion" === this.options.solver ? (t = this.options.repulsion, this.nodesSolver = new Qh(this.body, this.physicsBody, t), this.edgesSolver = new ed(this.body, this.physicsBody, t), this.gravitySolver = new od(this.body, this.physicsBody, t)) : "hierarchicalRepulsion" === this.options.solver ? (t = this.options.hierarchicalRepulsion, this.nodesSolver = new td(this.body, this.physicsBody, t), this.edgesSolver = new id$1(this.body, this.physicsBody, t), this.gravitySolver = new od(this.body, this.physicsBody, t)) : (t = this.options.barnesHut, this.nodesSolver = new Jh(this.body, this.physicsBody, t), this.edgesSolver = new ed(this.body, this.physicsBody, t), this.gravitySolver = new od(this.body, this.physicsBody, t)), this.modelOptions = t;
      }
    }, {
      key: "initPhysics",
      value: function () {
        !0 === this.physicsEnabled && !0 === this.options.enabled ? !0 === this.options.stabilization.enabled ? this.stabilize() : (this.stabilized = !1, this.ready = !0, this.body.emitter.emit("fit", {}, this.layoutFailed), this.startSimulation()) : (this.ready = !0, this.body.emitter.emit("fit"));
      }
    }, {
      key: "startSimulation",
      value: function () {
        !0 === this.physicsEnabled && !0 === this.options.enabled ? (this.stabilized = !1, this.adaptiveTimestep = !1, this.body.emitter.emit("_resizeNodes"), void 0 === this.viewFunction && (this.viewFunction = this.simulationStep.bind(this), this.body.emitter.on("initRedraw", this.viewFunction), this.body.emitter.emit("_startRendering"))) : this.body.emitter.emit("_redraw");
      }
    }, {
      key: "stopSimulation",
      value: function () {
        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        this.stabilized = !0, !0 === t && this._emitStabilized(), void 0 !== this.viewFunction && (this.body.emitter.off("initRedraw", this.viewFunction), this.viewFunction = void 0, !0 === t && this.body.emitter.emit("_stopRendering"));
      }
    }, {
      key: "simulationStep",
      value: function () {
        var t = Date.now();
        this.physicsTick(), (Date.now() - t < .4 * this.simulationInterval || !0 === this.runDoubleSpeed) && !1 === this.stabilized && (this.physicsTick(), this.runDoubleSpeed = !0), !0 === this.stabilized && this.stopSimulation();
      }
    }, {
      key: "_emitStabilized",
      value: function () {
        var t = this,
            e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.stabilizationIterations;
        (this.stabilizationIterations > 1 || !0 === this.startedStabilization) && setTimeout(function () {
          t.body.emitter.emit("stabilized", {
            iterations: e
          }), t.startedStabilization = !1, t.stabilizationIterations = 0;
        }, 0);
      }
    }, {
      key: "physicsStep",
      value: function () {
        this.gravitySolver.solve(), this.nodesSolver.solve(), this.edgesSolver.solve(), this.moveNodes();
      }
    }, {
      key: "adjustTimeStep",
      value: function () {
        !0 === this._evaluateStepQuality() ? this.timestep = 1.2 * this.timestep : this.timestep / 1.2 < this.options.timestep ? this.timestep = this.options.timestep : (this.adaptiveCounter = -1, this.timestep = Math.max(this.options.timestep, this.timestep / 1.2));
      }
    }, {
      key: "physicsTick",
      value: function () {
        if (this._startStabilizing(), !0 !== this.stabilized) {
          if (!0 === this.adaptiveTimestep && !0 === this.adaptiveTimestepEnabled) this.adaptiveCounter % this.adaptiveInterval == 0 ? (this.timestep = 2 * this.timestep, this.physicsStep(), this.revert(), this.timestep = .5 * this.timestep, this.physicsStep(), this.physicsStep(), this.adjustTimeStep()) : this.physicsStep(), this.adaptiveCounter += 1;else this.timestep = this.options.timestep, this.physicsStep();
          !0 === this.stabilized && this.revert(), this.stabilizationIterations++;
        }
      }
    }, {
      key: "updatePhysicsData",
      value: function () {
        this.physicsBody.forces = {}, this.physicsBody.physicsNodeIndices = [], this.physicsBody.physicsEdgeIndices = [];
        var t = this.body.nodes,
            e = this.body.edges;

        for (var i in t) t.hasOwnProperty(i) && !0 === t[i].options.physics && this.physicsBody.physicsNodeIndices.push(t[i].id);

        for (var o in e) e.hasOwnProperty(o) && !0 === e[o].options.physics && this.physicsBody.physicsEdgeIndices.push(e[o].id);

        for (var n = 0; n < this.physicsBody.physicsNodeIndices.length; n++) {
          var s = this.physicsBody.physicsNodeIndices[n];
          this.physicsBody.forces[s] = {
            x: 0,
            y: 0
          }, void 0 === this.physicsBody.velocities[s] && (this.physicsBody.velocities[s] = {
            x: 0,
            y: 0
          });
        }

        for (var r in this.physicsBody.velocities) void 0 === t[r] && delete this.physicsBody.velocities[r];
      }
    }, {
      key: "revert",
      value: function () {
        var t = Object.keys(this.previousStates),
            e = this.body.nodes,
            i = this.physicsBody.velocities;
        this.referenceState = {};

        for (var o = 0; o < t.length; o++) {
          var n = t[o];
          void 0 !== e[n] ? !0 === e[n].options.physics && (this.referenceState[n] = {
            positions: {
              x: e[n].x,
              y: e[n].y
            }
          }, i[n].x = this.previousStates[n].vx, i[n].y = this.previousStates[n].vy, e[n].x = this.previousStates[n].x, e[n].y = this.previousStates[n].y) : delete this.previousStates[n];
        }
      }
    }, {
      key: "_evaluateStepQuality",
      value: function () {
        var t,
            e,
            i = this.body.nodes,
            o = this.referenceState;

        for (var n in this.referenceState) if (this.referenceState.hasOwnProperty(n) && void 0 !== i[n] && (t = i[n].x - o[n].positions.x, e = i[n].y - o[n].positions.y, Math.sqrt(Math.pow(t, 2) + Math.pow(e, 2)) > .3)) return !1;

        return !0;
      }
    }, {
      key: "moveNodes",
      value: function () {
        for (var t = this.physicsBody.physicsNodeIndices, e = 0, i = 0, o = 0; o < t.length; o++) {
          var n = t[o],
              s = this._performStep(n);

          e = Math.max(e, s), i += s;
        }

        this.adaptiveTimestepEnabled = i / t.length < 5, this.stabilized = e < this.options.minVelocity;
      }
    }, {
      key: "calculateComponentVelocity",
      value: function (t, e, i) {
        t += (e - this.modelOptions.damping * t) / i * this.timestep;
        var o = this.options.maxVelocity || 1e9;
        return Math.abs(t) > o && (t = t > 0 ? o : -o), t;
      }
    }, {
      key: "_performStep",
      value: function (t) {
        var e = this.body.nodes[t],
            i = this.physicsBody.forces[t],
            o = this.physicsBody.velocities[t];
        return this.previousStates[t] = {
          x: e.x,
          y: e.y,
          vx: o.x,
          vy: o.y
        }, !1 === e.options.fixed.x ? (o.x = this.calculateComponentVelocity(o.x, i.x, e.options.mass), e.x += o.x * this.timestep) : (i.x = 0, o.x = 0), !1 === e.options.fixed.y ? (o.y = this.calculateComponentVelocity(o.y, i.y, e.options.mass), e.y += o.y * this.timestep) : (i.y = 0, o.y = 0), Math.sqrt(Math.pow(o.x, 2) + Math.pow(o.y, 2));
      }
    }, {
      key: "_freezeNodes",
      value: function () {
        var t = this.body.nodes;

        for (var e in t) if (t.hasOwnProperty(e) && t[e].x && t[e].y) {
          var i = t[e].options.fixed;
          this.freezeCache[e] = {
            x: i.x,
            y: i.y
          }, i.x = !0, i.y = !0;
        }
      }
    }, {
      key: "_restoreFrozenNodes",
      value: function () {
        var t = this.body.nodes;

        for (var e in t) t.hasOwnProperty(e) && void 0 !== this.freezeCache[e] && (t[e].options.fixed.x = this.freezeCache[e].x, t[e].options.fixed.y = this.freezeCache[e].y);

        this.freezeCache = {};
      }
    }, {
      key: "stabilize",
      value: function () {
        var t = this,
            e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.options.stabilization.iterations;
        "number" != typeof e && (e = this.options.stabilization.iterations, console.log("The stabilize method needs a numeric amount of iterations. Switching to default: ", e)), 0 !== this.physicsBody.physicsNodeIndices.length ? (this.adaptiveTimestep = this.options.adaptiveTimestep, this.body.emitter.emit("_resizeNodes"), this.stopSimulation(), this.stabilized = !1, this.body.emitter.emit("_blockRedraw"), this.targetIterations = e, !0 === this.options.stabilization.onlyDynamicEdges && this._freezeNodes(), this.stabilizationIterations = 0, setTimeout(function () {
          return t._stabilizationBatch();
        }, 0)) : this.ready = !0;
      }
    }, {
      key: "_startStabilizing",
      value: function () {
        return !0 !== this.startedStabilization && (this.body.emitter.emit("startStabilizing"), this.startedStabilization = !0, !0);
      }
    }, {
      key: "_stabilizationBatch",
      value: function () {
        var t = this,
            e = function () {
          return !1 === t.stabilized && t.stabilizationIterations < t.targetIterations;
        },
            i = function () {
          t.body.emitter.emit("stabilizationProgress", {
            iterations: t.stabilizationIterations,
            total: t.targetIterations
          });
        };

        this._startStabilizing() && i();

        for (var o = 0; e() && o < this.options.stabilization.updateInterval;) this.physicsTick(), o++;

        i(), e() ? setTimeout(this._stabilizationBatch.bind(this), 0) : this._finalizeStabilization();
      }
    }, {
      key: "_finalizeStabilization",
      value: function () {
        this.body.emitter.emit("_allowRedraw"), !0 === this.options.stabilization.fit && this.body.emitter.emit("fit"), !0 === this.options.stabilization.onlyDynamicEdges && this._restoreFrozenNodes(), this.body.emitter.emit("stabilizationIterationsDone"), this.body.emitter.emit("_requestRedraw"), !0 === this.stabilized ? this._emitStabilized() : this.startSimulation(), this.ready = !0;
      }
    }, {
      key: "_drawForces",
      value: function (t) {
        for (var e = 0; e < this.physicsBody.physicsNodeIndices.length; e++) {
          var i = this.physicsBody.physicsNodeIndices[e],
              o = this.body.nodes[i],
              n = this.physicsBody.forces[i],
              s = Math.sqrt(Math.pow(n.x, 2) + Math.pow(n.x, 2)),
              r = Math.min(Math.max(5, s), 15),
              a = 3 * r,
              h = HSVToHex((180 - 180 * Math.min(1, Math.max(0, .03 * s))) / 360, 1, 1),
              d = {
            x: o.x + 20 * n.x,
            y: o.y + 20 * n.y
          };
          t.lineWidth = r, t.strokeStyle = h, t.beginPath(), t.moveTo(o.x, o.y), t.lineTo(d.x, d.y), t.stroke();
          var l = Math.atan2(n.y, n.x);
          t.fillStyle = h, Wh.draw(t, {
            type: "arrow",
            point: d,
            angle: l,
            length: a
          }), t.fill();
        }
      }
    }]), t;
  }(),
      ad = [].reverse,
      hd = [1, 2];

  de({
    target: "Array",
    proto: !0,
    forced: String(hd) === String(hd.reverse())
  }, {
    reverse: function () {
      return le(this) && (this.length = this.length), ad.call(this);
    }
  });

  var dd = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, null, [{
      key: "getRange",
      value: function (t) {
        var e,
            i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
            o = 1e9,
            n = -1e9,
            s = 1e9,
            r = -1e9;
        if (i.length > 0) for (var a = 0; a < i.length; a++) s > (e = t[i[a]]).shape.boundingBox.left && (s = e.shape.boundingBox.left), r < e.shape.boundingBox.right && (r = e.shape.boundingBox.right), o > e.shape.boundingBox.top && (o = e.shape.boundingBox.top), n < e.shape.boundingBox.bottom && (n = e.shape.boundingBox.bottom);
        return 1e9 === s && -1e9 === r && 1e9 === o && -1e9 === n && (o = 0, n = 0, s = 0, r = 0), {
          minX: s,
          maxX: r,
          minY: o,
          maxY: n
        };
      }
    }, {
      key: "getRangeCore",
      value: function (t) {
        var e,
            i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
            o = 1e9,
            n = -1e9,
            s = 1e9,
            r = -1e9;
        if (i.length > 0) for (var a = 0; a < i.length; a++) s > (e = t[i[a]]).x && (s = e.x), r < e.x && (r = e.x), o > e.y && (o = e.y), n < e.y && (n = e.y);
        return 1e9 === s && -1e9 === r && 1e9 === o && -1e9 === n && (o = 0, n = 0, s = 0, r = 0), {
          minX: s,
          maxX: r,
          minY: o,
          maxY: n
        };
      }
    }, {
      key: "findCenter",
      value: function (t) {
        return {
          x: .5 * (t.maxX + t.minX),
          y: .5 * (t.maxY + t.minY)
        };
      }
    }, {
      key: "cloneOptions",
      value: function (t, e) {
        var i = {};
        return void 0 === e || "node" === e ? (deepExtend(i, t.options, !0), i.x = t.x, i.y = t.y, i.amountOfConnections = t.edges.length) : deepExtend(i, t.options, !0), i;
      }
    }]), t;
  }(),
      ld = function (t) {
    function e(t, i, o, n, s, r) {
      var a;
      return pn(this, e), (a = _n(this, wn(e).call(this, t, i, o, n, s, r))).isCluster = !0, a.containedNodes = {}, a.containedEdges = {}, a;
    }

    return bn(e, xh), vn(e, [{
      key: "_openChildCluster",
      value: function (t) {
        var e = this,
            i = this.body.nodes[t];
        if (void 0 === this.containedNodes[t]) throw new Error("node with id: " + t + " not in current cluster");
        if (!i.isCluster) throw new Error("node with id: " + t + " is not a cluster");
        delete this.containedNodes[t], forEach(i.edges, function (t) {
          delete e.containedEdges[t.id];
        }), forEach(i.containedNodes, function (t, i) {
          e.containedNodes[i] = t;
        }), i.containedNodes = {}, forEach(i.containedEdges, function (t, i) {
          e.containedEdges[i] = t;
        }), i.containedEdges = {}, forEach(i.edges, function (t) {
          forEach(e.edges, function (i) {
            var n = i.clusteringEdgeReplacingIds.indexOf(t.id);
            -1 !== n && (forEach(t.clusteringEdgeReplacingIds, function (t) {
              i.clusteringEdgeReplacingIds.push(t), e.body.edges[t].edgeReplacedById = i.id;
            }), i.clusteringEdgeReplacingIds.splice(n, 1));
          });
        }), i.edges = [];
      }
    }]), e;
  }(),
      cd = function () {
    function t(i) {
      var o = this;
      pn(this, t), this.body = i, this.clusteredNodes = {}, this.clusteredEdges = {}, this.options = {}, this.defaultOptions = {}, extend(this.options, this.defaultOptions), this.body.emitter.on("_resetData", function () {
        o.clusteredNodes = {}, o.clusteredEdges = {};
      });
    }

    return vn(t, [{
      key: "clusterByHubsize",
      value: function (t, e) {
        void 0 === t ? t = this._getHubSize() : "object" === un(t) && (e = this._checkOptions(t), t = this._getHubSize());

        for (var i = [], o = 0; o < this.body.nodeIndices.length; o++) {
          var n = this.body.nodes[this.body.nodeIndices[o]];
          n.edges.length >= t && i.push(n.id);
        }

        for (var s = 0; s < i.length; s++) this.clusterByConnection(i[s], e, !0);

        this.body.emitter.emit("_dataChanged");
      }
    }, {
      key: "cluster",
      value: function () {
        var t = this,
            e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        if (void 0 === e.joinCondition) throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");
        e = this._checkOptions(e);
        var n = {},
            s = {};
        forEach(this.body.nodes, function (i, r) {
          i.options && !0 === e.joinCondition(i.options) && (n[r] = i, forEach(i.edges, function (e) {
            void 0 === t.clusteredEdges[e.id] && (s[e.id] = e);
          }));
        }), this._cluster(n, s, e, i);
      }
    }, {
      key: "clusterByEdgeCount",
      value: function (t, e) {
        var i = this,
            o = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
        e = this._checkOptions(e);

        for (var n, s, r, a = [], h = {}, d = function (o) {
          var d = {},
              l = {},
              p = i.body.nodeIndices[o],
              f = i.body.nodes[p];

          if (void 0 === h[p]) {
            r = 0, s = [];

            for (var v = 0; v < f.edges.length; v++) n = f.edges[v], void 0 === i.clusteredEdges[n.id] && (n.toId !== n.fromId && r++, s.push(n));

            if (r === t) {
              c = function (t) {
                if (void 0 === e.joinCondition || null === e.joinCondition) return !0;
                var i = dd.cloneOptions(t);
                return e.joinCondition(i);
              };

              for (var g = !0, y = 0; y < s.length; y++) {
                n = s[y];

                var m = i._getConnectedId(n, p);

                if (!c(f)) {
                  g = !1;
                  break;
                }

                l[n.id] = n, d[p] = f, d[m] = i.body.nodes[m], h[p] = !0;
              }

              if (Object.keys(d).length > 0 && Object.keys(l).length > 0 && !0 === g) if (void 0 !== (u = function () {
                for (var t = 0; t < a.length; ++t) for (var e in d) if (void 0 !== a[t].nodes[e]) return a[t];
              }())) {
                for (var b in d) void 0 === u.nodes[b] && (u.nodes[b] = d[b]);

                for (var w in l) void 0 === u.edges[w] && (u.edges[w] = l[w]);
              } else a.push({
                nodes: d,
                edges: l
              });
            }
          }
        }, l = 0; l < this.body.nodeIndices.length; l++) {
          var c, u;
          d(l);
        }

        for (var p = 0; p < a.length; p++) this._cluster(a[p].nodes, a[p].edges, e, !1);

        !0 === o && this.body.emitter.emit("_dataChanged");
      }
    }, {
      key: "clusterOutliers",
      value: function (t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        this.clusterByEdgeCount(1, t, e);
      }
    }, {
      key: "clusterBridges",
      value: function (t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        this.clusterByEdgeCount(2, t, e);
      }
    }, {
      key: "clusterByConnection",
      value: function (t, e) {
        var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
        if (void 0 === t) throw new Error("No nodeId supplied to clusterByConnection!");
        if (void 0 === this.body.nodes[t]) throw new Error("The nodeId given to clusterByConnection does not exist!");
        var o = this.body.nodes[t];
        void 0 === (e = this._checkOptions(e, o)).clusterNodeProperties.x && (e.clusterNodeProperties.x = o.x), void 0 === e.clusterNodeProperties.y && (e.clusterNodeProperties.y = o.y), void 0 === e.clusterNodeProperties.fixed && (e.clusterNodeProperties.fixed = {}, e.clusterNodeProperties.fixed.x = o.options.fixed.x, e.clusterNodeProperties.fixed.y = o.options.fixed.y);
        var n = {},
            s = {},
            r = o.id,
            a = dd.cloneOptions(o);
        n[r] = o;

        for (var h = 0; h < o.edges.length; h++) {
          var d = o.edges[h];

          if (void 0 === this.clusteredEdges[d.id]) {
            var l = this._getConnectedId(d, r);

            if (void 0 === this.clusteredNodes[l]) if (l !== r) {
              if (void 0 === e.joinCondition) s[d.id] = d, n[l] = this.body.nodes[l];else {
                var c = dd.cloneOptions(this.body.nodes[l]);
                !0 === e.joinCondition(a, c) && (s[d.id] = d, n[l] = this.body.nodes[l]);
              }
            } else s[d.id] = d;
          }
        }

        var u = Object.keys(n).map(function (t) {
          return n[t].id;
        });

        for (p in n) if (n.hasOwnProperty(p)) for (var p = n[p], f = 0; f < p.edges.length; f++) {
          var v = p.edges[f];
          u.indexOf(this._getConnectedId(v, p.id)) > -1 && (s[v.id] = v);
        }

        this._cluster(n, s, e, i);
      }
    }, {
      key: "_createClusterEdges",
      value: function (t, e, i, o) {
        for (var n, s, r, a, h, d, l = Object.keys(t), c = [], u = 0; u < l.length; u++) {
          r = t[s = l[u]];

          for (var p = 0; p < r.edges.length; p++) n = r.edges[p], void 0 === this.clusteredEdges[n.id] && (n.toId == n.fromId ? e[n.id] = n : n.toId == s ? (a = i.id, d = h = n.fromId) : (a = n.toId, h = i.id, d = a), void 0 === t[d] && c.push({
            edge: n,
            fromId: h,
            toId: a
          }));
        }

        for (var f = [], v = function (t) {
          for (var e = 0; e < f.length; e++) {
            var i = f[e],
                o = t.fromId === i.fromId && t.toId === i.toId,
                n = t.fromId === i.toId && t.toId === i.fromId;
            if (o || n) return i;
          }

          return null;
        }, g = 0; g < c.length; g++) {
          var y = c[g],
              m = y.edge,
              b = v(y);
          null === b ? (b = this._createClusteredEdge(y.fromId, y.toId, m, o), f.push(b)) : b.clusteringEdgeReplacingIds.push(m.id), this.body.edges[m.id].edgeReplacedById = b.id, this._backupEdgeOptions(m), m.setOptions({
            physics: !1
          });
        }
      }
    }, {
      key: "_checkOptions",
      value: function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        return void 0 === t.clusterEdgeProperties && (t.clusterEdgeProperties = {}), void 0 === t.clusterNodeProperties && (t.clusterNodeProperties = {}), t;
      }
    }, {
      key: "_cluster",
      value: function (t, e, i) {
        var o = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
            s = [];

        for (var r in t) t.hasOwnProperty(r) && void 0 !== this.clusteredNodes[r] && s.push(r);

        for (var a = 0; a < s.length; ++a) delete t[s[a]];

        if (0 != Object.keys(t).length && (1 != Object.keys(t).length || 1 == i.clusterNodeProperties.allowSingleNodeCluster)) {
          var h = deepExtend({}, i.clusterNodeProperties);

          if (void 0 !== i.processProperties) {
            var d = [];

            for (var l in t) if (t.hasOwnProperty(l)) {
              var c = dd.cloneOptions(t[l]);
              d.push(c);
            }

            var u = [];

            for (var p in e) if (e.hasOwnProperty(p) && "clusterEdge:" !== p.substr(0, 12)) {
              var f = dd.cloneOptions(e[p], "edge");
              u.push(f);
            }

            if (!(h = i.processProperties(h, d, u))) throw new Error("The processProperties function does not return properties!");
          }

          void 0 === h.id && (h.id = "cluster:" + uuid4());
          var v = h.id;
          void 0 === h.label && (h.label = "cluster");
          var y = void 0;
          void 0 === h.x && (y = this._getClusterPosition(t), h.x = y.x), void 0 === h.y && (void 0 === y && (y = this._getClusterPosition(t)), h.y = y.y), h.id = v;
          var m = this.body.functions.createNode(h, ld);
          m.containedNodes = t, m.containedEdges = e, m.clusterEdgeProperties = i.clusterEdgeProperties, this.body.nodes[h.id] = m, this._clusterEdges(t, e, h, i.clusterEdgeProperties), h.id = void 0, !0 === o && this.body.emitter.emit("_dataChanged");
        }
      }
    }, {
      key: "_backupEdgeOptions",
      value: function (t) {
        void 0 === this.clusteredEdges[t.id] && (this.clusteredEdges[t.id] = {
          physics: t.options.physics
        });
      }
    }, {
      key: "_restoreEdge",
      value: function (t) {
        var e = this.clusteredEdges[t.id];
        void 0 !== e && (t.setOptions({
          physics: e.physics
        }), delete this.clusteredEdges[t.id]);
      }
    }, {
      key: "isCluster",
      value: function (t) {
        return void 0 !== this.body.nodes[t] ? !0 === this.body.nodes[t].isCluster : (console.log("Node does not exist."), !1);
      }
    }, {
      key: "_getClusterPosition",
      value: function (t) {
        for (var e, i = Object.keys(t), o = t[i[0]].x, n = t[i[0]].x, s = t[i[0]].y, r = t[i[0]].y, a = 1; a < i.length; a++) o = (e = t[i[a]]).x < o ? e.x : o, n = e.x > n ? e.x : n, s = e.y < s ? e.y : s, r = e.y > r ? e.y : r;

        return {
          x: .5 * (o + n),
          y: .5 * (s + r)
        };
      }
    }, {
      key: "openCluster",
      value: function (t, e) {
        var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
        if (void 0 === t) throw new Error("No clusterNodeId supplied to openCluster.");
        var n = this.body.nodes[t];
        if (void 0 === n) throw new Error("The clusterNodeId supplied to openCluster does not exist.");
        if (!0 !== n.isCluster || void 0 === n.containedNodes || void 0 === n.containedEdges) throw new Error("The node:" + t + " is not a valid cluster.");
        var s = this.findNode(t),
            r = s.indexOf(t) - 1;

        if (r >= 0) {
          var a = s[r],
              h = this.body.nodes[a];
          return h._openChildCluster(t), delete this.body.nodes[t], void (!0 === i && this.body.emitter.emit("_dataChanged"));
        }

        var d = n.containedNodes,
            l = n.containedEdges;

        if (void 0 !== e && void 0 !== e.releaseFunction && "function" == typeof e.releaseFunction) {
          var c = {},
              u = {
            x: n.x,
            y: n.y
          };

          for (var p in d) if (d.hasOwnProperty(p)) {
            var f = this.body.nodes[p];
            c[p] = {
              x: f.x,
              y: f.y
            };
          }

          var v = e.releaseFunction(u, c);

          for (var g in d) if (d.hasOwnProperty(g)) {
            var y = this.body.nodes[g];
            void 0 !== v[g] && (y.x = void 0 === v[g].x ? n.x : v[g].x, y.y = void 0 === v[g].y ? n.y : v[g].y);
          }
        } else forEach(d, function (t) {
          !1 === t.options.fixed.x && (t.x = n.x), !1 === t.options.fixed.y && (t.y = n.y);
        });

        for (var m in d) if (d.hasOwnProperty(m)) {
          var b = this.body.nodes[m];
          b.vx = n.vx, b.vy = n.vy, b.setOptions({
            physics: !0
          }), delete this.clusteredNodes[m];
        }

        for (var w = [], k = 0; k < n.edges.length; k++) w.push(n.edges[k]);

        for (var _ = 0; _ < w.length; _++) {
          for (var x = w[_], E = this._getConnectedId(x, t), O = this.clusteredNodes[E], C = 0; C < x.clusteringEdgeReplacingIds.length; C++) {
            var S = x.clusteringEdgeReplacingIds[C],
                T = this.body.edges[S];
            if (void 0 !== T) if (void 0 !== O) {
              var M = this.body.nodes[O.clusterId];
              M.containedEdges[T.id] = T, delete l[T.id];
              var D = T.fromId,
                  I = T.toId;
              T.toId == E ? I = O.clusterId : D = O.clusterId, this._createClusteredEdge(D, I, T, M.clusterEdgeProperties, {
                hidden: !1,
                physics: !0
              });
            } else this._restoreEdge(T);
          }

          x.remove();
        }

        for (var P in l) l.hasOwnProperty(P) && this._restoreEdge(l[P]);

        delete this.body.nodes[t], !0 === i && this.body.emitter.emit("_dataChanged");
      }
    }, {
      key: "getNodesInCluster",
      value: function (t) {
        var e = [];

        if (!0 === this.isCluster(t)) {
          var i = this.body.nodes[t].containedNodes;

          for (var o in i) i.hasOwnProperty(o) && e.push(this.body.nodes[o].id);
        }

        return e;
      }
    }, {
      key: "findNode",
      value: function (t) {
        for (var e, i = [], o = 0; void 0 !== this.clusteredNodes[t] && o < 100;) {
          if (void 0 === (e = this.body.nodes[t])) return [];
          i.push(e.id), t = this.clusteredNodes[t].clusterId, o++;
        }

        return void 0 === (e = this.body.nodes[t]) ? [] : (i.push(e.id), i.reverse(), i);
      }
    }, {
      key: "updateClusteredNode",
      value: function (t, e) {
        if (void 0 === t) throw new Error("No clusteredNodeId supplied to updateClusteredNode.");
        if (void 0 === e) throw new Error("No newOptions supplied to updateClusteredNode.");
        if (void 0 === this.body.nodes[t]) throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");
        this.body.nodes[t].setOptions(e), this.body.emitter.emit("_dataChanged");
      }
    }, {
      key: "updateEdge",
      value: function (t, e) {
        if (void 0 === t) throw new Error("No startEdgeId supplied to updateEdge.");
        if (void 0 === e) throw new Error("No newOptions supplied to updateEdge.");
        if (void 0 === this.body.edges[t]) throw new Error("The startEdgeId supplied to updateEdge does not exist.");

        for (var i = this.getClusteredEdges(t), o = 0; o < i.length; o++) {
          this.body.edges[i[o]].setOptions(e);
        }

        this.body.emitter.emit("_dataChanged");
      }
    }, {
      key: "getClusteredEdges",
      value: function (t) {
        for (var e = [], i = 0; void 0 !== t && void 0 !== this.body.edges[t] && i < 100;) e.push(this.body.edges[t].id), t = this.body.edges[t].edgeReplacedById, i++;

        return e.reverse(), e;
      }
    }, {
      key: "getBaseEdge",
      value: function (t) {
        return this.getBaseEdges(t)[0];
      }
    }, {
      key: "getBaseEdges",
      value: function (t) {
        for (var e = [t], i = [], o = [], n = 0; e.length > 0 && n < 100;) {
          var s = e.pop();

          if (void 0 !== s) {
            var r = this.body.edges[s];

            if (void 0 !== r) {
              n++;
              var a = r.clusteringEdgeReplacingIds;
              if (void 0 === a) o.push(s);else for (var h = 0; h < a.length; ++h) {
                var d = a[h];
                -1 === e.indexOf(a) && -1 === i.indexOf(a) && e.push(d);
              }
              i.push(s);
            }
          }
        }

        return o;
      }
    }, {
      key: "_getConnectedId",
      value: function (t, e) {
        return t.toId != e ? t.toId : (t.fromId, t.fromId);
      }
    }, {
      key: "_getHubSize",
      value: function () {
        for (var t = 0, e = 0, i = 0, o = 0, n = 0; n < this.body.nodeIndices.length; n++) {
          var s = this.body.nodes[this.body.nodeIndices[n]];
          s.edges.length > o && (o = s.edges.length), t += s.edges.length, e += Math.pow(s.edges.length, 2), i += 1;
        }

        t /= i;
        var r = (e /= i) - Math.pow(t, 2),
            a = Math.sqrt(r),
            h = Math.floor(t + 2 * a);
        return h > o && (h = o), h;
      }
    }, {
      key: "_createClusteredEdge",
      value: function (t, e, i, o, s) {
        var r = dd.cloneOptions(i, "edge");
        deepExtend(r, o), r.from = t, r.to = e, r.id = "clusterEdge:" + uuid4(), void 0 !== s && deepExtend(r, s);
        var a = this.body.functions.createEdge(r);
        return a.clusteringEdgeReplacingIds = [i.id], a.connect(), this.body.edges[a.id] = a, a;
      }
    }, {
      key: "_clusterEdges",
      value: function (t, e, i, o) {
        if (e instanceof $h) {
          var n = e,
              s = {};
          s[n.id] = n, e = s;
        }

        if (t instanceof xh) {
          var r = t,
              a = {};
          a[r.id] = r, t = a;
        }

        if (null == i) throw new Error("_clusterEdges: parameter clusterNode required");

        for (var h in void 0 === o && (o = i.clusterEdgeProperties), this._createClusterEdges(t, e, i, o), e) if (e.hasOwnProperty(h) && void 0 !== this.body.edges[h]) {
          var d = this.body.edges[h];
          this._backupEdgeOptions(d), d.setOptions({
            physics: !1
          });
        }

        for (var l in t) t.hasOwnProperty(l) && (this.clusteredNodes[l] = {
          clusterId: i.id,
          node: this.body.nodes[l]
        }, this.body.nodes[l].setOptions({
          physics: !1
        }));
      }
    }, {
      key: "_getClusterNodeForNode",
      value: function (t) {
        if (void 0 !== t) {
          var e = this.clusteredNodes[t];

          if (void 0 !== e) {
            var i = e.clusterId;
            if (void 0 !== i) return this.body.nodes[i];
          }
        }
      }
    }, {
      key: "_filter",
      value: function (t, e) {
        var i = [];
        return forEach(t, function (t) {
          e(t) && i.push(t);
        }), i;
      }
    }, {
      key: "_updateState",
      value: function () {
        var t,
            e = this,
            i = [],
            n = {},
            s = function (t) {
          forEach(e.body.nodes, function (e) {
            !0 === e.isCluster && t(e);
          });
        };

        for (t in this.clusteredNodes) {
          if (this.clusteredNodes.hasOwnProperty(t)) void 0 === this.body.nodes[t] && i.push(t);
        }

        s(function (t) {
          for (var e = 0; e < i.length; e++) delete t.containedNodes[i[e]];
        });

        for (var r = 0; r < i.length; r++) delete this.clusteredNodes[i[r]];

        forEach(this.clusteredEdges, function (t) {
          var i = e.body.edges[t];
          void 0 !== i && i.endPointsValid() || (n[t] = t);
        }), s(function (t) {
          forEach(t.containedEdges, function (t, e) {
            t.endPointsValid() || n[e] || (n[e] = e);
          });
        }), forEach(this.body.edges, function (t, i) {
          var s = !0,
              r = t.clusteringEdgeReplacingIds;

          if (void 0 !== r) {
            var a = 0;
            forEach(r, function (t) {
              var i = e.body.edges[t];
              void 0 !== i && i.endPointsValid() && (a += 1);
            }), s = a > 0;
          }

          t.endPointsValid() && s || (n[i] = i);
        }), s(function (t) {
          forEach(n, function (i) {
            delete t.containedEdges[i], forEach(t.edges, function (o, s) {
              o.id !== i ? o.clusteringEdgeReplacingIds = e._filter(o.clusteringEdgeReplacingIds, function (t) {
                return !n[t];
              }) : t.edges[s] = null;
            }), t.edges = e._filter(t.edges, function (t) {
              return null !== t;
            });
          });
        }), forEach(n, function (t) {
          delete e.clusteredEdges[t];
        }), forEach(n, function (t) {
          delete e.body.edges[t];
        });
        var a = Object.keys(this.body.edges);
        forEach(a, function (t) {
          var i = e.body.edges[t],
              o = e._isClusteredNode(i.fromId) || e._isClusteredNode(i.toId);

          if (o !== e._isClusteredEdge(i.id)) if (o) {
            var n = e._getClusterNodeForNode(i.fromId);

            void 0 !== n && e._clusterEdges(e.body.nodes[i.fromId], i, n);

            var s = e._getClusterNodeForNode(i.toId);

            void 0 !== s && e._clusterEdges(e.body.nodes[i.toId], i, s);
          } else delete e._clusterEdges[t], e._restoreEdge(i);
        });

        for (var h = !1, d = !0, l = function () {
          var t = [];
          s(function (e) {
            var i = Object.keys(e.containedNodes).length,
                o = !0 === e.options.allowSingleNodeCluster;
            (o && i < 1 || !o && i < 2) && t.push(e.id);
          });

          for (var i = 0; i < t.length; ++i) e.openCluster(t[i], {}, !1);

          d = t.length > 0, h = h || d;
        }; d;) l();

        h && this._updateState();
      }
    }, {
      key: "_isClusteredNode",
      value: function (t) {
        return void 0 !== this.clusteredNodes[t];
      }
    }, {
      key: "_isClusteredEdge",
      value: function (t) {
        return void 0 !== this.clusteredEdges[t];
      }
    }]), t;
  }();

  var ud = function () {
    function t(i, o) {
      var n;
      pn(this, t), void 0 !== window && (n = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame), window.requestAnimationFrame = void 0 === n ? function (t) {
        t();
      } : n, this.body = i, this.canvas = o, this.redrawRequested = !1, this.renderTimer = void 0, this.requiresTimeout = !0, this.renderingActive = !1, this.renderRequests = 0, this.allowRedraw = !0, this.dragging = !1, this.zooming = !1, this.options = {}, this.defaultOptions = {
        hideEdgesOnDrag: !1,
        hideEdgesOnZoom: !1,
        hideNodesOnDrag: !1
      }, extend(this.options, this.defaultOptions), this._determineBrowserMethod(), this.bindEventListeners();
    }

    return vn(t, [{
      key: "bindEventListeners",
      value: function () {
        var t = this;
        this.body.emitter.on("dragStart", function () {
          t.dragging = !0;
        }), this.body.emitter.on("dragEnd", function () {
          t.dragging = !1;
        }), this.body.emitter.on("zoom", function () {
          t.zooming = !0, window.clearTimeout(t.zoomTimeoutId), t.zoomTimeoutId = window.setTimeout(function () {
            t.zooming = !1, t._requestRedraw.bind(t)();
          }, 250);
        }), this.body.emitter.on("_resizeNodes", function () {
          t._resizeNodes();
        }), this.body.emitter.on("_redraw", function () {
          !1 === t.renderingActive && t._redraw();
        }), this.body.emitter.on("_blockRedraw", function () {
          t.allowRedraw = !1;
        }), this.body.emitter.on("_allowRedraw", function () {
          t.allowRedraw = !0, t.redrawRequested = !1;
        }), this.body.emitter.on("_requestRedraw", this._requestRedraw.bind(this)), this.body.emitter.on("_startRendering", function () {
          t.renderRequests += 1, t.renderingActive = !0, t._startRendering();
        }), this.body.emitter.on("_stopRendering", function () {
          t.renderRequests -= 1, t.renderingActive = t.renderRequests > 0, t.renderTimer = void 0;
        }), this.body.emitter.on("destroy", function () {
          t.renderRequests = 0, t.allowRedraw = !1, t.renderingActive = !1, !0 === t.requiresTimeout ? clearTimeout(t.renderTimer) : window.cancelAnimationFrame(t.renderTimer), t.body.emitter.off();
        });
      }
    }, {
      key: "setOptions",
      value: function (t) {
        if (void 0 !== t) {
          selectiveDeepExtend(["hideEdgesOnDrag", "hideEdgesOnZoom", "hideNodesOnDrag"], this.options, t);
        }
      }
    }, {
      key: "_requestNextFrame",
      value: function (t, e) {
        if ("undefined" != typeof window) {
          var i,
              o = window;
          return !0 === this.requiresTimeout ? i = o.setTimeout(t, e) : o.requestAnimationFrame && (i = o.requestAnimationFrame(t)), i;
        }
      }
    }, {
      key: "_startRendering",
      value: function () {
        !0 === this.renderingActive && void 0 === this.renderTimer && (this.renderTimer = this._requestNextFrame(this._renderStep.bind(this), this.simulationInterval));
      }
    }, {
      key: "_renderStep",
      value: function () {
        !0 === this.renderingActive && (this.renderTimer = void 0, !0 === this.requiresTimeout && this._startRendering(), this._redraw(), !1 === this.requiresTimeout && this._startRendering());
      }
    }, {
      key: "redraw",
      value: function () {
        this.body.emitter.emit("setSize"), this._redraw();
      }
    }, {
      key: "_requestRedraw",
      value: function () {
        var t = this;
        !0 !== this.redrawRequested && !1 === this.renderingActive && !0 === this.allowRedraw && (this.redrawRequested = !0, this._requestNextFrame(function () {
          t._redraw(!1);
        }, 0));
      }
    }, {
      key: "_redraw",
      value: function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];

        if (!0 === this.allowRedraw) {
          this.body.emitter.emit("initRedraw"), this.redrawRequested = !1, 0 !== this.canvas.frame.canvas.width && 0 !== this.canvas.frame.canvas.height || this.canvas.setSize(), this.canvas.setTransform();
          var e = this.canvas.getContext(),
              i = this.canvas.frame.canvas.clientWidth,
              o = this.canvas.frame.canvas.clientHeight;
          if (e.clearRect(0, 0, i, o), 0 === this.canvas.frame.clientWidth) return;
          e.save(), e.translate(this.body.view.translation.x, this.body.view.translation.y), e.scale(this.body.view.scale, this.body.view.scale), e.beginPath(), this.body.emitter.emit("beforeDrawing", e), e.closePath(), !1 === t && (!1 === this.dragging || !0 === this.dragging && !1 === this.options.hideEdgesOnDrag) && (!1 === this.zooming || !0 === this.zooming && !1 === this.options.hideEdgesOnZoom) && this._drawEdges(e), (!1 === this.dragging || !0 === this.dragging && !1 === this.options.hideNodesOnDrag) && this._drawNodes(e, t), e.beginPath(), this.body.emitter.emit("afterDrawing", e), e.closePath(), e.restore(), !0 === t && e.clearRect(0, 0, i, o);
        }
      }
    }, {
      key: "_resizeNodes",
      value: function () {
        this.canvas.setTransform();
        var t = this.canvas.getContext();
        t.save(), t.translate(this.body.view.translation.x, this.body.view.translation.y), t.scale(this.body.view.scale, this.body.view.scale);
        var e,
            i = this.body.nodes;

        for (var o in i) i.hasOwnProperty(o) && ((e = i[o]).resize(t), e.updateBoundingBox(t, e.selected));

        t.restore();
      }
    }, {
      key: "_drawNodes",
      value: function (t) {
        for (var e, i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], o = this.body.nodes, n = this.body.nodeIndices, s = [], r = 20, a = this.canvas.DOMtoCanvas({
          x: -r,
          y: -r
        }), h = this.canvas.DOMtoCanvas({
          x: this.canvas.frame.canvas.clientWidth + r,
          y: this.canvas.frame.canvas.clientHeight + r
        }), d = {
          top: a.y,
          left: a.x,
          bottom: h.y,
          right: h.x
        }, l = 0; l < n.length; l++) (e = o[n[l]]).isSelected() ? s.push(n[l]) : !0 === i ? e.draw(t) : !0 === e.isBoundingBoxOverlappingWith(d) ? e.draw(t) : e.updateBoundingBox(t, e.selected);

        for (var c = 0; c < s.length; c++) (e = o[s[c]]).draw(t);
      }
    }, {
      key: "_drawEdges",
      value: function (t) {
        for (var e, i = this.body.edges, o = this.body.edgeIndices, n = 0; n < o.length; n++) !0 === (e = i[o[n]]).connected && e.draw(t);
      }
    }, {
      key: "_determineBrowserMethod",
      value: function () {
        if ("undefined" != typeof window) {
          var t = navigator.userAgent.toLowerCase();
          this.requiresTimeout = !1, -1 != t.indexOf("msie 9.0") ? this.requiresTimeout = !0 : -1 != t.indexOf("safari") && t.indexOf("chrome") <= -1 && (this.requiresTimeout = !0);
        } else this.requiresTimeout = !0;
      }
    }]), t;
  }(),
      pd = F(function (t, e) {
    e.onTouch = function (t, e) {
      e.inputHandler = function (t) {
        t.isFirst && e(t);
      }, t.on("hammer.input", e.inputHandler);
    }, e.onRelease = function (t, e) {
      return e.inputHandler = function (t) {
        t.isFinal && e(t);
      }, t.on("hammer.input", e.inputHandler);
    }, e.offTouch = function (t, e) {
      t.off("hammer.input", e.inputHandler);
    }, e.offRelease = e.offTouch, e.disablePreventDefaultVertically = function (t) {
      return t.getTouchAction = function () {
        return ["pan-y"];
      }, t;
    };
  }),
      fd = (pd.onTouch, pd.onRelease, pd.offTouch, pd.offRelease, pd.disablePreventDefaultVertically, function () {
    function t(i) {
      pn(this, t), this.body = i, this.pixelRatio = 1, this.resizeTimer = void 0, this.resizeFunction = this._onResize.bind(this), this.cameraState = {}, this.initialized = !1, this.canvasViewCenter = {}, this.options = {}, this.defaultOptions = {
        autoResize: !0,
        height: "100%",
        width: "100%"
      }, extend(this.options, this.defaultOptions), this.bindEventListeners();
    }

    return vn(t, [{
      key: "bindEventListeners",
      value: function () {
        var t = this;
        this.body.emitter.once("resize", function (e) {
          0 !== e.width && (t.body.view.translation.x = .5 * e.width), 0 !== e.height && (t.body.view.translation.y = .5 * e.height);
        }), this.body.emitter.on("setSize", this.setSize.bind(this)), this.body.emitter.on("destroy", function () {
          t.hammerFrame.destroy(), t.hammer.destroy(), t._cleanUp();
        });
      }
    }, {
      key: "setOptions",
      value: function (t) {
        var e = this;

        if (void 0 !== t) {
          selectiveDeepExtend(["width", "height", "autoResize"], this.options, t);
        }

        !0 === this.options.autoResize && (this._cleanUp(), this.resizeTimer = setInterval(function () {
          !0 === e.setSize() && e.body.emitter.emit("_requestRedraw");
        }, 1e3), this.resizeFunction = this._onResize.bind(this), addEventListener(window, "resize", this.resizeFunction));
      }
    }, {
      key: "_cleanUp",
      value: function () {
        void 0 !== this.resizeTimer && clearInterval(this.resizeTimer), removeEventListener(window, "resize", this.resizeFunction), this.resizeFunction = void 0;
      }
    }, {
      key: "_onResize",
      value: function () {
        this.setSize(), this.body.emitter.emit("_redraw");
      }
    }, {
      key: "_getCameraState",
      value: function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.pixelRatio;
        !0 === this.initialized && (this.cameraState.previousWidth = this.frame.canvas.width / t, this.cameraState.previousHeight = this.frame.canvas.height / t, this.cameraState.scale = this.body.view.scale, this.cameraState.position = this.DOMtoCanvas({
          x: .5 * this.frame.canvas.width / t,
          y: .5 * this.frame.canvas.height / t
        }));
      }
    }, {
      key: "_setCameraState",
      value: function () {
        if (void 0 !== this.cameraState.scale && 0 !== this.frame.canvas.clientWidth && 0 !== this.frame.canvas.clientHeight && 0 !== this.pixelRatio && this.cameraState.previousWidth > 0) {
          var t = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth,
              e = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight,
              i = this.cameraState.scale;
          1 != t && 1 != e ? i = .5 * this.cameraState.scale * (t + e) : 1 != t ? i = this.cameraState.scale * t : 1 != e && (i = this.cameraState.scale * e), this.body.view.scale = i;
          var o = this.DOMtoCanvas({
            x: .5 * this.frame.canvas.clientWidth,
            y: .5 * this.frame.canvas.clientHeight
          }),
              n = {
            x: o.x - this.cameraState.position.x,
            y: o.y - this.cameraState.position.y
          };
          this.body.view.translation.x += n.x * this.body.view.scale, this.body.view.translation.y += n.y * this.body.view.scale;
        }
      }
    }, {
      key: "_prepareValue",
      value: function (t) {
        if ("number" == typeof t) return t + "px";

        if ("string" == typeof t) {
          if (-1 !== t.indexOf("%") || -1 !== t.indexOf("px")) return t;
          if (-1 === t.indexOf("%")) return t + "px";
        }

        throw new Error("Could not use the value supplied for width or height:" + t);
      }
    }, {
      key: "_create",
      value: function () {
        for (; this.body.container.hasChildNodes();) this.body.container.removeChild(this.body.container.firstChild);

        if (this.frame = document.createElement("div"), this.frame.className = "vis-network", this.frame.style.position = "relative", this.frame.style.overflow = "hidden", this.frame.tabIndex = 900, this.frame.canvas = document.createElement("canvas"), this.frame.canvas.style.position = "relative", this.frame.appendChild(this.frame.canvas), this.frame.canvas.getContext) this._setPixelRatio(), this.setTransform();else {
          var t = document.createElement("DIV");
          t.style.color = "red", t.style.fontWeight = "bold", t.style.padding = "10px", t.innerHTML = "Error: your browser does not support HTML canvas", this.frame.canvas.appendChild(t);
        }
        this.body.container.appendChild(this.frame), this.body.view.scale = 1, this.body.view.translation = {
          x: .5 * this.frame.canvas.clientWidth,
          y: .5 * this.frame.canvas.clientHeight
        }, this._bindHammer();
      }
    }, {
      key: "_bindHammer",
      value: function () {
        var t = this;
        void 0 !== this.hammer && this.hammer.destroy(), this.drag = {}, this.pinch = {}, this.hammer = new Pr(this.frame.canvas), this.hammer.get("pinch").set({
          enable: !0
        }), this.hammer.get("pan").set({
          threshold: 5,
          direction: Pr.DIRECTION_ALL
        }), pd.onTouch(this.hammer, function (e) {
          t.body.eventListeners.onTouch(e);
        }), this.hammer.on("tap", function (e) {
          t.body.eventListeners.onTap(e);
        }), this.hammer.on("doubletap", function (e) {
          t.body.eventListeners.onDoubleTap(e);
        }), this.hammer.on("press", function (e) {
          t.body.eventListeners.onHold(e);
        }), this.hammer.on("panstart", function (e) {
          t.body.eventListeners.onDragStart(e);
        }), this.hammer.on("panmove", function (e) {
          t.body.eventListeners.onDrag(e);
        }), this.hammer.on("panend", function (e) {
          t.body.eventListeners.onDragEnd(e);
        }), this.hammer.on("pinch", function (e) {
          t.body.eventListeners.onPinch(e);
        }), this.frame.canvas.addEventListener("wheel", function (e) {
          t.body.eventListeners.onMouseWheel(e);
        }), this.frame.canvas.addEventListener("mousemove", function (e) {
          t.body.eventListeners.onMouseMove(e);
        }), this.frame.canvas.addEventListener("contextmenu", function (e) {
          t.body.eventListeners.onContext(e);
        }), this.hammerFrame = new Pr(this.frame), pd.onRelease(this.hammerFrame, function (e) {
          t.body.eventListeners.onRelease(e);
        });
      }
    }, {
      key: "setSize",
      value: function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.options.width,
            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.options.height;
        t = this._prepareValue(t), e = this._prepareValue(e);
        var i = !1,
            o = this.frame.canvas.width,
            n = this.frame.canvas.height,
            s = this.pixelRatio;
        if (this._setPixelRatio(), t != this.options.width || e != this.options.height || this.frame.style.width != t || this.frame.style.height != e) this._getCameraState(s), this.frame.style.width = t, this.frame.style.height = e, this.frame.canvas.style.width = "100%", this.frame.canvas.style.height = "100%", this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio), this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio), this.options.width = t, this.options.height = e, this.canvasViewCenter = {
          x: .5 * this.frame.clientWidth,
          y: .5 * this.frame.clientHeight
        }, i = !0;else {
          var r = Math.round(this.frame.canvas.clientWidth * this.pixelRatio),
              a = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);
          this.frame.canvas.width === r && this.frame.canvas.height === a || this._getCameraState(s), this.frame.canvas.width !== r && (this.frame.canvas.width = r, i = !0), this.frame.canvas.height !== a && (this.frame.canvas.height = a, i = !0);
        }
        return !0 === i && (this.body.emitter.emit("resize", {
          width: Math.round(this.frame.canvas.width / this.pixelRatio),
          height: Math.round(this.frame.canvas.height / this.pixelRatio),
          oldWidth: Math.round(o / this.pixelRatio),
          oldHeight: Math.round(n / this.pixelRatio)
        }), this._setCameraState()), this.initialized = !0, i;
      }
    }, {
      key: "getContext",
      value: function () {
        return this.frame.canvas.getContext("2d");
      }
    }, {
      key: "_determinePixelRatio",
      value: function () {
        var t = this.getContext();
        if (void 0 === t) throw new Error("Could not get canvax context");
        var e = 1;
        return "undefined" != typeof window && (e = window.devicePixelRatio || 1), e / (t.webkitBackingStorePixelRatio || t.mozBackingStorePixelRatio || t.msBackingStorePixelRatio || t.oBackingStorePixelRatio || t.backingStorePixelRatio || 1);
      }
    }, {
      key: "_setPixelRatio",
      value: function () {
        this.pixelRatio = this._determinePixelRatio();
      }
    }, {
      key: "setTransform",
      value: function () {
        var t = this.getContext();
        if (void 0 === t) throw new Error("Could not get canvax context");
        t.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
      }
    }, {
      key: "_XconvertDOMtoCanvas",
      value: function (t) {
        return (t - this.body.view.translation.x) / this.body.view.scale;
      }
    }, {
      key: "_XconvertCanvasToDOM",
      value: function (t) {
        return t * this.body.view.scale + this.body.view.translation.x;
      }
    }, {
      key: "_YconvertDOMtoCanvas",
      value: function (t) {
        return (t - this.body.view.translation.y) / this.body.view.scale;
      }
    }, {
      key: "_YconvertCanvasToDOM",
      value: function (t) {
        return t * this.body.view.scale + this.body.view.translation.y;
      }
    }, {
      key: "canvasToDOM",
      value: function (t) {
        return {
          x: this._XconvertCanvasToDOM(t.x),
          y: this._YconvertCanvasToDOM(t.y)
        };
      }
    }, {
      key: "DOMtoCanvas",
      value: function (t) {
        return {
          x: this._XconvertDOMtoCanvas(t.x),
          y: this._YconvertDOMtoCanvas(t.y)
        };
      }
    }]), t;
  }()),
      vd = j$2.isFinite,
      gd = Number.isFinite || function (t) {
    return "number" == typeof t && vd(t);
  };

  de({
    target: "Number",
    stat: !0
  }, {
    isFinite: gd
  });

  var yd,
      md = function () {
    function t(e, i) {
      var o = this;
      pn(this, t), this.body = e, this.canvas = i, this.animationSpeed = 1 / this.renderRefreshRate, this.animationEasingFunction = "easeInOutQuint", this.easingTime = 0, this.sourceScale = 0, this.targetScale = 0, this.sourceTranslation = 0, this.targetTranslation = 0, this.lockedOnNodeId = void 0, this.lockedOnNodeOffset = void 0, this.touchTime = 0, this.viewFunction = void 0, this.body.emitter.on("fit", this.fit.bind(this)), this.body.emitter.on("animationFinished", function () {
        o.body.emitter.emit("_stopRendering");
      }), this.body.emitter.on("unlockNode", this.releaseNode.bind(this));
    }

    return vn(t, [{
      key: "setOptions",
      value: function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        this.options = t;
      }
    }, {
      key: "fit",
      value: function () {
        var t,
            e,
            i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
          nodes: []
        },
            o = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];

        if (void 0 !== (i = Object.assign({}, i)).nodes && 0 !== i.nodes.length || (i.nodes = this.body.nodeIndices), !0 === o) {
          var n = 0;

          for (var s in this.body.nodes) if (this.body.nodes.hasOwnProperty(s)) {
            var r = this.body.nodes[s];
            !0 === r.predefinedPosition && (n += 1);
          }

          if (n > .5 * this.body.nodeIndices.length) return void this.fit(i, !1);
          t = dd.getRange(this.body.nodes, i.nodes);
          var a = this.body.nodeIndices.length;
          e = 12.662 / (a + 7.4147) + .0964822;
          var h = Math.min(this.canvas.frame.canvas.clientWidth / 600, this.canvas.frame.canvas.clientHeight / 600);
          e *= h;
        } else {
          this.body.emitter.emit("_resizeNodes"), t = dd.getRange(this.body.nodes, i.nodes);
          var d = 1.1 * Math.abs(t.maxX - t.minX),
              l = 1.1 * Math.abs(t.maxY - t.minY),
              c = this.canvas.frame.canvas.clientWidth / d,
              u = this.canvas.frame.canvas.clientHeight / l;
          e = c <= u ? c : u;
        }

        e > 1 ? e = 1 : 0 === e && (e = 1);
        var p = dd.findCenter(t),
            f = {
          position: p,
          scale: e,
          animation: i.animation
        };
        this.moveTo(f);
      }
    }, {
      key: "focus",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};

        if (void 0 !== this.body.nodes[t]) {
          var i = {
            x: this.body.nodes[t].x,
            y: this.body.nodes[t].y
          };
          e.position = i, e.lockedOnNode = t, this.moveTo(e);
        } else console.log("Node: " + t + " cannot be found.");
      }
    }, {
      key: "moveTo",
      value: function (t) {
        if (void 0 !== t) {
          if (null != t.offset) {
            if (null != t.offset.x) {
              if (t.offset.x = +t.offset.x, !Number.isFinite(t.offset.x)) throw new TypeError('The option "offset.x" has to be a finite number.');
            } else t.offset.x = 0;

            if (null != t.offset.y) {
              if (t.offset.y = +t.offset.y, !Number.isFinite(t.offset.y)) throw new TypeError('The option "offset.y" has to be a finite number.');
            } else t.offset.x = 0;
          } else t.offset = {
            x: 0,
            y: 0
          };

          if (null != t.position) {
            if (null != t.position.x) {
              if (t.position.x = +t.position.x, !Number.isFinite(t.position.x)) throw new TypeError('The option "position.x" has to be a finite number.');
            } else t.position.x = 0;

            if (null != t.position.y) {
              if (t.position.y = +t.position.y, !Number.isFinite(t.position.y)) throw new TypeError('The option "position.y" has to be a finite number.');
            } else t.position.x = 0;
          } else t.position = this.getViewPosition();

          if (null != t.scale) {
            if (t.scale = +t.scale, !(t.scale > 0)) throw new TypeError('The option "scale" has to be a number greater than zero.');
          } else t.scale = this.body.view.scale;

          void 0 === t.animation && (t.animation = {
            duration: 0
          }), !1 === t.animation && (t.animation = {
            duration: 0
          }), !0 === t.animation && (t.animation = {}), void 0 === t.animation.duration && (t.animation.duration = 1e3), void 0 === t.animation.easingFunction && (t.animation.easingFunction = "easeInOutQuad"), this.animateView(t);
        } else t = {};
      }
    }, {
      key: "animateView",
      value: function (t) {
        if (void 0 !== t) {
          this.animationEasingFunction = t.animation.easingFunction, this.releaseNode(), !0 === t.locked && (this.lockedOnNodeId = t.lockedOnNode, this.lockedOnNodeOffset = t.offset), 0 != this.easingTime && this._transitionRedraw(!0), this.sourceScale = this.body.view.scale, this.sourceTranslation = this.body.view.translation, this.targetScale = t.scale, this.body.view.scale = this.targetScale;
          var e = this.canvas.DOMtoCanvas({
            x: .5 * this.canvas.frame.canvas.clientWidth,
            y: .5 * this.canvas.frame.canvas.clientHeight
          }),
              i = e.x - t.position.x,
              o = e.y - t.position.y;
          this.targetTranslation = {
            x: this.sourceTranslation.x + i * this.targetScale + t.offset.x,
            y: this.sourceTranslation.y + o * this.targetScale + t.offset.y
          }, 0 === t.animation.duration ? null != this.lockedOnNodeId ? (this.viewFunction = this._lockedRedraw.bind(this), this.body.emitter.on("initRedraw", this.viewFunction)) : (this.body.view.scale = this.targetScale, this.body.view.translation = this.targetTranslation, this.body.emitter.emit("_requestRedraw")) : (this.animationSpeed = 1 / (60 * t.animation.duration * .001) || 1 / 60, this.animationEasingFunction = t.animation.easingFunction, this.viewFunction = this._transitionRedraw.bind(this), this.body.emitter.on("initRedraw", this.viewFunction), this.body.emitter.emit("_startRendering"));
        }
      }
    }, {
      key: "_lockedRedraw",
      value: function () {
        var t = this.body.nodes[this.lockedOnNodeId].x,
            e = this.body.nodes[this.lockedOnNodeId].y,
            i = this.canvas.DOMtoCanvas({
          x: .5 * this.canvas.frame.canvas.clientWidth,
          y: .5 * this.canvas.frame.canvas.clientHeight
        }),
            o = i.x - t,
            n = i.y - e,
            s = this.body.view.translation,
            r = {
          x: s.x + o * this.body.view.scale + this.lockedOnNodeOffset.x,
          y: s.y + n * this.body.view.scale + this.lockedOnNodeOffset.y
        };
        this.body.view.translation = r;
      }
    }, {
      key: "releaseNode",
      value: function () {
        void 0 !== this.lockedOnNodeId && void 0 !== this.viewFunction && (this.body.emitter.off("initRedraw", this.viewFunction), this.lockedOnNodeId = void 0, this.lockedOnNodeOffset = void 0);
      }
    }, {
      key: "_transitionRedraw",
      value: function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
        this.easingTime += this.animationSpeed, this.easingTime = !0 === t ? 1 : this.easingTime;
        var e = easingFunctions[this.animationEasingFunction](this.easingTime);
        this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * e, this.body.view.translation = {
          x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * e,
          y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * e
        }, this.easingTime >= 1 && (this.body.emitter.off("initRedraw", this.viewFunction), this.easingTime = 0, null != this.lockedOnNodeId && (this.viewFunction = this._lockedRedraw.bind(this), this.body.emitter.on("initRedraw", this.viewFunction)), this.body.emitter.emit("animationFinished"));
      }
    }, {
      key: "getScale",
      value: function () {
        return this.body.view.scale;
      }
    }, {
      key: "getViewPosition",
      value: function () {
        return this.canvas.DOMtoCanvas({
          x: .5 * this.canvas.frame.canvas.clientWidth,
          y: .5 * this.canvas.frame.canvas.clientHeight
        });
      }
    }]), t;
  }(),
      bd = function () {
    function t(e, i) {
      var o = this;
      pn(this, t), this.body = e, this.canvas = i, this.iconsCreated = !1, this.navigationHammers = [], this.boundFunctions = {}, this.touchTime = 0, this.activated = !1, this.body.emitter.on("activate", function () {
        o.activated = !0, o.configureKeyboardBindings();
      }), this.body.emitter.on("deactivate", function () {
        o.activated = !1, o.configureKeyboardBindings();
      }), this.body.emitter.on("destroy", function () {
        void 0 !== o.keycharm && o.keycharm.destroy();
      }), this.options = {};
    }

    return vn(t, [{
      key: "setOptions",
      value: function (t) {
        void 0 !== t && (this.options = t, this.create());
      }
    }, {
      key: "create",
      value: function () {
        !0 === this.options.navigationButtons ? !1 === this.iconsCreated && this.loadNavigationElements() : !0 === this.iconsCreated && this.cleanNavigation(), this.configureKeyboardBindings();
      }
    }, {
      key: "cleanNavigation",
      value: function () {
        if (0 != this.navigationHammers.length) {
          for (var t = 0; t < this.navigationHammers.length; t++) this.navigationHammers[t].destroy();

          this.navigationHammers = [];
        }

        this.navigationDOM && this.navigationDOM.wrapper && this.navigationDOM.wrapper.parentNode && this.navigationDOM.wrapper.parentNode.removeChild(this.navigationDOM.wrapper), this.iconsCreated = !1;
      }
    }, {
      key: "loadNavigationElements",
      value: function () {
        var t = this;
        this.cleanNavigation(), this.navigationDOM = {};
        var e = ["up", "down", "left", "right", "zoomIn", "zoomOut", "zoomExtends"],
            i = ["_moveUp", "_moveDown", "_moveLeft", "_moveRight", "_zoomIn", "_zoomOut", "_fit"];
        this.navigationDOM.wrapper = document.createElement("div"), this.navigationDOM.wrapper.className = "vis-navigation", this.canvas.frame.appendChild(this.navigationDOM.wrapper);

        for (var o = 0; o < e.length; o++) {
          this.navigationDOM[e[o]] = document.createElement("div"), this.navigationDOM[e[o]].className = "vis-button vis-" + e[o], this.navigationDOM.wrapper.appendChild(this.navigationDOM[e[o]]);
          var n = new Pr(this.navigationDOM[e[o]]);
          "_fit" === i[o] ? pd.onTouch(n, this._fit.bind(this)) : pd.onTouch(n, this.bindToRedraw.bind(this, i[o])), this.navigationHammers.push(n);
        }

        var s = new Pr(this.canvas.frame);
        pd.onRelease(s, function () {
          t._stopMovement();
        }), this.navigationHammers.push(s), this.iconsCreated = !0;
      }
    }, {
      key: "bindToRedraw",
      value: function (t) {
        void 0 === this.boundFunctions[t] && (this.boundFunctions[t] = this[t].bind(this), this.body.emitter.on("initRedraw", this.boundFunctions[t]), this.body.emitter.emit("_startRendering"));
      }
    }, {
      key: "unbindFromRedraw",
      value: function (t) {
        void 0 !== this.boundFunctions[t] && (this.body.emitter.off("initRedraw", this.boundFunctions[t]), this.body.emitter.emit("_stopRendering"), delete this.boundFunctions[t]);
      }
    }, {
      key: "_fit",
      value: function () {
        new Date().valueOf() - this.touchTime > 700 && (this.body.emitter.emit("fit", {
          duration: 700
        }), this.touchTime = new Date().valueOf());
      }
    }, {
      key: "_stopMovement",
      value: function () {
        for (var t in this.boundFunctions) this.boundFunctions.hasOwnProperty(t) && (this.body.emitter.off("initRedraw", this.boundFunctions[t]), this.body.emitter.emit("_stopRendering"));

        this.boundFunctions = {};
      }
    }, {
      key: "_moveUp",
      value: function () {
        this.body.view.translation.y += this.options.keyboard.speed.y;
      }
    }, {
      key: "_moveDown",
      value: function () {
        this.body.view.translation.y -= this.options.keyboard.speed.y;
      }
    }, {
      key: "_moveLeft",
      value: function () {
        this.body.view.translation.x += this.options.keyboard.speed.x;
      }
    }, {
      key: "_moveRight",
      value: function () {
        this.body.view.translation.x -= this.options.keyboard.speed.x;
      }
    }, {
      key: "_zoomIn",
      value: function () {
        var t = this.body.view.scale,
            e = this.body.view.scale * (1 + this.options.keyboard.speed.zoom),
            i = this.body.view.translation,
            o = e / t,
            n = (1 - o) * this.canvas.canvasViewCenter.x + i.x * o,
            s = (1 - o) * this.canvas.canvasViewCenter.y + i.y * o;
        this.body.view.scale = e, this.body.view.translation = {
          x: n,
          y: s
        }, this.body.emitter.emit("zoom", {
          direction: "+",
          scale: this.body.view.scale,
          pointer: null
        });
      }
    }, {
      key: "_zoomOut",
      value: function () {
        var t = this.body.view.scale,
            e = this.body.view.scale / (1 + this.options.keyboard.speed.zoom),
            i = this.body.view.translation,
            o = e / t,
            n = (1 - o) * this.canvas.canvasViewCenter.x + i.x * o,
            s = (1 - o) * this.canvas.canvasViewCenter.y + i.y * o;
        this.body.view.scale = e, this.body.view.translation = {
          x: n,
          y: s
        }, this.body.emitter.emit("zoom", {
          direction: "-",
          scale: this.body.view.scale,
          pointer: null
        });
      }
    }, {
      key: "configureKeyboardBindings",
      value: function () {
        var t = this;
        void 0 !== this.keycharm && this.keycharm.destroy(), !0 === this.options.keyboard.enabled && (!0 === this.options.keyboard.bindToWindow ? this.keycharm = keycharm({
          container: window,
          preventDefault: !0
        }) : this.keycharm = keycharm({
          container: this.canvas.frame,
          preventDefault: !0
        }), this.keycharm.reset(), !0 === this.activated && (this.keycharm.bind("up", function () {
          t.bindToRedraw("_moveUp");
        }, "keydown"), this.keycharm.bind("down", function () {
          t.bindToRedraw("_moveDown");
        }, "keydown"), this.keycharm.bind("left", function () {
          t.bindToRedraw("_moveLeft");
        }, "keydown"), this.keycharm.bind("right", function () {
          t.bindToRedraw("_moveRight");
        }, "keydown"), this.keycharm.bind("=", function () {
          t.bindToRedraw("_zoomIn");
        }, "keydown"), this.keycharm.bind("num+", function () {
          t.bindToRedraw("_zoomIn");
        }, "keydown"), this.keycharm.bind("num-", function () {
          t.bindToRedraw("_zoomOut");
        }, "keydown"), this.keycharm.bind("-", function () {
          t.bindToRedraw("_zoomOut");
        }, "keydown"), this.keycharm.bind("[", function () {
          t.bindToRedraw("_zoomOut");
        }, "keydown"), this.keycharm.bind("]", function () {
          t.bindToRedraw("_zoomIn");
        }, "keydown"), this.keycharm.bind("pageup", function () {
          t.bindToRedraw("_zoomIn");
        }, "keydown"), this.keycharm.bind("pagedown", function () {
          t.bindToRedraw("_zoomOut");
        }, "keydown"), this.keycharm.bind("up", function () {
          t.unbindFromRedraw("_moveUp");
        }, "keyup"), this.keycharm.bind("down", function () {
          t.unbindFromRedraw("_moveDown");
        }, "keyup"), this.keycharm.bind("left", function () {
          t.unbindFromRedraw("_moveLeft");
        }, "keyup"), this.keycharm.bind("right", function () {
          t.unbindFromRedraw("_moveRight");
        }, "keyup"), this.keycharm.bind("=", function () {
          t.unbindFromRedraw("_zoomIn");
        }, "keyup"), this.keycharm.bind("num+", function () {
          t.unbindFromRedraw("_zoomIn");
        }, "keyup"), this.keycharm.bind("num-", function () {
          t.unbindFromRedraw("_zoomOut");
        }, "keyup"), this.keycharm.bind("-", function () {
          t.unbindFromRedraw("_zoomOut");
        }, "keyup"), this.keycharm.bind("[", function () {
          t.unbindFromRedraw("_zoomOut");
        }, "keyup"), this.keycharm.bind("]", function () {
          t.unbindFromRedraw("_zoomIn");
        }, "keyup"), this.keycharm.bind("pageup", function () {
          t.unbindFromRedraw("_zoomIn");
        }, "keyup"), this.keycharm.bind("pagedown", function () {
          t.unbindFromRedraw("_zoomOut");
        }, "keyup")));
      }
    }]), t;
  }(),
      wd = function () {
    function t(e, i) {
      pn(this, t), this.container = e, this.overflowMethod = i || "cap", this.x = 0, this.y = 0, this.padding = 5, this.hidden = !1, this.frame = document.createElement("div"), this.frame.className = "vis-tooltip", this.container.appendChild(this.frame);
    }

    return vn(t, [{
      key: "setPosition",
      value: function (t, e) {
        this.x = parseInt(t), this.y = parseInt(e);
      }
    }, {
      key: "setText",
      value: function (t) {
        t instanceof Element ? (this.frame.innerHTML = "", this.frame.appendChild(t)) : this.frame.innerHTML = t;
      }
    }, {
      key: "show",
      value: function (t) {
        if (void 0 === t && (t = !0), !0 === t) {
          var e = this.frame.clientHeight,
              i = this.frame.clientWidth,
              o = this.frame.parentNode.clientHeight,
              n = this.frame.parentNode.clientWidth,
              s = 0,
              r = 0;

          if ("flip" == this.overflowMethod) {
            var a = !1,
                h = !0;
            this.y - e < this.padding && (h = !1), this.x + i > n - this.padding && (a = !0), s = a ? this.x - i : this.x, r = h ? this.y - e : this.y;
          } else (r = this.y - e) + e + this.padding > o && (r = o - e - this.padding), r < this.padding && (r = this.padding), (s = this.x) + i + this.padding > n && (s = n - i - this.padding), s < this.padding && (s = this.padding);

          this.frame.style.left = s + "px", this.frame.style.top = r + "px", this.frame.style.visibility = "visible", this.hidden = !1;
        } else this.hide();
      }
    }, {
      key: "hide",
      value: function () {
        this.hidden = !0, this.frame.style.left = "0", this.frame.style.top = "0", this.frame.style.visibility = "hidden";
      }
    }, {
      key: "destroy",
      value: function () {
        this.frame.parentNode.removeChild(this.frame);
      }
    }]), t;
  }(),
      kd = function () {
    function t(i, o, n) {
      pn(this, t), this.body = i, this.canvas = o, this.selectionHandler = n, this.navigationHandler = new bd(i, o), this.body.eventListeners.onTap = this.onTap.bind(this), this.body.eventListeners.onTouch = this.onTouch.bind(this), this.body.eventListeners.onDoubleTap = this.onDoubleTap.bind(this), this.body.eventListeners.onHold = this.onHold.bind(this), this.body.eventListeners.onDragStart = this.onDragStart.bind(this), this.body.eventListeners.onDrag = this.onDrag.bind(this), this.body.eventListeners.onDragEnd = this.onDragEnd.bind(this), this.body.eventListeners.onMouseWheel = this.onMouseWheel.bind(this), this.body.eventListeners.onPinch = this.onPinch.bind(this), this.body.eventListeners.onMouseMove = this.onMouseMove.bind(this), this.body.eventListeners.onRelease = this.onRelease.bind(this), this.body.eventListeners.onContext = this.onContext.bind(this), this.touchTime = 0, this.drag = {}, this.pinch = {}, this.popup = void 0, this.popupObj = void 0, this.popupTimer = void 0, this.body.functions.getPointer = this.getPointer.bind(this), this.options = {}, this.defaultOptions = {
        dragNodes: !0,
        dragView: !0,
        hover: !1,
        keyboard: {
          enabled: !1,
          speed: {
            x: 10,
            y: 10,
            zoom: .02
          },
          bindToWindow: !0
        },
        navigationButtons: !1,
        tooltipDelay: 300,
        zoomView: !0,
        zoomSpeed: 1
      }, extend(this.options, this.defaultOptions), this.bindEventListeners();
    }

    return vn(t, [{
      key: "bindEventListeners",
      value: function () {
        var t = this;
        this.body.emitter.on("destroy", function () {
          clearTimeout(t.popupTimer), delete t.body.functions.getPointer;
        });
      }
    }, {
      key: "setOptions",
      value: function (t) {
        if (void 0 !== t) {
          selectiveNotDeepExtend(["hideEdgesOnDrag", "hideEdgesOnZoom", "hideNodesOnDrag", "keyboard", "multiselect", "selectable", "selectConnectedEdges"], this.options, t), mergeOptions(this.options, t, "keyboard"), t.tooltip && (extend(this.options.tooltip, t.tooltip), t.tooltip.color && (this.options.tooltip.color = parseColor(t.tooltip.color)));
        }

        this.navigationHandler.setOptions(this.options);
      }
    }, {
      key: "getPointer",
      value: function (t) {
        return {
          x: t.x - getAbsoluteLeft(this.canvas.frame.canvas),
          y: t.y - getAbsoluteTop(this.canvas.frame.canvas)
        };
      }
    }, {
      key: "onTouch",
      value: function (t) {
        new Date().valueOf() - this.touchTime > 50 && (this.drag.pointer = this.getPointer(t.center), this.drag.pinched = !1, this.pinch.scale = this.body.view.scale, this.touchTime = new Date().valueOf());
      }
    }, {
      key: "onTap",
      value: function (t) {
        var e = this.getPointer(t.center),
            i = this.selectionHandler.options.multiselect && (t.changedPointers[0].ctrlKey || t.changedPointers[0].metaKey);
        this.checkSelectionChanges(e, t, i), this.selectionHandler._generateClickEvent("click", t, e);
      }
    }, {
      key: "onDoubleTap",
      value: function (t) {
        var e = this.getPointer(t.center);

        this.selectionHandler._generateClickEvent("doubleClick", t, e);
      }
    }, {
      key: "onHold",
      value: function (t) {
        var e = this.getPointer(t.center),
            i = this.selectionHandler.options.multiselect;
        this.checkSelectionChanges(e, t, i), this.selectionHandler._generateClickEvent("click", t, e), this.selectionHandler._generateClickEvent("hold", t, e);
      }
    }, {
      key: "onRelease",
      value: function (t) {
        if (new Date().valueOf() - this.touchTime > 10) {
          var e = this.getPointer(t.center);
          this.selectionHandler._generateClickEvent("release", t, e), this.touchTime = new Date().valueOf();
        }
      }
    }, {
      key: "onContext",
      value: function (t) {
        var e = this.getPointer({
          x: t.clientX,
          y: t.clientY
        });

        this.selectionHandler._generateClickEvent("oncontext", t, e);
      }
    }, {
      key: "checkSelectionChanges",
      value: function (t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            o = this.selectionHandler.getSelection(),
            n = !1;
        n = !0 === i ? this.selectionHandler.selectAdditionalOnPoint(t) : this.selectionHandler.selectOnPoint(t);

        var s = this.selectionHandler.getSelection(),
            r = this._determineDifference(o, s),
            a = this._determineDifference(s, o);

        r.edges.length > 0 && (this.selectionHandler._generateClickEvent("deselectEdge", e, t, o), n = !0), r.nodes.length > 0 && (this.selectionHandler._generateClickEvent("deselectNode", e, t, o), n = !0), a.nodes.length > 0 && (this.selectionHandler._generateClickEvent("selectNode", e, t), n = !0), a.edges.length > 0 && (this.selectionHandler._generateClickEvent("selectEdge", e, t), n = !0), !0 === n && this.selectionHandler._generateClickEvent("select", e, t);
      }
    }, {
      key: "_determineDifference",
      value: function (t, e) {
        var i = function (t, e) {
          for (var i = [], o = 0; o < t.length; o++) {
            var n = t[o];
            -1 === e.indexOf(n) && i.push(n);
          }

          return i;
        };

        return {
          nodes: i(t.nodes, e.nodes),
          edges: i(t.edges, e.edges)
        };
      }
    }, {
      key: "onDragStart",
      value: function (t) {
        void 0 === this.drag.pointer && this.onTouch(t);
        var i = this.selectionHandler.getNodeAt(this.drag.pointer);

        if (this.drag.dragging = !0, this.drag.selection = [], this.drag.translation = extend({}, this.body.view.translation), this.drag.nodeId = void 0, void 0 !== i && !0 === this.options.dragNodes) {
          this.drag.nodeId = i.id, !1 === i.isSelected() && (this.selectionHandler.unselectAll(), this.selectionHandler.selectObject(i)), this.selectionHandler._generateClickEvent("dragStart", t, this.drag.pointer);
          var o = this.selectionHandler.selectionObj.nodes;

          for (var n in o) if (o.hasOwnProperty(n)) {
            var s = o[n],
                r = {
              id: s.id,
              node: s,
              x: s.x,
              y: s.y,
              xFixed: s.options.fixed.x,
              yFixed: s.options.fixed.y
            };
            s.options.fixed.x = !0, s.options.fixed.y = !0, this.drag.selection.push(r);
          }
        } else this.selectionHandler._generateClickEvent("dragStart", t, this.drag.pointer, void 0, !0);
      }
    }, {
      key: "onDrag",
      value: function (t) {
        var e = this;

        if (!0 !== this.drag.pinched) {
          this.body.emitter.emit("unlockNode");
          var i = this.getPointer(t.center),
              o = this.drag.selection;

          if (o && o.length && !0 === this.options.dragNodes) {
            this.selectionHandler._generateClickEvent("dragging", t, i);

            var n = i.x - this.drag.pointer.x,
                s = i.y - this.drag.pointer.y;
            o.forEach(function (t) {
              var i = t.node;
              !1 === t.xFixed && (i.x = e.canvas._XconvertDOMtoCanvas(e.canvas._XconvertCanvasToDOM(t.x) + n)), !1 === t.yFixed && (i.y = e.canvas._YconvertDOMtoCanvas(e.canvas._YconvertCanvasToDOM(t.y) + s));
            }), this.body.emitter.emit("startSimulation");
          } else if (!0 === this.options.dragView) {
            if (this.selectionHandler._generateClickEvent("dragging", t, i, void 0, !0), void 0 === this.drag.pointer) return void this.onDragStart(t);
            var r = i.x - this.drag.pointer.x,
                a = i.y - this.drag.pointer.y;
            this.body.view.translation = {
              x: this.drag.translation.x + r,
              y: this.drag.translation.y + a
            }, this.body.emitter.emit("_requestRedraw");
          }
        }
      }
    }, {
      key: "onDragEnd",
      value: function (t) {
        this.drag.dragging = !1;
        var e = this.drag.selection;
        e && e.length ? (e.forEach(function (t) {
          t.node.options.fixed.x = t.xFixed, t.node.options.fixed.y = t.yFixed;
        }), this.selectionHandler._generateClickEvent("dragEnd", t, this.getPointer(t.center)), this.body.emitter.emit("startSimulation")) : (this.selectionHandler._generateClickEvent("dragEnd", t, this.getPointer(t.center), void 0, !0), this.body.emitter.emit("_requestRedraw"));
      }
    }, {
      key: "onPinch",
      value: function (t) {
        var e = this.getPointer(t.center);
        this.drag.pinched = !0, void 0 === this.pinch.scale && (this.pinch.scale = 1);
        var i = this.pinch.scale * t.scale;
        this.zoom(i, e);
      }
    }, {
      key: "zoom",
      value: function (t, e) {
        if (!0 === this.options.zoomView) {
          var i = this.body.view.scale;
          t < 1e-5 && (t = 1e-5), t > 10 && (t = 10);
          var o = void 0;
          void 0 !== this.drag && !0 === this.drag.dragging && (o = this.canvas.DOMtoCanvas(this.drag.pointer));
          var n = this.body.view.translation,
              s = t / i,
              r = (1 - s) * e.x + n.x * s,
              a = (1 - s) * e.y + n.y * s;

          if (this.body.view.scale = t, this.body.view.translation = {
            x: r,
            y: a
          }, null != o) {
            var h = this.canvas.canvasToDOM(o);
            this.drag.pointer.x = h.x, this.drag.pointer.y = h.y;
          }

          this.body.emitter.emit("_requestRedraw"), i < t ? this.body.emitter.emit("zoom", {
            direction: "+",
            scale: this.body.view.scale,
            pointer: e
          }) : this.body.emitter.emit("zoom", {
            direction: "-",
            scale: this.body.view.scale,
            pointer: e
          });
        }
      }
    }, {
      key: "onMouseWheel",
      value: function (t) {
        if (!0 === this.options.zoomView) {
          if (0 !== t.deltaY) {
            var e = this.body.view.scale;
            e *= 1 + (t.deltaY < 0 ? 1 : -1) * (.1 * this.options.zoomSpeed);
            var i = this.getPointer({
              x: t.clientX,
              y: t.clientY
            });
            this.zoom(e, i);
          }

          t.preventDefault();
        }
      }
    }, {
      key: "onMouseMove",
      value: function (t) {
        var e = this,
            i = this.getPointer({
          x: t.clientX,
          y: t.clientY
        }),
            o = !1;
        void 0 !== this.popup && (!1 === this.popup.hidden && this._checkHidePopup(i), !1 === this.popup.hidden && (o = !0, this.popup.setPosition(i.x + 3, i.y - 5), this.popup.show())), !1 === this.options.keyboard.bindToWindow && !0 === this.options.keyboard.enabled && this.canvas.frame.focus(), !1 === o && (void 0 !== this.popupTimer && (clearInterval(this.popupTimer), this.popupTimer = void 0), this.drag.dragging || (this.popupTimer = setTimeout(function () {
          return e._checkShowPopup(i);
        }, this.options.tooltipDelay))), !0 === this.options.hover && this.selectionHandler.hoverObject(t, i);
      }
    }, {
      key: "_checkShowPopup",
      value: function (t) {
        var e = this.canvas._XconvertDOMtoCanvas(t.x),
            i = this.canvas._YconvertDOMtoCanvas(t.y),
            o = {
          left: e,
          top: i,
          right: e,
          bottom: i
        },
            n = void 0 === this.popupObj ? void 0 : this.popupObj.id,
            s = !1,
            r = "node";

        if (void 0 === this.popupObj) {
          for (var a, h = this.body.nodeIndices, d = this.body.nodes, l = [], c = 0; c < h.length; c++) !0 === (a = d[h[c]]).isOverlappingWith(o) && (s = !0, void 0 !== a.getTitle() && l.push(h[c]));

          l.length > 0 && (this.popupObj = d[l[l.length - 1]], s = !0);
        }

        if (void 0 === this.popupObj && !1 === s) {
          for (var u, p = this.body.edgeIndices, f = this.body.edges, v = [], g = 0; g < p.length; g++) !0 === (u = f[p[g]]).isOverlappingWith(o) && !0 === u.connected && void 0 !== u.getTitle() && v.push(p[g]);

          v.length > 0 && (this.popupObj = f[v[v.length - 1]], r = "edge");
        }

        void 0 !== this.popupObj ? this.popupObj.id !== n && (void 0 === this.popup && (this.popup = new wd(this.canvas.frame)), this.popup.popupTargetType = r, this.popup.popupTargetId = this.popupObj.id, this.popup.setPosition(t.x + 3, t.y - 5), this.popup.setText(this.popupObj.getTitle()), this.popup.show(), this.body.emitter.emit("showPopup", this.popupObj.id)) : void 0 !== this.popup && (this.popup.hide(), this.body.emitter.emit("hidePopup"));
      }
    }, {
      key: "_checkHidePopup",
      value: function (t) {
        var e = this.selectionHandler._pointerToPositionObject(t),
            i = !1;

        if ("node" === this.popup.popupTargetType) {
          if (void 0 !== this.body.nodes[this.popup.popupTargetId] && !0 === (i = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(e))) {
            var o = this.selectionHandler.getNodeAt(t);
            i = void 0 !== o && o.id === this.popup.popupTargetId;
          }
        } else void 0 === this.selectionHandler.getNodeAt(t) && void 0 !== this.body.edges[this.popup.popupTargetId] && (i = this.body.edges[this.popup.popupTargetId].isOverlappingWith(e));

        !1 === i && (this.popupObj = void 0, this.popup.hide(), this.body.emitter.emit("hidePopup"));
      }
    }]), t;
  }(),
      _d = function () {
    function t(i, o) {
      var n = this;
      pn(this, t), this.body = i, this.canvas = o, this.selectionObj = {
        nodes: [],
        edges: []
      }, this.hoverObj = {
        nodes: {},
        edges: {}
      }, this.options = {}, this.defaultOptions = {
        multiselect: !1,
        selectable: !0,
        selectConnectedEdges: !0,
        hoverConnectedEdges: !0
      }, extend(this.options, this.defaultOptions), this.body.emitter.on("_dataChanged", function () {
        n.updateSelection();
      });
    }

    return vn(t, [{
      key: "setOptions",
      value: function (t) {
        if (void 0 !== t) {
          selectiveDeepExtend(["multiselect", "hoverConnectedEdges", "selectable", "selectConnectedEdges"], this.options, t);
        }
      }
    }, {
      key: "selectOnPoint",
      value: function (t) {
        var e = !1;

        if (!0 === this.options.selectable) {
          var i = this.getNodeAt(t) || this.getEdgeAt(t);
          this.unselectAll(), void 0 !== i && (e = this.selectObject(i)), this.body.emitter.emit("_requestRedraw");
        }

        return e;
      }
    }, {
      key: "selectAdditionalOnPoint",
      value: function (t) {
        var e = !1;

        if (!0 === this.options.selectable) {
          var i = this.getNodeAt(t) || this.getEdgeAt(t);
          void 0 !== i && (e = !0, !0 === i.isSelected() ? this.deselectObject(i) : this.selectObject(i), this.body.emitter.emit("_requestRedraw"));
        }

        return e;
      }
    }, {
      key: "_initBaseEvent",
      value: function (t, e) {
        var i = {};
        return i.pointer = {
          DOM: {
            x: e.x,
            y: e.y
          },
          canvas: this.canvas.DOMtoCanvas(e)
        }, i.event = t, i;
      }
    }, {
      key: "_generateClickEvent",
      value: function (t, e, i, o) {
        var n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
            s = this._initBaseEvent(e, i);

        if (!0 === n) s.nodes = [], s.edges = [];else {
          var r = this.getSelection();
          s.nodes = r.nodes, s.edges = r.edges;
        }
        void 0 !== o && (s.previousSelection = o), "click" == t && (s.items = this.getClickedItems(i)), void 0 !== e.controlEdge && (s.controlEdge = e.controlEdge), this.body.emitter.emit(t, s);
      }
    }, {
      key: "selectObject",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.options.selectConnectedEdges;
        return void 0 !== t && (t instanceof xh && !0 === e && this._selectConnectedEdges(t), t.select(), this._addToSelection(t), !0);
      }
    }, {
      key: "deselectObject",
      value: function (t) {
        !0 === t.isSelected() && (t.selected = !1, this._removeFromSelection(t));
      }
    }, {
      key: "_getAllNodesOverlappingWith",
      value: function (t) {
        for (var e = [], i = this.body.nodes, o = 0; o < this.body.nodeIndices.length; o++) {
          var n = this.body.nodeIndices[o];
          i[n].isOverlappingWith(t) && e.push(n);
        }

        return e;
      }
    }, {
      key: "_pointerToPositionObject",
      value: function (t) {
        var e = this.canvas.DOMtoCanvas(t);
        return {
          left: e.x - 1,
          top: e.y + 1,
          right: e.x + 1,
          bottom: e.y - 1
        };
      }
    }, {
      key: "getNodeAt",
      value: function (t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = this._pointerToPositionObject(t),
            o = this._getAllNodesOverlappingWith(i);

        return o.length > 0 ? !0 === e ? this.body.nodes[o[o.length - 1]] : o[o.length - 1] : void 0;
      }
    }, {
      key: "_getEdgesOverlappingWith",
      value: function (t, e) {
        for (var i = this.body.edges, o = 0; o < this.body.edgeIndices.length; o++) {
          var n = this.body.edgeIndices[o];
          i[n].isOverlappingWith(t) && e.push(n);
        }
      }
    }, {
      key: "_getAllEdgesOverlappingWith",
      value: function (t) {
        var e = [];
        return this._getEdgesOverlappingWith(t, e), e;
      }
    }, {
      key: "getEdgeAt",
      value: function (t) {
        for (var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this.canvas.DOMtoCanvas(t), o = 10, n = null, s = this.body.edges, r = 0; r < this.body.edgeIndices.length; r++) {
          var a = this.body.edgeIndices[r],
              h = s[a];

          if (h.connected) {
            var d = h.from.x,
                l = h.from.y,
                c = h.to.x,
                u = h.to.y,
                p = h.edgeType.getDistanceToEdge(d, l, c, u, i.x, i.y);
            p < o && (n = a, o = p);
          }
        }

        return null !== n ? !0 === e ? this.body.edges[n] : n : void 0;
      }
    }, {
      key: "_addToSelection",
      value: function (t) {
        t instanceof xh ? this.selectionObj.nodes[t.id] = t : this.selectionObj.edges[t.id] = t;
      }
    }, {
      key: "_addToHover",
      value: function (t) {
        t instanceof xh ? this.hoverObj.nodes[t.id] = t : this.hoverObj.edges[t.id] = t;
      }
    }, {
      key: "_removeFromSelection",
      value: function (t) {
        t instanceof xh ? (delete this.selectionObj.nodes[t.id], this._unselectConnectedEdges(t)) : delete this.selectionObj.edges[t.id];
      }
    }, {
      key: "unselectAll",
      value: function () {
        for (var t in this.selectionObj.nodes) this.selectionObj.nodes.hasOwnProperty(t) && this.selectionObj.nodes[t].unselect();

        for (var e in this.selectionObj.edges) this.selectionObj.edges.hasOwnProperty(e) && this.selectionObj.edges[e].unselect();

        this.selectionObj = {
          nodes: {},
          edges: {}
        };
      }
    }, {
      key: "_getSelectedNodeCount",
      value: function () {
        var t = 0;

        for (var e in this.selectionObj.nodes) this.selectionObj.nodes.hasOwnProperty(e) && (t += 1);

        return t;
      }
    }, {
      key: "_getSelectedNode",
      value: function () {
        for (var t in this.selectionObj.nodes) if (this.selectionObj.nodes.hasOwnProperty(t)) return this.selectionObj.nodes[t];
      }
    }, {
      key: "_getSelectedEdge",
      value: function () {
        for (var t in this.selectionObj.edges) if (this.selectionObj.edges.hasOwnProperty(t)) return this.selectionObj.edges[t];
      }
    }, {
      key: "_getSelectedEdgeCount",
      value: function () {
        var t = 0;

        for (var e in this.selectionObj.edges) this.selectionObj.edges.hasOwnProperty(e) && (t += 1);

        return t;
      }
    }, {
      key: "_getSelectedObjectCount",
      value: function () {
        var t = 0;

        for (var e in this.selectionObj.nodes) this.selectionObj.nodes.hasOwnProperty(e) && (t += 1);

        for (var i in this.selectionObj.edges) this.selectionObj.edges.hasOwnProperty(i) && (t += 1);

        return t;
      }
    }, {
      key: "_selectionIsEmpty",
      value: function () {
        for (var t in this.selectionObj.nodes) if (this.selectionObj.nodes.hasOwnProperty(t)) return !1;

        for (var e in this.selectionObj.edges) if (this.selectionObj.edges.hasOwnProperty(e)) return !1;

        return !0;
      }
    }, {
      key: "_clusterInSelection",
      value: function () {
        for (var t in this.selectionObj.nodes) if (this.selectionObj.nodes.hasOwnProperty(t) && this.selectionObj.nodes[t].clusterSize > 1) return !0;

        return !1;
      }
    }, {
      key: "_selectConnectedEdges",
      value: function (t) {
        for (var e = 0; e < t.edges.length; e++) {
          var i = t.edges[e];
          i.select(), this._addToSelection(i);
        }
      }
    }, {
      key: "_hoverConnectedEdges",
      value: function (t) {
        for (var e = 0; e < t.edges.length; e++) {
          var i = t.edges[e];
          i.hover = !0, this._addToHover(i);
        }
      }
    }, {
      key: "_unselectConnectedEdges",
      value: function (t) {
        for (var e = 0; e < t.edges.length; e++) {
          var i = t.edges[e];
          i.unselect(), this._removeFromSelection(i);
        }
      }
    }, {
      key: "emitBlurEvent",
      value: function (t, e, i) {
        var o = this._initBaseEvent(t, e);

        !0 === i.hover && (i.hover = !1, i instanceof xh ? (o.node = i.id, this.body.emitter.emit("blurNode", o)) : (o.edge = i.id, this.body.emitter.emit("blurEdge", o)));
      }
    }, {
      key: "emitHoverEvent",
      value: function (t, e, i) {
        var o = this._initBaseEvent(t, e),
            n = !1;

        return !1 === i.hover && (i.hover = !0, this._addToHover(i), n = !0, i instanceof xh ? (o.node = i.id, this.body.emitter.emit("hoverNode", o)) : (o.edge = i.id, this.body.emitter.emit("hoverEdge", o))), n;
      }
    }, {
      key: "hoverObject",
      value: function (t, e) {
        var i = this.getNodeAt(e);
        void 0 === i && (i = this.getEdgeAt(e));
        var o = !1;

        for (var n in this.hoverObj.nodes) this.hoverObj.nodes.hasOwnProperty(n) && (void 0 === i || i instanceof xh && i.id != n || i instanceof $h) && (this.emitBlurEvent(t, e, this.hoverObj.nodes[n]), delete this.hoverObj.nodes[n], o = !0);

        for (var s in this.hoverObj.edges) this.hoverObj.edges.hasOwnProperty(s) && (!0 === o ? (this.hoverObj.edges[s].hover = !1, delete this.hoverObj.edges[s]) : (void 0 === i || i instanceof $h && i.id != s || i instanceof xh && !i.hover) && (this.emitBlurEvent(t, e, this.hoverObj.edges[s]), delete this.hoverObj.edges[s], o = !0));

        if (void 0 !== i) {
          var r = Object.keys(this.hoverObj.edges).length,
              a = Object.keys(this.hoverObj.nodes).length;
          (o || i instanceof $h && 0 === r && 0 === a || i instanceof xh && 0 === r && 0 === a) && (o = this.emitHoverEvent(t, e, i)), i instanceof xh && !0 === this.options.hoverConnectedEdges && this._hoverConnectedEdges(i);
        }

        !0 === o && this.body.emitter.emit("_requestRedraw");
      }
    }, {
      key: "getSelection",
      value: function () {
        return {
          nodes: this.getSelectedNodes(),
          edges: this.getSelectedEdges()
        };
      }
    }, {
      key: "getSelectedNodes",
      value: function () {
        var t = [];
        if (!0 === this.options.selectable) for (var e in this.selectionObj.nodes) this.selectionObj.nodes.hasOwnProperty(e) && t.push(this.selectionObj.nodes[e].id);
        return t;
      }
    }, {
      key: "getSelectedEdges",
      value: function () {
        var t = [];
        if (!0 === this.options.selectable) for (var e in this.selectionObj.edges) this.selectionObj.edges.hasOwnProperty(e) && t.push(this.selectionObj.edges[e].id);
        return t;
      }
    }, {
      key: "setSelection",
      value: function (t) {
        var e,
            i,
            o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        if (!t || !t.nodes && !t.edges) throw "Selection must be an object with nodes and/or edges properties";
        if ((o.unselectAll || void 0 === o.unselectAll) && this.unselectAll(), t.nodes) for (e = 0; e < t.nodes.length; e++) {
          i = t.nodes[e];
          var n = this.body.nodes[i];
          if (!n) throw new RangeError('Node with id "' + i + '" not found');
          this.selectObject(n, o.highlightEdges);
        }
        if (t.edges) for (e = 0; e < t.edges.length; e++) {
          i = t.edges[e];
          var s = this.body.edges[i];
          if (!s) throw new RangeError('Edge with id "' + i + '" not found');
          this.selectObject(s);
        }
        this.body.emitter.emit("_requestRedraw");
      }
    }, {
      key: "selectNodes",
      value: function (t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        if (!t || void 0 === t.length) throw "Selection must be an array with ids";
        this.setSelection({
          nodes: t
        }, {
          highlightEdges: e
        });
      }
    }, {
      key: "selectEdges",
      value: function (t) {
        if (!t || void 0 === t.length) throw "Selection must be an array with ids";
        this.setSelection({
          edges: t
        });
      }
    }, {
      key: "updateSelection",
      value: function () {
        for (var t in this.selectionObj.nodes) this.selectionObj.nodes.hasOwnProperty(t) && (this.body.nodes.hasOwnProperty(t) || delete this.selectionObj.nodes[t]);

        for (var e in this.selectionObj.edges) this.selectionObj.edges.hasOwnProperty(e) && (this.body.edges.hasOwnProperty(e) || delete this.selectionObj.edges[e]);
      }
    }, {
      key: "getClickedItems",
      value: function (t) {
        for (var e = this.canvas.DOMtoCanvas(t), i = [], o = this.body.nodeIndices, n = this.body.nodes, s = o.length - 1; s >= 0; s--) {
          var r = n[o[s]].getItemsOnPoint(e);
          i.push.apply(i, r);
        }

        for (var a = this.body.edgeIndices, h = this.body.edges, d = a.length - 1; d >= 0; d--) {
          var l = h[a[d]].getItemsOnPoint(e);
          i.push.apply(i, l);
        }

        return i;
      }
    }]), t;
  }(),
      xd = F(function (t, e) {
    !function (t) {
      t.__esModule = !0, t.sort = function (t, i, o, n) {
        if (!Array.isArray(t)) throw new TypeError("Can only sort arrays");
        i ? "function" != typeof i && (n = o, o = i, i = r) : i = r, o || (o = 0), n || (n = t.length);
        var s = n - o;

        if (!(s < 2)) {
          var d = 0;
          if (s < e) return d = a(t, o, n, i), void h(t, o, n, o + d, i);

          var l = new c(t, i),
              u = function (t) {
            for (var i = 0; t >= e;) i |= 1 & t, t >>= 1;

            return t + i;
          }(s);

          do {
            if ((d = a(t, o, n, i)) < u) {
              var p = s;
              p > u && (p = u), h(t, o, o + p, o + d, i), d = p;
            }

            l.pushRun(o, d), l.mergeRuns(), s -= d, o += d;
          } while (0 !== s);

          l.forceMergeRuns();
        }
      };
      var e = 32,
          i = 7,
          o = 256,
          n = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9];

      function s(t) {
        return t < 1e5 ? t < 100 ? t < 10 ? 0 : 1 : t < 1e4 ? t < 1e3 ? 2 : 3 : 4 : t < 1e7 ? t < 1e6 ? 5 : 6 : t < 1e9 ? t < 1e8 ? 7 : 8 : 9;
      }

      function r(t, e) {
        if (t === e) return 0;

        if (~~t === t && ~~e === e) {
          if (0 === t || 0 === e) return t < e ? -1 : 1;

          if (t < 0 || e < 0) {
            if (e >= 0) return -1;
            if (t >= 0) return 1;
            t = -t, e = -e;
          }

          var i = s(t),
              o = s(e),
              r = 0;
          return i < o ? (t *= n[o - i - 1], e /= 10, r = -1) : i > o && (e *= n[i - o - 1], t /= 10, r = 1), t === e ? r : t < e ? -1 : 1;
        }

        var a = String(t),
            h = String(e);
        return a === h ? 0 : a < h ? -1 : 1;
      }

      function a(t, e, i, o) {
        var n = e + 1;
        if (n === i) return 1;

        if (o(t[n++], t[e]) < 0) {
          for (; n < i && o(t[n], t[n - 1]) < 0;) n++;

          !function (t, e, i) {
            for (i--; e < i;) {
              var o = t[e];
              t[e++] = t[i], t[i--] = o;
            }
          }(t, e, n);
        } else for (; n < i && o(t[n], t[n - 1]) >= 0;) n++;

        return n - e;
      }

      function h(t, e, i, o, n) {
        for (o === e && o++; o < i; o++) {
          for (var s = t[o], r = e, a = o; r < a;) {
            var h = r + a >>> 1;
            n(s, t[h]) < 0 ? a = h : r = h + 1;
          }

          var d = o - r;

          switch (d) {
            case 3:
              t[r + 3] = t[r + 2];

            case 2:
              t[r + 2] = t[r + 1];

            case 1:
              t[r + 1] = t[r];
              break;

            default:
              for (; d > 0;) t[r + d] = t[r + d - 1], d--;

          }

          t[r] = s;
        }
      }

      function d(t, e, i, o, n, s) {
        var r = 0,
            a = 0,
            h = 1;

        if (s(t, e[i + n]) > 0) {
          for (a = o - n; h < a && s(t, e[i + n + h]) > 0;) r = h, (h = 1 + (h << 1)) <= 0 && (h = a);

          h > a && (h = a), r += n, h += n;
        } else {
          for (a = n + 1; h < a && s(t, e[i + n - h]) <= 0;) r = h, (h = 1 + (h << 1)) <= 0 && (h = a);

          h > a && (h = a);
          var d = r;
          r = n - h, h = n - d;
        }

        for (r++; r < h;) {
          var l = r + (h - r >>> 1);
          s(t, e[i + l]) > 0 ? r = l + 1 : h = l;
        }

        return h;
      }

      function l(t, e, i, o, n, s) {
        var r = 0,
            a = 0,
            h = 1;

        if (s(t, e[i + n]) < 0) {
          for (a = n + 1; h < a && s(t, e[i + n - h]) < 0;) r = h, (h = 1 + (h << 1)) <= 0 && (h = a);

          h > a && (h = a);
          var d = r;
          r = n - h, h = n - d;
        } else {
          for (a = o - n; h < a && s(t, e[i + n + h]) >= 0;) r = h, (h = 1 + (h << 1)) <= 0 && (h = a);

          h > a && (h = a), r += n, h += n;
        }

        for (r++; r < h;) {
          var l = r + (h - r >>> 1);
          s(t, e[i + l]) < 0 ? h = l : r = l + 1;
        }

        return h;
      }

      var c = function () {
        function t(e, n) {
          !function (t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
          }(this, t), this.array = null, this.compare = null, this.minGallop = i, this.length = 0, this.tmpStorageLength = o, this.stackLength = 0, this.runStart = null, this.runLength = null, this.stackSize = 0, this.array = e, this.compare = n, this.length = e.length, this.length < 2 * o && (this.tmpStorageLength = this.length >>> 1), this.tmp = new Array(this.tmpStorageLength), this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40, this.runStart = new Array(this.stackLength), this.runLength = new Array(this.stackLength);
        }

        return t.prototype.pushRun = function (t, e) {
          this.runStart[this.stackSize] = t, this.runLength[this.stackSize] = e, this.stackSize += 1;
        }, t.prototype.mergeRuns = function () {
          for (; this.stackSize > 1;) {
            var t = this.stackSize - 2;
            if (t >= 1 && this.runLength[t - 1] <= this.runLength[t] + this.runLength[t + 1] || t >= 2 && this.runLength[t - 2] <= this.runLength[t] + this.runLength[t - 1]) this.runLength[t - 1] < this.runLength[t + 1] && t--;else if (this.runLength[t] > this.runLength[t + 1]) break;
            this.mergeAt(t);
          }
        }, t.prototype.forceMergeRuns = function () {
          for (; this.stackSize > 1;) {
            var t = this.stackSize - 2;
            t > 0 && this.runLength[t - 1] < this.runLength[t + 1] && t--, this.mergeAt(t);
          }
        }, t.prototype.mergeAt = function (t) {
          var e = this.compare,
              i = this.array,
              o = this.runStart[t],
              n = this.runLength[t],
              s = this.runStart[t + 1],
              r = this.runLength[t + 1];
          this.runLength[t] = n + r, t === this.stackSize - 3 && (this.runStart[t + 1] = this.runStart[t + 2], this.runLength[t + 1] = this.runLength[t + 2]), this.stackSize--;
          var a = l(i[s], i, o, n, 0, e);
          o += a, 0 != (n -= a) && 0 !== (r = d(i[o + n - 1], i, s, r, r - 1, e)) && (n <= r ? this.mergeLow(o, n, s, r) : this.mergeHigh(o, n, s, r));
        }, t.prototype.mergeLow = function (t, e, o, n) {
          var s = this.compare,
              r = this.array,
              a = this.tmp,
              h = 0;

          for (h = 0; h < e; h++) a[h] = r[t + h];

          var c = 0,
              u = o,
              p = t;
          if (r[p++] = r[u++], 0 != --n) {
            if (1 !== e) {
              for (var f = this.minGallop;;) {
                var v = 0,
                    g = 0,
                    y = !1;

                do {
                  if (s(r[u], a[c]) < 0) {
                    if (r[p++] = r[u++], g++, v = 0, 0 == --n) {
                      y = !0;
                      break;
                    }
                  } else if (r[p++] = a[c++], v++, g = 0, 1 == --e) {
                    y = !0;
                    break;
                  }
                } while ((v | g) < f);

                if (y) break;

                do {
                  if (0 !== (v = l(r[u], a, c, e, 0, s))) {
                    for (h = 0; h < v; h++) r[p + h] = a[c + h];

                    if (p += v, c += v, (e -= v) <= 1) {
                      y = !0;
                      break;
                    }
                  }

                  if (r[p++] = r[u++], 0 == --n) {
                    y = !0;
                    break;
                  }

                  if (0 !== (g = d(a[c], r, u, n, 0, s))) {
                    for (h = 0; h < g; h++) r[p + h] = r[u + h];

                    if (p += g, u += g, 0 == (n -= g)) {
                      y = !0;
                      break;
                    }
                  }

                  if (r[p++] = a[c++], 1 == --e) {
                    y = !0;
                    break;
                  }

                  f--;
                } while (v >= i || g >= i);

                if (y) break;
                f < 0 && (f = 0), f += 2;
              }

              if (this.minGallop = f, f < 1 && (this.minGallop = 1), 1 === e) {
                for (h = 0; h < n; h++) r[p + h] = r[u + h];

                r[p + n] = a[c];
              } else {
                if (0 === e) throw new Error("mergeLow preconditions were not respected");

                for (h = 0; h < e; h++) r[p + h] = a[c + h];
              }
            } else {
              for (h = 0; h < n; h++) r[p + h] = r[u + h];

              r[p + n] = a[c];
            }
          } else for (h = 0; h < e; h++) r[p + h] = a[c + h];
        }, t.prototype.mergeHigh = function (t, e, o, n) {
          var s = this.compare,
              r = this.array,
              a = this.tmp,
              h = 0;

          for (h = 0; h < n; h++) a[h] = r[o + h];

          var c = t + e - 1,
              u = n - 1,
              p = o + n - 1,
              f = 0,
              v = 0;
          if (r[p--] = r[c--], 0 != --e) {
            if (1 !== n) {
              for (var g = this.minGallop;;) {
                var y = 0,
                    m = 0,
                    b = !1;

                do {
                  if (s(a[u], r[c]) < 0) {
                    if (r[p--] = r[c--], y++, m = 0, 0 == --e) {
                      b = !0;
                      break;
                    }
                  } else if (r[p--] = a[u--], m++, y = 0, 1 == --n) {
                    b = !0;
                    break;
                  }
                } while ((y | m) < g);

                if (b) break;

                do {
                  if (0 != (y = e - l(a[u], r, t, e, e - 1, s))) {
                    for (e -= y, v = 1 + (p -= y), f = 1 + (c -= y), h = y - 1; h >= 0; h--) r[v + h] = r[f + h];

                    if (0 === e) {
                      b = !0;
                      break;
                    }
                  }

                  if (r[p--] = a[u--], 1 == --n) {
                    b = !0;
                    break;
                  }

                  if (0 != (m = n - d(r[c], a, 0, n, n - 1, s))) {
                    for (n -= m, v = 1 + (p -= m), f = 1 + (u -= m), h = 0; h < m; h++) r[v + h] = a[f + h];

                    if (n <= 1) {
                      b = !0;
                      break;
                    }
                  }

                  if (r[p--] = r[c--], 0 == --e) {
                    b = !0;
                    break;
                  }

                  g--;
                } while (y >= i || m >= i);

                if (b) break;
                g < 0 && (g = 0), g += 2;
              }

              if (this.minGallop = g, g < 1 && (this.minGallop = 1), 1 === n) {
                for (v = 1 + (p -= e), f = 1 + (c -= e), h = e - 1; h >= 0; h--) r[v + h] = r[f + h];

                r[p] = a[u];
              } else {
                if (0 === n) throw new Error("mergeHigh preconditions were not respected");

                for (f = p - (n - 1), h = 0; h < n; h++) r[f + h] = a[h];
              }
            } else {
              for (v = 1 + (p -= e), f = 1 + (c -= e), h = e - 1; h >= 0; h--) r[v + h] = r[f + h];

              r[p] = a[u];
            }
          } else for (f = p - (n - 1), h = 0; h < n; h++) r[f + h] = a[h];
        }, t;
      }();
    }(e);
  });

  (yd = xd) && yd.__esModule && Object.prototype.hasOwnProperty.call(yd, "default") && yd.default;

  var Ed = xd,
      Od = Ed.sort,
      Cd = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, [{
      key: "abstract",
      value: function () {
        throw new Error("Can't instantiate abstract class!");
      }
    }, {
      key: "fake_use",
      value: function () {}
    }, {
      key: "curveType",
      value: function () {
        return this.abstract();
      }
    }, {
      key: "getPosition",
      value: function (t) {
        return this.fake_use(t), this.abstract();
      }
    }, {
      key: "setPosition",
      value: function (t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
        this.fake_use(t, e, i), this.abstract();
      }
    }, {
      key: "getTreeSize",
      value: function (t) {
        return this.fake_use(t), this.abstract();
      }
    }, {
      key: "sort",
      value: function (t) {
        this.fake_use(t), this.abstract();
      }
    }, {
      key: "fix",
      value: function (t, e) {
        this.fake_use(t, e), this.abstract();
      }
    }, {
      key: "shift",
      value: function (t, e) {
        this.fake_use(t, e), this.abstract();
      }
    }]), t;
  }(),
      Sd = function (t) {
    function e(t) {
      var i;
      return pn(this, e), (i = _n(this, wn(e).call(this))).layout = t, i;
    }

    return bn(e, Cd), vn(e, [{
      key: "curveType",
      value: function () {
        return "horizontal";
      }
    }, {
      key: "getPosition",
      value: function (t) {
        return t.x;
      }
    }, {
      key: "setPosition",
      value: function (t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
        void 0 !== i && this.layout.hierarchical.addToOrdering(t, i), t.x = e;
      }
    }, {
      key: "getTreeSize",
      value: function (t) {
        var e = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, t);
        return {
          min: e.min_x,
          max: e.max_x
        };
      }
    }, {
      key: "sort",
      value: function (t) {
        Od(t, function (t, e) {
          return t.x - e.x;
        });
      }
    }, {
      key: "fix",
      value: function (t, e) {
        t.y = this.layout.options.hierarchical.levelSeparation * e, t.options.fixed.y = !0;
      }
    }, {
      key: "shift",
      value: function (t, e) {
        this.layout.body.nodes[t].x += e;
      }
    }]), e;
  }(),
      Td = function (t) {
    function e(t) {
      var i;
      return pn(this, e), (i = _n(this, wn(e).call(this))).layout = t, i;
    }

    return bn(e, Cd), vn(e, [{
      key: "curveType",
      value: function () {
        return "vertical";
      }
    }, {
      key: "getPosition",
      value: function (t) {
        return t.y;
      }
    }, {
      key: "setPosition",
      value: function (t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
        void 0 !== i && this.layout.hierarchical.addToOrdering(t, i), t.y = e;
      }
    }, {
      key: "getTreeSize",
      value: function (t) {
        var e = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, t);
        return {
          min: e.min_y,
          max: e.max_y
        };
      }
    }, {
      key: "sort",
      value: function (t) {
        Od(t, function (t, e) {
          return t.y - e.y;
        });
      }
    }, {
      key: "fix",
      value: function (t, e) {
        t.x = this.layout.options.hierarchical.levelSeparation * e, t.options.fixed.x = !0;
      }
    }, {
      key: "shift",
      value: function (t, e) {
        this.layout.body.nodes[t].y += e;
      }
    }]), e;
  }(),
      Md = Zt.f,
      Dd = {}.toString,
      Id = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [],
      Pd = {
    f: function (t) {
      return Id && "[object Window]" == Dd.call(t) ? function (t) {
        try {
          return Md(t);
        } catch (t) {
          return Id.slice();
        }
      }(t) : Md(Z(t));
    }
  },
      Fd = {
    f: ve
  },
      zd = lt.f,
      Nd = function (t) {
    var e = zt.Symbol || (zt.Symbol = {});
    et(e, t) || zd(e, t, {
      value: Fd.f(t)
    });
  },
      Bd = Be.forEach,
      Ad = _t("hidden"),
      Rd = ve("toPrimitive"),
      jd = Pt.set,
      Ld = Pt.getterFor("Symbol"),
      Hd = Object.prototype,
      Wd = j$2.Symbol,
      Vd = j$2.JSON,
      qd = Vd && Vd.stringify,
      Ud = at$1.f,
      Yd = lt.f,
      Xd = Pd.f,
      Gd = q.f,
      Kd = ft("symbols"),
      $d = ft("op-symbols"),
      Zd = ft("string-to-symbol-registry"),
      Jd = ft("symbol-to-string-registry"),
      Qd = ft("wks"),
      tl = j$2.QObject,
      el = !tl || !tl.prototype || !tl.prototype.findChild,
      il = H && L(function () {
    return 7 != Ye(Yd({}, "a", {
      get: function () {
        return Yd(this, "a", {
          value: 7
        }).a;
      }
    })).a;
  }) ? function (t, e, i) {
    var o = Ud(Hd, e);
    o && delete Hd[e], Yd(t, e, i), o && t !== Hd && Yd(Hd, e, o);
  } : Yd,
      ol = function (t, e) {
    var i = Kd[t] = Ye(Wd.prototype);
    return jd(i, {
      type: "Symbol",
      tag: t,
      description: e
    }), H || (i.description = e), i;
  },
      nl = ue && "symbol" == typeof Wd.iterator ? function (t) {
    return "symbol" == typeof t;
  } : function (t) {
    return Object(t) instanceof Wd;
  },
      sl = function (t, e, i) {
    t === Hd && sl($d, e, i), ht(t);
    var o = Q(e, !0);
    return ht(i), et(Kd, o) ? (i.enumerable ? (et(t, Ad) && t[Ad][o] && (t[Ad][o] = !1), i = Ye(i, {
      enumerable: U(0, !1)
    })) : (et(t, Ad) || Yd(t, Ad, U(1, {})), t[Ad][o] = !0), il(t, o, i)) : Yd(t, o, i);
  },
      rl = function (t, e) {
    ht(t);
    var i = Z(e),
        o = Le(i).concat(ll(i));
    return Bd(o, function (e) {
      H && !al.call(i, e) || sl(t, e, i[e]);
    }), t;
  },
      al = function (t) {
    var e = Q(t, !0),
        i = Gd.call(this, e);
    return !(this === Hd && et(Kd, e) && !et($d, e)) && (!(i || !et(this, e) || !et(Kd, e) || et(this, Ad) && this[Ad][e]) || i);
  },
      hl = function (t, e) {
    var i = Z(t),
        o = Q(e, !0);

    if (i !== Hd || !et(Kd, o) || et($d, o)) {
      var n = Ud(i, o);
      return !n || !et(Kd, o) || et(i, Ad) && i[Ad][o] || (n.enumerable = !0), n;
    }
  },
      dl = function (t) {
    var e = Xd(Z(t)),
        i = [];
    return Bd(e, function (t) {
      et(Kd, t) || et(xt, t) || i.push(t);
    }), i;
  },
      ll = function (t) {
    var e = t === Hd,
        i = Xd(e ? $d : Z(t)),
        o = [];
    return Bd(i, function (t) {
      !et(Kd, t) || e && !et(Hd, t) || o.push(Kd[t]);
    }), o;
  };

  ue || (Ft((Wd = function () {
    if (this instanceof Wd) throw TypeError("Symbol is not a constructor");

    var t = arguments.length && void 0 !== arguments[0] ? String(arguments[0]) : void 0,
        e = wt(t),
        i = function (t) {
      this === Hd && i.call($d, t), et(this, Ad) && et(this[Ad], e) && (this[Ad][e] = !1), il(this, e, U(1, t));
    };

    return H && el && il(Hd, e, {
      configurable: !0,
      set: i
    }), ol(e, t);
  }).prototype, "toString", function () {
    return Ld(this).tag;
  }), q.f = al, lt.f = sl, at$1.f = hl, Zt.f = Pd.f = dl, Jt.f = ll, H && (Yd(Wd.prototype, "description", {
    configurable: !0,
    get: function () {
      return Ld(this).description;
    }
  }), Ft(Hd, "propertyIsEnumerable", al, {
    unsafe: !0
  })), Fd.f = function (t) {
    return ol(ve(t), t);
  }), de({
    global: !0,
    wrap: !0,
    forced: !ue,
    sham: !ue
  }, {
    Symbol: Wd
  }), Bd(Le(Qd), function (t) {
    Nd(t);
  }), de({
    target: "Symbol",
    stat: !0,
    forced: !ue
  }, {
    for: function (t) {
      var e = String(t);
      if (et(Zd, e)) return Zd[e];
      var i = Wd(e);
      return Zd[e] = i, Jd[i] = e, i;
    },
    keyFor: function (t) {
      if (!nl(t)) throw TypeError(t + " is not a symbol");
      if (et(Jd, t)) return Jd[t];
    },
    useSetter: function () {
      el = !0;
    },
    useSimple: function () {
      el = !1;
    }
  }), de({
    target: "Object",
    stat: !0,
    forced: !ue,
    sham: !H
  }, {
    create: function (t, e) {
      return void 0 === e ? Ye(t) : rl(Ye(t), e);
    },
    defineProperty: sl,
    defineProperties: rl,
    getOwnPropertyDescriptor: hl
  }), de({
    target: "Object",
    stat: !0,
    forced: !ue
  }, {
    getOwnPropertyNames: dl,
    getOwnPropertySymbols: ll
  }), de({
    target: "Object",
    stat: !0,
    forced: L(function () {
      Jt.f(1);
    })
  }, {
    getOwnPropertySymbols: function (t) {
      return Jt.f(Ce(t));
    }
  }), Vd && de({
    target: "JSON",
    stat: !0,
    forced: !ue || L(function () {
      var t = Wd();
      return "[null]" != qd([t]) || "{}" != qd({
        a: t
      }) || "{}" != qd(Object(t));
    })
  }, {
    stringify: function (t) {
      for (var e, i, o = [t], n = 1; arguments.length > n;) o.push(arguments[n++]);

      if (i = e = o[1], (J(e) || void 0 !== t) && !nl(t)) return le(e) || (e = function (t, e) {
        if ("function" == typeof i && (e = i.call(this, t, e)), !nl(e)) return e;
      }), o[1] = e, qd.apply(Vd, o);
    }
  }), Wd.prototype[Rd] || ct(Wd.prototype, Rd, Wd.prototype.valueOf), Oa(Wd, "Symbol"), xt[Ad] = !0;
  var cl = lt.f,
      ul = j$2.Symbol;

  if (H && "function" == typeof ul && (!("description" in ul.prototype) || void 0 !== ul().description)) {
    var pl = {},
        fl = function () {
      var t = arguments.length < 1 || void 0 === arguments[0] ? void 0 : String(arguments[0]),
          e = this instanceof fl ? new ul(t) : void 0 === t ? ul() : ul(t);
      return "" === t && (pl[e] = !0), e;
    };

    te(fl, ul);
    var vl = fl.prototype = ul.prototype;
    vl.constructor = fl;
    var gl = vl.toString,
        yl = "Symbol(test)" == String(ul("test")),
        ml = /^Symbol\((.*)\)[^)]+$/;
    cl(vl, "description", {
      configurable: !0,
      get: function () {
        var t = J(this) ? this.valueOf() : this,
            e = gl.call(t);
        if (et(pl, t)) return "";
        var i = yl ? e.slice(7, -1) : e.replace(ml, "$1");
        return "" === i ? void 0 : i;
      }
    }), de({
      global: !0,
      forced: !0
    }, {
      Symbol: fl
    });
  }

  Nd("iterator");
  var bl = Be.every;
  de({
    target: "Array",
    proto: !0,
    forced: Ae("every")
  }, {
    every: function (t) {
      return bl(this, t, arguments.length > 1 ? arguments[1] : void 0);
    }
  });

  var wl = !L(function () {
    return Object.isExtensible(Object.preventExtensions({}));
  }),
      kl = F(function (t) {
    var e = lt.f,
        i = wt("meta"),
        o = 0,
        n = Object.isExtensible || function () {
      return !0;
    },
        s = function (t) {
      e(t, i, {
        value: {
          objectID: "O" + ++o,
          weakData: {}
        }
      });
    },
        r = t.exports = {
      REQUIRED: !1,
      fastKey: function (t, e) {
        if (!J(t)) return "symbol" == typeof t ? t : ("string" == typeof t ? "S" : "P") + t;

        if (!et(t, i)) {
          if (!n(t)) return "F";
          if (!e) return "E";
          s(t);
        }

        return t[i].objectID;
      },
      getWeakData: function (t, e) {
        if (!et(t, i)) {
          if (!n(t)) return !0;
          if (!e) return !1;
          s(t);
        }

        return t[i].weakData;
      },
      onFreeze: function (t) {
        return wl && r.REQUIRED && n(t) && !et(t, i) && s(t), t;
      }
    };

    xt[i] = !0;
  }),
      _l = (kl.REQUIRED, kl.fastKey, kl.getWeakData, kl.onFreeze, ve("iterator")),
      xl = Array.prototype,
      El = ve("iterator"),
      Ol = function (t, e, i, o) {
    try {
      return o ? e(ht(i)[0], i[1]) : e(i);
    } catch (e) {
      var n = t.return;
      throw void 0 !== n && ht(n.call(t)), e;
    }
  },
      Cl = F(function (t) {
    var e = function (t, e) {
      this.stopped = t, this.result = e;
    };

    (t.exports = function (t, i, o, n, s) {
      var r,
          a,
          h,
          d,
          l,
          c,
          u,
          p,
          f = Fe(i, o, n ? 2 : 1);
      if (s) r = t;else {
        if ("function" != typeof (a = function (t) {
          if (null != t) return t[El] || t["@@iterator"] || va[Ra(t)];
        }(t))) throw TypeError("Target is not iterable");

        if (void 0 !== (p = a) && (va.Array === p || xl[_l] === p)) {
          for (h = 0, d = Ht(t.length); d > h; h++) if ((l = n ? f(ht(u = t[h])[0], u[1]) : f(t[h])) && l instanceof e) return l;

          return new e(!1);
        }

        r = a.call(t);
      }

      for (c = r.next; !(u = c.call(r)).done;) if ("object" == typeof (l = Ol(r, f, u.value, n)) && l && l instanceof e) return l;

      return new e(!1);
    }).stop = function (t) {
      return new e(!0, t);
    };
  }),
      Sl = function (t, e, i) {
    if (!(t instanceof e)) throw TypeError("Incorrect " + (i ? i + " " : "") + "invocation");
    return t;
  },
      Tl = ve("iterator"),
      Ml = !1;

  try {
    var Dl = 0,
        Il = {
      next: function () {
        return {
          done: !!Dl++
        };
      },
      return: function () {
        Ml = !0;
      }
    };
    Il[Tl] = function () {
      return this;
    }, Array.from(Il, function () {
      throw 2;
    });
  } catch (t) {}

  var Pl = function (t, e, i) {
    for (var o in e) Ft(t, o, e[o], i);

    return t;
  },
      Fl = lt.f,
      zl = kl.fastKey,
      Nl = Pt.set,
      Bl = Pt.getterFor,
      Al = (function (t, e, i, o, n) {
    var s = j$2[t],
        r = s && s.prototype,
        a = s,
        h = o ? "set" : "add",
        d = {},
        l = function (t) {
      var e = r[t];
      Ft(r, t, "add" == t ? function (t) {
        return e.call(this, 0 === t ? 0 : t), this;
      } : "delete" == t ? function (t) {
        return !(n && !J(t)) && e.call(this, 0 === t ? 0 : t);
      } : "get" == t ? function (t) {
        return n && !J(t) ? void 0 : e.call(this, 0 === t ? 0 : t);
      } : "has" == t ? function (t) {
        return !(n && !J(t)) && e.call(this, 0 === t ? 0 : t);
      } : function (t, i) {
        return e.call(this, 0 === t ? 0 : t, i), this;
      });
    };

    if (ae(t, "function" != typeof s || !(n || r.forEach && !L(function () {
      new s().entries().next();
    })))) a = i.getConstructor(e, t, o, h), kl.REQUIRED = !0;else if (ae(t, !0)) {
      var c = new a(),
          u = c[h](n ? {} : -0, 1) != c,
          p = L(function () {
        c.has(1);
      }),
          f = function (t, e) {
        if (!e && !Ml) return !1;
        var i = !1;

        try {
          var o = {};
          o[Tl] = function () {
            return {
              next: function () {
                return {
                  done: i = !0
                };
              }
            };
          }, t(o);
        } catch (t) {}

        return i;
      }(function (t) {
        new s(t);
      }),
          v = !n && L(function () {
        for (var t = new s(), e = 5; e--;) t[h](e, e);

        return !t.has(-0);
      });

      f || ((a = e(function (e, i) {
        Sl(e, a, t);
        var n = ri(new s(), e, a);
        return null != i && Cl(i, n[h], n, o), n;
      })).prototype = r, r.constructor = a), (p || v) && (l("delete"), l("has"), o && l("get")), (v || u) && l(h), n && r.clear && delete r.clear;
    }
    d[t] = a, de({
      global: !0,
      forced: a != s
    }, d), Oa(a, t), n || i.setStrong(a, t, o);
  }("Set", function (t) {
    return function () {
      return t(this, arguments.length ? arguments[0] : void 0);
    };
  }, {
    getConstructor: function (t, e, i, o) {
      var n = t(function (t, s) {
        Sl(t, n, e), Nl(t, {
          type: e,
          index: Ye(null),
          first: void 0,
          last: void 0,
          size: 0
        }), H || (t.size = 0), null != s && Cl(s, t[o], t, i);
      }),
          s = Bl(e),
          r = function (t, e, i) {
        var o,
            n,
            r = s(t),
            h = a(t, e);
        return h ? h.value = i : (r.last = h = {
          index: n = zl(e, !0),
          key: e,
          value: i,
          previous: o = r.last,
          next: void 0,
          removed: !1
        }, r.first || (r.first = h), o && (o.next = h), H ? r.size++ : t.size++, "F" !== n && (r.index[n] = h)), t;
      },
          a = function (t, e) {
        var i,
            o = s(t),
            n = zl(e);
        if ("F" !== n) return o.index[n];

        for (i = o.first; i; i = i.next) if (i.key == e) return i;
      };

      return Pl(n.prototype, {
        clear: function () {
          for (var t = s(this), e = t.index, i = t.first; i;) i.removed = !0, i.previous && (i.previous = i.previous.next = void 0), delete e[i.index], i = i.next;

          t.first = t.last = void 0, H ? t.size = 0 : this.size = 0;
        },
        delete: function (t) {
          var e = s(this),
              i = a(this, t);

          if (i) {
            var o = i.next,
                n = i.previous;
            delete e.index[i.index], i.removed = !0, n && (n.next = o), o && (o.previous = n), e.first == i && (e.first = o), e.last == i && (e.last = n), H ? e.size-- : this.size--;
          }

          return !!i;
        },
        forEach: function (t) {
          for (var e, i = s(this), o = Fe(t, arguments.length > 1 ? arguments[1] : void 0, 3); e = e ? e.next : i.first;) for (o(e.value, e.key, this); e && e.removed;) e = e.previous;
        },
        has: function (t) {
          return !!a(this, t);
        }
      }), Pl(n.prototype, i ? {
        get: function (t) {
          var e = a(this, t);
          return e && e.value;
        },
        set: function (t, e) {
          return r(this, 0 === t ? 0 : t, e);
        }
      } : {
        add: function (t) {
          return r(this, t = 0 === t ? 0 : t, t);
        }
      }), H && Fl(n.prototype, "size", {
        get: function () {
          return s(this).size;
        }
      }), n;
    },
    setStrong: function (t, e, i) {
      var o = e + " Iterator",
          n = Bl(e),
          s = Bl(o);
      Pa(t, e, function (t, e) {
        Nl(this, {
          type: o,
          target: t,
          state: n(t),
          kind: e,
          last: void 0
        });
      }, function () {
        for (var t = s(this), e = t.kind, i = t.last; i && i.removed;) i = i.previous;

        return t.target && (t.last = i = i ? i.next : t.state.first) ? "keys" == e ? {
          value: i.key,
          done: !1
        } : "values" == e ? {
          value: i.value,
          done: !1
        } : {
          value: [i.key, i.value],
          done: !1
        } : (t.target = void 0, {
          value: void 0,
          done: !0
        });
      }, i ? "entries" : "values", !i, !0), Kr(e);
    }
  }), Wi.charAt),
      Rl = Pt.set,
      jl = Pt.getterFor("String Iterator");

  function Ll(t, e) {
    var i = new Set();
    return t.forEach(function (t) {
      t.edges.forEach(function (t) {
        t.connected && i.add(t);
      });
    }), i.forEach(function (t) {
      var i = t.from.id,
          o = t.to.id;
      null == e[i] && (e[i] = 0), (null == e[o] || e[i] >= e[o]) && (e[o] = e[i] + 1);
    }), e;
  }

  function Hl(t, e, i, o, n) {
    var s = o.length,
        r = i + "Id",
        a = "to" === i ? 1 : -1,
        h = !0,
        d = !1,
        l = void 0;

    try {
      for (var c, u = function () {
        var h = c.value;
        if (t(h)) return "continue";
        n[h.id] = 0;

        for (var d = [h], l = 0, u = void 0, p = function () {
          var t = n[u.id] + a;
          if (u.edges.filter(function (t) {
            return t.connected && t.to !== t.from && t[i] !== u;
          }).forEach(function (o) {
            var s = o[r],
                a = n[s];
            (null == a || e(t, a)) && (n[s] = t, d.push(o[i]));
          }), l > s) return {
            v: {
              v: Ll(o, n)
            }
          };
          ++l;
        }; u = d.pop();) {
          var f = p();
          if ("object" === un(f)) return f.v;
        }
      }, p = o[Symbol.iterator](); !(h = (c = p.next()).done); h = !0) {
        var f = u();

        switch (f) {
          case "continue":
            continue;

          default:
            if ("object" === un(f)) return f.v;
        }
      }
    } catch (t) {
      d = !0, l = t;
    } finally {
      try {
        h || null == p.return || p.return();
      } finally {
        if (d) throw l;
      }
    }

    return n;
  }

  Pa(String, "String", function (t) {
    Rl(this, {
      type: "String Iterator",
      string: String(t),
      index: 0
    });
  }, function () {
    var t,
        e = jl(this),
        i = e.string,
        o = e.index;
    return o >= i.length ? {
      value: void 0,
      done: !0
    } : (t = Al(i, o), e.index += t.length, {
      value: t,
      done: !1
    });
  });

  var Wl = function () {
    function t() {
      pn(this, t), this.childrenReference = {}, this.parentReference = {}, this.trees = {}, this.distributionOrdering = {}, this.levels = {}, this.distributionIndex = {}, this.isTree = !1, this.treeIndex = -1;
    }

    return vn(t, [{
      key: "addRelation",
      value: function (t, e) {
        void 0 === this.childrenReference[t] && (this.childrenReference[t] = []), this.childrenReference[t].push(e), void 0 === this.parentReference[e] && (this.parentReference[e] = []), this.parentReference[e].push(t);
      }
    }, {
      key: "checkIfTree",
      value: function () {
        for (var t in this.parentReference) if (this.parentReference[t].length > 1) return void (this.isTree = !1);

        this.isTree = !0;
      }
    }, {
      key: "numTrees",
      value: function () {
        return this.treeIndex + 1;
      }
    }, {
      key: "setTreeIndex",
      value: function (t, e) {
        void 0 !== e && void 0 === this.trees[t.id] && (this.trees[t.id] = e, this.treeIndex = Math.max(e, this.treeIndex));
      }
    }, {
      key: "ensureLevel",
      value: function (t) {
        void 0 === this.levels[t] && (this.levels[t] = 0);
      }
    }, {
      key: "getMaxLevel",
      value: function (t) {
        var e = this,
            i = {};
        return function t(o) {
          if (void 0 !== i[o]) return i[o];
          var n = e.levels[o];

          if (e.childrenReference[o]) {
            var s = e.childrenReference[o];
            if (s.length > 0) for (var r = 0; r < s.length; r++) n = Math.max(n, t(s[r]));
          }

          return i[o] = n, n;
        }(t);
      }
    }, {
      key: "levelDownstream",
      value: function (t, e) {
        void 0 === this.levels[e.id] && (void 0 === this.levels[t.id] && (this.levels[t.id] = 0), this.levels[e.id] = this.levels[t.id] + 1);
      }
    }, {
      key: "setMinLevelToZero",
      value: function (t) {
        var e = 1e9;

        for (var i in t) t.hasOwnProperty(i) && void 0 !== this.levels[i] && (e = Math.min(this.levels[i], e));

        for (var o in t) t.hasOwnProperty(o) && void 0 !== this.levels[o] && (this.levels[o] -= e);
      }
    }, {
      key: "getTreeSize",
      value: function (t, e) {
        var i = 1e9,
            o = -1e9,
            n = 1e9,
            s = -1e9;

        for (var r in this.trees) if (this.trees.hasOwnProperty(r) && this.trees[r] === e) {
          var a = t[r];
          i = Math.min(a.x, i), o = Math.max(a.x, o), n = Math.min(a.y, n), s = Math.max(a.y, s);
        }

        return {
          min_x: i,
          max_x: o,
          min_y: n,
          max_y: s
        };
      }
    }, {
      key: "hasSameParent",
      value: function (t, e) {
        var i = this.parentReference[t.id],
            o = this.parentReference[e.id];
        if (void 0 === i || void 0 === o) return !1;

        for (var n = 0; n < i.length; n++) for (var s = 0; s < o.length; s++) if (i[n] == o[s]) return !0;

        return !1;
      }
    }, {
      key: "inSameSubNetwork",
      value: function (t, e) {
        return this.trees[t.id] === this.trees[e.id];
      }
    }, {
      key: "getLevels",
      value: function () {
        return Object.keys(this.distributionOrdering);
      }
    }, {
      key: "addToOrdering",
      value: function (t, e) {
        void 0 === this.distributionOrdering[e] && (this.distributionOrdering[e] = []);
        var i = !1,
            o = this.distributionOrdering[e];

        for (var n in o) if (o[n] === t) {
          i = !0;
          break;
        }

        i || (this.distributionOrdering[e].push(t), this.distributionIndex[t.id] = this.distributionOrdering[e].length - 1);
      }
    }]), t;
  }(),
      Vl = function () {
    function t(i) {
      pn(this, t), this.body = i, this.initialRandomSeed = Math.round(1e6 * Math.random()), this.randomSeed = this.initialRandomSeed, this.setPhysics = !1, this.options = {}, this.optionsBackup = {
        physics: {}
      }, this.defaultOptions = {
        randomSeed: void 0,
        improvedLayout: !0,
        clusterThreshold: 150,
        hierarchical: {
          enabled: !1,
          levelSeparation: 150,
          nodeSpacing: 100,
          treeSpacing: 200,
          blockShifting: !0,
          edgeMinimization: !0,
          parentCentralization: !0,
          direction: "UD",
          sortMethod: "hubsize"
        }
      }, extend(this.options, this.defaultOptions), this.bindEventListeners();
    }

    return vn(t, [{
      key: "bindEventListeners",
      value: function () {
        var t = this;
        this.body.emitter.on("_dataChanged", function () {
          t.setupHierarchicalLayout();
        }), this.body.emitter.on("_dataLoaded", function () {
          t.layoutNetwork();
        }), this.body.emitter.on("_resetHierarchicalLayout", function () {
          t.setupHierarchicalLayout();
        }), this.body.emitter.on("_adjustEdgesForHierarchicalLayout", function () {
          if (!0 === t.options.hierarchical.enabled) {
            var e = t.direction.curveType();
            t.body.emitter.emit("_forceDisableDynamicCurves", e, !1);
          }
        });
      }
    }, {
      key: "setOptions",
      value: function (t, e) {
        if (void 0 !== t) {
          var i = this.options.hierarchical,
              o = i.enabled;
          if (selectiveDeepExtend(["randomSeed", "improvedLayout", "clusterThreshold"], this.options, t), mergeOptions(this.options, t, "hierarchical"), void 0 !== t.randomSeed && (this.initialRandomSeed = t.randomSeed), !0 === i.enabled) return !0 === o && this.body.emitter.emit("refresh", !0), "RL" === i.direction || "DU" === i.direction ? i.levelSeparation > 0 && (i.levelSeparation *= -1) : i.levelSeparation < 0 && (i.levelSeparation *= -1), this.setDirectionStrategy(), this.body.emitter.emit("_resetHierarchicalLayout"), this.adaptAllOptionsForHierarchicalLayout(e);
          if (!0 === o) return this.body.emitter.emit("refresh"), deepExtend(e, this.optionsBackup);
        }

        return e;
      }
    }, {
      key: "adaptAllOptionsForHierarchicalLayout",
      value: function (t) {
        if (!0 === this.options.hierarchical.enabled) {
          var e = this.optionsBackup.physics;
          void 0 === t.physics || !0 === t.physics ? (t.physics = {
            enabled: void 0 === e.enabled || e.enabled,
            solver: "hierarchicalRepulsion"
          }, e.enabled = void 0 === e.enabled || e.enabled, e.solver = e.solver || "barnesHut") : "object" === un(t.physics) ? (e.enabled = void 0 === t.physics.enabled || t.physics.enabled, e.solver = t.physics.solver || "barnesHut", t.physics.solver = "hierarchicalRepulsion") : !1 !== t.physics && (e.solver = "barnesHut", t.physics = {
            solver: "hierarchicalRepulsion"
          });
          var i = this.direction.curveType();
          if (void 0 === t.edges) this.optionsBackup.edges = {
            smooth: {
              enabled: !0,
              type: "dynamic"
            }
          }, t.edges = {
            smooth: !1
          };else if (void 0 === t.edges.smooth) this.optionsBackup.edges = {
            smooth: {
              enabled: !0,
              type: "dynamic"
            }
          }, t.edges.smooth = !1;else if ("boolean" == typeof t.edges.smooth) this.optionsBackup.edges = {
            smooth: t.edges.smooth
          }, t.edges.smooth = {
            enabled: t.edges.smooth,
            type: i
          };else {
            var o = t.edges.smooth;
            void 0 !== o.type && "dynamic" !== o.type && (i = o.type), this.optionsBackup.edges = {
              smooth: void 0 === o.enabled || o.enabled,
              type: void 0 === o.type ? "dynamic" : o.type,
              roundness: void 0 === o.roundness ? .5 : o.roundness,
              forceDirection: void 0 !== o.forceDirection && o.forceDirection
            }, t.edges.smooth = {
              enabled: void 0 === o.enabled || o.enabled,
              type: i,
              roundness: void 0 === o.roundness ? .5 : o.roundness,
              forceDirection: void 0 !== o.forceDirection && o.forceDirection
            };
          }
          this.body.emitter.emit("_forceDisableDynamicCurves", i);
        }

        return t;
      }
    }, {
      key: "seededRandom",
      value: function () {
        var t = 1e4 * Math.sin(this.randomSeed++);
        return t - Math.floor(t);
      }
    }, {
      key: "positionInitially",
      value: function (t) {
        if (!0 !== this.options.hierarchical.enabled) {
          this.randomSeed = this.initialRandomSeed;

          for (var e = t.length + 50, i = 0; i < t.length; i++) {
            var o = t[i],
                n = 2 * Math.PI * this.seededRandom();
            void 0 === o.x && (o.x = e * Math.cos(n)), void 0 === o.y && (o.y = e * Math.sin(n));
          }
        }
      }
    }, {
      key: "layoutNetwork",
      value: function () {
        if (!0 !== this.options.hierarchical.enabled && !0 === this.options.improvedLayout) {
          for (var t = this.body.nodeIndices, e = 0, i = 0; i < t.length; i++) {
            !0 === this.body.nodes[t[i]].predefinedPosition && (e += 1);
          }

          if (e < .5 * t.length) {
            var o = 0,
                n = this.options.clusterThreshold,
                s = {
              clusterNodeProperties: {
                shape: "ellipse",
                label: "",
                group: "",
                font: {
                  multi: !1
                }
              },
              clusterEdgeProperties: {
                label: "",
                font: {
                  multi: !1
                },
                smooth: {
                  enabled: !1
                }
              }
            };

            if (t.length > n) {
              for (var r = t.length; t.length > n && o <= 10;) {
                o += 1;
                var a = t.length;
                if (o % 3 == 0 ? this.body.modules.clustering.clusterBridges(s) : this.body.modules.clustering.clusterOutliers(s), a == t.length && o % 3 != 0) return this._declusterAll(), this.body.emitter.emit("_layoutFailed"), void console.info("This network could not be positioned by this version of the improved layout algorithm. Please disable improvedLayout for better performance.");
              }

              this.body.modules.kamadaKawai.setOptions({
                springLength: Math.max(150, 2 * r)
              });
            }

            o > 10 && console.info("The clustering didn't succeed within the amount of interations allowed, progressing with partial result."), this.body.modules.kamadaKawai.solve(t, this.body.edgeIndices, !0), this._shiftToCenter();

            for (var h = 0; h < t.length; h++) {
              var d = this.body.nodes[t[h]];
              !1 === d.predefinedPosition && (d.x += 70 * (.5 - this.seededRandom()), d.y += 70 * (.5 - this.seededRandom()));
            }

            this._declusterAll(), this.body.emitter.emit("_repositionBezierNodes");
          }
        }
      }
    }, {
      key: "_shiftToCenter",
      value: function () {
        for (var t = dd.getRangeCore(this.body.nodes, this.body.nodeIndices), e = dd.findCenter(t), i = 0; i < this.body.nodeIndices.length; i++) {
          var o = this.body.nodes[this.body.nodeIndices[i]];
          o.x -= e.x, o.y -= e.y;
        }
      }
    }, {
      key: "_declusterAll",
      value: function () {
        for (var t = !0; !0 === t;) {
          t = !1;

          for (var e = 0; e < this.body.nodeIndices.length; e++) !0 === this.body.nodes[this.body.nodeIndices[e]].isCluster && (t = !0, this.body.modules.clustering.openCluster(this.body.nodeIndices[e], {}, !1));

          !0 === t && this.body.emitter.emit("_dataChanged");
        }
      }
    }, {
      key: "getSeed",
      value: function () {
        return this.initialRandomSeed;
      }
    }, {
      key: "setupHierarchicalLayout",
      value: function () {
        if (!0 === this.options.hierarchical.enabled && this.body.nodeIndices.length > 0) {
          var t,
              e,
              i = !1,
              o = !1;

          for (e in this.lastNodeOnLevel = {}, this.hierarchical = new Wl(), this.body.nodes) this.body.nodes.hasOwnProperty(e) && (void 0 !== (t = this.body.nodes[e]).options.level ? (i = !0, this.hierarchical.levels[e] = t.options.level) : o = !0);

          if (!0 === o && !0 === i) throw new Error("To use the hierarchical layout, nodes require either no predefined levels or levels have to be defined for all nodes.");

          if (!0 === o) {
            var n = this.options.hierarchical.sortMethod;
            "hubsize" === n ? this._determineLevelsByHubsize() : "directed" === n ? this._determineLevelsDirected() : "custom" === n && this._determineLevelsCustomCallback();
          }

          for (var s in this.body.nodes) this.body.nodes.hasOwnProperty(s) && this.hierarchical.ensureLevel(s);

          var r = this._getDistribution();

          this._generateMap(), this._placeNodesByHierarchy(r), this._condenseHierarchy(), this._shiftToCenter();
        }
      }
    }, {
      key: "_condenseHierarchy",
      value: function () {
        var t = this,
            e = !1,
            i = {},
            o = function (e, i) {
          var o = t.hierarchical.trees;

          for (var n in o) o.hasOwnProperty(n) && o[n] === e && t.direction.shift(n, i);
        },
            n = function () {
          for (var e = [], i = 0; i < t.hierarchical.numTrees(); i++) e.push(t.direction.getTreeSize(i));

          return e;
        },
            s = function e(i, o) {
          if (!o[i.id] && (o[i.id] = !0, t.hierarchical.childrenReference[i.id])) {
            var n = t.hierarchical.childrenReference[i.id];
            if (n.length > 0) for (var s = 0; s < n.length; s++) e(t.body.nodes[n[s]], o);
          }
        },
            r = function (e) {
          var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e9,
              o = 1e9,
              n = 1e9,
              s = 1e9,
              r = -1e9;

          for (var a in e) if (e.hasOwnProperty(a)) {
            var h = t.body.nodes[a],
                d = t.hierarchical.levels[h.id],
                l = t.direction.getPosition(h),
                c = t._getSpaceAroundNode(h, e),
                u = On(c, 2),
                p = u[0],
                f = u[1];

            o = Math.min(p, o), n = Math.min(f, n), d <= i && (s = Math.min(l, s), r = Math.max(l, r));
          }

          return [s, r, o, n];
        },
            a = function (e, i) {
          var o = t.hierarchical.getMaxLevel(e.id),
              n = t.hierarchical.getMaxLevel(i.id);
          return Math.min(o, n);
        },
            h = function (e, i, o) {
          for (var n = t.hierarchical, s = 0; s < i.length; s++) {
            var r = i[s],
                a = n.distributionOrdering[r];
            if (a.length > 1) for (var h = 0; h < a.length - 1; h++) {
              var d = a[h],
                  l = a[h + 1];
              n.hasSameParent(d, l) && n.inSameSubNetwork(d, l) && e(d, l, o);
            }
          }
        },
            d = function (i, o) {
          var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
              h = t.direction.getPosition(i),
              d = t.direction.getPosition(o),
              l = Math.abs(d - h),
              c = t.options.hierarchical.nodeSpacing;

          if (l > c) {
            var u = {},
                p = {};
            s(i, u), s(o, p);
            var f = a(i, o),
                v = r(u, f),
                g = r(p, f),
                y = v[1],
                m = g[0],
                b = g[2],
                w = Math.abs(y - m);

            if (w > c) {
              var k = y - m + c;
              k < -b + c && (k = -b + c), k < 0 && (t._shiftBlock(o.id, k), e = !0, !0 === n && t._centerParent(o));
            }
          }
        },
            l = function (o, n) {
          for (var a = n.id, h = n.edges, d = t.hierarchical.levels[n.id], l = t.options.hierarchical.levelSeparation * t.options.hierarchical.levelSeparation, c = {}, u = [], p = 0; p < h.length; p++) {
            var f = h[p];

            if (f.toId != f.fromId) {
              var v = f.toId == a ? f.from : f.to;
              c[h[p].id] = v, t.hierarchical.levels[v.id] < d && u.push(f);
            }
          }

          var g = function (e, i) {
            for (var o = 0, n = 0; n < i.length; n++) if (void 0 !== c[i[n].id]) {
              var s = t.direction.getPosition(c[i[n].id]) - e;
              o += s / Math.sqrt(s * s + l);
            }

            return o;
          },
              y = function (e, i) {
            for (var o = 0, n = 0; n < i.length; n++) if (void 0 !== c[i[n].id]) {
              var s = t.direction.getPosition(c[i[n].id]) - e;
              o -= l * Math.pow(s * s + l, -1.5);
            }

            return o;
          },
              m = function (e, i) {
            for (var o = t.direction.getPosition(n), s = {}, r = 0; r < e; r++) {
              var a = g(o, i),
                  h = y(o, i);
              if (void 0 !== s[o -= Math.max(-40, Math.min(40, Math.round(a / h)))]) break;
              s[o] = r;
            }

            return o;
          },
              b = m(o, u);

          !function (o) {
            var a = t.direction.getPosition(n);

            if (void 0 === i[n.id]) {
              var h = {};
              s(n, h), i[n.id] = h;
            }

            var d = r(i[n.id]),
                l = d[2],
                c = d[3],
                u = o - a,
                p = 0;
            u > 0 ? p = Math.min(u, c - t.options.hierarchical.nodeSpacing) : u < 0 && (p = -Math.min(-u, l - t.options.hierarchical.nodeSpacing)), 0 != p && (t._shiftBlock(n.id, p), e = !0);
          }(b), function (i) {
            var o = t.direction.getPosition(n),
                s = On(t._getSpaceAroundNode(n), 2),
                r = s[0],
                a = s[1],
                h = i - o,
                d = o;
            h > 0 ? d = Math.min(o + (a - t.options.hierarchical.nodeSpacing), i) : h < 0 && (d = Math.max(o - (r - t.options.hierarchical.nodeSpacing), i)), d !== o && (t.direction.setPosition(n, d), e = !0);
          }(b = m(o, h));
        };

        !0 === this.options.hierarchical.blockShifting && (function (i) {
          var o = t.hierarchical.getLevels();
          o = o.reverse();

          for (var n = 0; n < i && (e = !1, h(d, o, !0), !0 === e); n++);
        }(5), function () {
          for (var e in t.body.nodes) t.body.nodes.hasOwnProperty(e) && t._centerParent(t.body.nodes[e]);
        }()), !0 === this.options.hierarchical.edgeMinimization && function (i) {
          var o = t.hierarchical.getLevels();
          o = o.reverse();

          for (var n = 0; n < i; n++) {
            e = !1;

            for (var s = 0; s < o.length; s++) for (var r = o[s], a = t.hierarchical.distributionOrdering[r], h = 0; h < a.length; h++) l(1e3, a[h]);

            if (!0 !== e) break;
          }
        }(20), !0 === this.options.hierarchical.parentCentralization && function () {
          var e = t.hierarchical.getLevels();
          e = e.reverse();

          for (var i = 0; i < e.length; i++) for (var o = e[i], n = t.hierarchical.distributionOrdering[o], s = 0; s < n.length; s++) t._centerParent(n[s]);
        }(), function () {
          for (var e = n(), i = 0, s = 0; s < e.length - 1; s++) {
            i += e[s].max - e[s + 1].min + t.options.hierarchical.treeSpacing, o(s + 1, i);
          }
        }();
      }
    }, {
      key: "_getSpaceAroundNode",
      value: function (t, e) {
        var i = !0;
        void 0 === e && (i = !1);
        var o = this.hierarchical.levels[t.id];

        if (void 0 !== o) {
          var n = this.hierarchical.distributionIndex[t.id],
              s = this.direction.getPosition(t),
              r = this.hierarchical.distributionOrdering[o],
              a = 1e9,
              h = 1e9;

          if (0 !== n) {
            var d = r[n - 1];
            if (!0 === i && void 0 === e[d.id] || !1 === i) a = s - this.direction.getPosition(d);
          }

          if (n != r.length - 1) {
            var l = r[n + 1];

            if (!0 === i && void 0 === e[l.id] || !1 === i) {
              var c = this.direction.getPosition(l);
              h = Math.min(h, c - s);
            }
          }

          return [a, h];
        }

        return [0, 0];
      }
    }, {
      key: "_centerParent",
      value: function (t) {
        if (this.hierarchical.parentReference[t.id]) for (var e = this.hierarchical.parentReference[t.id], i = 0; i < e.length; i++) {
          var o = e[i],
              n = this.body.nodes[o],
              s = this.hierarchical.childrenReference[o];

          if (void 0 !== s) {
            var r = this._getCenterPosition(s),
                a = this.direction.getPosition(n),
                h = On(this._getSpaceAroundNode(n), 2),
                d = h[0],
                l = h[1],
                c = a - r;

            (c < 0 && Math.abs(c) < l - this.options.hierarchical.nodeSpacing || c > 0 && Math.abs(c) < d - this.options.hierarchical.nodeSpacing) && this.direction.setPosition(n, r);
          }
        }
      }
    }, {
      key: "_placeNodesByHierarchy",
      value: function (t) {
        for (var e in this.positionedNodes = {}, t) if (t.hasOwnProperty(e)) {
          var i = Object.keys(t[e]);
          i = this._indexArrayToNodes(i), this.direction.sort(i);

          for (var o = 0, n = 0; n < i.length; n++) {
            var s = i[n];

            if (void 0 === this.positionedNodes[s.id]) {
              var r = this.options.hierarchical.nodeSpacing,
                  a = r * o;
              o > 0 && (a = this.direction.getPosition(i[n - 1]) + r), this.direction.setPosition(s, a, e), this._validatePositionAndContinue(s, e, a), o++;
            }
          }
        }
      }
    }, {
      key: "_placeBranchNodes",
      value: function (t, e) {
        var i = this.hierarchical.childrenReference[t];

        if (void 0 !== i) {
          for (var o = [], n = 0; n < i.length; n++) o.push(this.body.nodes[i[n]]);

          this.direction.sort(o);

          for (var s = 0; s < o.length; s++) {
            var r = o[s],
                a = this.hierarchical.levels[r.id];
            if (!(a > e && void 0 === this.positionedNodes[r.id])) return;
            var h = this.options.hierarchical.nodeSpacing,
                d = void 0;
            d = 0 === s ? this.direction.getPosition(this.body.nodes[t]) : this.direction.getPosition(o[s - 1]) + h, this.direction.setPosition(r, d, a), this._validatePositionAndContinue(r, a, d);
          }

          var l = this._getCenterPosition(o);

          this.direction.setPosition(this.body.nodes[t], l, e);
        }
      }
    }, {
      key: "_validatePositionAndContinue",
      value: function (t, e, i) {
        if (this.hierarchical.isTree) {
          if (void 0 !== this.lastNodeOnLevel[e]) {
            var o = this.direction.getPosition(this.body.nodes[this.lastNodeOnLevel[e]]);

            if (i - o < this.options.hierarchical.nodeSpacing) {
              var n = o + this.options.hierarchical.nodeSpacing - i,
                  s = this._findCommonParent(this.lastNodeOnLevel[e], t.id);

              this._shiftBlock(s.withChild, n);
            }
          }

          this.lastNodeOnLevel[e] = t.id, this.positionedNodes[t.id] = !0, this._placeBranchNodes(t.id, e);
        }
      }
    }, {
      key: "_indexArrayToNodes",
      value: function (t) {
        for (var e = [], i = 0; i < t.length; i++) e.push(this.body.nodes[t[i]]);

        return e;
      }
    }, {
      key: "_getDistribution",
      value: function () {
        var t,
            e,
            i = {};

        for (t in this.body.nodes) if (this.body.nodes.hasOwnProperty(t)) {
          e = this.body.nodes[t];
          var o = void 0 === this.hierarchical.levels[t] ? 0 : this.hierarchical.levels[t];
          this.direction.fix(e, o), void 0 === i[o] && (i[o] = {}), i[o][t] = e;
        }

        return i;
      }
    }, {
      key: "_getActiveEdges",
      value: function (t) {
        var e = this,
            i = [];
        return forEach(t.edges, function (t) {
          -1 !== e.body.edgeIndices.indexOf(t.id) && i.push(t);
        }), i;
      }
    }, {
      key: "_getHubSizes",
      value: function () {
        var t = this,
            e = {},
            i = this.body.nodeIndices;
        forEach(i, function (i) {
          var o = t.body.nodes[i],
              n = t._getActiveEdges(o).length;

          e[n] = !0;
        });
        var n = [];
        return forEach(e, function (t) {
          n.push(Number(t));
        }), Ed.sort(n, function (t, e) {
          return e - t;
        }), n;
      }
    }, {
      key: "_determineLevelsByHubsize",
      value: function () {
        for (var t = this, e = function (e, i) {
          t.hierarchical.levelDownstream(e, i);
        }, i = this._getHubSizes(), n = function (n) {
          var s = i[n];
          if (0 === s) return "break";
          forEach(t.body.nodeIndices, function (i) {
            var o = t.body.nodes[i];
            s === t._getActiveEdges(o).length && t._crawlNetwork(e, i);
          });
        }, s = 0; s < i.length; ++s) {
          if ("break" === n(s)) break;
        }
      }
    }, {
      key: "_determineLevelsCustomCallback",
      value: function () {
        var t = this;
        this._crawlNetwork(function (e, i, o) {
          var n = t.hierarchical.levels[e.id];
          void 0 === n && (n = t.hierarchical.levels[e.id] = 1e5);
          var s = (dd.cloneOptions(e, "node"), dd.cloneOptions(i, "node"), void dd.cloneOptions(o, "edge"));
          t.hierarchical.levels[i.id] = n + s;
        }), this.hierarchical.setMinLevelToZero(this.body.nodes);
      }
    }, {
      key: "_determineLevelsDirected",
      value: function () {
        var t = this,
            e = this.body.nodeIndices.map(function (e) {
          return t.body.nodes[e];
        });
        this.hierarchical.levels;
        "roots" === this.options.hierarchical.shakeTowards ? this.hierarchical.levels = function (t) {
          return Hl(function (t) {
            return !t.edges.every(function (e) {
              return e.from === t;
            });
          }, function (t, e) {
            return e < t;
          }, "to", t, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Object.create(null));
        }(e, this.hierarchical.levels) : this.hierarchical.levels = function (t) {
          return Hl(function (t) {
            return !t.edges.every(function (e) {
              return e.to === t;
            });
          }, function (t, e) {
            return e > t;
          }, "from", t, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Object.create(null));
        }(e, this.hierarchical.levels), this.hierarchical.setMinLevelToZero(this.body.nodes);
      }
    }, {
      key: "_generateMap",
      value: function () {
        var t = this;
        this._crawlNetwork(function (e, i) {
          t.hierarchical.levels[i.id] > t.hierarchical.levels[e.id] && t.hierarchical.addRelation(e.id, i.id);
        }), this.hierarchical.checkIfTree();
      }
    }, {
      key: "_crawlNetwork",
      value: function () {
        var t = this,
            e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : function () {},
            i = arguments.length > 1 ? arguments[1] : void 0,
            o = {},
            n = function i(n, s) {
          if (void 0 === o[n.id]) {
            var r;
            t.hierarchical.setTreeIndex(n, s), o[n.id] = !0;

            for (var a = t._getActiveEdges(n), h = 0; h < a.length; h++) {
              var d = a[h];
              !0 === d.connected && (r = d.toId == n.id ? d.from : d.to, n.id != r.id && (e(n, r, d), i(r, s)));
            }
          }
        };

        if (void 0 === i) for (var s = 0, r = 0; r < this.body.nodeIndices.length; r++) {
          var a = this.body.nodeIndices[r];

          if (void 0 === o[a]) {
            var h = this.body.nodes[a];
            n(h, s), s += 1;
          }
        } else {
          var d = this.body.nodes[i];
          if (void 0 === d) return void console.error("Node not found:", i);
          n(d);
        }
      }
    }, {
      key: "_shiftBlock",
      value: function (t, e) {
        var i = this,
            o = {};
        !function t(n) {
          if (!o[n]) {
            o[n] = !0, i.direction.shift(n, e);
            var s = i.hierarchical.childrenReference[n];
            if (void 0 !== s) for (var r = 0; r < s.length; r++) t(s[r]);
          }
        }(t);
      }
    }, {
      key: "_findCommonParent",
      value: function (t, e) {
        var i = this,
            o = {};
        return function t(e, o) {
          var n = i.hierarchical.parentReference[o];
          if (void 0 !== n) for (var s = 0; s < n.length; s++) {
            var r = n[s];
            e[r] = !0, t(e, r);
          }
        }(o, t), function t(e, o) {
          var n = i.hierarchical.parentReference[o];
          if (void 0 !== n) for (var s = 0; s < n.length; s++) {
            var r = n[s];
            if (void 0 !== e[r]) return {
              foundParent: r,
              withChild: o
            };
            var a = t(e, r);
            if (null !== a.foundParent) return a;
          }
          return {
            foundParent: null,
            withChild: o
          };
        }(o, e);
      }
    }, {
      key: "setDirectionStrategy",
      value: function () {
        var t = "UD" === this.options.hierarchical.direction || "DU" === this.options.hierarchical.direction;
        this.direction = t ? new Sd(this) : new Td(this);
      }
    }, {
      key: "_getCenterPosition",
      value: function (t) {
        for (var e = 1e9, i = -1e9, o = 0; o < t.length; o++) {
          var n = void 0;
          if (void 0 !== t[o].id) n = t[o];else {
            var s = t[o];
            n = this.body.nodes[s];
          }
          var r = this.direction.getPosition(n);
          e = Math.min(e, r), i = Math.max(i, r);
        }

        return .5 * (e + i);
      }
    }]), t;
  }(),
      ql = function () {
    function t(i, o, n, s) {
      var r = this;
      pn(this, t), this.body = i, this.canvas = o, this.selectionHandler = n, this.interactionHandler = s, this.editMode = !1, this.manipulationDiv = void 0, this.editModeDiv = void 0, this.closeDiv = void 0, this.manipulationHammers = [], this.temporaryUIFunctions = {}, this.temporaryEventFunctions = [], this.touchTime = 0, this.temporaryIds = {
        nodes: [],
        edges: []
      }, this.guiEnabled = !1, this.inMode = !1, this.selectedControlNode = void 0, this.options = {}, this.defaultOptions = {
        enabled: !1,
        initiallyActive: !1,
        addNode: !0,
        addEdge: !0,
        editNode: void 0,
        editEdge: !0,
        deleteNode: !0,
        deleteEdge: !0,
        controlNodeStyle: {
          shape: "dot",
          size: 6,
          color: {
            background: "#ff0000",
            border: "#3c3c3c",
            highlight: {
              background: "#07f968",
              border: "#3c3c3c"
            }
          },
          borderWidth: 2,
          borderWidthSelected: 2
        }
      }, extend(this.options, this.defaultOptions), this.body.emitter.on("destroy", function () {
        r._clean();
      }), this.body.emitter.on("_dataChanged", this._restore.bind(this)), this.body.emitter.on("_resetData", this._restore.bind(this));
    }

    return vn(t, [{
      key: "_restore",
      value: function () {
        !1 !== this.inMode && (!0 === this.options.initiallyActive ? this.enableEditMode() : this.disableEditMode());
      }
    }, {
      key: "setOptions",
      value: function (t, e, i) {
        void 0 !== e && (void 0 !== e.locale ? this.options.locale = e.locale : this.options.locale = i.locale, void 0 !== e.locales ? this.options.locales = e.locales : this.options.locales = i.locales), void 0 !== t && ("boolean" == typeof t ? this.options.enabled = t : (this.options.enabled = !0, deepExtend(this.options, t)), !0 === this.options.initiallyActive && (this.editMode = !0), this._setup());
      }
    }, {
      key: "toggleEditMode",
      value: function () {
        !0 === this.editMode ? this.disableEditMode() : this.enableEditMode();
      }
    }, {
      key: "enableEditMode",
      value: function () {
        this.editMode = !0, this._clean(), !0 === this.guiEnabled && (this.manipulationDiv.style.display = "block", this.closeDiv.style.display = "block", this.editModeDiv.style.display = "none", this.showManipulatorToolbar());
      }
    }, {
      key: "disableEditMode",
      value: function () {
        this.editMode = !1, this._clean(), !0 === this.guiEnabled && (this.manipulationDiv.style.display = "none", this.closeDiv.style.display = "none", this.editModeDiv.style.display = "block", this._createEditButton());
      }
    }, {
      key: "showManipulatorToolbar",
      value: function () {
        if (this._clean(), this.manipulationDOM = {}, !0 === this.guiEnabled) {
          this.editMode = !0, this.manipulationDiv.style.display = "block", this.closeDiv.style.display = "block";

          var t = this.selectionHandler._getSelectedNodeCount(),
              e = this.selectionHandler._getSelectedEdgeCount(),
              i = t + e,
              o = this.options.locales[this.options.locale],
              n = !1;

          !1 !== this.options.addNode && (this._createAddNodeButton(o), n = !0), !1 !== this.options.addEdge && (!0 === n ? this._createSeperator(1) : n = !0, this._createAddEdgeButton(o)), 1 === t && "function" == typeof this.options.editNode ? (!0 === n ? this._createSeperator(2) : n = !0, this._createEditNodeButton(o)) : 1 === e && 0 === t && !1 !== this.options.editEdge && (!0 === n ? this._createSeperator(3) : n = !0, this._createEditEdgeButton(o)), 0 !== i && (t > 0 && !1 !== this.options.deleteNode ? (!0 === n && this._createSeperator(4), this._createDeleteButton(o)) : 0 === t && !1 !== this.options.deleteEdge && (!0 === n && this._createSeperator(4), this._createDeleteButton(o))), this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this)), this._temporaryBindEvent("select", this.showManipulatorToolbar.bind(this));
        }

        this.body.emitter.emit("_redraw");
      }
    }, {
      key: "addNodeMode",
      value: function () {
        if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "addNode", !0 === this.guiEnabled) {
          var t = this.options.locales[this.options.locale];
          this.manipulationDOM = {}, this._createBackButton(t), this._createSeperator(), this._createDescription(t.addDescription || this.options.locales.en.addDescription), this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
        }

        this._temporaryBindEvent("click", this._performAddNode.bind(this));
      }
    }, {
      key: "editNode",
      value: function () {
        var t = this;
        !0 !== this.editMode && this.enableEditMode(), this._clean();

        var e = this.selectionHandler._getSelectedNode();

        if (void 0 !== e) {
          if (this.inMode = "editNode", "function" != typeof this.options.editNode) throw new Error("No function has been configured to handle the editing of nodes.");

          if (!0 !== e.isCluster) {
            var i = deepExtend({}, e.options, !1);
            if (i.x = e.x, i.y = e.y, 2 !== this.options.editNode.length) throw new Error("The function for edit does not support two arguments (data, callback)");
            this.options.editNode(i, function (e) {
              null != e && "editNode" === t.inMode && t.body.data.nodes.getDataSet().update(e), t.showManipulatorToolbar();
            });
          } else alert(this.options.locales[this.options.locale].editClusterError || this.options.locales.en.editClusterError);
        } else this.showManipulatorToolbar();
      }
    }, {
      key: "addEdgeMode",
      value: function () {
        if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "addEdge", !0 === this.guiEnabled) {
          var t = this.options.locales[this.options.locale];
          this.manipulationDOM = {}, this._createBackButton(t), this._createSeperator(), this._createDescription(t.edgeDescription || this.options.locales.en.edgeDescription), this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
        }

        this._temporaryBindUI("onTouch", this._handleConnect.bind(this)), this._temporaryBindUI("onDragEnd", this._finishConnect.bind(this)), this._temporaryBindUI("onDrag", this._dragControlNode.bind(this)), this._temporaryBindUI("onRelease", this._finishConnect.bind(this)), this._temporaryBindUI("onDragStart", this._dragStartEdge.bind(this)), this._temporaryBindUI("onHold", function () {});
      }
    }, {
      key: "editEdgeMode",
      value: function () {
        if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "editEdge", "object" !== un(this.options.editEdge) || "function" != typeof this.options.editEdge.editWithoutDrag || (this.edgeBeingEditedId = this.selectionHandler.getSelectedEdges()[0], void 0 === this.edgeBeingEditedId)) {
          if (!0 === this.guiEnabled) {
            var t = this.options.locales[this.options.locale];
            this.manipulationDOM = {}, this._createBackButton(t), this._createSeperator(), this._createDescription(t.editEdgeDescription || this.options.locales.en.editEdgeDescription), this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
          }

          if (this.edgeBeingEditedId = this.selectionHandler.getSelectedEdges()[0], void 0 !== this.edgeBeingEditedId) {
            var e = this.body.edges[this.edgeBeingEditedId],
                i = this._getNewTargetNode(e.from.x, e.from.y),
                o = this._getNewTargetNode(e.to.x, e.to.y);

            this.temporaryIds.nodes.push(i.id), this.temporaryIds.nodes.push(o.id), this.body.nodes[i.id] = i, this.body.nodeIndices.push(i.id), this.body.nodes[o.id] = o, this.body.nodeIndices.push(o.id), this._temporaryBindUI("onTouch", this._controlNodeTouch.bind(this)), this._temporaryBindUI("onTap", function () {}), this._temporaryBindUI("onHold", function () {}), this._temporaryBindUI("onDragStart", this._controlNodeDragStart.bind(this)), this._temporaryBindUI("onDrag", this._controlNodeDrag.bind(this)), this._temporaryBindUI("onDragEnd", this._controlNodeDragEnd.bind(this)), this._temporaryBindUI("onMouseMove", function () {}), this._temporaryBindEvent("beforeDrawing", function (t) {
              var n = e.edgeType.findBorderPositions(t);
              !1 === i.selected && (i.x = n.from.x, i.y = n.from.y), !1 === o.selected && (o.x = n.to.x, o.y = n.to.y);
            }), this.body.emitter.emit("_redraw");
          } else this.showManipulatorToolbar();
        } else {
          var n = this.body.edges[this.edgeBeingEditedId];

          this._performEditEdge(n.from.id, n.to.id);
        }
      }
    }, {
      key: "deleteSelected",
      value: function () {
        var t = this;
        !0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "delete";
        var e = this.selectionHandler.getSelectedNodes(),
            i = this.selectionHandler.getSelectedEdges(),
            o = void 0;

        if (e.length > 0) {
          for (var n = 0; n < e.length; n++) if (!0 === this.body.nodes[e[n]].isCluster) return void alert(this.options.locales[this.options.locale].deleteClusterError || this.options.locales.en.deleteClusterError);

          "function" == typeof this.options.deleteNode && (o = this.options.deleteNode);
        } else i.length > 0 && "function" == typeof this.options.deleteEdge && (o = this.options.deleteEdge);

        if ("function" == typeof o) {
          var s = {
            nodes: e,
            edges: i
          };
          if (2 !== o.length) throw new Error("The function for delete does not support two arguments (data, callback)");
          o(s, function (e) {
            null != e && "delete" === t.inMode ? (t.body.data.edges.getDataSet().remove(e.edges), t.body.data.nodes.getDataSet().remove(e.nodes), t.body.emitter.emit("startSimulation"), t.showManipulatorToolbar()) : (t.body.emitter.emit("startSimulation"), t.showManipulatorToolbar());
          });
        } else this.body.data.edges.getDataSet().remove(i), this.body.data.nodes.getDataSet().remove(e), this.body.emitter.emit("startSimulation"), this.showManipulatorToolbar();
      }
    }, {
      key: "_setup",
      value: function () {
        !0 === this.options.enabled ? (this.guiEnabled = !0, this._createWrappers(), !1 === this.editMode ? this._createEditButton() : this.showManipulatorToolbar()) : (this._removeManipulationDOM(), this.guiEnabled = !1);
      }
    }, {
      key: "_createWrappers",
      value: function () {
        void 0 === this.manipulationDiv && (this.manipulationDiv = document.createElement("div"), this.manipulationDiv.className = "vis-manipulation", !0 === this.editMode ? this.manipulationDiv.style.display = "block" : this.manipulationDiv.style.display = "none", this.canvas.frame.appendChild(this.manipulationDiv)), void 0 === this.editModeDiv && (this.editModeDiv = document.createElement("div"), this.editModeDiv.className = "vis-edit-mode", !0 === this.editMode ? this.editModeDiv.style.display = "none" : this.editModeDiv.style.display = "block", this.canvas.frame.appendChild(this.editModeDiv)), void 0 === this.closeDiv && (this.closeDiv = document.createElement("div"), this.closeDiv.className = "vis-close", this.closeDiv.style.display = this.manipulationDiv.style.display, this.canvas.frame.appendChild(this.closeDiv));
      }
    }, {
      key: "_getNewTargetNode",
      value: function (t, e) {
        var i = deepExtend({}, this.options.controlNodeStyle);
        i.id = "targetNode" + uuid4(), i.hidden = !1, i.physics = !1, i.x = t, i.y = e;
        var o = this.body.functions.createNode(i);
        return o.shape.boundingBox = {
          left: t,
          right: t,
          top: e,
          bottom: e
        }, o;
      }
    }, {
      key: "_createEditButton",
      value: function () {
        this._clean(), this.manipulationDOM = {}, recursiveDOMDelete(this.editModeDiv);

        var t = this.options.locales[this.options.locale],
            e = this._createButton("editMode", "vis-button vis-edit vis-edit-mode", t.edit || this.options.locales.en.edit);

        this.editModeDiv.appendChild(e), this._bindHammerToDiv(e, this.toggleEditMode.bind(this));
      }
    }, {
      key: "_clean",
      value: function () {
        this.inMode = !1, !0 === this.guiEnabled && (recursiveDOMDelete(this.editModeDiv), recursiveDOMDelete(this.manipulationDiv), this._cleanManipulatorHammers()), this._cleanupTemporaryNodesAndEdges(), this._unbindTemporaryUIs(), this._unbindTemporaryEvents(), this.body.emitter.emit("restorePhysics");
      }
    }, {
      key: "_cleanManipulatorHammers",
      value: function () {
        if (0 != this.manipulationHammers.length) {
          for (var t = 0; t < this.manipulationHammers.length; t++) this.manipulationHammers[t].destroy();

          this.manipulationHammers = [];
        }
      }
    }, {
      key: "_removeManipulationDOM",
      value: function () {
        this._clean(), recursiveDOMDelete(this.manipulationDiv), recursiveDOMDelete(this.editModeDiv), recursiveDOMDelete(this.closeDiv), this.manipulationDiv && this.canvas.frame.removeChild(this.manipulationDiv), this.editModeDiv && this.canvas.frame.removeChild(this.editModeDiv), this.closeDiv && this.canvas.frame.removeChild(this.closeDiv), this.manipulationDiv = void 0, this.editModeDiv = void 0, this.closeDiv = void 0;
      }
    }, {
      key: "_createSeperator",
      value: function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
        this.manipulationDOM["seperatorLineDiv" + t] = document.createElement("div"), this.manipulationDOM["seperatorLineDiv" + t].className = "vis-separator-line", this.manipulationDiv.appendChild(this.manipulationDOM["seperatorLineDiv" + t]);
      }
    }, {
      key: "_createAddNodeButton",
      value: function (t) {
        var e = this._createButton("addNode", "vis-button vis-add", t.addNode || this.options.locales.en.addNode);

        this.manipulationDiv.appendChild(e), this._bindHammerToDiv(e, this.addNodeMode.bind(this));
      }
    }, {
      key: "_createAddEdgeButton",
      value: function (t) {
        var e = this._createButton("addEdge", "vis-button vis-connect", t.addEdge || this.options.locales.en.addEdge);

        this.manipulationDiv.appendChild(e), this._bindHammerToDiv(e, this.addEdgeMode.bind(this));
      }
    }, {
      key: "_createEditNodeButton",
      value: function (t) {
        var e = this._createButton("editNode", "vis-button vis-edit", t.editNode || this.options.locales.en.editNode);

        this.manipulationDiv.appendChild(e), this._bindHammerToDiv(e, this.editNode.bind(this));
      }
    }, {
      key: "_createEditEdgeButton",
      value: function (t) {
        var e = this._createButton("editEdge", "vis-button vis-edit", t.editEdge || this.options.locales.en.editEdge);

        this.manipulationDiv.appendChild(e), this._bindHammerToDiv(e, this.editEdgeMode.bind(this));
      }
    }, {
      key: "_createDeleteButton",
      value: function (t) {
        var e;
        e = this.options.rtl ? "vis-button vis-delete-rtl" : "vis-button vis-delete";

        var i = this._createButton("delete", e, t.del || this.options.locales.en.del);

        this.manipulationDiv.appendChild(i), this._bindHammerToDiv(i, this.deleteSelected.bind(this));
      }
    }, {
      key: "_createBackButton",
      value: function (t) {
        var e = this._createButton("back", "vis-button vis-back", t.back || this.options.locales.en.back);

        this.manipulationDiv.appendChild(e), this._bindHammerToDiv(e, this.showManipulatorToolbar.bind(this));
      }
    }, {
      key: "_createButton",
      value: function (t, e, i) {
        var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "vis-label";
        return this.manipulationDOM[t + "Div"] = document.createElement("div"), this.manipulationDOM[t + "Div"].className = e, this.manipulationDOM[t + "Label"] = document.createElement("div"), this.manipulationDOM[t + "Label"].className = o, this.manipulationDOM[t + "Label"].innerHTML = i, this.manipulationDOM[t + "Div"].appendChild(this.manipulationDOM[t + "Label"]), this.manipulationDOM[t + "Div"];
      }
    }, {
      key: "_createDescription",
      value: function (t) {
        this.manipulationDiv.appendChild(this._createButton("description", "vis-button vis-none", t));
      }
    }, {
      key: "_temporaryBindEvent",
      value: function (t, e) {
        this.temporaryEventFunctions.push({
          event: t,
          boundFunction: e
        }), this.body.emitter.on(t, e);
      }
    }, {
      key: "_temporaryBindUI",
      value: function (t, e) {
        if (void 0 === this.body.eventListeners[t]) throw new Error("This UI function does not exist. Typo? You tried: " + t + " possible are: " + JSON.stringify(Object.keys(this.body.eventListeners)));
        this.temporaryUIFunctions[t] = this.body.eventListeners[t], this.body.eventListeners[t] = e;
      }
    }, {
      key: "_unbindTemporaryUIs",
      value: function () {
        for (var t in this.temporaryUIFunctions) this.temporaryUIFunctions.hasOwnProperty(t) && (this.body.eventListeners[t] = this.temporaryUIFunctions[t], delete this.temporaryUIFunctions[t]);

        this.temporaryUIFunctions = {};
      }
    }, {
      key: "_unbindTemporaryEvents",
      value: function () {
        for (var t = 0; t < this.temporaryEventFunctions.length; t++) {
          var e = this.temporaryEventFunctions[t].event,
              i = this.temporaryEventFunctions[t].boundFunction;
          this.body.emitter.off(e, i);
        }

        this.temporaryEventFunctions = [];
      }
    }, {
      key: "_bindHammerToDiv",
      value: function (t, e) {
        var i = new Pr(t, {});
        pd.onTouch(i, e), this.manipulationHammers.push(i);
      }
    }, {
      key: "_cleanupTemporaryNodesAndEdges",
      value: function () {
        for (var t = 0; t < this.temporaryIds.edges.length; t++) {
          this.body.edges[this.temporaryIds.edges[t]].disconnect(), delete this.body.edges[this.temporaryIds.edges[t]];
          var e = this.body.edgeIndices.indexOf(this.temporaryIds.edges[t]);
          -1 !== e && this.body.edgeIndices.splice(e, 1);
        }

        for (var i = 0; i < this.temporaryIds.nodes.length; i++) {
          delete this.body.nodes[this.temporaryIds.nodes[i]];
          var o = this.body.nodeIndices.indexOf(this.temporaryIds.nodes[i]);
          -1 !== o && this.body.nodeIndices.splice(o, 1);
        }

        this.temporaryIds = {
          nodes: [],
          edges: []
        };
      }
    }, {
      key: "_controlNodeTouch",
      value: function (t) {
        this.selectionHandler.unselectAll(), this.lastTouch = this.body.functions.getPointer(t.center), this.lastTouch.translation = extend({}, this.body.view.translation);
      }
    }, {
      key: "_controlNodeDragStart",
      value: function (t) {
        var e = this.lastTouch,
            i = this.selectionHandler._pointerToPositionObject(e),
            o = this.body.nodes[this.temporaryIds.nodes[0]],
            n = this.body.nodes[this.temporaryIds.nodes[1]],
            s = this.body.edges[this.edgeBeingEditedId];

        this.selectedControlNode = void 0;
        var r = o.isOverlappingWith(i),
            a = n.isOverlappingWith(i);
        !0 === r ? (this.selectedControlNode = o, s.edgeType.from = o) : !0 === a && (this.selectedControlNode = n, s.edgeType.to = n), void 0 !== this.selectedControlNode && this.selectionHandler.selectObject(this.selectedControlNode), this.body.emitter.emit("_redraw");
      }
    }, {
      key: "_controlNodeDrag",
      value: function (t) {
        this.body.emitter.emit("disablePhysics");
        var e = this.body.functions.getPointer(t.center),
            i = this.canvas.DOMtoCanvas(e);
        void 0 !== this.selectedControlNode ? (this.selectedControlNode.x = i.x, this.selectedControlNode.y = i.y) : this.interactionHandler.onDrag(t), this.body.emitter.emit("_redraw");
      }
    }, {
      key: "_controlNodeDragEnd",
      value: function (t) {
        var e = this.body.functions.getPointer(t.center),
            i = this.selectionHandler._pointerToPositionObject(e),
            o = this.body.edges[this.edgeBeingEditedId];

        if (void 0 !== this.selectedControlNode) {
          this.selectionHandler.unselectAll();

          for (var n = this.selectionHandler._getAllNodesOverlappingWith(i), s = void 0, r = n.length - 1; r >= 0; r--) if (n[r] !== this.selectedControlNode.id) {
            s = this.body.nodes[n[r]];
            break;
          }

          if (void 0 !== s && void 0 !== this.selectedControlNode) {
            if (!0 === s.isCluster) alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError);else {
              var a = this.body.nodes[this.temporaryIds.nodes[0]];
              this.selectedControlNode.id === a.id ? this._performEditEdge(s.id, o.to.id) : this._performEditEdge(o.from.id, s.id);
            }
          } else o.updateEdgeType(), this.body.emitter.emit("restorePhysics");
          this.body.emitter.emit("_redraw");
        }
      }
    }, {
      key: "_handleConnect",
      value: function (t) {
        if (new Date().valueOf() - this.touchTime > 100) {
          this.lastTouch = this.body.functions.getPointer(t.center), this.lastTouch.translation = extend({}, this.body.view.translation);
          var i = this.lastTouch,
              o = this.selectionHandler.getNodeAt(i);
          if (void 0 !== o) if (!0 === o.isCluster) alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError);else {
            var n = this._getNewTargetNode(o.x, o.y);

            this.body.nodes[n.id] = n, this.body.nodeIndices.push(n.id);
            var s = this.body.functions.createEdge({
              id: "connectionEdge" + uuid4(),
              from: o.id,
              to: n.id,
              physics: !1,
              smooth: {
                enabled: !0,
                type: "continuous",
                roundness: .5
              }
            });
            this.body.edges[s.id] = s, this.body.edgeIndices.push(s.id), this.temporaryIds.nodes.push(n.id), this.temporaryIds.edges.push(s.id);
          }
          this.touchTime = new Date().valueOf();
        }
      }
    }, {
      key: "_dragControlNode",
      value: function (t) {
        var e = this.body.functions.getPointer(t.center),
            i = this.selectionHandler._pointerToPositionObject(e),
            o = void 0;

        void 0 !== this.temporaryIds.edges[0] && (o = this.body.edges[this.temporaryIds.edges[0]].fromId);

        for (var n = this.selectionHandler._getAllNodesOverlappingWith(i), s = void 0, r = n.length - 1; r >= 0; r--) if (-1 === this.temporaryIds.nodes.indexOf(n[r])) {
          s = this.body.nodes[n[r]];
          break;
        }

        if (t.controlEdge = {
          from: o,
          to: s ? s.id : void 0
        }, this.selectionHandler._generateClickEvent("controlNodeDragging", t, e), void 0 !== this.temporaryIds.nodes[0]) {
          var a = this.body.nodes[this.temporaryIds.nodes[0]];
          a.x = this.canvas._XconvertDOMtoCanvas(e.x), a.y = this.canvas._YconvertDOMtoCanvas(e.y), this.body.emitter.emit("_redraw");
        } else this.interactionHandler.onDrag(t);
      }
    }, {
      key: "_finishConnect",
      value: function (t) {
        var e = this.body.functions.getPointer(t.center),
            i = this.selectionHandler._pointerToPositionObject(e),
            o = void 0;

        void 0 !== this.temporaryIds.edges[0] && (o = this.body.edges[this.temporaryIds.edges[0]].fromId);

        for (var n = this.selectionHandler._getAllNodesOverlappingWith(i), s = void 0, r = n.length - 1; r >= 0; r--) if (-1 === this.temporaryIds.nodes.indexOf(n[r])) {
          s = this.body.nodes[n[r]];
          break;
        }

        this._cleanupTemporaryNodesAndEdges(), void 0 !== s && (!0 === s.isCluster ? alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError) : void 0 !== this.body.nodes[o] && void 0 !== this.body.nodes[s.id] && this._performAddEdge(o, s.id)), t.controlEdge = {
          from: o,
          to: s ? s.id : void 0
        }, this.selectionHandler._generateClickEvent("controlNodeDragEnd", t, e), this.body.emitter.emit("_redraw");
      }
    }, {
      key: "_dragStartEdge",
      value: function (t) {
        var e = this.lastTouch;

        this.selectionHandler._generateClickEvent("dragStart", t, e, void 0, !0);
      }
    }, {
      key: "_performAddNode",
      value: function (t) {
        var e = this,
            i = {
          id: uuid4(),
          x: t.pointer.canvas.x,
          y: t.pointer.canvas.y,
          label: "new"
        };

        if ("function" == typeof this.options.addNode) {
          if (2 !== this.options.addNode.length) throw this.showManipulatorToolbar(), new Error("The function for add does not support two arguments (data,callback)");
          this.options.addNode(i, function (t) {
            null != t && "addNode" === e.inMode && e.body.data.nodes.getDataSet().add(t), e.showManipulatorToolbar();
          });
        } else this.body.data.nodes.getDataSet().add(i), this.showManipulatorToolbar();
      }
    }, {
      key: "_performAddEdge",
      value: function (t, e) {
        var i = this,
            o = {
          from: t,
          to: e
        };

        if ("function" == typeof this.options.addEdge) {
          if (2 !== this.options.addEdge.length) throw new Error("The function for connect does not support two arguments (data,callback)");
          this.options.addEdge(o, function (t) {
            null != t && "addEdge" === i.inMode && (i.body.data.edges.getDataSet().add(t), i.selectionHandler.unselectAll(), i.showManipulatorToolbar());
          });
        } else this.body.data.edges.getDataSet().add(o), this.selectionHandler.unselectAll(), this.showManipulatorToolbar();
      }
    }, {
      key: "_performEditEdge",
      value: function (t, e) {
        var i = this,
            o = {
          id: this.edgeBeingEditedId,
          from: t,
          to: e,
          label: this.body.data.edges._data[this.edgeBeingEditedId].label
        },
            n = this.options.editEdge;

        if ("object" === un(n) && (n = n.editWithoutDrag), "function" == typeof n) {
          if (2 !== n.length) throw new Error("The function for edit does not support two arguments (data, callback)");
          n(o, function (t) {
            null == t || "editEdge" !== i.inMode ? (i.body.edges[o.id].updateEdgeType(), i.body.emitter.emit("_redraw"), i.showManipulatorToolbar()) : (i.body.data.edges.getDataSet().update(t), i.selectionHandler.unselectAll(), i.showManipulatorToolbar());
          });
        } else this.body.data.edges.getDataSet().update(o), this.selectionHandler.unselectAll(), this.showManipulatorToolbar();
      }
    }]), t;
  }(),
      Ul = {
    black: "#000000",
    navy: "#000080",
    darkblue: "#00008B",
    mediumblue: "#0000CD",
    blue: "#0000FF",
    darkgreen: "#006400",
    green: "#008000",
    teal: "#008080",
    darkcyan: "#008B8B",
    deepskyblue: "#00BFFF",
    darkturquoise: "#00CED1",
    mediumspringgreen: "#00FA9A",
    lime: "#00FF00",
    springgreen: "#00FF7F",
    aqua: "#00FFFF",
    cyan: "#00FFFF",
    midnightblue: "#191970",
    dodgerblue: "#1E90FF",
    lightseagreen: "#20B2AA",
    forestgreen: "#228B22",
    seagreen: "#2E8B57",
    darkslategray: "#2F4F4F",
    limegreen: "#32CD32",
    mediumseagreen: "#3CB371",
    turquoise: "#40E0D0",
    royalblue: "#4169E1",
    steelblue: "#4682B4",
    darkslateblue: "#483D8B",
    mediumturquoise: "#48D1CC",
    indigo: "#4B0082",
    darkolivegreen: "#556B2F",
    cadetblue: "#5F9EA0",
    cornflowerblue: "#6495ED",
    mediumaquamarine: "#66CDAA",
    dimgray: "#696969",
    slateblue: "#6A5ACD",
    olivedrab: "#6B8E23",
    slategray: "#708090",
    lightslategray: "#778899",
    mediumslateblue: "#7B68EE",
    lawngreen: "#7CFC00",
    chartreuse: "#7FFF00",
    aquamarine: "#7FFFD4",
    maroon: "#800000",
    purple: "#800080",
    olive: "#808000",
    gray: "#808080",
    skyblue: "#87CEEB",
    lightskyblue: "#87CEFA",
    blueviolet: "#8A2BE2",
    darkred: "#8B0000",
    darkmagenta: "#8B008B",
    saddlebrown: "#8B4513",
    darkseagreen: "#8FBC8F",
    lightgreen: "#90EE90",
    mediumpurple: "#9370D8",
    darkviolet: "#9400D3",
    palegreen: "#98FB98",
    darkorchid: "#9932CC",
    yellowgreen: "#9ACD32",
    sienna: "#A0522D",
    brown: "#A52A2A",
    darkgray: "#A9A9A9",
    lightblue: "#ADD8E6",
    greenyellow: "#ADFF2F",
    paleturquoise: "#AFEEEE",
    lightsteelblue: "#B0C4DE",
    powderblue: "#B0E0E6",
    firebrick: "#B22222",
    darkgoldenrod: "#B8860B",
    mediumorchid: "#BA55D3",
    rosybrown: "#BC8F8F",
    darkkhaki: "#BDB76B",
    silver: "#C0C0C0",
    mediumvioletred: "#C71585",
    indianred: "#CD5C5C",
    peru: "#CD853F",
    chocolate: "#D2691E",
    tan: "#D2B48C",
    lightgrey: "#D3D3D3",
    palevioletred: "#D87093",
    thistle: "#D8BFD8",
    orchid: "#DA70D6",
    goldenrod: "#DAA520",
    crimson: "#DC143C",
    gainsboro: "#DCDCDC",
    plum: "#DDA0DD",
    burlywood: "#DEB887",
    lightcyan: "#E0FFFF",
    lavender: "#E6E6FA",
    darksalmon: "#E9967A",
    violet: "#EE82EE",
    palegoldenrod: "#EEE8AA",
    lightcoral: "#F08080",
    khaki: "#F0E68C",
    aliceblue: "#F0F8FF",
    honeydew: "#F0FFF0",
    azure: "#F0FFFF",
    sandybrown: "#F4A460",
    wheat: "#F5DEB3",
    beige: "#F5F5DC",
    whitesmoke: "#F5F5F5",
    mintcream: "#F5FFFA",
    ghostwhite: "#F8F8FF",
    salmon: "#FA8072",
    antiquewhite: "#FAEBD7",
    linen: "#FAF0E6",
    lightgoldenrodyellow: "#FAFAD2",
    oldlace: "#FDF5E6",
    red: "#FF0000",
    fuchsia: "#FF00FF",
    magenta: "#FF00FF",
    deeppink: "#FF1493",
    orangered: "#FF4500",
    tomato: "#FF6347",
    hotpink: "#FF69B4",
    coral: "#FF7F50",
    darkorange: "#FF8C00",
    lightsalmon: "#FFA07A",
    orange: "#FFA500",
    lightpink: "#FFB6C1",
    pink: "#FFC0CB",
    gold: "#FFD700",
    peachpuff: "#FFDAB9",
    navajowhite: "#FFDEAD",
    moccasin: "#FFE4B5",
    bisque: "#FFE4C4",
    mistyrose: "#FFE4E1",
    blanchedalmond: "#FFEBCD",
    papayawhip: "#FFEFD5",
    lavenderblush: "#FFF0F5",
    seashell: "#FFF5EE",
    cornsilk: "#FFF8DC",
    lemonchiffon: "#FFFACD",
    floralwhite: "#FFFAF0",
    snow: "#FFFAFA",
    yellow: "#FFFF00",
    lightyellow: "#FFFFE0",
    ivory: "#FFFFF0",
    white: "#FFFFFF"
  },
      Yl = function () {
    function t() {
      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
      pn(this, t), this.pixelRatio = e, this.generated = !1, this.centerCoordinates = {
        x: 144.5,
        y: 144.5
      }, this.r = 289 * .49, this.color = {
        r: 255,
        g: 255,
        b: 255,
        a: 1
      }, this.hueCircle = void 0, this.initialColor = {
        r: 255,
        g: 255,
        b: 255,
        a: 1
      }, this.previousColor = void 0, this.applied = !1, this.updateCallback = function () {}, this.closeCallback = function () {}, this._create();
    }

    return vn(t, [{
      key: "insertTo",
      value: function (t) {
        void 0 !== this.hammer && (this.hammer.destroy(), this.hammer = void 0), this.container = t, this.container.appendChild(this.frame), this._bindHammer(), this._setSize();
      }
    }, {
      key: "setUpdateCallback",
      value: function (t) {
        if ("function" != typeof t) throw new Error("Function attempted to set as colorPicker update callback is not a function.");
        this.updateCallback = t;
      }
    }, {
      key: "setCloseCallback",
      value: function (t) {
        if ("function" != typeof t) throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
        this.closeCallback = t;
      }
    }, {
      key: "_isColorString",
      value: function (t) {
        if ("string" == typeof t) return Ul[t];
      }
    }, {
      key: "setColor",
      value: function (t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];

        if ("none" !== t) {
          var i,
              o = this._isColorString(t);

          if (void 0 !== o && (t = o), !0 === isString(t)) {
            if (!0 === isValidRGB(t)) {
              var n = t.substr(4).substr(0, t.length - 5).split(",");
              i = {
                r: n[0],
                g: n[1],
                b: n[2],
                a: 1
              };
            } else if (!0 === isValidRGBA(t)) {
              var s = t.substr(5).substr(0, t.length - 6).split(",");
              i = {
                r: s[0],
                g: s[1],
                b: s[2],
                a: s[3]
              };
            } else if (!0 === isValidHex(t)) {
              var r = hexToRGB(t);
              i = {
                r: r.r,
                g: r.g,
                b: r.b,
                a: 1
              };
            }
          } else if (t instanceof Object && void 0 !== t.r && void 0 !== t.g && void 0 !== t.b) {
            var a = void 0 !== t.a ? t.a : "1.0";
            i = {
              r: t.r,
              g: t.g,
              b: t.b,
              a: a
            };
          }

          if (void 0 === i) throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + JSON.stringify(t));

          this._setColor(i, e);
        }
      }
    }, {
      key: "show",
      value: function () {
        void 0 !== this.closeCallback && (this.closeCallback(), this.closeCallback = void 0), this.applied = !1, this.frame.style.display = "block", this._generateHueCircle();
      }
    }, {
      key: "_hide",
      value: function () {
        var t = this,
            i = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        !0 === i && (this.previousColor = extend({}, this.color)), !0 === this.applied && this.updateCallback(this.initialColor), this.frame.style.display = "none", setTimeout(function () {
          void 0 !== t.closeCallback && (t.closeCallback(), t.closeCallback = void 0);
        }, 0);
      }
    }, {
      key: "_save",
      value: function () {
        this.updateCallback(this.color), this.applied = !1, this._hide();
      }
    }, {
      key: "_apply",
      value: function () {
        this.applied = !0, this.updateCallback(this.color), this._updatePicker(this.color);
      }
    }, {
      key: "_loadLast",
      value: function () {
        void 0 !== this.previousColor ? this.setColor(this.previousColor, !1) : alert("There is no last color to load...");
      }
    }, {
      key: "_setColor",
      value: function (t) {
        var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        !0 === i && (this.initialColor = extend({}, t)), this.color = t;
        var o = RGBToHSV(t.r, t.g, t.b),
            n = 2 * Math.PI,
            s = this.r * o.s,
            r = this.centerCoordinates.x + s * Math.sin(n * o.h),
            a = this.centerCoordinates.y + s * Math.cos(n * o.h);
        this.colorPickerSelector.style.left = r - .5 * this.colorPickerSelector.clientWidth + "px", this.colorPickerSelector.style.top = a - .5 * this.colorPickerSelector.clientHeight + "px", this._updatePicker(t);
      }
    }, {
      key: "_setOpacity",
      value: function (t) {
        this.color.a = t / 100, this._updatePicker(this.color);
      }
    }, {
      key: "_setBrightness",
      value: function (t) {
        var e = RGBToHSV(this.color.r, this.color.g, this.color.b);
        e.v = t / 100;
        var i = HSVToRGB(e.h, e.s, e.v);
        i.a = this.color.a, this.color = i, this._updatePicker();
      }
    }, {
      key: "_updatePicker",
      value: function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.color,
            e = RGBToHSV(t.r, t.g, t.b),
            i = this.colorPickerCanvas.getContext("2d");
        void 0 === this.pixelRation && (this.pixelRatio = (window.devicePixelRatio || 1) / (i.webkitBackingStorePixelRatio || i.mozBackingStorePixelRatio || i.msBackingStorePixelRatio || i.oBackingStorePixelRatio || i.backingStorePixelRatio || 1)), i.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
        var o = this.colorPickerCanvas.clientWidth,
            n = this.colorPickerCanvas.clientHeight;
        i.clearRect(0, 0, o, n), i.putImageData(this.hueCircle, 0, 0), i.fillStyle = "rgba(0,0,0," + (1 - e.v) + ")", i.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r), i.fill(), this.brightnessRange.value = 100 * e.v, this.opacityRange.value = 100 * t.a, this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")", this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
      }
    }, {
      key: "_setSize",
      value: function () {
        this.colorPickerCanvas.style.width = "100%", this.colorPickerCanvas.style.height = "100%", this.colorPickerCanvas.width = 289 * this.pixelRatio, this.colorPickerCanvas.height = 289 * this.pixelRatio;
      }
    }, {
      key: "_create",
      value: function () {
        if (this.frame = document.createElement("div"), this.frame.className = "vis-color-picker", this.colorPickerDiv = document.createElement("div"), this.colorPickerSelector = document.createElement("div"), this.colorPickerSelector.className = "vis-selector", this.colorPickerDiv.appendChild(this.colorPickerSelector), this.colorPickerCanvas = document.createElement("canvas"), this.colorPickerDiv.appendChild(this.colorPickerCanvas), this.colorPickerCanvas.getContext) {
          var t = this.colorPickerCanvas.getContext("2d");
          this.pixelRatio = (window.devicePixelRatio || 1) / (t.webkitBackingStorePixelRatio || t.mozBackingStorePixelRatio || t.msBackingStorePixelRatio || t.oBackingStorePixelRatio || t.backingStorePixelRatio || 1), this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
        } else {
          var e = document.createElement("DIV");
          e.style.color = "red", e.style.fontWeight = "bold", e.style.padding = "10px", e.innerHTML = "Error: your browser does not support HTML canvas", this.colorPickerCanvas.appendChild(e);
        }

        this.colorPickerDiv.className = "vis-color", this.opacityDiv = document.createElement("div"), this.opacityDiv.className = "vis-opacity", this.brightnessDiv = document.createElement("div"), this.brightnessDiv.className = "vis-brightness", this.arrowDiv = document.createElement("div"), this.arrowDiv.className = "vis-arrow", this.opacityRange = document.createElement("input");

        try {
          this.opacityRange.type = "range", this.opacityRange.min = "0", this.opacityRange.max = "100";
        } catch (t) {}

        this.opacityRange.value = "100", this.opacityRange.className = "vis-range", this.brightnessRange = document.createElement("input");

        try {
          this.brightnessRange.type = "range", this.brightnessRange.min = "0", this.brightnessRange.max = "100";
        } catch (t) {}

        this.brightnessRange.value = "100", this.brightnessRange.className = "vis-range", this.opacityDiv.appendChild(this.opacityRange), this.brightnessDiv.appendChild(this.brightnessRange);
        var i = this;
        this.opacityRange.onchange = function () {
          i._setOpacity(this.value);
        }, this.opacityRange.oninput = function () {
          i._setOpacity(this.value);
        }, this.brightnessRange.onchange = function () {
          i._setBrightness(this.value);
        }, this.brightnessRange.oninput = function () {
          i._setBrightness(this.value);
        }, this.brightnessLabel = document.createElement("div"), this.brightnessLabel.className = "vis-label vis-brightness", this.brightnessLabel.innerHTML = "brightness:", this.opacityLabel = document.createElement("div"), this.opacityLabel.className = "vis-label vis-opacity", this.opacityLabel.innerHTML = "opacity:", this.newColorDiv = document.createElement("div"), this.newColorDiv.className = "vis-new-color", this.newColorDiv.innerHTML = "new", this.initialColorDiv = document.createElement("div"), this.initialColorDiv.className = "vis-initial-color", this.initialColorDiv.innerHTML = "initial", this.cancelButton = document.createElement("div"), this.cancelButton.className = "vis-button vis-cancel", this.cancelButton.innerHTML = "cancel", this.cancelButton.onclick = this._hide.bind(this, !1), this.applyButton = document.createElement("div"), this.applyButton.className = "vis-button vis-apply", this.applyButton.innerHTML = "apply", this.applyButton.onclick = this._apply.bind(this), this.saveButton = document.createElement("div"), this.saveButton.className = "vis-button vis-save", this.saveButton.innerHTML = "save", this.saveButton.onclick = this._save.bind(this), this.loadButton = document.createElement("div"), this.loadButton.className = "vis-button vis-load", this.loadButton.innerHTML = "load last", this.loadButton.onclick = this._loadLast.bind(this), this.frame.appendChild(this.colorPickerDiv), this.frame.appendChild(this.arrowDiv), this.frame.appendChild(this.brightnessLabel), this.frame.appendChild(this.brightnessDiv), this.frame.appendChild(this.opacityLabel), this.frame.appendChild(this.opacityDiv), this.frame.appendChild(this.newColorDiv), this.frame.appendChild(this.initialColorDiv), this.frame.appendChild(this.cancelButton), this.frame.appendChild(this.applyButton), this.frame.appendChild(this.saveButton), this.frame.appendChild(this.loadButton);
      }
    }, {
      key: "_bindHammer",
      value: function () {
        var t = this;
        this.drag = {}, this.pinch = {}, this.hammer = new Pr(this.colorPickerCanvas), this.hammer.get("pinch").set({
          enable: !0
        }), pd.onTouch(this.hammer, function (e) {
          t._moveSelector(e);
        }), this.hammer.on("tap", function (e) {
          t._moveSelector(e);
        }), this.hammer.on("panstart", function (e) {
          t._moveSelector(e);
        }), this.hammer.on("panmove", function (e) {
          t._moveSelector(e);
        }), this.hammer.on("panend", function (e) {
          t._moveSelector(e);
        });
      }
    }, {
      key: "_generateHueCircle",
      value: function () {
        if (!1 === this.generated) {
          var t = this.colorPickerCanvas.getContext("2d");
          void 0 === this.pixelRation && (this.pixelRatio = (window.devicePixelRatio || 1) / (t.webkitBackingStorePixelRatio || t.mozBackingStorePixelRatio || t.msBackingStorePixelRatio || t.oBackingStorePixelRatio || t.backingStorePixelRatio || 1)), t.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
          var e,
              i,
              o,
              n,
              s = this.colorPickerCanvas.clientWidth,
              r = this.colorPickerCanvas.clientHeight;
          t.clearRect(0, 0, s, r), this.centerCoordinates = {
            x: .5 * s,
            y: .5 * r
          }, this.r = .49 * s;
          var a,
              h = 2 * Math.PI / 360,
              d = 1 / this.r;

          for (o = 0; o < 360; o++) for (n = 0; n < this.r; n++) e = this.centerCoordinates.x + n * Math.sin(h * o), i = this.centerCoordinates.y + n * Math.cos(h * o), a = HSVToRGB(o * (1 / 360), n * d, 1), t.fillStyle = "rgb(" + a.r + "," + a.g + "," + a.b + ")", t.fillRect(e - .5, i - .5, 2, 2);

          t.strokeStyle = "rgba(0,0,0,1)", t.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r), t.stroke(), this.hueCircle = t.getImageData(0, 0, s, r);
        }

        this.generated = !0;
      }
    }, {
      key: "_moveSelector",
      value: function (t) {
        var e = this.colorPickerDiv.getBoundingClientRect(),
            i = t.center.x - e.left,
            o = t.center.y - e.top,
            n = .5 * this.colorPickerDiv.clientHeight,
            s = .5 * this.colorPickerDiv.clientWidth,
            r = i - s,
            a = o - n,
            h = Math.atan2(r, a),
            d = .98 * Math.min(Math.sqrt(r * r + a * a), s),
            l = Math.cos(h) * d + n,
            c = Math.sin(h) * d + s;
        this.colorPickerSelector.style.top = l - .5 * this.colorPickerSelector.clientHeight + "px", this.colorPickerSelector.style.left = c - .5 * this.colorPickerSelector.clientWidth + "px";
        var u = h / (2 * Math.PI);
        u = u < 0 ? u + 1 : u;
        var p = d / this.r,
            f = RGBToHSV(this.color.r, this.color.g, this.color.b);
        f.h = u, f.s = p;
        var v = HSVToRGB(f.h, f.s, f.v);
        v.a = this.color.a, this.color = v, this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")", this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
      }
    }]), t;
  }(),
      Xl = function () {
    function t(i, o, n) {
      var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;
      pn(this, t), this.parent = i, this.changedOptions = [], this.container = o, this.allowCreation = !1, this.options = {}, this.initialized = !1, this.popupCounter = 0, this.defaultOptions = {
        enabled: !1,
        filter: !0,
        container: void 0,
        showButton: !0
      }, extend(this.options, this.defaultOptions), this.configureOptions = n, this.moduleOptions = {}, this.domElements = [], this.popupDiv = {}, this.popupLimit = 5, this.popupHistory = {}, this.colorPicker = new Yl(s), this.wrapper = void 0;
    }

    return vn(t, [{
      key: "setOptions",
      value: function (t) {
        if (void 0 !== t) {
          this.popupHistory = {}, this._removePopup();
          var e = !0;
          if ("string" == typeof t) this.options.filter = t;else if (t instanceof Array) this.options.filter = t.join();else if ("object" === un(t)) {
            if (null == t) throw new TypeError("options cannot be null");
            void 0 !== t.container && (this.options.container = t.container), void 0 !== t.filter && (this.options.filter = t.filter), void 0 !== t.showButton && (this.options.showButton = t.showButton), void 0 !== t.enabled && (e = t.enabled);
          } else "boolean" == typeof t ? (this.options.filter = !0, e = t) : "function" == typeof t && (this.options.filter = t, e = !0);
          !1 === this.options.filter && (e = !1), this.options.enabled = e;
        }

        this._clean();
      }
    }, {
      key: "setModuleOptions",
      value: function (t) {
        this.moduleOptions = t, !0 === this.options.enabled && (this._clean(), void 0 !== this.options.container && (this.container = this.options.container), this._create());
      }
    }, {
      key: "_create",
      value: function () {
        this._clean(), this.changedOptions = [];
        var t = this.options.filter,
            e = 0,
            i = !1;

        for (var o in this.configureOptions) this.configureOptions.hasOwnProperty(o) && (this.allowCreation = !1, i = !1, "function" == typeof t ? i = (i = t(o, [])) || this._handleObject(this.configureOptions[o], [o], !0) : !0 !== t && -1 === t.indexOf(o) || (i = !0), !1 !== i && (this.allowCreation = !0, e > 0 && this._makeItem([]), this._makeHeader(o), this._handleObject(this.configureOptions[o], [o])), e++);

        this._makeButton(), this._push();
      }
    }, {
      key: "_push",
      value: function () {
        this.wrapper = document.createElement("div"), this.wrapper.className = "vis-configuration-wrapper", this.container.appendChild(this.wrapper);

        for (var t = 0; t < this.domElements.length; t++) this.wrapper.appendChild(this.domElements[t]);

        this._showPopupIfNeeded();
      }
    }, {
      key: "_clean",
      value: function () {
        for (var t = 0; t < this.domElements.length; t++) this.wrapper.removeChild(this.domElements[t]);

        void 0 !== this.wrapper && (this.container.removeChild(this.wrapper), this.wrapper = void 0), this.domElements = [], this._removePopup();
      }
    }, {
      key: "_getValue",
      value: function (t) {
        for (var e = this.moduleOptions, i = 0; i < t.length; i++) {
          if (void 0 === e[t[i]]) {
            e = void 0;
            break;
          }

          e = e[t[i]];
        }

        return e;
      }
    }, {
      key: "_makeItem",
      value: function (t) {
        if (!0 === this.allowCreation) {
          var e = document.createElement("div");
          e.className = "vis-configuration vis-config-item vis-config-s" + t.length;

          for (var i = arguments.length, o = new Array(i > 1 ? i - 1 : 0), n = 1; n < i; n++) o[n - 1] = arguments[n];

          return o.forEach(function (t) {
            e.appendChild(t);
          }), this.domElements.push(e), this.domElements.length;
        }

        return 0;
      }
    }, {
      key: "_makeHeader",
      value: function (t) {
        var e = document.createElement("div");
        e.className = "vis-configuration vis-config-header", e.innerHTML = t, this._makeItem([], e);
      }
    }, {
      key: "_makeLabel",
      value: function (t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            o = document.createElement("div");
        return o.className = "vis-configuration vis-config-label vis-config-s" + e.length, o.innerHTML = !0 === i ? "<i><b>" + t + ":</b></i>" : t + ":", o;
      }
    }, {
      key: "_makeDropdown",
      value: function (t, e, i) {
        var o = document.createElement("select");
        o.className = "vis-configuration vis-config-select";
        var n = 0;
        void 0 !== e && -1 !== t.indexOf(e) && (n = t.indexOf(e));

        for (var s = 0; s < t.length; s++) {
          var r = document.createElement("option");
          r.value = t[s], s === n && (r.selected = "selected"), r.innerHTML = t[s], o.appendChild(r);
        }

        var a = this;

        o.onchange = function () {
          a._update(this.value, i);
        };

        var h = this._makeLabel(i[i.length - 1], i);

        this._makeItem(i, h, o);
      }
    }, {
      key: "_makeRange",
      value: function (t, e, i) {
        var o = t[0],
            n = t[1],
            s = t[2],
            r = t[3],
            a = document.createElement("input");
        a.className = "vis-configuration vis-config-range";

        try {
          a.type = "range", a.min = n, a.max = s;
        } catch (t) {}

        a.step = r;
        var h = "",
            d = 0;

        if (void 0 !== e) {
          e < 0 && 1.2 * e < n ? (a.min = Math.ceil(1.2 * e), d = a.min, h = "range increased") : e / 1.2 < n && (a.min = Math.ceil(e / 1.2), d = a.min, h = "range increased"), 1.2 * e > s && 1 !== s && (a.max = Math.ceil(1.2 * e), d = a.max, h = "range increased"), a.value = e;
        } else a.value = o;

        var l = document.createElement("input");
        l.className = "vis-configuration vis-config-rangeinput", l.value = a.value;
        var c = this;
        a.onchange = function () {
          l.value = this.value, c._update(Number(this.value), i);
        }, a.oninput = function () {
          l.value = this.value;
        };

        var u = this._makeLabel(i[i.length - 1], i),
            p = this._makeItem(i, u, a, l);

        "" !== h && this.popupHistory[p] !== d && (this.popupHistory[p] = d, this._setupPopup(h, p));
      }
    }, {
      key: "_makeButton",
      value: function () {
        var t = this;

        if (!0 === this.options.showButton) {
          var e = document.createElement("div");
          e.className = "vis-configuration vis-config-button", e.innerHTML = "generate options", e.onclick = function () {
            t._printOptions();
          }, e.onmouseover = function () {
            e.className = "vis-configuration vis-config-button hover";
          }, e.onmouseout = function () {
            e.className = "vis-configuration vis-config-button";
          }, this.optionsContainer = document.createElement("div"), this.optionsContainer.className = "vis-configuration vis-config-option-container", this.domElements.push(this.optionsContainer), this.domElements.push(e);
        }
      }
    }, {
      key: "_setupPopup",
      value: function (t, e) {
        var i = this;

        if (!0 === this.initialized && !0 === this.allowCreation && this.popupCounter < this.popupLimit) {
          var o = document.createElement("div");
          o.id = "vis-configuration-popup", o.className = "vis-configuration-popup", o.innerHTML = t, o.onclick = function () {
            i._removePopup();
          }, this.popupCounter += 1, this.popupDiv = {
            html: o,
            index: e
          };
        }
      }
    }, {
      key: "_removePopup",
      value: function () {
        void 0 !== this.popupDiv.html && (this.popupDiv.html.parentNode.removeChild(this.popupDiv.html), clearTimeout(this.popupDiv.hideTimeout), clearTimeout(this.popupDiv.deleteTimeout), this.popupDiv = {});
      }
    }, {
      key: "_showPopupIfNeeded",
      value: function () {
        var t = this;

        if (void 0 !== this.popupDiv.html) {
          var e = this.domElements[this.popupDiv.index].getBoundingClientRect();
          this.popupDiv.html.style.left = e.left + "px", this.popupDiv.html.style.top = e.top - 30 + "px", document.body.appendChild(this.popupDiv.html), this.popupDiv.hideTimeout = setTimeout(function () {
            t.popupDiv.html.style.opacity = 0;
          }, 1500), this.popupDiv.deleteTimeout = setTimeout(function () {
            t._removePopup();
          }, 1800);
        }
      }
    }, {
      key: "_makeCheckbox",
      value: function (t, e, i) {
        var o = document.createElement("input");
        o.type = "checkbox", o.className = "vis-configuration vis-config-checkbox", o.checked = t, void 0 !== e && (o.checked = e, e !== t && ("object" === un(t) ? e !== t.enabled && this.changedOptions.push({
          path: i,
          value: e
        }) : this.changedOptions.push({
          path: i,
          value: e
        })));
        var n = this;

        o.onchange = function () {
          n._update(this.checked, i);
        };

        var s = this._makeLabel(i[i.length - 1], i);

        this._makeItem(i, s, o);
      }
    }, {
      key: "_makeTextInput",
      value: function (t, e, i) {
        var o = document.createElement("input");
        o.type = "text", o.className = "vis-configuration vis-config-text", o.value = e, e !== t && this.changedOptions.push({
          path: i,
          value: e
        });
        var n = this;

        o.onchange = function () {
          n._update(this.value, i);
        };

        var s = this._makeLabel(i[i.length - 1], i);

        this._makeItem(i, s, o);
      }
    }, {
      key: "_makeColorField",
      value: function (t, e, i) {
        var o = this,
            n = t[1],
            s = document.createElement("div");
        "none" !== (e = void 0 === e ? n : e) ? (s.className = "vis-configuration vis-config-colorBlock", s.style.backgroundColor = e) : s.className = "vis-configuration vis-config-colorBlock none", e = void 0 === e ? n : e, s.onclick = function () {
          o._showColorPicker(e, s, i);
        };

        var r = this._makeLabel(i[i.length - 1], i);

        this._makeItem(i, r, s);
      }
    }, {
      key: "_showColorPicker",
      value: function (t, e, i) {
        var o = this;
        e.onclick = function () {}, this.colorPicker.insertTo(e), this.colorPicker.show(), this.colorPicker.setColor(t), this.colorPicker.setUpdateCallback(function (t) {
          var n = "rgba(" + t.r + "," + t.g + "," + t.b + "," + t.a + ")";
          e.style.backgroundColor = n, o._update(n, i);
        }), this.colorPicker.setCloseCallback(function () {
          e.onclick = function () {
            o._showColorPicker(t, e, i);
          };
        });
      }
    }, {
      key: "_handleObject",
      value: function (t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
            i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            o = !1,
            n = this.options.filter,
            s = !1;

        for (var a in t) if (t.hasOwnProperty(a)) {
          o = !0;
          var h = t[a],
              d = copyAndExtendArray(e, a);

          if ("function" == typeof n && !1 === (o = n(a, e)) && !(h instanceof Array) && "string" != typeof h && "boolean" != typeof h && h instanceof Object && (this.allowCreation = !1, o = this._handleObject(h, d, !0), this.allowCreation = !1 === i), !1 !== o) {
            s = !0;

            var l = this._getValue(d);

            if (h instanceof Array) this._handleArray(h, l, d);else if ("string" == typeof h) this._makeTextInput(h, l, d);else if ("boolean" == typeof h) this._makeCheckbox(h, l, d);else if (h instanceof Object) {
              var c = !0;
              if (-1 !== e.indexOf("physics") && this.moduleOptions.physics.solver !== a && (c = !1), !0 === c) if (void 0 !== h.enabled) {
                var u = copyAndExtendArray(d, "enabled"),
                    p = this._getValue(u);

                if (!0 === p) {
                  var f = this._makeLabel(a, d, !0);

                  this._makeItem(d, f), s = this._handleObject(h, d) || s;
                } else this._makeCheckbox(h, p, d);
              } else {
                var v = this._makeLabel(a, d, !0);

                this._makeItem(d, v), s = this._handleObject(h, d) || s;
              }
            } else console.error("dont know how to handle", h, a, d);
          }
        }

        return s;
      }
    }, {
      key: "_handleArray",
      value: function (t, e, i) {
        "string" == typeof t[0] && "color" === t[0] ? (this._makeColorField(t, e, i), t[1] !== e && this.changedOptions.push({
          path: i,
          value: e
        })) : "string" == typeof t[0] ? (this._makeDropdown(t, e, i), t[0] !== e && this.changedOptions.push({
          path: i,
          value: e
        })) : "number" == typeof t[0] && (this._makeRange(t, e, i), t[0] !== e && this.changedOptions.push({
          path: i,
          value: Number(e)
        }));
      }
    }, {
      key: "_update",
      value: function (t, e) {
        var i = this._constructOptions(t, e);

        this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit && this.parent.body.emitter.emit("configChange", i), this.initialized = !0, this.parent.setOptions(i);
      }
    }, {
      key: "_constructOptions",
      value: function (t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
            o = i;
        t = "false" !== (t = "true" === t || t) && t;

        for (var n = 0; n < e.length; n++) "global" !== e[n] && (void 0 === o[e[n]] && (o[e[n]] = {}), n !== e.length - 1 ? o = o[e[n]] : o[e[n]] = t);

        return i;
      }
    }, {
      key: "_printOptions",
      value: function () {
        var t = this.getOptions();
        this.optionsContainer.innerHTML = "<pre>var options = " + JSON.stringify(t, null, 2) + "</pre>";
      }
    }, {
      key: "getOptions",
      value: function () {
        for (var t = {}, e = 0; e < this.changedOptions.length; e++) this._constructOptions(this.changedOptions[e].value, this.changedOptions[e].path, t);

        return t;
      }
    }]), t;
  }(),
      Gl = "string",
      Kl = "boolean",
      $l = "number",
      Zl = "object",
      Jl = ["arrow", "bar", "box", "circle", "crow", "curve", "diamond", "image", "inv_curve", "inv_triangle", "triangle", "vee"],
      Ql = {
    configure: {
      enabled: {
        boolean: Kl
      },
      filter: {
        boolean: Kl,
        string: Gl,
        array: "array",
        function: "function"
      },
      container: {
        dom: "dom"
      },
      showButton: {
        boolean: Kl
      },
      __type__: {
        object: Zl,
        boolean: Kl,
        string: Gl,
        array: "array",
        function: "function"
      }
    },
    edges: {
      arrows: {
        to: {
          enabled: {
            boolean: Kl
          },
          scaleFactor: {
            number: $l
          },
          type: {
            string: Jl
          },
          imageHeight: {
            number: $l
          },
          imageWidth: {
            number: $l
          },
          src: {
            string: Gl
          },
          __type__: {
            object: Zl,
            boolean: Kl
          }
        },
        middle: {
          enabled: {
            boolean: Kl
          },
          scaleFactor: {
            number: $l
          },
          type: {
            string: Jl
          },
          imageWidth: {
            number: $l
          },
          imageHeight: {
            number: $l
          },
          src: {
            string: Gl
          },
          __type__: {
            object: Zl,
            boolean: Kl
          }
        },
        from: {
          enabled: {
            boolean: Kl
          },
          scaleFactor: {
            number: $l
          },
          type: {
            string: Jl
          },
          imageWidth: {
            number: $l
          },
          imageHeight: {
            number: $l
          },
          src: {
            string: Gl
          },
          __type__: {
            object: Zl,
            boolean: Kl
          }
        },
        __type__: {
          string: ["from", "to", "middle"],
          object: Zl
        }
      },
      arrowStrikethrough: {
        boolean: Kl
      },
      background: {
        enabled: {
          boolean: Kl
        },
        color: {
          string: Gl
        },
        size: {
          number: $l
        },
        dashes: {
          boolean: Kl,
          array: "array"
        },
        __type__: {
          object: Zl,
          boolean: Kl
        }
      },
      chosen: {
        label: {
          boolean: Kl,
          function: "function"
        },
        edge: {
          boolean: Kl,
          function: "function"
        },
        __type__: {
          object: Zl,
          boolean: Kl
        }
      },
      color: {
        color: {
          string: Gl
        },
        highlight: {
          string: Gl
        },
        hover: {
          string: Gl
        },
        inherit: {
          string: ["from", "to", "both"],
          boolean: Kl
        },
        opacity: {
          number: $l
        },
        __type__: {
          object: Zl,
          string: Gl
        }
      },
      dashes: {
        boolean: Kl,
        array: "array"
      },
      font: {
        color: {
          string: Gl
        },
        size: {
          number: $l
        },
        face: {
          string: Gl
        },
        background: {
          string: Gl
        },
        strokeWidth: {
          number: $l
        },
        strokeColor: {
          string: Gl
        },
        align: {
          string: ["horizontal", "top", "middle", "bottom"]
        },
        vadjust: {
          number: $l
        },
        multi: {
          boolean: Kl,
          string: Gl
        },
        bold: {
          color: {
            string: Gl
          },
          size: {
            number: $l
          },
          face: {
            string: Gl
          },
          mod: {
            string: Gl
          },
          vadjust: {
            number: $l
          },
          __type__: {
            object: Zl,
            string: Gl
          }
        },
        boldital: {
          color: {
            string: Gl
          },
          size: {
            number: $l
          },
          face: {
            string: Gl
          },
          mod: {
            string: Gl
          },
          vadjust: {
            number: $l
          },
          __type__: {
            object: Zl,
            string: Gl
          }
        },
        ital: {
          color: {
            string: Gl
          },
          size: {
            number: $l
          },
          face: {
            string: Gl
          },
          mod: {
            string: Gl
          },
          vadjust: {
            number: $l
          },
          __type__: {
            object: Zl,
            string: Gl
          }
        },
        mono: {
          color: {
            string: Gl
          },
          size: {
            number: $l
          },
          face: {
            string: Gl
          },
          mod: {
            string: Gl
          },
          vadjust: {
            number: $l
          },
          __type__: {
            object: Zl,
            string: Gl
          }
        },
        __type__: {
          object: Zl,
          string: Gl
        }
      },
      hidden: {
        boolean: Kl
      },
      hoverWidth: {
        function: "function",
        number: $l
      },
      label: {
        string: Gl,
        undefined: "undefined"
      },
      labelHighlightBold: {
        boolean: Kl
      },
      length: {
        number: $l,
        undefined: "undefined"
      },
      physics: {
        boolean: Kl
      },
      scaling: {
        min: {
          number: $l
        },
        max: {
          number: $l
        },
        label: {
          enabled: {
            boolean: Kl
          },
          min: {
            number: $l
          },
          max: {
            number: $l
          },
          maxVisible: {
            number: $l
          },
          drawThreshold: {
            number: $l
          },
          __type__: {
            object: Zl,
            boolean: Kl
          }
        },
        customScalingFunction: {
          function: "function"
        },
        __type__: {
          object: Zl
        }
      },
      selectionWidth: {
        function: "function",
        number: $l
      },
      selfReferenceSize: {
        number: $l
      },
      shadow: {
        enabled: {
          boolean: Kl
        },
        color: {
          string: Gl
        },
        size: {
          number: $l
        },
        x: {
          number: $l
        },
        y: {
          number: $l
        },
        __type__: {
          object: Zl,
          boolean: Kl
        }
      },
      smooth: {
        enabled: {
          boolean: Kl
        },
        type: {
          string: ["dynamic", "continuous", "discrete", "diagonalCross", "straightCross", "horizontal", "vertical", "curvedCW", "curvedCCW", "cubicBezier"]
        },
        roundness: {
          number: $l
        },
        forceDirection: {
          string: ["horizontal", "vertical", "none"],
          boolean: Kl
        },
        __type__: {
          object: Zl,
          boolean: Kl
        }
      },
      title: {
        string: Gl,
        undefined: "undefined"
      },
      width: {
        number: $l
      },
      widthConstraint: {
        maximum: {
          number: $l
        },
        __type__: {
          object: Zl,
          boolean: Kl,
          number: $l
        }
      },
      value: {
        number: $l,
        undefined: "undefined"
      },
      __type__: {
        object: Zl
      }
    },
    groups: {
      useDefaultGroups: {
        boolean: Kl
      },
      __any__: "get from nodes, will be overwritten below",
      __type__: {
        object: Zl
      }
    },
    interaction: {
      dragNodes: {
        boolean: Kl
      },
      dragView: {
        boolean: Kl
      },
      hideEdgesOnDrag: {
        boolean: Kl
      },
      hideEdgesOnZoom: {
        boolean: Kl
      },
      hideNodesOnDrag: {
        boolean: Kl
      },
      hover: {
        boolean: Kl
      },
      keyboard: {
        enabled: {
          boolean: Kl
        },
        speed: {
          x: {
            number: $l
          },
          y: {
            number: $l
          },
          zoom: {
            number: $l
          },
          __type__: {
            object: Zl
          }
        },
        bindToWindow: {
          boolean: Kl
        },
        __type__: {
          object: Zl,
          boolean: Kl
        }
      },
      multiselect: {
        boolean: Kl
      },
      navigationButtons: {
        boolean: Kl
      },
      selectable: {
        boolean: Kl
      },
      selectConnectedEdges: {
        boolean: Kl
      },
      hoverConnectedEdges: {
        boolean: Kl
      },
      tooltipDelay: {
        number: $l
      },
      zoomView: {
        boolean: Kl
      },
      zoomSpeed: {
        number: $l
      },
      __type__: {
        object: Zl
      }
    },
    layout: {
      randomSeed: {
        undefined: "undefined",
        number: $l
      },
      improvedLayout: {
        boolean: Kl
      },
      clusterThreshold: {
        number: $l
      },
      hierarchical: {
        enabled: {
          boolean: Kl
        },
        levelSeparation: {
          number: $l
        },
        nodeSpacing: {
          number: $l
        },
        treeSpacing: {
          number: $l
        },
        blockShifting: {
          boolean: Kl
        },
        edgeMinimization: {
          boolean: Kl
        },
        parentCentralization: {
          boolean: Kl
        },
        direction: {
          string: ["UD", "DU", "LR", "RL"]
        },
        sortMethod: {
          string: ["hubsize", "directed"]
        },
        shakeTowards: {
          string: ["leaves", "roots"]
        },
        __type__: {
          object: Zl,
          boolean: Kl
        }
      },
      __type__: {
        object: Zl
      }
    },
    manipulation: {
      enabled: {
        boolean: Kl
      },
      initiallyActive: {
        boolean: Kl
      },
      addNode: {
        boolean: Kl,
        function: "function"
      },
      addEdge: {
        boolean: Kl,
        function: "function"
      },
      editNode: {
        function: "function"
      },
      editEdge: {
        editWithoutDrag: {
          function: "function"
        },
        __type__: {
          object: Zl,
          boolean: Kl,
          function: "function"
        }
      },
      deleteNode: {
        boolean: Kl,
        function: "function"
      },
      deleteEdge: {
        boolean: Kl,
        function: "function"
      },
      controlNodeStyle: "get from nodes, will be overwritten below",
      __type__: {
        object: Zl,
        boolean: Kl
      }
    },
    nodes: {
      borderWidth: {
        number: $l
      },
      borderWidthSelected: {
        number: $l,
        undefined: "undefined"
      },
      brokenImage: {
        string: Gl,
        undefined: "undefined"
      },
      chosen: {
        label: {
          boolean: Kl,
          function: "function"
        },
        node: {
          boolean: Kl,
          function: "function"
        },
        __type__: {
          object: Zl,
          boolean: Kl
        }
      },
      color: {
        border: {
          string: Gl
        },
        background: {
          string: Gl
        },
        highlight: {
          border: {
            string: Gl
          },
          background: {
            string: Gl
          },
          __type__: {
            object: Zl,
            string: Gl
          }
        },
        hover: {
          border: {
            string: Gl
          },
          background: {
            string: Gl
          },
          __type__: {
            object: Zl,
            string: Gl
          }
        },
        __type__: {
          object: Zl,
          string: Gl
        }
      },
      fixed: {
        x: {
          boolean: Kl
        },
        y: {
          boolean: Kl
        },
        __type__: {
          object: Zl,
          boolean: Kl
        }
      },
      font: {
        align: {
          string: Gl
        },
        color: {
          string: Gl
        },
        size: {
          number: $l
        },
        face: {
          string: Gl
        },
        background: {
          string: Gl
        },
        strokeWidth: {
          number: $l
        },
        strokeColor: {
          string: Gl
        },
        vadjust: {
          number: $l
        },
        multi: {
          boolean: Kl,
          string: Gl
        },
        bold: {
          color: {
            string: Gl
          },
          size: {
            number: $l
          },
          face: {
            string: Gl
          },
          mod: {
            string: Gl
          },
          vadjust: {
            number: $l
          },
          __type__: {
            object: Zl,
            string: Gl
          }
        },
        boldital: {
          color: {
            string: Gl
          },
          size: {
            number: $l
          },
          face: {
            string: Gl
          },
          mod: {
            string: Gl
          },
          vadjust: {
            number: $l
          },
          __type__: {
            object: Zl,
            string: Gl
          }
        },
        ital: {
          color: {
            string: Gl
          },
          size: {
            number: $l
          },
          face: {
            string: Gl
          },
          mod: {
            string: Gl
          },
          vadjust: {
            number: $l
          },
          __type__: {
            object: Zl,
            string: Gl
          }
        },
        mono: {
          color: {
            string: Gl
          },
          size: {
            number: $l
          },
          face: {
            string: Gl
          },
          mod: {
            string: Gl
          },
          vadjust: {
            number: $l
          },
          __type__: {
            object: Zl,
            string: Gl
          }
        },
        __type__: {
          object: Zl,
          string: Gl
        }
      },
      group: {
        string: Gl,
        number: $l,
        undefined: "undefined"
      },
      heightConstraint: {
        minimum: {
          number: $l
        },
        valign: {
          string: Gl
        },
        __type__: {
          object: Zl,
          boolean: Kl,
          number: $l
        }
      },
      hidden: {
        boolean: Kl
      },
      icon: {
        face: {
          string: Gl
        },
        code: {
          string: Gl
        },
        size: {
          number: $l
        },
        color: {
          string: Gl
        },
        weight: {
          string: Gl,
          number: $l
        },
        __type__: {
          object: Zl
        }
      },
      id: {
        string: Gl,
        number: $l
      },
      image: {
        selected: {
          string: Gl,
          undefined: "undefined"
        },
        unselected: {
          string: Gl,
          undefined: "undefined"
        },
        __type__: {
          object: Zl,
          string: Gl
        }
      },
      imagePadding: {
        top: {
          number: $l
        },
        right: {
          number: $l
        },
        bottom: {
          number: $l
        },
        left: {
          number: $l
        },
        __type__: {
          object: Zl,
          number: $l
        }
      },
      label: {
        string: Gl,
        undefined: "undefined"
      },
      labelHighlightBold: {
        boolean: Kl
      },
      level: {
        number: $l,
        undefined: "undefined"
      },
      margin: {
        top: {
          number: $l
        },
        right: {
          number: $l
        },
        bottom: {
          number: $l
        },
        left: {
          number: $l
        },
        __type__: {
          object: Zl,
          number: $l
        }
      },
      mass: {
        number: $l
      },
      physics: {
        boolean: Kl
      },
      scaling: {
        min: {
          number: $l
        },
        max: {
          number: $l
        },
        label: {
          enabled: {
            boolean: Kl
          },
          min: {
            number: $l
          },
          max: {
            number: $l
          },
          maxVisible: {
            number: $l
          },
          drawThreshold: {
            number: $l
          },
          __type__: {
            object: Zl,
            boolean: Kl
          }
        },
        customScalingFunction: {
          function: "function"
        },
        __type__: {
          object: Zl
        }
      },
      shadow: {
        enabled: {
          boolean: Kl
        },
        color: {
          string: Gl
        },
        size: {
          number: $l
        },
        x: {
          number: $l
        },
        y: {
          number: $l
        },
        __type__: {
          object: Zl,
          boolean: Kl
        }
      },
      shape: {
        string: ["ellipse", "circle", "database", "box", "text", "image", "circularImage", "diamond", "dot", "star", "triangle", "triangleDown", "square", "icon", "hexagon"]
      },
      shapeProperties: {
        borderDashes: {
          boolean: Kl,
          array: "array"
        },
        borderRadius: {
          number: $l
        },
        interpolation: {
          boolean: Kl
        },
        useImageSize: {
          boolean: Kl
        },
        useBorderWithImage: {
          boolean: Kl
        },
        __type__: {
          object: Zl
        }
      },
      size: {
        number: $l
      },
      title: {
        string: Gl,
        dom: "dom",
        undefined: "undefined"
      },
      value: {
        number: $l,
        undefined: "undefined"
      },
      widthConstraint: {
        minimum: {
          number: $l
        },
        maximum: {
          number: $l
        },
        __type__: {
          object: Zl,
          boolean: Kl,
          number: $l
        }
      },
      x: {
        number: $l
      },
      y: {
        number: $l
      },
      __type__: {
        object: Zl
      }
    },
    physics: {
      enabled: {
        boolean: Kl
      },
      barnesHut: {
        gravitationalConstant: {
          number: $l
        },
        centralGravity: {
          number: $l
        },
        springLength: {
          number: $l
        },
        springConstant: {
          number: $l
        },
        damping: {
          number: $l
        },
        avoidOverlap: {
          number: $l
        },
        __type__: {
          object: Zl
        }
      },
      forceAtlas2Based: {
        gravitationalConstant: {
          number: $l
        },
        centralGravity: {
          number: $l
        },
        springLength: {
          number: $l
        },
        springConstant: {
          number: $l
        },
        damping: {
          number: $l
        },
        avoidOverlap: {
          number: $l
        },
        __type__: {
          object: Zl
        }
      },
      repulsion: {
        centralGravity: {
          number: $l
        },
        springLength: {
          number: $l
        },
        springConstant: {
          number: $l
        },
        nodeDistance: {
          number: $l
        },
        damping: {
          number: $l
        },
        __type__: {
          object: Zl
        }
      },
      hierarchicalRepulsion: {
        centralGravity: {
          number: $l
        },
        springLength: {
          number: $l
        },
        springConstant: {
          number: $l
        },
        nodeDistance: {
          number: $l
        },
        damping: {
          number: $l
        },
        avoidOverlap: {
          number: $l
        },
        __type__: {
          object: Zl
        }
      },
      maxVelocity: {
        number: $l
      },
      minVelocity: {
        number: $l
      },
      solver: {
        string: ["barnesHut", "repulsion", "hierarchicalRepulsion", "forceAtlas2Based"]
      },
      stabilization: {
        enabled: {
          boolean: Kl
        },
        iterations: {
          number: $l
        },
        updateInterval: {
          number: $l
        },
        onlyDynamicEdges: {
          boolean: Kl
        },
        fit: {
          boolean: Kl
        },
        __type__: {
          object: Zl,
          boolean: Kl
        }
      },
      timestep: {
        number: $l
      },
      adaptiveTimestep: {
        boolean: Kl
      },
      __type__: {
        object: Zl,
        boolean: Kl
      }
    },
    autoResize: {
      boolean: Kl
    },
    clickToUse: {
      boolean: Kl
    },
    locale: {
      string: Gl
    },
    locales: {
      __any__: {
        any: "any"
      },
      __type__: {
        object: Zl
      }
    },
    height: {
      string: Gl
    },
    width: {
      string: Gl
    },
    __type__: {
      object: Zl
    }
  };

  Ql.groups.__any__ = Ql.nodes, Ql.manipulation.controlNodeStyle = Ql.nodes;

  var tc = {
    nodes: {
      borderWidth: [1, 0, 10, 1],
      borderWidthSelected: [2, 0, 10, 1],
      color: {
        border: ["color", "#2B7CE9"],
        background: ["color", "#97C2FC"],
        highlight: {
          border: ["color", "#2B7CE9"],
          background: ["color", "#D2E5FF"]
        },
        hover: {
          border: ["color", "#2B7CE9"],
          background: ["color", "#D2E5FF"]
        }
      },
      fixed: {
        x: !1,
        y: !1
      },
      font: {
        color: ["color", "#343434"],
        size: [14, 0, 100, 1],
        face: ["arial", "verdana", "tahoma"],
        background: ["color", "none"],
        strokeWidth: [0, 0, 50, 1],
        strokeColor: ["color", "#ffffff"]
      },
      hidden: !1,
      labelHighlightBold: !0,
      physics: !0,
      scaling: {
        min: [10, 0, 200, 1],
        max: [30, 0, 200, 1],
        label: {
          enabled: !1,
          min: [14, 0, 200, 1],
          max: [30, 0, 200, 1],
          maxVisible: [30, 0, 200, 1],
          drawThreshold: [5, 0, 20, 1]
        }
      },
      shadow: {
        enabled: !1,
        color: "rgba(0,0,0,0.5)",
        size: [10, 0, 20, 1],
        x: [5, -30, 30, 1],
        y: [5, -30, 30, 1]
      },
      shape: ["ellipse", "box", "circle", "database", "diamond", "dot", "square", "star", "text", "triangle", "triangleDown", "hexagon"],
      shapeProperties: {
        borderDashes: !1,
        borderRadius: [6, 0, 20, 1],
        interpolation: !0,
        useImageSize: !1
      },
      size: [25, 0, 200, 1]
    },
    edges: {
      arrows: {
        to: {
          enabled: !1,
          scaleFactor: [1, 0, 3, .05],
          type: "arrow"
        },
        middle: {
          enabled: !1,
          scaleFactor: [1, 0, 3, .05],
          type: "arrow"
        },
        from: {
          enabled: !1,
          scaleFactor: [1, 0, 3, .05],
          type: "arrow"
        }
      },
      arrowStrikethrough: !0,
      color: {
        color: ["color", "#848484"],
        highlight: ["color", "#848484"],
        hover: ["color", "#848484"],
        inherit: ["from", "to", "both", !0, !1],
        opacity: [1, 0, 1, .05]
      },
      dashes: !1,
      font: {
        color: ["color", "#343434"],
        size: [14, 0, 100, 1],
        face: ["arial", "verdana", "tahoma"],
        background: ["color", "none"],
        strokeWidth: [2, 0, 50, 1],
        strokeColor: ["color", "#ffffff"],
        align: ["horizontal", "top", "middle", "bottom"]
      },
      hidden: !1,
      hoverWidth: [1.5, 0, 5, .1],
      labelHighlightBold: !0,
      physics: !0,
      scaling: {
        min: [1, 0, 100, 1],
        max: [15, 0, 100, 1],
        label: {
          enabled: !0,
          min: [14, 0, 200, 1],
          max: [30, 0, 200, 1],
          maxVisible: [30, 0, 200, 1],
          drawThreshold: [5, 0, 20, 1]
        }
      },
      selectionWidth: [1.5, 0, 5, .1],
      selfReferenceSize: [20, 0, 200, 1],
      shadow: {
        enabled: !1,
        color: "rgba(0,0,0,0.5)",
        size: [10, 0, 20, 1],
        x: [5, -30, 30, 1],
        y: [5, -30, 30, 1]
      },
      smooth: {
        enabled: !0,
        type: ["dynamic", "continuous", "discrete", "diagonalCross", "straightCross", "horizontal", "vertical", "curvedCW", "curvedCCW", "cubicBezier"],
        forceDirection: ["horizontal", "vertical", "none"],
        roundness: [.5, 0, 1, .05]
      },
      width: [1, 0, 30, 1]
    },
    layout: {
      hierarchical: {
        enabled: !1,
        levelSeparation: [150, 20, 500, 5],
        nodeSpacing: [100, 20, 500, 5],
        treeSpacing: [200, 20, 500, 5],
        blockShifting: !0,
        edgeMinimization: !0,
        parentCentralization: !0,
        direction: ["UD", "DU", "LR", "RL"],
        sortMethod: ["hubsize", "directed"],
        shakeTowards: ["leaves", "roots"]
      }
    },
    interaction: {
      dragNodes: !0,
      dragView: !0,
      hideEdgesOnDrag: !1,
      hideEdgesOnZoom: !1,
      hideNodesOnDrag: !1,
      hover: !1,
      keyboard: {
        enabled: !1,
        speed: {
          x: [10, 0, 40, 1],
          y: [10, 0, 40, 1],
          zoom: [.02, 0, .1, .005]
        },
        bindToWindow: !0
      },
      multiselect: !1,
      navigationButtons: !1,
      selectable: !0,
      selectConnectedEdges: !0,
      hoverConnectedEdges: !0,
      tooltipDelay: [300, 0, 1e3, 25],
      zoomView: !0,
      zoomSpeed: [1, 1, 1, 1]
    },
    manipulation: {
      enabled: !1,
      initiallyActive: !1
    },
    physics: {
      enabled: !0,
      barnesHut: {
        gravitationalConstant: [-2e3, -3e4, 0, 50],
        centralGravity: [.3, 0, 10, .05],
        springLength: [95, 0, 500, 5],
        springConstant: [.04, 0, 1.2, .005],
        damping: [.09, 0, 1, .01],
        avoidOverlap: [0, 0, 1, .01]
      },
      forceAtlas2Based: {
        gravitationalConstant: [-50, -500, 0, 1],
        centralGravity: [.01, 0, 1, .005],
        springLength: [95, 0, 500, 5],
        springConstant: [.08, 0, 1.2, .005],
        damping: [.4, 0, 1, .01],
        avoidOverlap: [0, 0, 1, .01]
      },
      repulsion: {
        centralGravity: [.2, 0, 10, .05],
        springLength: [200, 0, 500, 5],
        springConstant: [.05, 0, 1.2, .005],
        nodeDistance: [100, 0, 500, 5],
        damping: [.09, 0, 1, .01]
      },
      hierarchicalRepulsion: {
        centralGravity: [.2, 0, 10, .05],
        springLength: [100, 0, 500, 5],
        springConstant: [.01, 0, 1.2, .005],
        nodeDistance: [120, 0, 500, 5],
        damping: [.09, 0, 1, .01],
        avoidOverlap: [0, 0, 1, .01]
      },
      maxVelocity: [50, 0, 150, 1],
      minVelocity: [.1, .01, .5, .01],
      solver: ["barnesHut", "forceAtlas2Based", "repulsion", "hierarchicalRepulsion"],
      timestep: [.5, .01, 1, .01]
    }
  },
      ec = Object.freeze({
    __proto__: null,
    allOptions: Ql,
    configureOptions: tc
  }),
      ic = function () {
    function t() {
      pn(this, t);
    }

    return vn(t, [{
      key: "getDistances",
      value: function (t, e, i) {
        for (var o = {}, n = t.edges, s = 0; s < e.length; s++) {
          var r = {};
          o[e[s]] = r;

          for (var a = 0; a < e.length; a++) r[e[a]] = s == a ? 0 : 1e9;
        }

        for (var h = 0; h < i.length; h++) {
          var d = n[i[h]];
          !0 === d.connected && void 0 !== o[d.fromId] && void 0 !== o[d.toId] && (o[d.fromId][d.toId] = 1, o[d.toId][d.fromId] = 1);
        }

        for (var l = e.length, c = 0; c < l; c++) for (var u = e[c], p = o[u], f = 0; f < l - 1; f++) for (var v = e[f], g = o[v], y = f + 1; y < l; y++) {
          var m = e[y],
              b = o[m],
              w = Math.min(g[m], g[u] + p[m]);
          g[m] = w, b[v] = w;
        }

        return o;
      }
    }]), t;
  }(),
      oc = function () {
    function t(e, i, o) {
      pn(this, t), this.body = e, this.springLength = i, this.springConstant = o, this.distanceSolver = new ic();
    }

    return vn(t, [{
      key: "setOptions",
      value: function (t) {
        t && (t.springLength && (this.springLength = t.springLength), t.springConstant && (this.springConstant = t.springConstant));
      }
    }, {
      key: "solve",
      value: function (t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            o = this.distanceSolver.getDistances(this.body, t, e);
        this._createL_matrix(o), this._createK_matrix(o), this._createE_matrix();

        for (var n = .01, s = 1, r = 0, a = Math.max(1e3, Math.min(10 * this.body.nodeIndices.length, 6e3)), h = 5, d = 1e9, l = 0, c = 0, u = 0, p = 0, f = 0; d > n && r < a;) {
          r += 1;

          var v = this._getHighestEnergyNode(i),
              g = On(v, 4);

          for (l = g[0], d = g[1], c = g[2], u = g[3], p = d, f = 0; p > s && f < h;) {
            f += 1, this._moveNode(l, c, u);

            var y = this._getEnergy(l),
                m = On(y, 3);

            p = m[0], c = m[1], u = m[2];
          }
        }
      }
    }, {
      key: "_getHighestEnergyNode",
      value: function (t) {
        for (var e = this.body.nodeIndices, i = this.body.nodes, o = 0, n = e[0], s = 0, r = 0, a = 0; a < e.length; a++) {
          var h = e[a];

          if (!1 === i[h].predefinedPosition || !0 === i[h].isCluster && !0 === t || !0 === i[h].options.fixed.x || !0 === i[h].options.fixed.y) {
            var d = On(this._getEnergy(h), 3),
                l = d[0],
                c = d[1],
                u = d[2];
            o < l && (o = l, n = h, s = c, r = u);
          }
        }

        return [n, o, s, r];
      }
    }, {
      key: "_getEnergy",
      value: function (t) {
        var e = On(this.E_sums[t], 2),
            i = e[0],
            o = e[1];
        return [Math.sqrt(Math.pow(i, 2) + Math.pow(o, 2)), i, o];
      }
    }, {
      key: "_moveNode",
      value: function (t, e, i) {
        for (var o = this.body.nodeIndices, n = this.body.nodes, s = 0, r = 0, a = 0, h = n[t].x, d = n[t].y, l = this.K_matrix[t], c = this.L_matrix[t], u = 0; u < o.length; u++) {
          var p = o[u];

          if (p !== t) {
            var f = n[p].x,
                v = n[p].y,
                g = l[p],
                y = c[p],
                m = 1 / Math.pow(Math.pow(h - f, 2) + Math.pow(d - v, 2), 1.5);
            s += g * (1 - y * Math.pow(d - v, 2) * m), r += g * (y * (h - f) * (d - v) * m), a += g * (1 - y * Math.pow(h - f, 2) * m);
          }
        }

        var b = (e / s + i / r) / (r / s - a / r),
            w = -(r * b + e) / s;
        n[t].x += w, n[t].y += b, this._updateE_matrix(t);
      }
    }, {
      key: "_createL_matrix",
      value: function (t) {
        var e = this.body.nodeIndices,
            i = this.springLength;
        this.L_matrix = [];

        for (var o = 0; o < e.length; o++) {
          this.L_matrix[e[o]] = {};

          for (var n = 0; n < e.length; n++) this.L_matrix[e[o]][e[n]] = i * t[e[o]][e[n]];
        }
      }
    }, {
      key: "_createK_matrix",
      value: function (t) {
        var e = this.body.nodeIndices,
            i = this.springConstant;
        this.K_matrix = [];

        for (var o = 0; o < e.length; o++) {
          this.K_matrix[e[o]] = {};

          for (var n = 0; n < e.length; n++) this.K_matrix[e[o]][e[n]] = i * Math.pow(t[e[o]][e[n]], -2);
        }
      }
    }, {
      key: "_createE_matrix",
      value: function () {
        var t = this.body.nodeIndices,
            e = this.body.nodes;
        this.E_matrix = {}, this.E_sums = {};

        for (var i = 0; i < t.length; i++) this.E_matrix[t[i]] = [];

        for (var o = 0; o < t.length; o++) {
          for (var n = t[o], s = e[n].x, r = e[n].y, a = 0, h = 0, d = o; d < t.length; d++) {
            var l = t[d];

            if (l !== n) {
              var c = e[l].x,
                  u = e[l].y,
                  p = 1 / Math.sqrt(Math.pow(s - c, 2) + Math.pow(r - u, 2));
              this.E_matrix[n][d] = [this.K_matrix[n][l] * (s - c - this.L_matrix[n][l] * (s - c) * p), this.K_matrix[n][l] * (r - u - this.L_matrix[n][l] * (r - u) * p)], this.E_matrix[l][o] = this.E_matrix[n][d], a += this.E_matrix[n][d][0], h += this.E_matrix[n][d][1];
            }
          }

          this.E_sums[n] = [a, h];
        }
      }
    }, {
      key: "_updateE_matrix",
      value: function (t) {
        for (var e = this.body.nodeIndices, i = this.body.nodes, o = this.E_matrix[t], n = this.K_matrix[t], s = this.L_matrix[t], r = i[t].x, a = i[t].y, h = 0, d = 0, l = 0; l < e.length; l++) {
          var c = e[l];

          if (c !== t) {
            var u = o[l],
                p = u[0],
                f = u[1],
                v = i[c].x,
                g = i[c].y,
                y = 1 / Math.sqrt(Math.pow(r - v, 2) + Math.pow(a - g, 2)),
                m = n[c] * (r - v - s[c] * (r - v) * y),
                b = n[c] * (a - g - s[c] * (a - g) * y);
            o[l] = [m, b], h += m, d += b;
            var w = this.E_sums[c];
            w[0] += m - p, w[1] += b - f;
          }
        }

        this.E_sums[t] = [h, d];
      }
    }]), t;
  }();

  function nc(t, i, o) {
    var n = this;
    if (!(this instanceof nc)) throw new SyntaxError("Constructor must be called with the new operator");
    this.options = {}, this.defaultOptions = {
      locale: "en",
      locales: Nr,
      clickToUse: !1
    }, extend(this.options, this.defaultOptions), this.body = {
      container: t,
      nodes: {},
      nodeIndices: [],
      edges: {},
      edgeIndices: [],
      emitter: {
        on: this.on.bind(this),
        off: this.off.bind(this),
        emit: this.emit.bind(this),
        once: this.once.bind(this)
      },
      eventListeners: {
        onTap: function () {},
        onTouch: function () {},
        onDoubleTap: function () {},
        onHold: function () {},
        onDragStart: function () {},
        onDrag: function () {},
        onDragEnd: function () {},
        onMouseWheel: function () {},
        onPinch: function () {},
        onMouseMove: function () {},
        onRelease: function () {},
        onContext: function () {}
      },
      data: {
        nodes: null,
        edges: null
      },
      functions: {
        createNode: function () {},
        createEdge: function () {},
        getPointer: function () {}
      },
      modules: {},
      view: {
        scale: 1,
        translation: {
          x: 0,
          y: 0
        }
      }
    }, this.bindEventListeners(), this.images = new Ar(function () {
      return n.body.emitter.emit("_requestRedraw");
    }), this.groups = new Rr(), this.canvas = new fd(this.body), this.selectionHandler = new _d(this.body, this.canvas), this.interactionHandler = new kd(this.body, this.canvas, this.selectionHandler), this.view = new md(this.body, this.canvas), this.renderer = new ud(this.body, this.canvas), this.physics = new rd(this.body), this.layoutEngine = new Vl(this.body), this.clustering = new cd(this.body), this.manipulation = new ql(this.body, this.canvas, this.selectionHandler, this.interactionHandler), this.nodesHandler = new Eh(this.body, this.images, this.groups, this.layoutEngine), this.edgesHandler = new Zh(this.body, this.images, this.groups), this.body.modules.kamadaKawai = new oc(this.body, 150, .05), this.body.modules.clustering = this.clustering, this.canvas._create(), this.setOptions(o), this.setData(i);
  }

  Ie(nc.prototype), nc.prototype.setOptions = function (t) {
    var e = this;

    if (null === t && (t = void 0), void 0 !== t) {
      !0 === _h.validate(t, Ql) && console.log("%cErrors have been found in the supplied options object.", kh);

      if (selectiveDeepExtend(["locale", "locales", "clickToUse"], this.options, t), t = this.layoutEngine.setOptions(t.layout, t), this.canvas.setOptions(t), this.groups.setOptions(t.groups), this.nodesHandler.setOptions(t.nodes), this.edgesHandler.setOptions(t.edges), this.physics.setOptions(t.physics), this.manipulation.setOptions(t.manipulation, t, this.options), this.interactionHandler.setOptions(t.interaction), this.renderer.setOptions(t.interaction), this.selectionHandler.setOptions(t.interaction), void 0 !== t.groups && this.body.emitter.emit("refreshNodes"), "configure" in t && (this.configurator || (this.configurator = new Xl(this, this.body.container, tc, this.canvas.pixelRatio)), this.configurator.setOptions(t.configure)), this.configurator && !0 === this.configurator.options.enabled) {
        var i = {
          nodes: {},
          edges: {},
          layout: {},
          interaction: {},
          manipulation: {},
          physics: {},
          global: {}
        };
        deepExtend(i.nodes, this.nodesHandler.options), deepExtend(i.edges, this.edgesHandler.options), deepExtend(i.layout, this.layoutEngine.options), deepExtend(i.interaction, this.selectionHandler.options), deepExtend(i.interaction, this.renderer.options), deepExtend(i.interaction, this.interactionHandler.options), deepExtend(i.manipulation, this.manipulation.options), deepExtend(i.physics, this.physics.options), deepExtend(i.global, this.canvas.options), deepExtend(i.global, this.options), this.configurator.setModuleOptions(i);
      }

      void 0 !== t.clickToUse ? !0 === t.clickToUse ? void 0 === this.activator && (this.activator = new zr(this.canvas.frame), this.activator.on("change", function () {
        e.body.emitter.emit("activate");
      })) : (void 0 !== this.activator && (this.activator.destroy(), delete this.activator), this.body.emitter.emit("activate")) : this.body.emitter.emit("activate"), this.canvas.setSize(), this.body.emitter.emit("startSimulation");
    }
  }, nc.prototype._updateVisibleIndices = function () {
    var t = this.body.nodes,
        e = this.body.edges;

    for (var i in this.body.nodeIndices = [], this.body.edgeIndices = [], t) t.hasOwnProperty(i) && (this.clustering._isClusteredNode(i) || !1 !== t[i].options.hidden || this.body.nodeIndices.push(t[i].id));

    for (var o in e) if (e.hasOwnProperty(o)) {
      var n = e[o],
          s = t[n.fromId],
          r = t[n.toId],
          a = void 0 !== s && void 0 !== r;
      !this.clustering._isClusteredEdge(o) && !1 === n.options.hidden && a && !1 === s.options.hidden && !1 === r.options.hidden && this.body.edgeIndices.push(n.id);
    }
  }, nc.prototype.bindEventListeners = function () {
    var t = this;
    this.body.emitter.on("_dataChanged", function () {
      t.edgesHandler._updateState(), t.body.emitter.emit("_dataUpdated");
    }), this.body.emitter.on("_dataUpdated", function () {
      t.clustering._updateState(), t._updateVisibleIndices(), t._updateValueRange(t.body.nodes), t._updateValueRange(t.body.edges), t.body.emitter.emit("startSimulation"), t.body.emitter.emit("_requestRedraw");
    });
  }, nc.prototype.setData = function (t) {
    if (this.body.emitter.emit("resetPhysics"), this.body.emitter.emit("_resetData"), this.selectionHandler.unselectAll(), t && t.dot && (t.nodes || t.edges)) throw new SyntaxError('Data must contain either parameter "dot" or  parameter pair "nodes" and "edges", but not both.');

    if (this.setOptions(t && t.options), t && t.dot) {
      console.log("The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);");
      var e = Io.DOTToGraph(t.dot);
      this.setData(e);
    } else if (t && t.gephi) {
      console.log("The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);");
      var i = Ao(t.gephi);
      this.setData(i);
    } else this.nodesHandler.setData(t && t.nodes, !0), this.edgesHandler.setData(t && t.edges, !0), this.body.emitter.emit("_dataChanged"), this.body.emitter.emit("_dataLoaded"), this.body.emitter.emit("initPhysics");
  }, nc.prototype.destroy = function () {
    for (var t in this.body.emitter.emit("destroy"), this.body.emitter.off(), this.off(), delete this.groups, delete this.canvas, delete this.selectionHandler, delete this.interactionHandler, delete this.view, delete this.renderer, delete this.physics, delete this.layoutEngine, delete this.clustering, delete this.manipulation, delete this.nodesHandler, delete this.edgesHandler, delete this.configurator, delete this.images, this.body.nodes) this.body.nodes.hasOwnProperty(t) && delete this.body.nodes[t];

    for (var e in this.body.edges) this.body.edges.hasOwnProperty(e) && delete this.body.edges[e];

    recursiveDOMDelete(this.body.container);
  }, nc.prototype._updateValueRange = function (t) {
    var e,
        i = void 0,
        o = void 0,
        n = 0;

    for (e in t) if (t.hasOwnProperty(e)) {
      var s = t[e].getValue();
      void 0 !== s && (i = void 0 === i ? s : Math.min(s, i), o = void 0 === o ? s : Math.max(s, o), n += s);
    }

    if (void 0 !== i && void 0 !== o) for (e in t) t.hasOwnProperty(e) && t[e].setValueRange(i, o, n);
  }, nc.prototype.isActive = function () {
    return !this.activator || this.activator.active;
  }, nc.prototype.setSize = function () {
    return this.canvas.setSize.apply(this.canvas, arguments);
  }, nc.prototype.canvasToDOM = function () {
    return this.canvas.canvasToDOM.apply(this.canvas, arguments);
  }, nc.prototype.DOMtoCanvas = function () {
    return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);
  }, nc.prototype.findNode = function () {
    return this.clustering.findNode.apply(this.clustering, arguments);
  }, nc.prototype.isCluster = function () {
    return this.clustering.isCluster.apply(this.clustering, arguments);
  }, nc.prototype.openCluster = function () {
    return this.clustering.openCluster.apply(this.clustering, arguments);
  }, nc.prototype.cluster = function () {
    return this.clustering.cluster.apply(this.clustering, arguments);
  }, nc.prototype.getNodesInCluster = function () {
    return this.clustering.getNodesInCluster.apply(this.clustering, arguments);
  }, nc.prototype.clusterByConnection = function () {
    return this.clustering.clusterByConnection.apply(this.clustering, arguments);
  }, nc.prototype.clusterByHubsize = function () {
    return this.clustering.clusterByHubsize.apply(this.clustering, arguments);
  }, nc.prototype.clusterOutliers = function () {
    return this.clustering.clusterOutliers.apply(this.clustering, arguments);
  }, nc.prototype.getSeed = function () {
    return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);
  }, nc.prototype.enableEditMode = function () {
    return this.manipulation.enableEditMode.apply(this.manipulation, arguments);
  }, nc.prototype.disableEditMode = function () {
    return this.manipulation.disableEditMode.apply(this.manipulation, arguments);
  }, nc.prototype.addNodeMode = function () {
    return this.manipulation.addNodeMode.apply(this.manipulation, arguments);
  }, nc.prototype.editNode = function () {
    return this.manipulation.editNode.apply(this.manipulation, arguments);
  }, nc.prototype.editNodeMode = function () {
    return console.log("Deprecated: Please use editNode instead of editNodeMode."), this.manipulation.editNode.apply(this.manipulation, arguments);
  }, nc.prototype.addEdgeMode = function () {
    return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);
  }, nc.prototype.editEdgeMode = function () {
    return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);
  }, nc.prototype.deleteSelected = function () {
    return this.manipulation.deleteSelected.apply(this.manipulation, arguments);
  }, nc.prototype.getPositions = function () {
    return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);
  }, nc.prototype.storePositions = function () {
    return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);
  }, nc.prototype.moveNode = function () {
    return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);
  }, nc.prototype.getBoundingBox = function () {
    return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);
  }, nc.prototype.getConnectedNodes = function (t) {
    return void 0 !== this.body.nodes[t] ? this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments) : this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);
  }, nc.prototype.getConnectedEdges = function () {
    return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);
  }, nc.prototype.startSimulation = function () {
    return this.physics.startSimulation.apply(this.physics, arguments);
  }, nc.prototype.stopSimulation = function () {
    return this.physics.stopSimulation.apply(this.physics, arguments);
  }, nc.prototype.stabilize = function () {
    return this.physics.stabilize.apply(this.physics, arguments);
  }, nc.prototype.getSelection = function () {
    return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);
  }, nc.prototype.setSelection = function () {
    return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);
  }, nc.prototype.getSelectedNodes = function () {
    return this.selectionHandler.getSelectedNodes.apply(this.selectionHandler, arguments);
  }, nc.prototype.getSelectedEdges = function () {
    return this.selectionHandler.getSelectedEdges.apply(this.selectionHandler, arguments);
  }, nc.prototype.getNodeAt = function () {
    var t = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);
    return void 0 !== t && void 0 !== t.id ? t.id : t;
  }, nc.prototype.getEdgeAt = function () {
    var t = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);
    return void 0 !== t && void 0 !== t.id ? t.id : t;
  }, nc.prototype.selectNodes = function () {
    return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);
  }, nc.prototype.selectEdges = function () {
    return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);
  }, nc.prototype.unselectAll = function () {
    this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments), this.redraw();
  }, nc.prototype.redraw = function () {
    return this.renderer.redraw.apply(this.renderer, arguments);
  }, nc.prototype.getScale = function () {
    return this.view.getScale.apply(this.view, arguments);
  }, nc.prototype.getViewPosition = function () {
    return this.view.getViewPosition.apply(this.view, arguments);
  }, nc.prototype.fit = function () {
    return this.view.fit.apply(this.view, arguments);
  }, nc.prototype.moveTo = function () {
    return this.view.moveTo.apply(this.view, arguments);
  }, nc.prototype.focus = function () {
    return this.view.focus.apply(this.view, arguments);
  }, nc.prototype.releaseNode = function () {
    return this.view.releaseNode.apply(this.view, arguments);
  }, nc.prototype.getOptionsFromConfigurator = function () {
    var t = {};
    return this.configurator && (t = this.configurator.getOptions.apply(this.configurator)), t;
  };
  var sc = Do;

  var DOMutil = createCommonjsModule$2(function (module, exports) {
    // DOM utility methods

    /**
     * this prepares the JSON container for allocating SVG elements
     * @param {Object} JSONcontainer
     * @private
     */
    exports.prepareElements = function (JSONcontainer) {
      // cleanup the redundant svgElements;
      for (var elementType in JSONcontainer) {
        if (JSONcontainer.hasOwnProperty(elementType)) {
          JSONcontainer[elementType].redundant = JSONcontainer[elementType].used;
          JSONcontainer[elementType].used = [];
        }
      }
    };
    /**
     * this cleans up all the unused SVG elements. By asking for the parentNode, we only need to supply the JSON container from
     * which to remove the redundant elements.
     *
     * @param {Object} JSONcontainer
     * @private
     */


    exports.cleanupElements = function (JSONcontainer) {
      // cleanup the redundant svgElements;
      for (var elementType in JSONcontainer) {
        if (JSONcontainer.hasOwnProperty(elementType)) {
          if (JSONcontainer[elementType].redundant) {
            for (var i = 0; i < JSONcontainer[elementType].redundant.length; i++) {
              JSONcontainer[elementType].redundant[i].parentNode.removeChild(JSONcontainer[elementType].redundant[i]);
            }

            JSONcontainer[elementType].redundant = [];
          }
        }
      }
    };
    /**
     * Ensures that all elements are removed first up so they can be recreated cleanly
     * @param {Object} JSONcontainer
     */


    exports.resetElements = function (JSONcontainer) {
      exports.prepareElements(JSONcontainer);
      exports.cleanupElements(JSONcontainer);
      exports.prepareElements(JSONcontainer);
    };
    /**
     * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
     * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
     *
     * @param {string} elementType
     * @param {Object} JSONcontainer
     * @param {Object} svgContainer
     * @returns {Element}
     * @private
     */


    exports.getSVGElement = function (elementType, JSONcontainer, svgContainer) {
      var element; // allocate SVG element, if it doesnt yet exist, create one.

      if (JSONcontainer.hasOwnProperty(elementType)) {
        // this element has been created before
        // check if there is an redundant element
        if (JSONcontainer[elementType].redundant.length > 0) {
          element = JSONcontainer[elementType].redundant[0];
          JSONcontainer[elementType].redundant.shift();
        } else {
          // create a new element and add it to the SVG
          element = document.createElementNS('http://www.w3.org/2000/svg', elementType);
          svgContainer.appendChild(element);
        }
      } else {
        // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
        element = document.createElementNS('http://www.w3.org/2000/svg', elementType);
        JSONcontainer[elementType] = {
          used: [],
          redundant: []
        };
        svgContainer.appendChild(element);
      }

      JSONcontainer[elementType].used.push(element);
      return element;
    };
    /**
     * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
     * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
     *
     * @param {string} elementType
     * @param {Object} JSONcontainer
     * @param {Element} DOMContainer
     * @param {Element} insertBefore
     * @returns {*}
     */


    exports.getDOMElement = function (elementType, JSONcontainer, DOMContainer, insertBefore) {
      var element; // allocate DOM element, if it doesnt yet exist, create one.

      if (JSONcontainer.hasOwnProperty(elementType)) {
        // this element has been created before
        // check if there is an redundant element
        if (JSONcontainer[elementType].redundant.length > 0) {
          element = JSONcontainer[elementType].redundant[0];
          JSONcontainer[elementType].redundant.shift();
        } else {
          // create a new element and add it to the SVG
          element = document.createElement(elementType);

          if (insertBefore !== undefined) {
            DOMContainer.insertBefore(element, insertBefore);
          } else {
            DOMContainer.appendChild(element);
          }
        }
      } else {
        // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
        element = document.createElement(elementType);
        JSONcontainer[elementType] = {
          used: [],
          redundant: []
        };

        if (insertBefore !== undefined) {
          DOMContainer.insertBefore(element, insertBefore);
        } else {
          DOMContainer.appendChild(element);
        }
      }

      JSONcontainer[elementType].used.push(element);
      return element;
    };
    /**
     * Draw a point object. This is a separate function because it can also be called by the legend.
     * The reason the JSONcontainer and the target SVG svgContainer have to be supplied is so the legend can use these functions
     * as well.
     *
     * @param {number} x
     * @param {number} y
     * @param {Object} groupTemplate: A template containing the necessary information to draw the datapoint e.g., {style: 'circle', size: 5, className: 'className' }
     * @param {Object} JSONcontainer
     * @param {Object} svgContainer
     * @param {Object} labelObj
     * @returns {vis.PointItem}
     */


    exports.drawPoint = function (x, y, groupTemplate, JSONcontainer, svgContainer, labelObj) {
      var point;

      if (groupTemplate.style == 'circle') {
        point = exports.getSVGElement('circle', JSONcontainer, svgContainer);
        point.setAttributeNS(null, "cx", x);
        point.setAttributeNS(null, "cy", y);
        point.setAttributeNS(null, "r", 0.5 * groupTemplate.size);
      } else {
        point = exports.getSVGElement('rect', JSONcontainer, svgContainer);
        point.setAttributeNS(null, "x", x - 0.5 * groupTemplate.size);
        point.setAttributeNS(null, "y", y - 0.5 * groupTemplate.size);
        point.setAttributeNS(null, "width", groupTemplate.size);
        point.setAttributeNS(null, "height", groupTemplate.size);
      }

      if (groupTemplate.styles !== undefined) {
        point.setAttributeNS(null, "style", groupTemplate.styles);
      }

      point.setAttributeNS(null, "class", groupTemplate.className + " vis-point"); //handle label

      if (labelObj) {
        var label = exports.getSVGElement('text', JSONcontainer, svgContainer);

        if (labelObj.xOffset) {
          x = x + labelObj.xOffset;
        }

        if (labelObj.yOffset) {
          y = y + labelObj.yOffset;
        }

        if (labelObj.content) {
          label.textContent = labelObj.content;
        }

        if (labelObj.className) {
          label.setAttributeNS(null, "class", labelObj.className + " vis-label");
        }

        label.setAttributeNS(null, "x", x);
        label.setAttributeNS(null, "y", y);
      }

      return point;
    };
    /**
     * draw a bar SVG element centered on the X coordinate
     *
     * @param {number} x
     * @param {number} y
     * @param {number} width
     * @param {number} height
     * @param {string} className
     * @param {Object} JSONcontainer
     * @param {Object} svgContainer
     * @param {string} style
     */


    exports.drawBar = function (x, y, width, height, className, JSONcontainer, svgContainer, style) {
      if (height != 0) {
        if (height < 0) {
          height *= -1;
          y -= height;
        }

        var rect = exports.getSVGElement('rect', JSONcontainer, svgContainer);
        rect.setAttributeNS(null, "x", x - 0.5 * width);
        rect.setAttributeNS(null, "y", y);
        rect.setAttributeNS(null, "width", width);
        rect.setAttributeNS(null, "height", height);
        rect.setAttributeNS(null, "class", className);

        if (style) {
          rect.setAttributeNS(null, "style", style);
        }
      }
    };
  });
  var DOMutil_1 = DOMutil.prepareElements;
  var DOMutil_2 = DOMutil.cleanupElements;
  var DOMutil_3 = DOMutil.resetElements;
  var DOMutil_4 = DOMutil.getSVGElement;
  var DOMutil_5 = DOMutil.getDOMElement;
  var DOMutil_6 = DOMutil.drawPoint;
  var DOMutil_7 = DOMutil.drawBar;

  /**
   * Expose `Emitter`.
   */
  var emitterComponent = Emitter;
  /**
   * Initialize a new `Emitter`.
   *
   * @api public
   */

  function Emitter(obj) {
    if (obj) return mixin(obj);
  }
  /**
   * Mixin the emitter properties.
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */

  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }

    return obj;
  }
  /**
   * Listen on the given `event` with `fn`.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */


  Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
    this._callbacks = this._callbacks || {};
    (this._callbacks[event] = this._callbacks[event] || []).push(fn);
    return this;
  };
  /**
   * Adds an `event` listener that will be invoked a single
   * time then automatically removed.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */


  Emitter.prototype.once = function (event, fn) {
    var self = this;
    this._callbacks = this._callbacks || {};

    function on() {
      self.off(event, on);
      fn.apply(this, arguments);
    }

    on.fn = fn;
    this.on(event, on);
    return this;
  };
  /**
   * Remove the given callback for `event` or all
   * registered callbacks.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */


  Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
    this._callbacks = this._callbacks || {}; // all

    if (0 == arguments.length) {
      this._callbacks = {};
      return this;
    } // specific event


    var callbacks = this._callbacks[event];
    if (!callbacks) return this; // remove all handlers

    if (1 == arguments.length) {
      delete this._callbacks[event];
      return this;
    } // remove specific handler


    var cb;

    for (var i = 0; i < callbacks.length; i++) {
      cb = callbacks[i];

      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i, 1);
        break;
      }
    }

    return this;
  };
  /**
   * Emit `event` with the given args.
   *
   * @param {String} event
   * @param {Mixed} ...
   * @return {Emitter}
   */


  Emitter.prototype.emit = function (event) {
    this._callbacks = this._callbacks || {};
    var args = [].slice.call(arguments, 1),
        callbacks = this._callbacks[event];

    if (callbacks) {
      callbacks = callbacks.slice(0);

      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }

    return this;
  };
  /**
   * Return array of callbacks for `event`.
   *
   * @param {String} event
   * @return {Array}
   * @api public
   */


  Emitter.prototype.listeners = function (event) {
    this._callbacks = this._callbacks || {};
    return this._callbacks[event] || [];
  };
  /**
   * Check if this emitter has `event` handlers.
   *
   * @param {String} event
   * @return {Boolean}
   * @api public
   */


  Emitter.prototype.hasListeners = function (event) {
    return !!this.listeners(event).length;
  };

  /**
   * @prototype Point3d
   * @param {number} [x]
   * @param {number} [y]
   * @param {number} [z]
   */
  function Point3d(x, y, z) {
    this.x = x !== undefined ? x : 0;
    this.y = y !== undefined ? y : 0;
    this.z = z !== undefined ? z : 0;
  }
  /**
   * Subtract the two provided points, returns a-b
   * @param {Point3d} a
   * @param {Point3d} b
   * @return {Point3d} a-b
   */


  Point3d.subtract = function (a, b) {
    var sub = new Point3d();
    sub.x = a.x - b.x;
    sub.y = a.y - b.y;
    sub.z = a.z - b.z;
    return sub;
  };
  /**
   * Add the two provided points, returns a+b
   * @param {Point3d} a
   * @param {Point3d} b
   * @return {Point3d} a+b
   */


  Point3d.add = function (a, b) {
    var sum = new Point3d();
    sum.x = a.x + b.x;
    sum.y = a.y + b.y;
    sum.z = a.z + b.z;
    return sum;
  };
  /**
   * Calculate the average of two 3d points
   * @param {Point3d} a
   * @param {Point3d} b
   * @return {Point3d} The average, (a+b)/2
   */


  Point3d.avg = function (a, b) {
    return new Point3d((a.x + b.x) / 2, (a.y + b.y) / 2, (a.z + b.z) / 2);
  };
  /**
   * Calculate the cross product of the two provided points, returns axb
   * Documentation: http://en.wikipedia.org/wiki/Cross_product
   * @param {Point3d} a
   * @param {Point3d} b
   * @return {Point3d} cross product axb
   */


  Point3d.crossProduct = function (a, b) {
    var crossproduct = new Point3d();
    crossproduct.x = a.y * b.z - a.z * b.y;
    crossproduct.y = a.z * b.x - a.x * b.z;
    crossproduct.z = a.x * b.y - a.y * b.x;
    return crossproduct;
  };
  /**
   * Rtrieve the length of the vector (or the distance from this point to the origin
   * @return {number}  length
   */


  Point3d.prototype.length = function () {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  };

  var Point3d_1 = Point3d;

  /**
   * @prototype Point2d
   * @param {number} [x]
   * @param {number} [y]
   */
  function Point2d(x, y) {
    this.x = x !== undefined ? x : 0;
    this.y = y !== undefined ? y : 0;
  }

  var Point2d_1 = Point2d;

  /**
   * An html slider control with start/stop/prev/next buttons
   *
   * @constructor Slider
   * @param {Element} container  The element where the slider will be created
   * @param {Object} options   Available options:
   *                 {boolean} visible   If true (default) the
   *                           slider is visible.
   */

  function Slider(container, options) {
    if (container === undefined) {
      throw new Error('No container element defined');
    }

    this.container = container;
    this.visible = options && options.visible != undefined ? options.visible : true;

    if (this.visible) {
      this.frame = document.createElement('DIV'); //this.frame.style.backgroundColor = '#E5E5E5';

      this.frame.style.width = '100%';
      this.frame.style.position = 'relative';
      this.container.appendChild(this.frame);
      this.frame.prev = document.createElement('INPUT');
      this.frame.prev.type = 'BUTTON';
      this.frame.prev.value = 'Prev';
      this.frame.appendChild(this.frame.prev);
      this.frame.play = document.createElement('INPUT');
      this.frame.play.type = 'BUTTON';
      this.frame.play.value = 'Play';
      this.frame.appendChild(this.frame.play);
      this.frame.next = document.createElement('INPUT');
      this.frame.next.type = 'BUTTON';
      this.frame.next.value = 'Next';
      this.frame.appendChild(this.frame.next);
      this.frame.bar = document.createElement('INPUT');
      this.frame.bar.type = 'BUTTON';
      this.frame.bar.style.position = 'absolute';
      this.frame.bar.style.border = '1px solid red';
      this.frame.bar.style.width = '100px';
      this.frame.bar.style.height = '6px';
      this.frame.bar.style.borderRadius = '2px';
      this.frame.bar.style.MozBorderRadius = '2px';
      this.frame.bar.style.border = '1px solid #7F7F7F';
      this.frame.bar.style.backgroundColor = '#E5E5E5';
      this.frame.appendChild(this.frame.bar);
      this.frame.slide = document.createElement('INPUT');
      this.frame.slide.type = 'BUTTON';
      this.frame.slide.style.margin = '0px';
      this.frame.slide.value = ' ';
      this.frame.slide.style.position = 'relative';
      this.frame.slide.style.left = '-100px';
      this.frame.appendChild(this.frame.slide); // create events

      var me = this;

      this.frame.slide.onmousedown = function (event) {
        me._onMouseDown(event);
      };

      this.frame.prev.onclick = function (event) {
        me.prev(event);
      };

      this.frame.play.onclick = function (event) {
        me.togglePlay(event);
      };

      this.frame.next.onclick = function (event) {
        me.next(event);
      };
    }

    this.onChangeCallback = undefined;
    this.values = [];
    this.index = undefined;
    this.playTimeout = undefined;
    this.playInterval = 1000; // milliseconds

    this.playLoop = true;
  }
  /**
   * Select the previous index
   */


  Slider.prototype.prev = function () {
    var index = this.getIndex();

    if (index > 0) {
      index--;
      this.setIndex(index);
    }
  };
  /**
   * Select the next index
   */


  Slider.prototype.next = function () {
    var index = this.getIndex();

    if (index < this.values.length - 1) {
      index++;
      this.setIndex(index);
    }
  };
  /**
   * Select the next index
   */


  Slider.prototype.playNext = function () {
    var start = new Date();
    var index = this.getIndex();

    if (index < this.values.length - 1) {
      index++;
      this.setIndex(index);
    } else if (this.playLoop) {
      // jump to the start
      index = 0;
      this.setIndex(index);
    }

    var end = new Date();
    var diff = end - start; // calculate how much time it to to set the index and to execute the callback
    // function.

    var interval = Math.max(this.playInterval - diff, 0); // document.title = diff // TODO: cleanup

    var me = this;
    this.playTimeout = setTimeout(function () {
      me.playNext();
    }, interval);
  };
  /**
   * Toggle start or stop playing
   */


  Slider.prototype.togglePlay = function () {
    if (this.playTimeout === undefined) {
      this.play();
    } else {
      this.stop();
    }
  };
  /**
   * Start playing
   */


  Slider.prototype.play = function () {
    // Test whether already playing
    if (this.playTimeout) return;
    this.playNext();

    if (this.frame) {
      this.frame.play.value = 'Stop';
    }
  };
  /**
   * Stop playing
   */


  Slider.prototype.stop = function () {
    clearInterval(this.playTimeout);
    this.playTimeout = undefined;

    if (this.frame) {
      this.frame.play.value = 'Play';
    }
  };
  /**
   * Set a callback function which will be triggered when the value of the
   * slider bar has changed.
   *
   * @param {function} callback
   */


  Slider.prototype.setOnChangeCallback = function (callback) {
    this.onChangeCallback = callback;
  };
  /**
   * Set the interval for playing the list
   * @param {number} interval   The interval in milliseconds
   */


  Slider.prototype.setPlayInterval = function (interval) {
    this.playInterval = interval;
  };
  /**
   * Retrieve the current play interval
   * @return {number} interval   The interval in milliseconds
   */


  Slider.prototype.getPlayInterval = function () {
    return this.playInterval;
  };
  /**
   * Set looping on or off
   * @param {boolean} doLoop  If true, the slider will jump to the start when
   *               the end is passed, and will jump to the end
   *               when the start is passed.
   *
   */


  Slider.prototype.setPlayLoop = function (doLoop) {
    this.playLoop = doLoop;
  };
  /**
   * Execute the onchange callback function
   */


  Slider.prototype.onChange = function () {
    if (this.onChangeCallback !== undefined) {
      this.onChangeCallback();
    }
  };
  /**
   * redraw the slider on the correct place
   */


  Slider.prototype.redraw = function () {
    if (this.frame) {
      // resize the bar
      this.frame.bar.style.top = this.frame.clientHeight / 2 - this.frame.bar.offsetHeight / 2 + 'px';
      this.frame.bar.style.width = this.frame.clientWidth - this.frame.prev.clientWidth - this.frame.play.clientWidth - this.frame.next.clientWidth - 30 + 'px'; // position the slider button

      var left = this.indexToLeft(this.index);
      this.frame.slide.style.left = left + 'px';
    }
  };
  /**
   * Set the list with values for the slider
   * @param {Array} values   A javascript array with values (any type)
   */


  Slider.prototype.setValues = function (values) {
    this.values = values;
    if (this.values.length > 0) this.setIndex(0);else this.index = undefined;
  };
  /**
   * Select a value by its index
   * @param {number} index
   */


  Slider.prototype.setIndex = function (index) {
    if (index < this.values.length) {
      this.index = index;
      this.redraw();
      this.onChange();
    } else {
      throw new Error('Index out of range');
    }
  };
  /**
   * retrieve the index of the currently selected vaue
   * @return {number} index
   */


  Slider.prototype.getIndex = function () {
    return this.index;
  };
  /**
   * retrieve the currently selected value
   * @return {*} value
   */


  Slider.prototype.get = function () {
    return this.values[this.index];
  };

  Slider.prototype._onMouseDown = function (event) {
    // only react on left mouse button down
    var leftButtonDown = event.which ? event.which === 1 : event.button === 1;
    if (!leftButtonDown) return;
    this.startClientX = event.clientX;
    this.startSlideX = parseFloat(this.frame.slide.style.left);
    this.frame.style.cursor = 'move'; // add event listeners to handle moving the contents
    // we store the function onmousemove and onmouseup in the graph, so we can
    // remove the eventlisteners lateron in the function mouseUp()

    var me = this;

    this.onmousemove = function (event) {
      me._onMouseMove(event);
    };

    this.onmouseup = function (event) {
      me._onMouseUp(event);
    };

    util.addEventListener(document, 'mousemove', this.onmousemove);
    util.addEventListener(document, 'mouseup', this.onmouseup);
    util.preventDefault(event);
  };

  Slider.prototype.leftToIndex = function (left) {
    var width = parseFloat(this.frame.bar.style.width) - this.frame.slide.clientWidth - 10;
    var x = left - 3;
    var index = Math.round(x / width * (this.values.length - 1));
    if (index < 0) index = 0;
    if (index > this.values.length - 1) index = this.values.length - 1;
    return index;
  };

  Slider.prototype.indexToLeft = function (index) {
    var width = parseFloat(this.frame.bar.style.width) - this.frame.slide.clientWidth - 10;
    var x = index / (this.values.length - 1) * width;
    var left = x + 3;
    return left;
  };

  Slider.prototype._onMouseMove = function (event) {
    var diff = event.clientX - this.startClientX;
    var x = this.startSlideX + diff;
    var index = this.leftToIndex(x);
    this.setIndex(index);
    util.preventDefault();
  };

  Slider.prototype._onMouseUp = function (event) {
    // eslint-disable-line no-unused-vars
    this.frame.style.cursor = 'auto'; // remove event listeners

    util.removeEventListener(document, 'mousemove', this.onmousemove);
    util.removeEventListener(document, 'mouseup', this.onmouseup);
    util.preventDefault();
  };

  var Slider_1 = Slider;

  /**
   * @prototype StepNumber
   * The class StepNumber is an iterator for Numbers. You provide a start and end
   * value, and a best step size. StepNumber itself rounds to fixed values and
   * a finds the step that best fits the provided step.
   *
   * If prettyStep is true, the step size is chosen as close as possible to the
   * provided step, but being a round value like 1, 2, 5, 10, 20, 50, ....
   *
   * Example usage:
   *   var step = new StepNumber(0, 10, 2.5, true);
   *   step.start();
   *   while (!step.end()) {
   *   alert(step.getCurrent());
   *   step.next();
   *   }
   *
   * Version: 1.0
   *
   * @param {number} start     The start value
   * @param {number} end     The end value
   * @param {number} step    Optional. Step size. Must be a positive value.
   * @param {boolean} prettyStep Optional. If true, the step size is rounded
   *               To a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
   */
  function StepNumber(start, end, step, prettyStep) {
    // set default values
    this._start = 0;
    this._end = 0;
    this._step = 1;
    this.prettyStep = true;
    this.precision = 5;
    this._current = 0;
    this.setRange(start, end, step, prettyStep);
  }
  /**
   * Check for input values, to prevent disasters from happening
   *
   * Source: http://stackoverflow.com/a/1830844
   *
   * @param {string} n
   * @returns {boolean}
   */


  StepNumber.prototype.isNumeric = function (n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };
  /**
   * Set a new range: start, end and step.
   *
   * @param {number} start     The start value
   * @param {number} end     The end value
   * @param {number} step    Optional. Step size. Must be a positive value.
   * @param {boolean} prettyStep Optional. If true, the step size is rounded
   *               To a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
   */


  StepNumber.prototype.setRange = function (start, end, step, prettyStep) {
    if (!this.isNumeric(start)) {
      throw new Error('Parameter \'start\' is not numeric; value: ' + start);
    }

    if (!this.isNumeric(end)) {
      throw new Error('Parameter \'end\' is not numeric; value: ' + start);
    }

    if (!this.isNumeric(step)) {
      throw new Error('Parameter \'step\' is not numeric; value: ' + start);
    }

    this._start = start ? start : 0;
    this._end = end ? end : 0;
    this.setStep(step, prettyStep);
  };
  /**
   * Set a new step size
   * @param {number} step    New step size. Must be a positive value
   * @param {boolean} prettyStep Optional. If true, the provided step is rounded
   *               to a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
   */


  StepNumber.prototype.setStep = function (step, prettyStep) {
    if (step === undefined || step <= 0) return;
    if (prettyStep !== undefined) this.prettyStep = prettyStep;
    if (this.prettyStep === true) this._step = StepNumber.calculatePrettyStep(step);else this._step = step;
  };
  /**
   * Calculate a nice step size, closest to the desired step size.
   * Returns a value in one of the ranges 1*10^n, 2*10^n, or 5*10^n, where n is an
   * integer Number. For example 1, 2, 5, 10, 20, 50, etc...
   * @param {number}  step  Desired step size
   * @return {number}     Nice step size
   */


  StepNumber.calculatePrettyStep = function (step) {
    var log10 = function (x) {
      return Math.log(x) / Math.LN10;
    }; // try three steps (multiple of 1, 2, or 5


    var step1 = Math.pow(10, Math.round(log10(step))),
        step2 = 2 * Math.pow(10, Math.round(log10(step / 2))),
        step5 = 5 * Math.pow(10, Math.round(log10(step / 5))); // choose the best step (closest to minimum step)

    var prettyStep = step1;
    if (Math.abs(step2 - step) <= Math.abs(prettyStep - step)) prettyStep = step2;
    if (Math.abs(step5 - step) <= Math.abs(prettyStep - step)) prettyStep = step5; // for safety

    if (prettyStep <= 0) {
      prettyStep = 1;
    }

    return prettyStep;
  };
  /**
   * returns the current value of the step
   * @return {number} current value
   */


  StepNumber.prototype.getCurrent = function () {
    return parseFloat(this._current.toPrecision(this.precision));
  };
  /**
   * returns the current step size
   * @return {number} current step size
   */


  StepNumber.prototype.getStep = function () {
    return this._step;
  };
  /**
   * Set the current to its starting value.
   *
   * By default, this will be the largest value smaller than start, which
   * is a multiple of the step size.
   *
   * Parameters checkFirst is optional, default false.
   * If set to true, move the current value one step if smaller than start.
   *
   * @param {boolean} [checkFirst=false]
   */


  StepNumber.prototype.start = function (checkFirst) {
    if (checkFirst === undefined) {
      checkFirst = false;
    }

    this._current = this._start - this._start % this._step;

    if (checkFirst) {
      if (this.getCurrent() < this._start) {
        this.next();
      }
    }
  };
  /**
   * Do a step, add the step size to the current value
   */


  StepNumber.prototype.next = function () {
    this._current += this._step;
  };
  /**
   * Returns true whether the end is reached
   * @return {boolean}  True if the current value has passed the end value.
   */


  StepNumber.prototype.end = function () {
    return this._current > this._end;
  };

  var StepNumber_1 = StepNumber;

  /**
   * The camera is mounted on a (virtual) camera arm. The camera arm can rotate
   * The camera is always looking in the direction of the origin of the arm.
   * This way, the camera always rotates around one fixed point, the location
   * of the camera arm.
   *
   * Documentation:
   *   http://en.wikipedia.org/wiki/3D_projection
   * @class Camera
   */

  function Camera() {
    this.armLocation = new Point3d_1();
    this.armRotation = {};
    this.armRotation.horizontal = 0;
    this.armRotation.vertical = 0;
    this.armLength = 1.7;
    this.cameraOffset = new Point3d_1();
    this.offsetMultiplier = 0.6;
    this.cameraLocation = new Point3d_1();
    this.cameraRotation = new Point3d_1(0.5 * Math.PI, 0, 0);
    this.calculateCameraOrientation();
  }
  /**
   * Set offset camera in camera coordinates
   * @param {number} x offset by camera horisontal
   * @param {number} y offset by camera vertical
   */


  Camera.prototype.setOffset = function (x, y) {
    var abs = Math.abs,
        sign = Math.sign,
        mul = this.offsetMultiplier,
        border = this.armLength * mul;

    if (abs(x) > border) {
      x = sign(x) * border;
    }

    if (abs(y) > border) {
      y = sign(y) * border;
    }

    this.cameraOffset.x = x;
    this.cameraOffset.y = y;
    this.calculateCameraOrientation();
  };
  /**
   * Get camera offset by horizontal and vertical
   * @returns {number}
   */


  Camera.prototype.getOffset = function () {
    return this.cameraOffset;
  };
  /**
   * Set the location (origin) of the arm
   * @param {number} x  Normalized value of x
   * @param {number} y  Normalized value of y
   * @param {number} z  Normalized value of z
   */


  Camera.prototype.setArmLocation = function (x, y, z) {
    this.armLocation.x = x;
    this.armLocation.y = y;
    this.armLocation.z = z;
    this.calculateCameraOrientation();
  };
  /**
   * Set the rotation of the camera arm
   * @param {number} horizontal   The horizontal rotation, between 0 and 2*PI.
   *                Optional, can be left undefined.
   * @param {number} vertical   The vertical rotation, between 0 and 0.5*PI
   *                if vertical=0.5*PI, the graph is shown from the
   *                top. Optional, can be left undefined.
   */


  Camera.prototype.setArmRotation = function (horizontal, vertical) {
    if (horizontal !== undefined) {
      this.armRotation.horizontal = horizontal;
    }

    if (vertical !== undefined) {
      this.armRotation.vertical = vertical;
      if (this.armRotation.vertical < 0) this.armRotation.vertical = 0;
      if (this.armRotation.vertical > 0.5 * Math.PI) this.armRotation.vertical = 0.5 * Math.PI;
    }

    if (horizontal !== undefined || vertical !== undefined) {
      this.calculateCameraOrientation();
    }
  };
  /**
   * Retrieve the current arm rotation
   * @return {object}   An object with parameters horizontal and vertical
   */


  Camera.prototype.getArmRotation = function () {
    var rot = {};
    rot.horizontal = this.armRotation.horizontal;
    rot.vertical = this.armRotation.vertical;
    return rot;
  };
  /**
   * Set the (normalized) length of the camera arm.
   * @param {number} length A length between 0.71 and 5.0
   */


  Camera.prototype.setArmLength = function (length) {
    if (length === undefined) return;
    this.armLength = length; // Radius must be larger than the corner of the graph,
    // which has a distance of sqrt(0.5^2+0.5^2) = 0.71 from the center of the
    // graph

    if (this.armLength < 0.71) this.armLength = 0.71;
    if (this.armLength > 5.0) this.armLength = 5.0;
    this.setOffset(this.cameraOffset.x, this.cameraOffset.y);
    this.calculateCameraOrientation();
  };
  /**
   * Retrieve the arm length
   * @return {number} length
   */


  Camera.prototype.getArmLength = function () {
    return this.armLength;
  };
  /**
   * Retrieve the camera location
   * @return {Point3d} cameraLocation
   */


  Camera.prototype.getCameraLocation = function () {
    return this.cameraLocation;
  };
  /**
   * Retrieve the camera rotation
   * @return {Point3d} cameraRotation
   */


  Camera.prototype.getCameraRotation = function () {
    return this.cameraRotation;
  };
  /**
   * Calculate the location and rotation of the camera based on the
   * position and orientation of the camera arm
   */


  Camera.prototype.calculateCameraOrientation = function () {
    // calculate location of the camera
    this.cameraLocation.x = this.armLocation.x - this.armLength * Math.sin(this.armRotation.horizontal) * Math.cos(this.armRotation.vertical);
    this.cameraLocation.y = this.armLocation.y - this.armLength * Math.cos(this.armRotation.horizontal) * Math.cos(this.armRotation.vertical);
    this.cameraLocation.z = this.armLocation.z + this.armLength * Math.sin(this.armRotation.vertical); // calculate rotation of the camera

    this.cameraRotation.x = Math.PI / 2 - this.armRotation.vertical;
    this.cameraRotation.y = 0;
    this.cameraRotation.z = -this.armRotation.horizontal;
    var xa = this.cameraRotation.x;
    var za = this.cameraRotation.z;
    var dx = this.cameraOffset.x;
    var dy = this.cameraOffset.y;
    var sin = Math.sin,
        cos = Math.cos;
    this.cameraLocation.x = this.cameraLocation.x + dx * cos(za) + dy * -sin(za) * cos(xa);
    this.cameraLocation.y = this.cameraLocation.y + dx * sin(za) + dy * cos(za) * cos(xa);
    this.cameraLocation.z = this.cameraLocation.z + dy * sin(xa);
  };

  var Camera_1 = Camera;

  // This modules handles the options for Graph3d.
  //
  ////////////////////////////////////////////////////////////////////////////////
  // enumerate the available styles

  var STYLE = {
    BAR: 0,
    BARCOLOR: 1,
    BARSIZE: 2,
    DOT: 3,
    DOTLINE: 4,
    DOTCOLOR: 5,
    DOTSIZE: 6,
    GRID: 7,
    LINE: 8,
    SURFACE: 9
  }; // The string representations of the styles

  var STYLENAME = {
    'dot': STYLE.DOT,
    'dot-line': STYLE.DOTLINE,
    'dot-color': STYLE.DOTCOLOR,
    'dot-size': STYLE.DOTSIZE,
    'line': STYLE.LINE,
    'grid': STYLE.GRID,
    'surface': STYLE.SURFACE,
    'bar': STYLE.BAR,
    'bar-color': STYLE.BARCOLOR,
    'bar-size': STYLE.BARSIZE
  };
  /**
   * Field names in the options hash which are of relevance to the user.
   *
   * Specifically, these are the fields which require no special handling,
   * and can be directly copied over.
   */

  var OPTIONKEYS = ['width', 'height', 'filterLabel', 'legendLabel', 'xLabel', 'yLabel', 'zLabel', 'xValueLabel', 'yValueLabel', 'zValueLabel', 'showXAxis', 'showYAxis', 'showZAxis', 'showGrid', 'showPerspective', 'showShadow', 'keepAspectRatio', 'rotateAxisLabels', 'verticalRatio', 'dotSizeRatio', 'dotSizeMinFraction', 'dotSizeMaxFraction', 'showAnimationControls', 'animationInterval', 'animationPreload', 'animationAutoStart', 'axisColor', 'axisFontSize', 'axisFontType', 'gridColor', 'xCenter', 'yCenter', 'zoomable', 'tooltipDelay', 'ctrlToZoom'];
  /**
   * Field names in the options hash which are of relevance to the user.
   *
   * Same as OPTIONKEYS, but internally these fields are stored with 
   * prefix 'default' in the name.
   */

  var PREFIXEDOPTIONKEYS = ['xBarWidth', 'yBarWidth', 'valueMin', 'valueMax', 'xMin', 'xMax', 'xStep', 'yMin', 'yMax', 'yStep', 'zMin', 'zMax', 'zStep']; // Placeholder for DEFAULTS reference

  var DEFAULTS = undefined;
  /**
   * Check if given hash is empty.
   *
   * Source: http://stackoverflow.com/a/679937
   *
   * @param {object} obj
   * @returns {boolean}
   */

  function isEmpty(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) return false;
    }

    return true;
  }
  /**
   * Make first letter of parameter upper case.
   *
   * Source: http://stackoverflow.com/a/1026087
   *
   * @param {string} str
   * @returns {string}
   */


  function capitalize(str) {
    if (str === undefined || str === "" || typeof str != "string") {
      return str;
    }

    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  /**
   * Add a prefix to a field name, taking style guide into account
   *
   * @param {string} prefix
   * @param {string} fieldName
   * @returns {string}
   */


  function prefixFieldName(prefix, fieldName) {
    if (prefix === undefined || prefix === "") {
      return fieldName;
    }

    return prefix + capitalize(fieldName);
  }
  /**
   * Forcibly copy fields from src to dst in a controlled manner.
   *
   * A given field in dst will always be overwitten. If this field
   * is undefined or not present in src, the field in dst will 
   * be explicitly set to undefined.
   * 
   * The intention here is to be able to reset all option fields.
   * 
   * Only the fields mentioned in array 'fields' will be handled.
   *
   * @param {object} src
   * @param {object} dst
   * @param {array<string>} fields array with names of fields to copy
   * @param {string} [prefix] prefix to use for the target fields.
   */


  function forceCopy(src, dst, fields, prefix) {
    var srcKey;
    var dstKey;

    for (var i = 0; i < fields.length; ++i) {
      srcKey = fields[i];
      dstKey = prefixFieldName(prefix, srcKey);
      dst[dstKey] = src[srcKey];
    }
  }
  /**
   * Copy fields from src to dst in a safe and controlled manner.
   *
   * Only the fields mentioned in array 'fields' will be copied over,
   * and only if these are actually defined.
   *
   * @param {object} src
   * @param {object} dst
   * @param {array<string>} fields array with names of fields to copy
   * @param {string} [prefix] prefix to use for the target fields.
   */


  function safeCopy(src, dst, fields, prefix) {
    var srcKey;
    var dstKey;

    for (var i = 0; i < fields.length; ++i) {
      srcKey = fields[i];
      if (src[srcKey] === undefined) continue;
      dstKey = prefixFieldName(prefix, srcKey);
      dst[dstKey] = src[srcKey];
    }
  }
  /**
   * Initialize dst with the values in src.
   *
   * src is the hash with the default values. 
   * A reference DEFAULTS to this hash is stored locally for 
   * further handling.
   *
   * For now, dst is assumed to be a Graph3d instance.
   * @param {object} src
   * @param {object} dst
   */


  function setDefaults(src, dst) {
    if (src === undefined || isEmpty(src)) {
      throw new Error('No DEFAULTS passed');
    }

    if (dst === undefined) {
      throw new Error('No dst passed');
    } // Remember defaults for future reference


    DEFAULTS = src; // Handle the defaults which can be simply copied over

    forceCopy(src, dst, OPTIONKEYS);
    forceCopy(src, dst, PREFIXEDOPTIONKEYS, 'default'); // Handle the more complex ('special') fields

    setSpecialSettings(src, dst); // Following are internal fields, not part of the user settings

    dst.margin = 10; // px

    dst.showGrayBottom = false; // TODO: this does not work correctly

    dst.showTooltip = false;
    dst.onclick_callback = null;
    dst.eye = new Point3d_1(0, 0, -1); // TODO: set eye.z about 3/4 of the width of the window?
  }
  /**
   *
   * @param {object} options
   * @param {object} dst
   */


  function setOptions(options, dst) {
    if (options === undefined) {
      return;
    }

    if (dst === undefined) {
      throw new Error('No dst passed');
    }

    if (DEFAULTS === undefined || isEmpty(DEFAULTS)) {
      throw new Error('DEFAULTS not set for module Settings');
    } // Handle the parameters which can be simply copied over


    safeCopy(options, dst, OPTIONKEYS);
    safeCopy(options, dst, PREFIXEDOPTIONKEYS, 'default'); // Handle the more complex ('special') fields

    setSpecialSettings(options, dst);
  }
  /**
   * Special handling for certain parameters
   *
   * 'Special' here means: setting requires more than a simple copy
   *
   * @param {object} src
   * @param {object} dst
   */


  function setSpecialSettings(src, dst) {
    if (src.backgroundColor !== undefined) {
      setBackgroundColor(src.backgroundColor, dst);
    }

    setDataColor(src.dataColor, dst);
    setStyle(src.style, dst);
    setShowLegend(src.showLegend, dst);
    setCameraPosition(src.cameraPosition, dst); // As special fields go, this is an easy one; just a translation of the name.
    // Can't use this.tooltip directly, because that field exists internally

    if (src.tooltip !== undefined) {
      dst.showTooltip = src.tooltip;
    }

    if (src.onclick != undefined) {
      dst.onclick_callback = src.onclick;
    }

    if (src.tooltipStyle !== undefined) {
      util.selectiveDeepExtend(['tooltipStyle'], dst, src);
    }
  }
  /**
   * Set the value of setting 'showLegend'
   *
   * This depends on the value of the style fields, so it must be called
   * after the style field has been initialized.
   *
   * @param {boolean} showLegend
   * @param {object} dst
   */


  function setShowLegend(showLegend, dst) {
    if (showLegend === undefined) {
      // If the default was auto, make a choice for this field
      var isAutoByDefault = DEFAULTS.showLegend === undefined;

      if (isAutoByDefault) {
        // these styles default to having legends
        var isLegendGraphStyle = dst.style === STYLE.DOTCOLOR || dst.style === STYLE.DOTSIZE;
        dst.showLegend = isLegendGraphStyle;
      }
    } else {
      dst.showLegend = showLegend;
    }
  }
  /**
   * Retrieve the style index from given styleName
   * @param {string} styleName  Style name such as 'dot', 'grid', 'dot-line'
   * @return {number} styleNumber Enumeration value representing the style, or -1
   *                when not found
   */


  function getStyleNumberByName(styleName) {
    var number = STYLENAME[styleName];

    if (number === undefined) {
      return -1;
    }

    return number;
  }
  /**
   * Check if given number is a valid style number.
   *
   * @param {string | number} style
   * @return {boolean} true if valid, false otherwise
   */


  function checkStyleNumber(style) {
    var valid = false;

    for (var n in STYLE) {
      if (STYLE[n] === style) {
        valid = true;
        break;
      }
    }

    return valid;
  }
  /**
   *
   * @param {string | number} style
   * @param {Object} dst
   */


  function setStyle(style, dst) {
    if (style === undefined) {
      return; // Nothing to do
    }

    var styleNumber;

    if (typeof style === 'string') {
      styleNumber = getStyleNumberByName(style);

      if (styleNumber === -1) {
        throw new Error('Style \'' + style + '\' is invalid');
      }
    } else {
      // Do a pedantic check on style number value
      if (!checkStyleNumber(style)) {
        throw new Error('Style \'' + style + '\' is invalid');
      }

      styleNumber = style;
    }

    dst.style = styleNumber;
  }
  /**
   * Set the background styling for the graph
   * @param {string | {fill: string, stroke: string, strokeWidth: string}} backgroundColor
   * @param {Object} dst
   */


  function setBackgroundColor(backgroundColor, dst) {
    var fill = 'white';
    var stroke = 'gray';
    var strokeWidth = 1;

    if (typeof backgroundColor === 'string') {
      fill = backgroundColor;
      stroke = 'none';
      strokeWidth = 0;
    } else if (typeof backgroundColor === 'object') {
      if (backgroundColor.fill !== undefined) fill = backgroundColor.fill;
      if (backgroundColor.stroke !== undefined) stroke = backgroundColor.stroke;
      if (backgroundColor.strokeWidth !== undefined) strokeWidth = backgroundColor.strokeWidth;
    } else {
      throw new Error('Unsupported type of backgroundColor');
    }

    dst.frame.style.backgroundColor = fill;
    dst.frame.style.borderColor = stroke;
    dst.frame.style.borderWidth = strokeWidth + 'px';
    dst.frame.style.borderStyle = 'solid';
  }
  /**
   *
   * @param {string | Object} dataColor
   * @param {Object} dst
   */


  function setDataColor(dataColor, dst) {
    if (dataColor === undefined) {
      return; // Nothing to do
    }

    if (dst.dataColor === undefined) {
      dst.dataColor = {};
    }

    if (typeof dataColor === 'string') {
      dst.dataColor.fill = dataColor;
      dst.dataColor.stroke = dataColor;
    } else {
      if (dataColor.fill) {
        dst.dataColor.fill = dataColor.fill;
      }

      if (dataColor.stroke) {
        dst.dataColor.stroke = dataColor.stroke;
      }

      if (dataColor.strokeWidth !== undefined) {
        dst.dataColor.strokeWidth = dataColor.strokeWidth;
      }
    }
  }
  /**
   *
   * @param {Object} cameraPosition
   * @param {Object} dst
   */


  function setCameraPosition(cameraPosition, dst) {
    var camPos = cameraPosition;

    if (camPos === undefined) {
      return;
    }

    if (dst.camera === undefined) {
      dst.camera = new Camera_1();
    }

    dst.camera.setArmRotation(camPos.horizontal, camPos.vertical);
    dst.camera.setArmLength(camPos.distance);
  }

  var STYLE_1 = STYLE;
  var setDefaults_1 = setDefaults;
  var setOptions_1 = setOptions;
  var setCameraPosition_1 = setCameraPosition;
  var Settings = {
    STYLE: STYLE_1,
    setDefaults: setDefaults_1,
    setOptions: setOptions_1,
    setCameraPosition: setCameraPosition_1
  };

  let errorFound = false;
  let allOptions;
  let printStyle = 'background: #FFeeee; color: #dd0000';
  /**
   *  Used to validate options.
   */

  class Validator {
    /**
     * @ignore
     */
    constructor() {}
    /**
     * Main function to be called
     * @param {Object} options
     * @param {Object} referenceOptions
     * @param {Object} subObject
     * @returns {boolean}
     * @static
     */


    static validate(options, referenceOptions, subObject) {
      errorFound = false;
      allOptions = referenceOptions;
      let usedOptions = referenceOptions;

      if (subObject !== undefined) {
        usedOptions = referenceOptions[subObject];
      }

      Validator.parse(options, usedOptions, []);
      return errorFound;
    }
    /**
     * Will traverse an object recursively and check every value
     * @param {Object} options
     * @param {Object} referenceOptions
     * @param {array} path    | where to look for the actual option
     * @static
     */


    static parse(options, referenceOptions, path) {
      for (let option in options) {
        if (options.hasOwnProperty(option)) {
          Validator.check(option, options, referenceOptions, path);
        }
      }
    }
    /**
     * Check every value. If the value is an object, call the parse function on that object.
     * @param {string} option
     * @param {Object} options
     * @param {Object} referenceOptions
     * @param {array} path    | where to look for the actual option
     * @static
     */


    static check(option, options, referenceOptions, path) {
      if (referenceOptions[option] === undefined && referenceOptions.__any__ === undefined) {
        Validator.getSuggestion(option, referenceOptions, path);
        return;
      }

      let referenceOption = option;
      let is_object = true;

      if (referenceOptions[option] === undefined && referenceOptions.__any__ !== undefined) {
        // NOTE: This only triggers if the __any__ is in the top level of the options object.
        //       THAT'S A REALLY BAD PLACE TO ALLOW IT!!!!
        // TODO: Examine if needed, remove if possible
        // __any__ is a wildcard. Any value is accepted and will be further analysed by reference.
        referenceOption = '__any__'; // if the any-subgroup is not a predefined object in the configurator,
        // we do not look deeper into the object.

        is_object = Validator.getType(options[option]) === 'object';
      }

      let refOptionObj = referenceOptions[referenceOption];

      if (is_object && refOptionObj.__type__ !== undefined) {
        refOptionObj = refOptionObj.__type__;
      }

      Validator.checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path);
    }
    /**
     *
     * @param {string}  option           | the option property
     * @param {Object}  options          | The supplied options object
     * @param {Object}  referenceOptions | The reference options containing all options and their allowed formats
     * @param {string}  referenceOption  | Usually this is the same as option, except when handling an __any__ tag.
     * @param {string}  refOptionObj     | This is the type object from the reference options
     * @param {Array}   path             | where in the object is the option
     * @static
     */


    static checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path) {
      let log = function (message) {
        console.log('%c' + message + Validator.printLocation(path, option), printStyle);
      };

      let optionType = Validator.getType(options[option]);
      let refOptionType = refOptionObj[optionType];

      if (refOptionType !== undefined) {
        // if the type is correct, we check if it is supposed to be one of a few select values
        if (Validator.getType(refOptionType) === 'array' && refOptionType.indexOf(options[option]) === -1) {
          log('Invalid option detected in "' + option + '".' + ' Allowed values are:' + Validator.print(refOptionType) + ' not "' + options[option] + '". ');
          errorFound = true;
        } else if (optionType === 'object' && referenceOption !== "__any__") {
          path = util.copyAndExtendArray(path, option);
          Validator.parse(options[option], referenceOptions[referenceOption], path);
        }
      } else if (refOptionObj['any'] === undefined) {
        // type of the field is incorrect and the field cannot be any
        log('Invalid type received for "' + option + '". Expected: ' + Validator.print(Object.keys(refOptionObj)) + '. Received [' + optionType + '] "' + options[option] + '"');
        errorFound = true;
      }
    }
    /**
     *
     * @param {Object|boolean|number|string|Array.<number>|Date|Node|Moment|undefined|null} object
     * @returns {string}
     * @static
     */


    static getType(object) {
      var type = typeof object;

      if (type === 'object') {
        if (object === null) {
          return 'null';
        }

        if (object instanceof Boolean) {
          return 'boolean';
        }

        if (object instanceof Number) {
          return 'number';
        }

        if (object instanceof String) {
          return 'string';
        }

        if (Array.isArray(object)) {
          return 'array';
        }

        if (object instanceof Date) {
          return 'date';
        }

        if (object.nodeType !== undefined) {
          return 'dom';
        }

        if (object._isAMomentObject === true) {
          return 'moment';
        }

        return 'object';
      } else if (type === 'number') {
        return 'number';
      } else if (type === 'boolean') {
        return 'boolean';
      } else if (type === 'string') {
        return 'string';
      } else if (type === undefined) {
        return 'undefined';
      }

      return type;
    }
    /**
     * @param {string} option
     * @param {Object} options
     * @param {Array.<string>} path
     * @static
     */


    static getSuggestion(option, options, path) {
      let localSearch = Validator.findInOptions(option, options, path, false);
      let globalSearch = Validator.findInOptions(option, allOptions, [], true);
      let localSearchThreshold = 8;
      let globalSearchThreshold = 4;
      let msg;

      if (localSearch.indexMatch !== undefined) {
        msg = ' in ' + Validator.printLocation(localSearch.path, option, '') + 'Perhaps it was incomplete? Did you mean: "' + localSearch.indexMatch + '"?\n\n';
      } else if (globalSearch.distance <= globalSearchThreshold && localSearch.distance > globalSearch.distance) {
        msg = ' in ' + Validator.printLocation(localSearch.path, option, '') + 'Perhaps it was misplaced? Matching option found at: ' + Validator.printLocation(globalSearch.path, globalSearch.closestMatch, '');
      } else if (localSearch.distance <= localSearchThreshold) {
        msg = '. Did you mean "' + localSearch.closestMatch + '"?' + Validator.printLocation(localSearch.path, option);
      } else {
        msg = '. Did you mean one of these: ' + Validator.print(Object.keys(options)) + Validator.printLocation(path, option);
      }

      console.log('%cUnknown option detected: "' + option + '"' + msg, printStyle);
      errorFound = true;
    }
    /**
     * traverse the options in search for a match.
     * @param {string} option
     * @param {Object} options
     * @param {Array} path    | where to look for the actual option
     * @param {boolean} [recursive=false]
     * @returns {{closestMatch: string, path: Array, distance: number}}
     * @static
     */


    static findInOptions(option, options, path, recursive = false) {
      let min = 1e9;
      let closestMatch = '';
      let closestMatchPath = [];
      let lowerCaseOption = option.toLowerCase();
      let indexMatch = undefined;

      for (let op in options) {
        // eslint-disable-line guard-for-in
        let distance;

        if (options[op].__type__ !== undefined && recursive === true) {
          let result = Validator.findInOptions(option, options[op], util.copyAndExtendArray(path, op));

          if (min > result.distance) {
            closestMatch = result.closestMatch;
            closestMatchPath = result.path;
            min = result.distance;
            indexMatch = result.indexMatch;
          }
        } else {
          if (op.toLowerCase().indexOf(lowerCaseOption) !== -1) {
            indexMatch = op;
          }

          distance = Validator.levenshteinDistance(option, op);

          if (min > distance) {
            closestMatch = op;
            closestMatchPath = util.copyArray(path);
            min = distance;
          }
        }
      }

      return {
        closestMatch: closestMatch,
        path: closestMatchPath,
        distance: min,
        indexMatch: indexMatch
      };
    }
    /**
     * @param {Array.<string>} path
     * @param {Object} option
     * @param {string} prefix
     * @returns {String}
     * @static
     */


    static printLocation(path, option, prefix = 'Problem value found at: \n') {
      let str = '\n\n' + prefix + 'options = {\n';

      for (let i = 0; i < path.length; i++) {
        for (let j = 0; j < i + 1; j++) {
          str += '  ';
        }

        str += path[i] + ': {\n';
      }

      for (let j = 0; j < path.length + 1; j++) {
        str += '  ';
      }

      str += option + '\n';

      for (let i = 0; i < path.length + 1; i++) {
        for (let j = 0; j < path.length - i; j++) {
          str += '  ';
        }

        str += '}\n';
      }

      return str + '\n\n';
    }
    /**
     * @param {Object} options
     * @returns {String}
     * @static
     */


    static print(options) {
      return JSON.stringify(options).replace(/(\")|(\[)|(\])|(,"__type__")/g, "").replace(/(\,)/g, ', ');
    }
    /**
     *  Compute the edit distance between the two given strings
     * http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript
     *
     * Copyright (c) 2011 Andrei Mackenzie
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     *
     * @param {string} a
     * @param {string} b
     * @returns {Array.<Array.<number>>}}
     * @static
     */


    static levenshteinDistance(a, b) {
      if (a.length === 0) return b.length;
      if (b.length === 0) return a.length;
      var matrix = []; // increment along the first column of each row

      var i;

      for (i = 0; i <= b.length; i++) {
        matrix[i] = [i];
      } // increment each column in the first row


      var j;

      for (j = 0; j <= a.length; j++) {
        matrix[0][j] = j;
      } // Fill in the rest of the matrix


      for (i = 1; i <= b.length; i++) {
        for (j = 1; j <= a.length; j++) {
          if (b.charAt(i - 1) == a.charAt(j - 1)) {
            matrix[i][j] = matrix[i - 1][j - 1];
          } else {
            matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution
            Math.min(matrix[i][j - 1] + 1, // insertion
            matrix[i - 1][j] + 1)); // deletion
          }
        }
      }

      return matrix[b.length][a.length];
    }

  }

  var Validator$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Validator: Validator,
    printStyle: printStyle
  });

  /**
   * This object contains all possible options. It will check if the types are correct, if required if the option is one
   * of the allowed values.
   *
   * __any__ means that the name of the property does not matter.
   * __type__ is a required field for all objects and contains the allowed types of all objects
   */
  let string = 'string';
  let bool = 'boolean';
  let number = 'number';
  let object = 'object'; // should only be in a __type__ property
  // Following not used here, but useful for reference
  //let array    = 'array';
  //let dom      = 'dom';
  //let any      = 'any';

  let colorOptions = {
    fill: {
      string
    },
    stroke: {
      string
    },
    strokeWidth: {
      number
    },
    __type__: {
      string,
      object,
      'undefined': 'undefined'
    }
  };
  /**
   * Order attempted to be alphabetical.
   *   - x/y/z-prefixes ignored in sorting
   *   - __type__ always at end
   *   - globals at end
   */

  let allOptions$1 = {
    animationAutoStart: {
      boolean: bool,
      'undefined': 'undefined'
    },
    animationInterval: {
      number
    },
    animationPreload: {
      boolean: bool
    },
    axisColor: {
      string
    },
    axisFontSize: {
      number: number
    },
    axisFontType: {
      string: string
    },
    backgroundColor: colorOptions,
    xBarWidth: {
      number,
      'undefined': 'undefined'
    },
    yBarWidth: {
      number,
      'undefined': 'undefined'
    },
    cameraPosition: {
      distance: {
        number
      },
      horizontal: {
        number
      },
      vertical: {
        number
      },
      __type__: {
        object
      }
    },
    zoomable: {
      boolean: bool
    },
    ctrlToZoom: {
      boolean: bool
    },
    xCenter: {
      string
    },
    yCenter: {
      string
    },
    dataColor: colorOptions,
    dotSizeMinFraction: {
      number
    },
    dotSizeMaxFraction: {
      number
    },
    dotSizeRatio: {
      number
    },
    filterLabel: {
      string
    },
    gridColor: {
      string
    },
    onclick: {
      'function': 'function'
    },
    keepAspectRatio: {
      boolean: bool
    },
    xLabel: {
      string
    },
    yLabel: {
      string
    },
    zLabel: {
      string
    },
    legendLabel: {
      string
    },
    xMin: {
      number,
      'undefined': 'undefined'
    },
    yMin: {
      number,
      'undefined': 'undefined'
    },
    zMin: {
      number,
      'undefined': 'undefined'
    },
    xMax: {
      number,
      'undefined': 'undefined'
    },
    yMax: {
      number,
      'undefined': 'undefined'
    },
    zMax: {
      number,
      'undefined': 'undefined'
    },
    showAnimationControls: {
      boolean: bool,
      'undefined': 'undefined'
    },
    showGrid: {
      boolean: bool
    },
    showLegend: {
      boolean: bool,
      'undefined': 'undefined'
    },
    showPerspective: {
      boolean: bool
    },
    showShadow: {
      boolean: bool
    },
    showXAxis: {
      boolean: bool
    },
    showYAxis: {
      boolean: bool
    },
    showZAxis: {
      boolean: bool
    },
    rotateAxisLabels: {
      boolean: bool
    },
    xStep: {
      number,
      'undefined': 'undefined'
    },
    yStep: {
      number,
      'undefined': 'undefined'
    },
    zStep: {
      number,
      'undefined': 'undefined'
    },
    style: {
      number,
      // TODO: either Graph3d.DEFAULT has string, or number allowed in documentation
      string: ['bar', 'bar-color', 'bar-size', 'dot', 'dot-line', 'dot-color', 'dot-size', 'line', 'grid', 'surface']
    },
    tooltip: {
      boolean: bool,
      'function': 'function'
    },
    tooltipDelay: {
      number: number
    },
    tooltipStyle: {
      content: {
        color: {
          string
        },
        background: {
          string
        },
        border: {
          string
        },
        borderRadius: {
          string
        },
        boxShadow: {
          string
        },
        padding: {
          string
        },
        __type__: {
          object
        }
      },
      line: {
        borderLeft: {
          string
        },
        height: {
          string
        },
        width: {
          string
        },
        pointerEvents: {
          string
        },
        __type__: {
          object
        }
      },
      dot: {
        border: {
          string
        },
        borderRadius: {
          string
        },
        height: {
          string
        },
        width: {
          string
        },
        pointerEvents: {
          string
        },
        __type__: {
          object
        }
      },
      __type__: {
        object
      }
    },
    xValueLabel: {
      'function': 'function'
    },
    yValueLabel: {
      'function': 'function'
    },
    zValueLabel: {
      'function': 'function'
    },
    valueMax: {
      number,
      'undefined': 'undefined'
    },
    valueMin: {
      number,
      'undefined': 'undefined'
    },
    verticalRatio: {
      number
    },
    //globals :
    height: {
      string
    },
    width: {
      string
    },
    __type__: {
      object
    }
  };

  var options = /*#__PURE__*/Object.freeze({
    __proto__: null,
    allOptions: allOptions$1
  });

  /**
   * @prototype Range
   *
   * Helper class to make working with related min and max values easier.
   *
   * The range is inclusive; a given value is considered part of the range if:
   *
   *    this.min <= value <= this.max
   */
  function Range() {
    this.min = undefined;
    this.max = undefined;
  }
  /**
   * Adjust the range so that the passed value fits in it.
   *
   * If the value is outside of the current extremes, adjust
   * the min or max so that the value is within the range.
   *
   * @param {number} value Numeric value to fit in range
   */


  Range.prototype.adjust = function (value) {
    if (value === undefined) return;

    if (this.min === undefined || this.min > value) {
      this.min = value;
    }

    if (this.max === undefined || this.max < value) {
      this.max = value;
    }
  };
  /**
   * Adjust the current range so that the passed range fits in it.
   *
   * @param {Range} range Range instance to fit in current instance
   */


  Range.prototype.combine = function (range) {
    this.add(range.min);
    this.add(range.max);
  };
  /**
   * Expand the range by the given value
   *
   * min will be lowered by given value;
   * max will be raised by given value
   *
   * Shrinking by passing a negative value is allowed.
   *
   * @param {number} val Amount by which to expand or shrink current range with
   */


  Range.prototype.expand = function (val) {
    if (val === undefined) {
      return;
    }

    var newMin = this.min - val;
    var newMax = this.max + val; // Note that following allows newMin === newMax.
    // This should be OK, since method expand() allows this also.

    if (newMin > newMax) {
      throw new Error('Passed expansion value makes range invalid');
    }

    this.min = newMin;
    this.max = newMax;
  };
  /**
   * Determine the full range width of current instance.
   *
   * @returns {num} The calculated width of this range
   */


  Range.prototype.range = function () {
    return this.max - this.min;
  };
  /**
   * Determine the central point of current instance.
   *
   * @returns {number} the value in the middle of min and max
   */


  Range.prototype.center = function () {
    return (this.min + this.max) / 2;
  };

  var Range_1 = Range;

  var {
    DataView: DataView$1
  } = index;
  /**
   * @class Filter
   *
   * @param {DataGroup} dataGroup the data group 
   * @param {number}  column             The index of the column to be filtered
   * @param {Graph3d} graph              The graph
   */

  function Filter(dataGroup, column, graph) {
    this.dataGroup = dataGroup;
    this.column = column;
    this.graph = graph; // the parent graph

    this.index = undefined;
    this.value = undefined; // read all distinct values and select the first one

    this.values = dataGroup.getDistinctValues(this.column);

    if (this.values.length > 0) {
      this.selectValue(0);
    } // create an array with the filtered datapoints. this will be loaded afterwards


    this.dataPoints = [];
    this.loaded = false;
    this.onLoadCallback = undefined;

    if (graph.animationPreload) {
      this.loaded = false;
      this.loadInBackground();
    } else {
      this.loaded = true;
    }
  }
  /**
   * Return the label
   * @return {string} label
   */


  Filter.prototype.isLoaded = function () {
    return this.loaded;
  };
  /**
   * Return the loaded progress
   * @return {number} percentage between 0 and 100
   */


  Filter.prototype.getLoadedProgress = function () {
    var len = this.values.length;
    var i = 0;

    while (this.dataPoints[i]) {
      i++;
    }

    return Math.round(i / len * 100);
  };
  /**
   * Return the label
   * @return {string} label
   */


  Filter.prototype.getLabel = function () {
    return this.graph.filterLabel;
  };
  /**
   * Return the columnIndex of the filter
   * @return {number} columnIndex
   */


  Filter.prototype.getColumn = function () {
    return this.column;
  };
  /**
   * Return the currently selected value. Returns undefined if there is no selection
   * @return {*} value
   */


  Filter.prototype.getSelectedValue = function () {
    if (this.index === undefined) return undefined;
    return this.values[this.index];
  };
  /**
   * Retrieve all values of the filter
   * @return {Array} values
   */


  Filter.prototype.getValues = function () {
    return this.values;
  };
  /**
   * Retrieve one value of the filter
   * @param {number}  index
   * @return {*} value
   */


  Filter.prototype.getValue = function (index) {
    if (index >= this.values.length) throw new Error('Index out of range');
    return this.values[index];
  };
  /**
   * Retrieve the (filtered) dataPoints for the currently selected filter index
   * @param {number} [index] (optional)
   * @return {Array} dataPoints
   */


  Filter.prototype._getDataPoints = function (index) {
    if (index === undefined) index = this.index;
    if (index === undefined) return [];
    var dataPoints;

    if (this.dataPoints[index]) {
      dataPoints = this.dataPoints[index];
    } else {
      var f = {};
      f.column = this.column;
      f.value = this.values[index];
      var dataView = new DataView$1(this.dataGroup.getDataSet(), {
        filter: function (item) {
          return item[f.column] == f.value;
        }
      }).get();
      dataPoints = this.dataGroup._getDataPoints(dataView);
      this.dataPoints[index] = dataPoints;
    }

    return dataPoints;
  };
  /**
   * Set a callback function when the filter is fully loaded.
   *
   * @param {function} callback
   */


  Filter.prototype.setOnLoadCallback = function (callback) {
    this.onLoadCallback = callback;
  };
  /**
   * Add a value to the list with available values for this filter
   * No double entries will be created.
   * @param {number} index
   */


  Filter.prototype.selectValue = function (index) {
    if (index >= this.values.length) throw new Error('Index out of range');
    this.index = index;
    this.value = this.values[index];
  };
  /**
   * Load all filtered rows in the background one by one
   * Start this method without providing an index!
   *
   * @param {number} [index=0]
   */


  Filter.prototype.loadInBackground = function (index) {
    if (index === undefined) index = 0;
    var frame = this.graph.frame;

    if (index < this.values.length) {
      // create a progress box
      if (frame.progress === undefined) {
        frame.progress = document.createElement('DIV');
        frame.progress.style.position = 'absolute';
        frame.progress.style.color = 'gray';
        frame.appendChild(frame.progress);
      }

      var progress = this.getLoadedProgress();
      frame.progress.innerHTML = 'Loading animation... ' + progress + '%'; // TODO: this is no nice solution...

      frame.progress.style.bottom = 60 + 'px'; // TODO: use height of slider

      frame.progress.style.left = 10 + 'px';
      var me = this;
      setTimeout(function () {
        me.loadInBackground(index + 1);
      }, 10);
      this.loaded = false;
    } else {
      this.loaded = true; // remove the progress box

      if (frame.progress !== undefined) {
        frame.removeChild(frame.progress);
        frame.progress = undefined;
      }

      if (this.onLoadCallback) this.onLoadCallback();
    }
  };

  var Filter_1 = Filter;

  var {
    DataSet: DataSet$1
  } = index;
  var {
    DataView: DataView$2
  } = index;
  /**
   * Creates a container for all data of one specific 3D-graph.
   *
   * On construction, the container is totally empty; the data
   * needs to be initialized with method initializeData().
   * Failure to do so will result in the following exception begin thrown
   * on instantiation of Graph3D:
   *
   *     Error: Array, DataSet, or DataView expected
   *
   * @constructor DataGroup
   */

  function DataGroup() {
    this.dataTable = null; // The original data table
  }
  /**
   * Initializes the instance from the passed data.
   *
   * Calculates minimum and maximum values and column index values.
   *
   * The graph3d instance is used internally to access the settings for
   * the given instance.
   * TODO: Pass settings only instead.
   *
   * @param {vis.Graph3d}  graph3d Reference to the calling Graph3D instance.
   * @param {Array | DataSet | DataView} rawData The data containing the items for
   *                                             the Graph.
   * @param {number}   style   Style Number
   * @returns {Array.<Object>}
   */


  DataGroup.prototype.initializeData = function (graph3d, rawData, style) {
    if (rawData === undefined) return;

    if (Array.isArray(rawData)) {
      rawData = new DataSet$1(rawData);
    }

    var data;

    if (rawData instanceof DataSet$1 || rawData instanceof DataView$2) {
      data = rawData.get();
    } else {
      throw new Error('Array, DataSet, or DataView expected');
    }

    if (data.length == 0) return;
    this.style = style; // unsubscribe from the dataTable

    if (this.dataSet) {
      this.dataSet.off('*', this._onChange);
    }

    this.dataSet = rawData;
    this.dataTable = data; // subscribe to changes in the dataset

    var me = this;

    this._onChange = function () {
      graph3d.setData(me.dataSet);
    };

    this.dataSet.on('*', this._onChange); // determine the location of x,y,z,value,filter columns

    this.colX = 'x';
    this.colY = 'y';
    this.colZ = 'z';
    var withBars = graph3d.hasBars(style); // determine barWidth from data

    if (withBars) {
      if (graph3d.defaultXBarWidth !== undefined) {
        this.xBarWidth = graph3d.defaultXBarWidth;
      } else {
        this.xBarWidth = this.getSmallestDifference(data, this.colX) || 1;
      }

      if (graph3d.defaultYBarWidth !== undefined) {
        this.yBarWidth = graph3d.defaultYBarWidth;
      } else {
        this.yBarWidth = this.getSmallestDifference(data, this.colY) || 1;
      }
    } // calculate minima and maxima


    this._initializeRange(data, this.colX, graph3d, withBars);

    this._initializeRange(data, this.colY, graph3d, withBars);

    this._initializeRange(data, this.colZ, graph3d, false);

    if (data[0].hasOwnProperty('style')) {
      this.colValue = 'style';
      var valueRange = this.getColumnRange(data, this.colValue);

      this._setRangeDefaults(valueRange, graph3d.defaultValueMin, graph3d.defaultValueMax);

      this.valueRange = valueRange;
    } // Initialize data filter if a filter column is provided


    var table = this.getDataTable();

    if (table[0].hasOwnProperty('filter')) {
      if (this.dataFilter === undefined) {
        this.dataFilter = new Filter_1(this, 'filter', graph3d);
        this.dataFilter.setOnLoadCallback(function () {
          graph3d.redraw();
        });
      }
    }

    var dataPoints;

    if (this.dataFilter) {
      // apply filtering
      dataPoints = this.dataFilter._getDataPoints();
    } else {
      // no filtering. load all data
      dataPoints = this._getDataPoints(this.getDataTable());
    }

    return dataPoints;
  };
  /**
   * Collect the range settings for the given data column.
   *
   * This internal method is intended to make the range 
   * initalization more generic.
   *
   * TODO: if/when combined settings per axis defined, get rid of this.
   *
   * @private
   *
   * @param {'x'|'y'|'z'} column  The data column to process
   * @param {vis.Graph3d} graph3d Reference to the calling Graph3D instance;
   *                              required for access to settings
   * @returns {Object}
   */


  DataGroup.prototype._collectRangeSettings = function (column, graph3d) {
    var index = ['x', 'y', 'z'].indexOf(column);

    if (index == -1) {
      throw new Error('Column \'' + column + '\' invalid');
    }

    var upper = column.toUpperCase();
    return {
      barWidth: this[column + 'BarWidth'],
      min: graph3d['default' + upper + 'Min'],
      max: graph3d['default' + upper + 'Max'],
      step: graph3d['default' + upper + 'Step'],
      range_label: column + 'Range',
      // Name of instance field to write to
      step_label: column + 'Step' // Name of instance field to write to

    };
  };
  /**
   * Initializes the settings per given column.
   *
   * TODO: if/when combined settings per axis defined, rewrite this.
   *
   * @private
   *
   * @param {DataSet | DataView} data     The data containing the items for the Graph
   * @param {'x'|'y'|'z'}        column   The data column to process
   * @param {vis.Graph3d}        graph3d  Reference to the calling Graph3D instance;
   *                                      required for access to settings
   * @param {boolean}            withBars True if initializing for bar graph
   */


  DataGroup.prototype._initializeRange = function (data, column, graph3d, withBars) {
    var NUMSTEPS = 5;

    var settings = this._collectRangeSettings(column, graph3d);

    var range = this.getColumnRange(data, column);

    if (withBars && column != 'z') {
      // Safeguard for 'z'; it doesn't have a bar width
      range.expand(settings.barWidth / 2);
    }

    this._setRangeDefaults(range, settings.min, settings.max);

    this[settings.range_label] = range;
    this[settings.step_label] = settings.step !== undefined ? settings.step : range.range() / NUMSTEPS;
  };
  /**
   * Creates a list with all the different values in the data for the given column.
   *
   * If no data passed, use the internal data of this instance.
   *
   * @param {'x'|'y'|'z'}                column The data column to process
   * @param {DataSet|DataView|undefined} data   The data containing the items for the Graph
   *
   * @returns {Array} All distinct values in the given column data, sorted ascending.
   */


  DataGroup.prototype.getDistinctValues = function (column, data) {
    if (data === undefined) {
      data = this.dataTable;
    }

    var values = [];

    for (var i = 0; i < data.length; i++) {
      var value = data[i][column] || 0;

      if (values.indexOf(value) === -1) {
        values.push(value);
      }
    }

    return values.sort(function (a, b) {
      return a - b;
    });
  };
  /**
   * Determine the smallest difference between the values for given
   * column in the passed data set.
   *
   * @param {DataSet|DataView|undefined} data   The data containing the items for the Graph
   * @param {'x'|'y'|'z'}                column The data column to process
   *
   * @returns {number|null} Smallest difference value or
   *                        null, if it can't be determined.
   */


  DataGroup.prototype.getSmallestDifference = function (data, column) {
    var values = this.getDistinctValues(data, column); // Get all the distinct diffs
    // Array values is assumed to be sorted here

    var smallest_diff = null;

    for (var i = 1; i < values.length; i++) {
      var diff = values[i] - values[i - 1];

      if (smallest_diff == null || smallest_diff > diff) {
        smallest_diff = diff;
      }
    }

    return smallest_diff;
  };
  /**
   * Get the absolute min/max values for the passed data column.
   *
   * @param {DataSet|DataView|undefined} data   The data containing the items for the Graph
   * @param {'x'|'y'|'z'}                column The data column to process
   *
   * @returns {Range} A Range instance with min/max members properly set.
   */


  DataGroup.prototype.getColumnRange = function (data, column) {
    var range = new Range_1(); // Adjust the range so that it covers all values in the passed data elements.

    for (var i = 0; i < data.length; i++) {
      var item = data[i][column];
      range.adjust(item);
    }

    return range;
  };
  /**
   * Determines the number of rows in the current data.
   *
   * @returns {number}
   */


  DataGroup.prototype.getNumberOfRows = function () {
    return this.dataTable.length;
  };
  /**
   * Set default values for range
   *
   * The default values override the range values, if defined.
   *
   * Because it's possible that only defaultMin or defaultMax is set, it's better
   * to pass in a range already set with the min/max set from the data. Otherwise,
   * it's quite hard to process the min/max properly.
   *
   * @param {vis.Range} range
   * @param {number} [defaultMin=range.min]
   * @param {number} [defaultMax=range.max]
   * @private
   */


  DataGroup.prototype._setRangeDefaults = function (range, defaultMin, defaultMax) {
    if (defaultMin !== undefined) {
      range.min = defaultMin;
    }

    if (defaultMax !== undefined) {
      range.max = defaultMax;
    } // This is the original way that the default min/max values were adjusted.
    // TODO: Perhaps it's better if an error is thrown if the values do not agree.
    //       But this will change the behaviour.


    if (range.max <= range.min) range.max = range.min + 1;
  };

  DataGroup.prototype.getDataTable = function () {
    return this.dataTable;
  };

  DataGroup.prototype.getDataSet = function () {
    return this.dataSet;
  };
  /**
   * Return all data values as a list of Point3d objects
   * @param {Array.<Object>} data
   * @returns {Array.<Object>}
   */


  DataGroup.prototype.getDataPoints = function (data) {
    var dataPoints = [];

    for (var i = 0; i < data.length; i++) {
      var point = new Point3d_1();
      point.x = data[i][this.colX] || 0;
      point.y = data[i][this.colY] || 0;
      point.z = data[i][this.colZ] || 0;
      point.data = data[i];

      if (this.colValue !== undefined) {
        point.value = data[i][this.colValue] || 0;
      }

      var obj = {};
      obj.point = point;
      obj.bottom = new Point3d_1(point.x, point.y, this.zRange.min);
      obj.trans = undefined;
      obj.screen = undefined;
      dataPoints.push(obj);
    }

    return dataPoints;
  };
  /**
   * Copy all values from the data table to a matrix.
   *
   * The provided values are supposed to form a grid of (x,y) positions.
   * @param {Array.<Object>} data
   * @returns {Array.<Object>}
   * @private
   */


  DataGroup.prototype.initDataAsMatrix = function (data) {
    // TODO: store the created matrix dataPoints in the filters instead of
    //       reloading each time.
    var x, y, i, obj; // create two lists with all present x and y values

    var dataX = this.getDistinctValues(this.colX, data);
    var dataY = this.getDistinctValues(this.colY, data);
    var dataPoints = this.getDataPoints(data); // create a grid, a 2d matrix, with all values.

    var dataMatrix = []; // temporary data matrix

    for (i = 0; i < dataPoints.length; i++) {
      obj = dataPoints[i]; // TODO: implement Array().indexOf() for Internet Explorer

      var xIndex = dataX.indexOf(obj.point.x);
      var yIndex = dataY.indexOf(obj.point.y);

      if (dataMatrix[xIndex] === undefined) {
        dataMatrix[xIndex] = [];
      }

      dataMatrix[xIndex][yIndex] = obj;
    } // fill in the pointers to the neighbors.


    for (x = 0; x < dataMatrix.length; x++) {
      for (y = 0; y < dataMatrix[x].length; y++) {
        if (dataMatrix[x][y]) {
          dataMatrix[x][y].pointRight = x < dataMatrix.length - 1 ? dataMatrix[x + 1][y] : undefined;
          dataMatrix[x][y].pointTop = y < dataMatrix[x].length - 1 ? dataMatrix[x][y + 1] : undefined;
          dataMatrix[x][y].pointCross = x < dataMatrix.length - 1 && y < dataMatrix[x].length - 1 ? dataMatrix[x + 1][y + 1] : undefined;
        }
      }
    }

    return dataPoints;
  };
  /**
   * Return common information, if present
   *
   * @returns {string}
   */


  DataGroup.prototype.getInfo = function () {
    var dataFilter = this.dataFilter;
    if (!dataFilter) return undefined;
    return dataFilter.getLabel() + ': ' + dataFilter.getSelectedValue();
  };
  /**
   * Reload the data
   */


  DataGroup.prototype.reload = function () {
    if (this.dataTable) {
      this.setData(this.dataTable);
    }
  };
  /**
   * Filter the data based on the current filter
   *
   * @param   {Array} data
   * @returns {Array} dataPoints Array with point objects which can be drawn on
   *                             screen
   */


  DataGroup.prototype._getDataPoints = function (data) {
    var dataPoints = [];

    if (this.style === Settings.STYLE.GRID || this.style === Settings.STYLE.SURFACE) {
      dataPoints = this.initDataAsMatrix(data);
    } else {
      // 'dot', 'dot-line', etc.
      this._checkValueField(data);

      dataPoints = this.getDataPoints(data);

      if (this.style === Settings.STYLE.LINE) {
        // Add next member points for line drawing
        for (var i = 0; i < dataPoints.length; i++) {
          if (i > 0) {
            dataPoints[i - 1].pointNext = dataPoints[i];
          }
        }
      }
    }

    return dataPoints;
  };
  /**
   * Check if the state is consistent for the use of the value field.
   *
   * Throws if a problem is detected.
   *
   * @param {Array.<Object>} data
   * @private
   */


  DataGroup.prototype._checkValueField = function (data) {
    var hasValueField = this.style === Settings.STYLE.BARCOLOR || this.style === Settings.STYLE.BARSIZE || this.style === Settings.STYLE.DOTCOLOR || this.style === Settings.STYLE.DOTSIZE;

    if (!hasValueField) {
      return; // No need to check further
    } // Following field must be present for the current graph style


    if (this.colValue === undefined) {
      throw new Error('Expected data to have ' + ' field \'style\' ' + ' for graph style \'' + this.style + '\'');
    } // The data must also contain this field.
    // Note that only first data element is checked.


    if (data[0][this.colValue] === undefined) {
      throw new Error('Expected data to have ' + ' field \'' + this.colValue + '\' ' + ' for graph style \'' + this.style + '\'');
    }
  };

  var DataGroup_1 = DataGroup;

  var Validator$2 = Validator$1.Validator;
  var printStyle$1 = Validator$1.printStyle;
  var {
    allOptions: allOptions$2
  } = options; /// enumerate the available styles

  Graph3d.STYLE = Settings.STYLE;
  /**
   * Following label is used in the settings to describe values which should be
   * determined by the code while running, from the current data and graph style.
   *
   * Using 'undefined' directly achieves the same thing, but this is more
   * descriptive by describing the intent.
   */

  var autoByDefault = undefined;
  /**
   * Default values for option settings.
   *
   * These are the values used when a Graph3d instance is initialized without
   * custom settings.
   *
   * If a field is not in this list, a default value of 'autoByDefault' is assumed,
   * which is just an alias for 'undefined'.
   */

  Graph3d.DEFAULTS = {
    width: '400px',
    height: '400px',
    filterLabel: 'time',
    legendLabel: 'value',
    xLabel: 'x',
    yLabel: 'y',
    zLabel: 'z',
    xValueLabel: function (v) {
      return v;
    },
    yValueLabel: function (v) {
      return v;
    },
    zValueLabel: function (v) {
      return v;
    },
    showXAxis: true,
    showYAxis: true,
    showZAxis: true,
    showGrid: true,
    showPerspective: true,
    showShadow: false,
    keepAspectRatio: true,
    rotateAxisLabels: true,
    verticalRatio: 0.5,
    // 0.1 to 1.0, where 1.0 results in a 'cube'
    dotSizeRatio: 0.02,
    // size of the dots as a fraction of the graph width
    dotSizeMinFraction: 0.5,
    // size of min-value dot as a fraction of dotSizeRatio	
    dotSizeMaxFraction: 2.5,
    // size of max-value dot as a fraction of dotSizeRatio	
    showAnimationControls: autoByDefault,
    animationInterval: 1000,
    // milliseconds
    animationPreload: false,
    animationAutoStart: autoByDefault,
    axisFontSize: 14,
    axisFontType: 'arial',
    axisColor: '#4D4D4D',
    gridColor: '#D3D3D3',
    xCenter: '55%',
    yCenter: '50%',
    style: Graph3d.STYLE.DOT,
    tooltip: false,
    tooltipDelay: 300,
    // milliseconds
    tooltipStyle: {
      content: {
        padding: '10px',
        border: '1px solid #4d4d4d',
        color: '#1a1a1a',
        background: 'rgba(255,255,255,0.7)',
        borderRadius: '2px',
        boxShadow: '5px 5px 10px rgba(128,128,128,0.5)'
      },
      line: {
        height: '40px',
        width: '0',
        borderLeft: '1px solid #4d4d4d',
        pointerEvents: 'none'
      },
      dot: {
        height: '0',
        width: '0',
        border: '5px solid #4d4d4d',
        borderRadius: '5px',
        pointerEvents: 'none'
      }
    },
    dataColor: {
      fill: '#7DC1FF',
      stroke: '#3267D2',
      strokeWidth: 1 // px

    },
    cameraPosition: {
      horizontal: 1.0,
      vertical: 0.5,
      distance: 1.7
    },
    zoomable: true,
    ctrlToZoom: false,

    /*
      The following fields are 'auto by default', see above.
     */
    showLegend: autoByDefault,
    // determined by graph style
    backgroundColor: autoByDefault,
    xBarWidth: autoByDefault,
    yBarWidth: autoByDefault,
    valueMin: autoByDefault,
    valueMax: autoByDefault,
    xMin: autoByDefault,
    xMax: autoByDefault,
    xStep: autoByDefault,
    yMin: autoByDefault,
    yMax: autoByDefault,
    yStep: autoByDefault,
    zMin: autoByDefault,
    zMax: autoByDefault,
    zStep: autoByDefault
  }; // -----------------------------------------------------------------------------
  // Class Graph3d
  // -----------------------------------------------------------------------------

  /**
   * Graph3d displays data in 3d.
   *
   * Graph3d is developed in javascript as a Google Visualization Chart.
   *
   * @constructor Graph3d
   * @param {Element} container   The DOM element in which the Graph3d will
   *                              be created. Normally a div element.
   * @param {DataSet | DataView | Array} [data]
   * @param {Object} [options]
   */

  function Graph3d(container, data, options) {
    if (!(this instanceof Graph3d)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // create variables and set default values


    this.containerElement = container;
    this.dataGroup = new DataGroup_1();
    this.dataPoints = null; // The table with point objects
    // create a frame and canvas

    this.create();
    Settings.setDefaults(Graph3d.DEFAULTS, this); // the column indexes

    this.colX = undefined;
    this.colY = undefined;
    this.colZ = undefined;
    this.colValue = undefined; // TODO: customize axis range
    // apply options (also when undefined)

    this.setOptions(options); // apply data

    this.setData(data);
  } // Extend Graph3d with an Emitter mixin


  emitterComponent(Graph3d.prototype);
  /**
   * Calculate the scaling values, dependent on the range in x, y, and z direction
   */

  Graph3d.prototype._setScale = function () {
    this.scale = new Point3d_1(1 / this.xRange.range(), 1 / this.yRange.range(), 1 / this.zRange.range()); // keep aspect ration between x and y scale if desired

    if (this.keepAspectRatio) {
      if (this.scale.x < this.scale.y) {
        //noinspection JSSuspiciousNameCombination
        this.scale.y = this.scale.x;
      } else {
        //noinspection JSSuspiciousNameCombination
        this.scale.x = this.scale.y;
      }
    } // scale the vertical axis


    this.scale.z *= this.verticalRatio; // TODO: can this be automated? verticalRatio?
    // determine scale for (optional) value

    if (this.valueRange !== undefined) {
      this.scale.value = 1 / this.valueRange.range();
    } // position the camera arm


    var xCenter = this.xRange.center() * this.scale.x;
    var yCenter = this.yRange.center() * this.scale.y;
    var zCenter = this.zRange.center() * this.scale.z;
    this.camera.setArmLocation(xCenter, yCenter, zCenter);
  };
  /**
   * Convert a 3D location to a 2D location on screen
   * Source: ttp://en.wikipedia.org/wiki/3D_projection
   *
   * @param   {Point3d} point3d  A 3D point with parameters x, y, z
   * @returns {Point2d} point2d  A 2D point with parameters x, y
   */


  Graph3d.prototype._convert3Dto2D = function (point3d) {
    var translation = this._convertPointToTranslation(point3d);

    return this._convertTranslationToScreen(translation);
  };
  /**
   * Convert a 3D location its translation seen from the camera
   * Source: http://en.wikipedia.org/wiki/3D_projection
   *
   * @param   {Point3d} point3d     A 3D point with parameters x, y, z
   * @returns {Point3d} translation A 3D point with parameters x, y, z This is
   *                                the translation of the point, seen from the
   *                                camera.
   */


  Graph3d.prototype._convertPointToTranslation = function (point3d) {
    var cameraLocation = this.camera.getCameraLocation(),
        cameraRotation = this.camera.getCameraRotation(),
        ax = point3d.x * this.scale.x,
        ay = point3d.y * this.scale.y,
        az = point3d.z * this.scale.z,
        cx = cameraLocation.x,
        cy = cameraLocation.y,
        cz = cameraLocation.z,
        // calculate angles
    sinTx = Math.sin(cameraRotation.x),
        cosTx = Math.cos(cameraRotation.x),
        sinTy = Math.sin(cameraRotation.y),
        cosTy = Math.cos(cameraRotation.y),
        sinTz = Math.sin(cameraRotation.z),
        cosTz = Math.cos(cameraRotation.z),
        // calculate translation
    dx = cosTy * (sinTz * (ay - cy) + cosTz * (ax - cx)) - sinTy * (az - cz),
        dy = sinTx * (cosTy * (az - cz) + sinTy * (sinTz * (ay - cy) + cosTz * (ax - cx))) + cosTx * (cosTz * (ay - cy) - sinTz * (ax - cx)),
        dz = cosTx * (cosTy * (az - cz) + sinTy * (sinTz * (ay - cy) + cosTz * (ax - cx))) - sinTx * (cosTz * (ay - cy) - sinTz * (ax - cx));
    return new Point3d_1(dx, dy, dz);
  };
  /**
   * Convert a translation point to a point on the screen
   *
   * @param   {Point3d} translation A 3D point with parameters x, y, z This is
   *                                the translation of the point, seen from the
   *                                camera.
   * @returns {Point2d} point2d     A 2D point with parameters x, y
   */


  Graph3d.prototype._convertTranslationToScreen = function (translation) {
    var ex = this.eye.x,
        ey = this.eye.y,
        ez = this.eye.z,
        dx = translation.x,
        dy = translation.y,
        dz = translation.z; // calculate position on screen from translation

    var bx;
    var by;

    if (this.showPerspective) {
      bx = (dx - ex) * (ez / dz);
      by = (dy - ey) * (ez / dz);
    } else {
      bx = dx * -(ez / this.camera.getArmLength());
      by = dy * -(ez / this.camera.getArmLength());
    } // shift and scale the point to the center of the screen
    // use the width of the graph to scale both horizontally and vertically.


    return new Point2d_1(this.currentXCenter + bx * this.frame.canvas.clientWidth, this.currentYCenter - by * this.frame.canvas.clientWidth);
  };
  /**
   * Calculate the translations and screen positions of all points
   *
   * @param {Array.<Point3d>} points
   * @private
   */


  Graph3d.prototype._calcTranslations = function (points) {
    for (var i = 0; i < points.length; i++) {
      var point = points[i];
      point.trans = this._convertPointToTranslation(point.point);
      point.screen = this._convertTranslationToScreen(point.trans); // calculate the translation of the point at the bottom (needed for sorting)

      var transBottom = this._convertPointToTranslation(point.bottom);

      point.dist = this.showPerspective ? transBottom.length() : -transBottom.z;
    } // sort the points on depth of their (x,y) position (not on z)


    var sortDepth = function (a, b) {
      return b.dist - a.dist;
    };

    points.sort(sortDepth);
  };
  /**
   * Transfer min/max values to the Graph3d instance.
   */


  Graph3d.prototype._initializeRanges = function () {
    // TODO: later on, all min/maxes of all datagroups will be combined here
    var dg = this.dataGroup;
    this.xRange = dg.xRange;
    this.yRange = dg.yRange;
    this.zRange = dg.zRange;
    this.valueRange = dg.valueRange; // Values currently needed but which need to be sorted out for
    // the multiple graph case.

    this.xStep = dg.xStep;
    this.yStep = dg.yStep;
    this.zStep = dg.zStep;
    this.xBarWidth = dg.xBarWidth;
    this.yBarWidth = dg.yBarWidth;
    this.colX = dg.colX;
    this.colY = dg.colY;
    this.colZ = dg.colZ;
    this.colValue = dg.colValue; // set the scale dependent on the ranges.

    this._setScale();
  };
  /**
   * Return all data values as a list of Point3d objects
   *
   * @param {vis.DataSet} data
   * @returns {Array.<Object>}
   */


  Graph3d.prototype.getDataPoints = function (data) {
    var dataPoints = [];

    for (var i = 0; i < data.length; i++) {
      var point = new Point3d_1();
      point.x = data[i][this.colX] || 0;
      point.y = data[i][this.colY] || 0;
      point.z = data[i][this.colZ] || 0;
      point.data = data[i];

      if (this.colValue !== undefined) {
        point.value = data[i][this.colValue] || 0;
      }

      var obj = {};
      obj.point = point;
      obj.bottom = new Point3d_1(point.x, point.y, this.zRange.min);
      obj.trans = undefined;
      obj.screen = undefined;
      dataPoints.push(obj);
    }

    return dataPoints;
  };
  /**
   * Filter the data based on the current filter
   *
   * @param   {Array} data
   * @returns {Array} dataPoints Array with point objects which can be drawn on
   *                             screen
   */


  Graph3d.prototype._getDataPoints = function (data) {
    // TODO: store the created matrix dataPoints in the filters instead of
    //       reloading each time.
    var x, y, i, obj;
    var dataPoints = [];

    if (this.style === Graph3d.STYLE.GRID || this.style === Graph3d.STYLE.SURFACE) {
      // copy all values from the data table to a matrix
      // the provided values are supposed to form a grid of (x,y) positions
      // create two lists with all present x and y values
      var dataX = this.dataGroup.getDistinctValues(this.colX, data);
      var dataY = this.dataGroup.getDistinctValues(this.colY, data);
      dataPoints = this.getDataPoints(data); // create a grid, a 2d matrix, with all values.

      var dataMatrix = []; // temporary data matrix

      for (i = 0; i < dataPoints.length; i++) {
        obj = dataPoints[i]; // TODO: implement Array().indexOf() for Internet Explorer

        var xIndex = dataX.indexOf(obj.point.x);
        var yIndex = dataY.indexOf(obj.point.y);

        if (dataMatrix[xIndex] === undefined) {
          dataMatrix[xIndex] = [];
        }

        dataMatrix[xIndex][yIndex] = obj;
      } // fill in the pointers to the neighbors.


      for (x = 0; x < dataMatrix.length; x++) {
        for (y = 0; y < dataMatrix[x].length; y++) {
          if (dataMatrix[x][y]) {
            dataMatrix[x][y].pointRight = x < dataMatrix.length - 1 ? dataMatrix[x + 1][y] : undefined;
            dataMatrix[x][y].pointTop = y < dataMatrix[x].length - 1 ? dataMatrix[x][y + 1] : undefined;
            dataMatrix[x][y].pointCross = x < dataMatrix.length - 1 && y < dataMatrix[x].length - 1 ? dataMatrix[x + 1][y + 1] : undefined;
          }
        }
      }
    } else {
      // 'dot', 'dot-line', etc.
      this._checkValueField(data);

      dataPoints = this.getDataPoints(data);

      if (this.style === Graph3d.STYLE.LINE) {
        // Add next member points for line drawing
        for (i = 0; i < dataPoints.length; i++) {
          if (i > 0) {
            dataPoints[i - 1].pointNext = dataPoints[i];
          }
        }
      }
    }

    return dataPoints;
  };
  /**
   * Create the main frame for the Graph3d.
   *
   * This function is executed once when a Graph3d object is created. The frame
   * contains a canvas, and this canvas contains all objects like the axis and
   * nodes.
   */


  Graph3d.prototype.create = function () {
    // remove all elements from the container element.
    while (this.containerElement.hasChildNodes()) {
      this.containerElement.removeChild(this.containerElement.firstChild);
    }

    this.frame = document.createElement('div');
    this.frame.style.position = 'relative';
    this.frame.style.overflow = 'hidden'; // create the graph canvas (HTML canvas element)

    this.frame.canvas = document.createElement('canvas');
    this.frame.canvas.style.position = 'relative';
    this.frame.appendChild(this.frame.canvas); //if (!this.frame.canvas.getContext) {

    {
      var noCanvas = document.createElement('DIV');
      noCanvas.style.color = 'red';
      noCanvas.style.fontWeight = 'bold';
      noCanvas.style.padding = '10px';
      noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
      this.frame.canvas.appendChild(noCanvas);
    }
    this.frame.filter = document.createElement('div');
    this.frame.filter.style.position = 'absolute';
    this.frame.filter.style.bottom = '0px';
    this.frame.filter.style.left = '0px';
    this.frame.filter.style.width = '100%';
    this.frame.appendChild(this.frame.filter); // add event listeners to handle moving and zooming the contents

    var me = this;

    var onmousedown = function (event) {
      me._onMouseDown(event);
    };

    var ontouchstart = function (event) {
      me._onTouchStart(event);
    };

    var onmousewheel = function (event) {
      me._onWheel(event);
    };

    var ontooltip = function (event) {
      me._onTooltip(event);
    };

    var onclick = function (event) {
      me._onClick(event);
    }; // TODO: these events are never cleaned up... can give a 'memory leakage'


    util.addEventListener(this.frame.canvas, 'mousedown', onmousedown);
    util.addEventListener(this.frame.canvas, 'touchstart', ontouchstart);
    util.addEventListener(this.frame.canvas, 'mousewheel', onmousewheel);
    util.addEventListener(this.frame.canvas, 'mousemove', ontooltip);
    util.addEventListener(this.frame.canvas, 'click', onclick); // add the new graph to the container element

    this.containerElement.appendChild(this.frame);
  };
  /**
   * Set a new size for the graph
   *
   * @param {number} width
   * @param {number} height
   * @private
   */


  Graph3d.prototype._setSize = function (width, height) {
    this.frame.style.width = width;
    this.frame.style.height = height;

    this._resizeCanvas();
  };
  /**
   * Resize the canvas to the current size of the frame
   */


  Graph3d.prototype._resizeCanvas = function () {
    this.frame.canvas.style.width = '100%';
    this.frame.canvas.style.height = '100%';
    this.frame.canvas.width = this.frame.canvas.clientWidth;
    this.frame.canvas.height = this.frame.canvas.clientHeight; // adjust with for margin

    this.frame.filter.style.width = this.frame.canvas.clientWidth - 2 * 10 + 'px';
  };
  /**
   * Start playing the animation, if requested and filter present. Only applicable
   * when animation data is available.
   */


  Graph3d.prototype.animationStart = function () {
    // start animation when option is true
    if (!this.animationAutoStart || !this.dataGroup.dataFilter) return;
    if (!this.frame.filter || !this.frame.filter.slider) throw new Error('No animation available');
    this.frame.filter.slider.play();
  };
  /**
   * Stop animation
   */


  Graph3d.prototype.animationStop = function () {
    if (!this.frame.filter || !this.frame.filter.slider) return;
    this.frame.filter.slider.stop();
  };
  /**
   * Resize the center position based on the current values in this.xCenter
   * and this.yCenter (which are strings with a percentage or a value
   * in pixels). The center positions are the variables this.currentXCenter
   * and this.currentYCenter
   */


  Graph3d.prototype._resizeCenter = function () {
    // calculate the horizontal center position
    if (this.xCenter.charAt(this.xCenter.length - 1) === '%') {
      this.currentXCenter = parseFloat(this.xCenter) / 100 * this.frame.canvas.clientWidth;
    } else {
      this.currentXCenter = parseFloat(this.xCenter); // supposed to be in px
    } // calculate the vertical center position


    if (this.yCenter.charAt(this.yCenter.length - 1) === '%') {
      this.currentYCenter = parseFloat(this.yCenter) / 100 * (this.frame.canvas.clientHeight - this.frame.filter.clientHeight);
    } else {
      this.currentYCenter = parseFloat(this.yCenter); // supposed to be in px
    }
  };
  /**
   * Retrieve the current camera rotation
   *
   * @returns {object} An object with parameters horizontal, vertical, and
   *                   distance
   */


  Graph3d.prototype.getCameraPosition = function () {
    var pos = this.camera.getArmRotation();
    pos.distance = this.camera.getArmLength();
    return pos;
  };
  /**
   * Load data into the 3D Graph
   *
   * @param {vis.DataSet} data
   * @private
   */


  Graph3d.prototype._readData = function (data) {
    // read the data
    this.dataPoints = this.dataGroup.initializeData(this, data, this.style);

    this._initializeRanges();

    this._redrawFilter();
  };
  /**
   * Replace the dataset of the Graph3d
   *
   * @param {Array | DataSet | DataView} data
   */


  Graph3d.prototype.setData = function (data) {
    if (data === undefined || data === null) return;

    this._readData(data);

    this.redraw();
    this.animationStart();
  };
  /**
   * Update the options. Options will be merged with current options
   *
   * @param {Object} options
   */


  Graph3d.prototype.setOptions = function (options) {
    if (options === undefined) return;
    let errorFound = Validator$2.validate(options, allOptions$2);

    if (errorFound === true) {
      console.log('%cErrors have been found in the supplied options object.', printStyle$1);
    }

    this.animationStop();
    Settings.setOptions(options, this);
    this.setPointDrawingMethod();

    this._setSize(this.width, this.height);

    this.setAxisLabelMethod();
    this.setData(this.dataGroup.getDataTable());
    this.animationStart();
  };
  /**
   * Determine which point drawing method to use for the current graph style.
   */


  Graph3d.prototype.setPointDrawingMethod = function () {
    var method = undefined;

    switch (this.style) {
      case Graph3d.STYLE.BAR:
        method = Graph3d.prototype._redrawBarGraphPoint;
        break;

      case Graph3d.STYLE.BARCOLOR:
        method = Graph3d.prototype._redrawBarColorGraphPoint;
        break;

      case Graph3d.STYLE.BARSIZE:
        method = Graph3d.prototype._redrawBarSizeGraphPoint;
        break;

      case Graph3d.STYLE.DOT:
        method = Graph3d.prototype._redrawDotGraphPoint;
        break;

      case Graph3d.STYLE.DOTLINE:
        method = Graph3d.prototype._redrawDotLineGraphPoint;
        break;

      case Graph3d.STYLE.DOTCOLOR:
        method = Graph3d.prototype._redrawDotColorGraphPoint;
        break;

      case Graph3d.STYLE.DOTSIZE:
        method = Graph3d.prototype._redrawDotSizeGraphPoint;
        break;

      case Graph3d.STYLE.SURFACE:
        method = Graph3d.prototype._redrawSurfaceGraphPoint;
        break;

      case Graph3d.STYLE.GRID:
        method = Graph3d.prototype._redrawGridGraphPoint;
        break;

      case Graph3d.STYLE.LINE:
        method = Graph3d.prototype._redrawLineGraphPoint;
        break;

      default:
        throw new Error('Can not determine point drawing method ' + 'for graph style \'' + this.style + '\'');
    }

    this._pointDrawingMethod = method;
  };
  /**
   * Determine which functions to use to draw axis labels.
   */


  Graph3d.prototype.setAxisLabelMethod = function () {
    var method_x, method_y, method_z;
    method_x = method_y = method_z = undefined;

    if (this.rotateAxisLabels == true) {
      method_x = Graph3d.prototype.drawAxisLabelXRotate;
      method_y = Graph3d.prototype.drawAxisLabelYRotate;
      method_z = Graph3d.prototype.drawAxisLabelZRotate;
    } else {
      method_x = Graph3d.prototype.drawAxisLabelX;
      method_y = Graph3d.prototype.drawAxisLabelY;
      method_z = Graph3d.prototype.drawAxisLabelZ;
    }

    this._drawAxisLabelX = method_x;
    this._drawAxisLabelY = method_y;
    this._drawAxisLabelZ = method_z;
  };
  /**
   * Redraw the Graph.
   */


  Graph3d.prototype.redraw = function () {
    if (this.dataPoints === undefined) {
      throw new Error('Graph data not initialized');
    }

    this._resizeCanvas();

    this._resizeCenter();

    this._redrawSlider();

    this._redrawClear();

    this._redrawAxis();

    this._redrawDataGraph();

    this._redrawInfo();

    this._redrawLegend();
  };
  /**
   * Get drawing context without exposing canvas
   *
   * @returns {CanvasRenderingContext2D}
   * @private
   */


  Graph3d.prototype._getContext = function () {
    var canvas = this.frame.canvas;
    var ctx = canvas.getContext('2d');
    ctx.lineJoin = 'round';
    ctx.lineCap = 'round';
    return ctx;
  };
  /**
   * Clear the canvas before redrawing
   */


  Graph3d.prototype._redrawClear = function () {
    var canvas = this.frame.canvas;
    var ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
  };

  Graph3d.prototype._dotSize = function () {
    return this.frame.clientWidth * this.dotSizeRatio;
  };
  /**
   * Get legend width
   *
   * @returns {*}
   * @private
   */


  Graph3d.prototype._getLegendWidth = function () {
    var width;

    if (this.style === Graph3d.STYLE.DOTSIZE) {
      var dotSize = this._dotSize(); //width =  dotSize / 2 + dotSize * 2;


      width = dotSize * this.dotSizeMaxFraction;
    } else if (this.style === Graph3d.STYLE.BARSIZE) {
      width = this.xBarWidth;
    } else {
      width = 20;
    }

    return width;
  };
  /**
   * Redraw the legend based on size, dot color, or surface height
   */


  Graph3d.prototype._redrawLegend = function () {
    //Return without drawing anything, if no legend is specified
    if (this.showLegend !== true) {
      return;
    } // Do not draw legend when graph style does not support


    if (this.style === Graph3d.STYLE.LINE || this.style === Graph3d.STYLE.BARSIZE //TODO add legend support for BARSIZE
    ) {
        return;
      } // Legend types - size and color. Determine if size legend.


    var isSizeLegend = this.style === Graph3d.STYLE.BARSIZE || this.style === Graph3d.STYLE.DOTSIZE; // Legend is either tracking z values or style values. This flag if false means use z values.

    var isValueLegend = this.style === Graph3d.STYLE.DOTSIZE || this.style === Graph3d.STYLE.DOTCOLOR || this.style === Graph3d.STYLE.BARCOLOR;
    var height = Math.max(this.frame.clientHeight * 0.25, 100);
    var top = this.margin;

    var width = this._getLegendWidth(); // px - overwritten by size legend


    var right = this.frame.clientWidth - this.margin;
    var left = right - width;
    var bottom = top + height;

    var ctx = this._getContext();

    ctx.lineWidth = 1;
    ctx.font = '14px arial'; // TODO: put in options

    if (isSizeLegend === false) {
      // draw the color bar
      var ymin = 0;
      var ymax = height; // Todo: make height customizable

      var y;

      for (y = ymin; y < ymax; y++) {
        var f = (y - ymin) / (ymax - ymin);
        var hue = f * 240;

        var color = this._hsv2rgb(hue, 1, 1);

        ctx.strokeStyle = color;
        ctx.beginPath();
        ctx.moveTo(left, top + y);
        ctx.lineTo(right, top + y);
        ctx.stroke();
      }

      ctx.strokeStyle = this.axisColor;
      ctx.strokeRect(left, top, width, height);
    } else {
      // draw the size legend box
      var widthMin;

      if (this.style === Graph3d.STYLE.DOTSIZE) {
        // Get the proportion to max and min right
        widthMin = width * (this.dotSizeMinFraction / this.dotSizeMaxFraction);
      } else if (this.style === Graph3d.STYLE.BARSIZE) ;

      ctx.strokeStyle = this.axisColor;
      ctx.fillStyle = this.dataColor.fill;
      ctx.beginPath();
      ctx.moveTo(left, top);
      ctx.lineTo(right, top);
      ctx.lineTo(left + widthMin, bottom);
      ctx.lineTo(left, bottom);
      ctx.closePath();
      ctx.fill();
      ctx.stroke();
    } // print value text along the legend edge


    var gridLineLen = 5; // px

    var legendMin = isValueLegend ? this.valueRange.min : this.zRange.min;
    var legendMax = isValueLegend ? this.valueRange.max : this.zRange.max;
    var step = new StepNumber_1(legendMin, legendMax, (legendMax - legendMin) / 5, true);
    step.start(true);
    var from;
    var to;

    while (!step.end()) {
      y = bottom - (step.getCurrent() - legendMin) / (legendMax - legendMin) * height;
      from = new Point2d_1(left - gridLineLen, y);
      to = new Point2d_1(left, y);

      this._line(ctx, from, to);

      ctx.textAlign = 'right';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = this.axisColor;
      ctx.fillText(step.getCurrent(), left - 2 * gridLineLen, y);
      step.next();
    }

    ctx.textAlign = 'right';
    ctx.textBaseline = 'top';
    var label = this.legendLabel;
    ctx.fillText(label, right, bottom + this.margin);
  };
  /**
   * Redraw the filter
   */


  Graph3d.prototype._redrawFilter = function () {
    var dataFilter = this.dataGroup.dataFilter;
    var filter = this.frame.filter;
    filter.innerHTML = '';

    if (!dataFilter) {
      filter.slider = undefined;
      return;
    }

    var options = {
      'visible': this.showAnimationControls
    };
    var slider = new Slider_1(filter, options);
    filter.slider = slider; // TODO: css here is not nice here...

    filter.style.padding = '10px'; //this.frame.filter.style.backgroundColor = '#EFEFEF';

    slider.setValues(dataFilter.values);
    slider.setPlayInterval(this.animationInterval); // create an event handler

    var me = this;

    var onchange = function () {
      var dataFilter = me.dataGroup.dataFilter;
      var index = slider.getIndex();
      dataFilter.selectValue(index);
      me.dataPoints = dataFilter._getDataPoints();
      me.redraw();
    };

    slider.setOnChangeCallback(onchange);
  };
  /**
   * Redraw the slider
   */


  Graph3d.prototype._redrawSlider = function () {
    if (this.frame.filter.slider !== undefined) {
      this.frame.filter.slider.redraw();
    }
  };
  /**
   * Redraw common information
   */


  Graph3d.prototype._redrawInfo = function () {
    var info = this.dataGroup.getInfo();
    if (info === undefined) return;

    var ctx = this._getContext();

    ctx.font = '14px arial'; // TODO: put in options

    ctx.lineStyle = 'gray';
    ctx.fillStyle = 'gray';
    ctx.textAlign = 'left';
    ctx.textBaseline = 'top';
    var x = this.margin;
    var y = this.margin;
    ctx.fillText(info, x, y);
  };
  /**
   * Draw a line between 2d points 'from' and 'to'.
   *
   * If stroke style specified, set that as well.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {vis.Point2d} from
   * @param {vis.Point2d} to
   * @param {string} [strokeStyle]
   * @private
   */


  Graph3d.prototype._line = function (ctx, from, to, strokeStyle) {
    if (strokeStyle !== undefined) {
      ctx.strokeStyle = strokeStyle;
    }

    ctx.beginPath();
    ctx.moveTo(from.x, from.y);
    ctx.lineTo(to.x, to.y);
    ctx.stroke();
  };
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {vis.Point3d} point3d
   * @param {string} text
   * @param {number} armAngle
   * @param {number} [yMargin=0]
   */


  Graph3d.prototype.drawAxisLabelX = function (ctx, point3d, text, armAngle, yMargin) {
    if (yMargin === undefined) {
      yMargin = 0;
    }

    var point2d = this._convert3Dto2D(point3d);

    if (Math.cos(armAngle * 2) > 0) {
      ctx.textAlign = 'center';
      ctx.textBaseline = 'top';
      point2d.y += yMargin;
    } else if (Math.sin(armAngle * 2) < 0) {
      ctx.textAlign = 'right';
      ctx.textBaseline = 'middle';
    } else {
      ctx.textAlign = 'left';
      ctx.textBaseline = 'middle';
    }

    ctx.fillStyle = this.axisColor;
    ctx.fillText(text, point2d.x, point2d.y);
  };
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {vis.Point3d} point3d
   * @param {string} text
   * @param {number} armAngle
   * @param {number} [yMargin=0]
   */


  Graph3d.prototype.drawAxisLabelY = function (ctx, point3d, text, armAngle, yMargin) {
    if (yMargin === undefined) {
      yMargin = 0;
    }

    var point2d = this._convert3Dto2D(point3d);

    if (Math.cos(armAngle * 2) < 0) {
      ctx.textAlign = 'center';
      ctx.textBaseline = 'top';
      point2d.y += yMargin;
    } else if (Math.sin(armAngle * 2) > 0) {
      ctx.textAlign = 'right';
      ctx.textBaseline = 'middle';
    } else {
      ctx.textAlign = 'left';
      ctx.textBaseline = 'middle';
    }

    ctx.fillStyle = this.axisColor;
    ctx.fillText(text, point2d.x, point2d.y);
  };
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {vis.Point3d} point3d
   * @param {string} text
   * @param {number} [offset=0]
   */


  Graph3d.prototype.drawAxisLabelZ = function (ctx, point3d, text, offset) {
    if (offset === undefined) {
      offset = 0;
    }

    var point2d = this._convert3Dto2D(point3d);

    ctx.textAlign = 'right';
    ctx.textBaseline = 'middle';
    ctx.fillStyle = this.axisColor;
    ctx.fillText(text, point2d.x - offset, point2d.y);
  };
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {vis.Point3d} point3d
   * @param {string} text
   * @param {number} armAngle
   * @param {number} [yMargin=0]
   */


  Graph3d.prototype.drawAxisLabelXRotate = function (ctx, point3d, text, armAngle, yMargin) {
    if (yMargin === undefined) {
      yMargin = 0;
    }

    var point2d = this._convert3Dto2D(point3d);

    if (Math.cos(armAngle * 2) > 0) {
      ctx.save();
      ctx.get;
      ctx.translate(point2d.x, point2d.y);
      ctx.rotate(Math.PI / 2);
      ctx.fillText(text, point2d.x / 100, point2d.y / 100);
      ctx.textAlign = 'center';
      ctx.textBaseline = 'top';
      point2d.y += yMargin;
      ctx.restore();
    } else if (Math.sin(armAngle * 2) < 0) {
      ctx.textAlign = 'right';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = this.axisColor;
      ctx.fillText(text, point2d.x, point2d.y);
    } else {
      ctx.textAlign = 'left';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = this.axisColor;
      ctx.fillText(text, point2d.x, point2d.y);
    }
  };
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {vis.Point3d} point3d
   * @param {string} text
   * @param {number} armAngle
   * @param {number} [yMargin=0]
   */


  Graph3d.prototype.drawAxisLabelYRotate = function (ctx, point3d, text, armAngle, yMargin) {
    if (yMargin === undefined) {
      yMargin = 0;
    }

    var point2d = this._convert3Dto2D(point3d);

    if (Math.cos(armAngle * 2) < 0 && Math.sin(armAngle * 2) < 0) {
      ctx.save();
      ctx.get;
      ctx.translate(point2d.x, point2d.y);
      ctx.rotate(Math.PI / 2 * -1);
      ctx.fillText(text, point2d.x / 100, point2d.y / 100);
      ctx.textAlign = 'center';
      ctx.textBaseline = 'top';
      point2d.y += yMargin;
      ctx.restore();
    } else if (Math.cos(armAngle * 2) < 0) {
      ctx.save();
      ctx.get;
      ctx.translate(point2d.x, point2d.y);
      ctx.rotate(Math.PI / 2);
      ctx.fillText(text, point2d.x / 100, point2d.y / 100);
      ctx.textAlign = 'center';
      ctx.textBaseline = 'top';
      point2d.y += yMargin;
      ctx.restore();
    } else if (Math.sin(armAngle * 2) > 0) {
      ctx.textAlign = 'right';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = this.axisColor;
      ctx.fillText(text, point2d.x, point2d.y);
    } else {
      ctx.textAlign = 'left';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = this.axisColor;
      ctx.fillText(text, point2d.x, point2d.y);
    }
  };
  /**
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {vis.Point3d} point3d
   * @param {string} text
   * @param {number} [offset=0]
   */


  Graph3d.prototype.drawAxisLabelZRotate = function (ctx, point3d, text, offset) {
    if (offset === undefined) {
      offset = 0;
    }

    var point2d = this._convert3Dto2D(point3d);

    ctx.textAlign = 'right';
    ctx.textBaseline = 'middle';
    ctx.fillStyle = this.axisColor;
    ctx.fillText(text, point2d.x - offset, point2d.y);
  };
  /**


  /**
   * Draw a line between 2d points 'from' and 'to'.
   *
   * If stroke style specified, set that as well.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {vis.Point2d} from
   * @param {vis.Point2d} to
   * @param {string} [strokeStyle]
   * @private
   */


  Graph3d.prototype._line3d = function (ctx, from, to, strokeStyle) {
    var from2d = this._convert3Dto2D(from);

    var to2d = this._convert3Dto2D(to);

    this._line(ctx, from2d, to2d, strokeStyle);
  };
  /**
   * Redraw the axis
   */


  Graph3d.prototype._redrawAxis = function () {
    var ctx = this._getContext(),
        from,
        to,
        step,
        prettyStep,
        text,
        xText,
        yText,
        zText,
        offset,
        xOffset,
        yOffset; // TODO: get the actual rendered style of the containerElement
    //ctx.font = this.containerElement.style.font;
    //ctx.font = 24 / this.camera.getArmLength() + 'px arial';


    ctx.font = this.axisFontSize / this.camera.getArmLength() + 'px ' + this.axisFontType; // calculate the length for the short grid lines

    var gridLenX = 0.025 / this.scale.x;
    var gridLenY = 0.025 / this.scale.y;
    var textMargin = 5 / this.camera.getArmLength(); // px

    var armAngle = this.camera.getArmRotation().horizontal;
    var armVector = new Point2d_1(Math.cos(armAngle), Math.sin(armAngle));
    var xRange = this.xRange;
    var yRange = this.yRange;
    var zRange = this.zRange;
    var point3d; // draw x-grid lines

    ctx.lineWidth = 1;
    prettyStep = this.defaultXStep === undefined;
    step = new StepNumber_1(xRange.min, xRange.max, this.xStep, prettyStep);
    step.start(true);

    while (!step.end()) {
      var x = step.getCurrent();

      if (this.showGrid) {
        from = new Point3d_1(x, yRange.min, zRange.min);
        to = new Point3d_1(x, yRange.max, zRange.min);

        this._line3d(ctx, from, to, this.gridColor);
      } else if (this.showXAxis) {
        from = new Point3d_1(x, yRange.min, zRange.min);
        to = new Point3d_1(x, yRange.min + gridLenX, zRange.min);

        this._line3d(ctx, from, to, this.axisColor);

        from = new Point3d_1(x, yRange.max, zRange.min);
        to = new Point3d_1(x, yRange.max - gridLenX, zRange.min);

        this._line3d(ctx, from, to, this.axisColor);
      }

      if (this.showXAxis) {
        yText = armVector.x > 0 ? yRange.min : yRange.max;
        point3d = new Point3d_1(x, yText, zRange.min);
        let msg = '  ' + this.xValueLabel(x) + '  ';

        this._drawAxisLabelX.call(this, ctx, point3d, msg, armAngle, textMargin);
      }

      step.next();
    } // draw y-grid lines


    ctx.lineWidth = 1;
    prettyStep = this.defaultYStep === undefined;
    step = new StepNumber_1(yRange.min, yRange.max, this.yStep, prettyStep);
    step.start(true);

    while (!step.end()) {
      var y = step.getCurrent();

      if (this.showGrid) {
        from = new Point3d_1(xRange.min, y, zRange.min);
        to = new Point3d_1(xRange.max, y, zRange.min);

        this._line3d(ctx, from, to, this.gridColor);
      } else if (this.showYAxis) {
        from = new Point3d_1(xRange.min, y, zRange.min);
        to = new Point3d_1(xRange.min + gridLenY, y, zRange.min);

        this._line3d(ctx, from, to, this.axisColor);

        from = new Point3d_1(xRange.max, y, zRange.min);
        to = new Point3d_1(xRange.max - gridLenY, y, zRange.min);

        this._line3d(ctx, from, to, this.axisColor);
      }

      if (this.showYAxis) {
        xText = armVector.y > 0 ? xRange.min : xRange.max;
        point3d = new Point3d_1(xText, y, zRange.min);
        let msg = '  ' + this.yValueLabel(y) + '  ';

        this._drawAxisLabelY.call(this, ctx, point3d, msg, armAngle, textMargin);
      }

      step.next();
    } // draw z-grid lines and axis


    if (this.showZAxis) {
      ctx.lineWidth = 1;
      prettyStep = this.defaultZStep === undefined;
      step = new StepNumber_1(zRange.min, zRange.max, this.zStep, prettyStep);
      step.start(true);
      xText = armVector.x > 0 ? xRange.min : xRange.max;
      yText = armVector.y < 0 ? yRange.min : yRange.max;

      while (!step.end()) {
        var z = step.getCurrent(); // TODO: make z-grid lines really 3d?

        var from3d = new Point3d_1(xText, yText, z);

        var from2d = this._convert3Dto2D(from3d);

        to = new Point2d_1(from2d.x - textMargin, from2d.y);

        this._line(ctx, from2d, to, this.axisColor);

        let msg = this.zValueLabel(z) + ' ';

        this._drawAxisLabelZ.call(this, ctx, from3d, msg, 5);

        step.next();
      }

      ctx.lineWidth = 1;
      from = new Point3d_1(xText, yText, zRange.min);
      to = new Point3d_1(xText, yText, zRange.max);

      this._line3d(ctx, from, to, this.axisColor);
    } // draw x-axis


    if (this.showXAxis) {
      var xMin2d;
      var xMax2d;
      ctx.lineWidth = 1; // line at yMin

      xMin2d = new Point3d_1(xRange.min, yRange.min, zRange.min);
      xMax2d = new Point3d_1(xRange.max, yRange.min, zRange.min);

      this._line3d(ctx, xMin2d, xMax2d, this.axisColor); // line at ymax


      xMin2d = new Point3d_1(xRange.min, yRange.max, zRange.min);
      xMax2d = new Point3d_1(xRange.max, yRange.max, zRange.min);

      this._line3d(ctx, xMin2d, xMax2d, this.axisColor);
    } // draw y-axis


    if (this.showYAxis) {
      ctx.lineWidth = 1; // line at xMin

      from = new Point3d_1(xRange.min, yRange.min, zRange.min);
      to = new Point3d_1(xRange.min, yRange.max, zRange.min);

      this._line3d(ctx, from, to, this.axisColor); // line at xMax


      from = new Point3d_1(xRange.max, yRange.min, zRange.min);
      to = new Point3d_1(xRange.max, yRange.max, zRange.min);

      this._line3d(ctx, from, to, this.axisColor);
    } // draw x-label


    var xLabel = this.xLabel;

    if (xLabel.length > 0 && this.showXAxis) {
      yOffset = 0.1 / this.scale.y;
      xText = (xRange.max + 3 * xRange.min) / 4;
      yText = armVector.x > 0 ? yRange.min - yOffset : yRange.max + yOffset;
      text = new Point3d_1(xText, yText, zRange.min);
      this.drawAxisLabelX(ctx, text, xLabel, armAngle);
    } // draw y-label


    var yLabel = this.yLabel;

    if (yLabel.length > 0 && this.showYAxis) {
      xOffset = 0.1 / this.scale.x;
      xText = armVector.y > 0 ? xRange.min - xOffset : xRange.max + xOffset;
      yText = (yRange.max + 3 * yRange.min) / 4;
      text = new Point3d_1(xText, yText, zRange.min);
      this.drawAxisLabelY(ctx, text, yLabel, armAngle);
    } // draw z-label


    var zLabel = this.zLabel;

    if (zLabel.length > 0 && this.showZAxis) {
      offset = 30; // pixels.  // TODO: relate to the max width of the values on the z axis?

      xText = armVector.x > 0 ? xRange.min : xRange.max;
      yText = armVector.y < 0 ? yRange.min : yRange.max;
      zText = (zRange.max + 3 * zRange.min) / 4;
      text = new Point3d_1(xText, yText, zText);
      this.drawAxisLabelZ(ctx, text, zLabel, offset);
    }
  };
  /**
   * Calculate the color based on the given value.
   * @param {number} H   Hue, a value be between 0 and 360
   * @param {number} S   Saturation, a value between 0 and 1
   * @param {number} V   Value, a value between 0 and 1
   * @returns {string}
   * @private
   */


  Graph3d.prototype._hsv2rgb = function (H, S, V) {
    var R, G, B, C, Hi, X;
    C = V * S;
    Hi = Math.floor(H / 60); // hi = 0,1,2,3,4,5

    X = C * (1 - Math.abs(H / 60 % 2 - 1));

    switch (Hi) {
      case 0:
        R = C;
        G = X;
        B = 0;
        break;

      case 1:
        R = X;
        G = C;
        B = 0;
        break;

      case 2:
        R = 0;
        G = C;
        B = X;
        break;

      case 3:
        R = 0;
        G = X;
        B = C;
        break;

      case 4:
        R = X;
        G = 0;
        B = C;
        break;

      case 5:
        R = C;
        G = 0;
        B = X;
        break;

      default:
        R = 0;
        G = 0;
        B = 0;
        break;
    }

    return 'RGB(' + parseInt(R * 255) + ',' + parseInt(G * 255) + ',' + parseInt(B * 255) + ')';
  };
  /**
   *
   * @param {vis.Point3d} point
   * @returns {*}
   * @private
   */


  Graph3d.prototype._getStrokeWidth = function (point) {
    if (point !== undefined) {
      if (this.showPerspective) {
        return 1 / -point.trans.z * this.dataColor.strokeWidth;
      } else {
        return -(this.eye.z / this.camera.getArmLength()) * this.dataColor.strokeWidth;
      }
    }

    return this.dataColor.strokeWidth;
  }; // -----------------------------------------------------------------------------
  // Drawing primitives for the graphs
  // -----------------------------------------------------------------------------

  /**
   * Draw a bar element in the view with the given properties.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Object} point
   * @param {number} xWidth
   * @param {number} yWidth
   * @param {string} color
   * @param {string} borderColor
   * @private
   */


  Graph3d.prototype._redrawBar = function (ctx, point, xWidth, yWidth, color, borderColor) {
    var surface; // calculate all corner points

    var me = this;
    var point3d = point.point;
    var zMin = this.zRange.min;
    var top = [{
      point: new Point3d_1(point3d.x - xWidth, point3d.y - yWidth, point3d.z)
    }, {
      point: new Point3d_1(point3d.x + xWidth, point3d.y - yWidth, point3d.z)
    }, {
      point: new Point3d_1(point3d.x + xWidth, point3d.y + yWidth, point3d.z)
    }, {
      point: new Point3d_1(point3d.x - xWidth, point3d.y + yWidth, point3d.z)
    }];
    var bottom = [{
      point: new Point3d_1(point3d.x - xWidth, point3d.y - yWidth, zMin)
    }, {
      point: new Point3d_1(point3d.x + xWidth, point3d.y - yWidth, zMin)
    }, {
      point: new Point3d_1(point3d.x + xWidth, point3d.y + yWidth, zMin)
    }, {
      point: new Point3d_1(point3d.x - xWidth, point3d.y + yWidth, zMin)
    }]; // calculate screen location of the points

    top.forEach(function (obj) {
      obj.screen = me._convert3Dto2D(obj.point);
    });
    bottom.forEach(function (obj) {
      obj.screen = me._convert3Dto2D(obj.point);
    }); // create five sides, calculate both corner points and center points

    var surfaces = [{
      corners: top,
      center: Point3d_1.avg(bottom[0].point, bottom[2].point)
    }, {
      corners: [top[0], top[1], bottom[1], bottom[0]],
      center: Point3d_1.avg(bottom[1].point, bottom[0].point)
    }, {
      corners: [top[1], top[2], bottom[2], bottom[1]],
      center: Point3d_1.avg(bottom[2].point, bottom[1].point)
    }, {
      corners: [top[2], top[3], bottom[3], bottom[2]],
      center: Point3d_1.avg(bottom[3].point, bottom[2].point)
    }, {
      corners: [top[3], top[0], bottom[0], bottom[3]],
      center: Point3d_1.avg(bottom[0].point, bottom[3].point)
    }];
    point.surfaces = surfaces; // calculate the distance of each of the surface centers to the camera

    for (let j = 0; j < surfaces.length; j++) {
      surface = surfaces[j];

      var transCenter = this._convertPointToTranslation(surface.center);

      surface.dist = this.showPerspective ? transCenter.length() : -transCenter.z; // TODO: this dept calculation doesn't work 100% of the cases due to perspective,
      //     but the current solution is fast/simple and works in 99.9% of all cases
      //     the issue is visible in example 14, with graph.setCameraPosition({horizontal: 2.97, vertical: 0.5, distance: 0.9})
    } // order the surfaces by their (translated) depth


    surfaces.sort(function (a, b) {
      var diff = b.dist - a.dist;
      if (diff) return diff; // if equal depth, sort the top surface last

      if (a.corners === top) return 1;
      if (b.corners === top) return -1; // both are equal

      return 0;
    }); // draw the ordered surfaces

    ctx.lineWidth = this._getStrokeWidth(point);
    ctx.strokeStyle = borderColor;
    ctx.fillStyle = color; // NOTE: we start at j=2 instead of j=0 as we don't need to draw the two surfaces at the backside

    for (let j = 2; j < surfaces.length; j++) {
      surface = surfaces[j];

      this._polygon(ctx, surface.corners);
    }
  };
  /**
   * Draw a polygon using the passed points and fill it with the passed style and stroke.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Array.<vis.Point3d>} points      an array of points.
   * @param {string} [fillStyle] the fill style to set
   * @param {string} [strokeStyle] the stroke style to set
   */


  Graph3d.prototype._polygon = function (ctx, points, fillStyle, strokeStyle) {
    if (points.length < 2) {
      return;
    }

    if (fillStyle !== undefined) {
      ctx.fillStyle = fillStyle;
    }

    if (strokeStyle !== undefined) {
      ctx.strokeStyle = strokeStyle;
    }

    ctx.beginPath();
    ctx.moveTo(points[0].screen.x, points[0].screen.y);

    for (var i = 1; i < points.length; ++i) {
      var point = points[i];
      ctx.lineTo(point.screen.x, point.screen.y);
    }

    ctx.closePath();
    ctx.fill();
    ctx.stroke(); // TODO: only draw stroke when strokeWidth > 0
  };
  /**
   * @param {CanvasRenderingContext2D} ctx
   * @param {object} point
   * @param {string} color
   * @param {string} borderColor
   * @param {number} [size=this._dotSize()]
   * @private
   */


  Graph3d.prototype._drawCircle = function (ctx, point, color, borderColor, size) {
    var radius = this._calcRadius(point, size);

    ctx.lineWidth = this._getStrokeWidth(point);
    ctx.strokeStyle = borderColor;
    ctx.fillStyle = color;
    ctx.beginPath();
    ctx.arc(point.screen.x, point.screen.y, radius, 0, Math.PI * 2, true);
    ctx.fill();
    ctx.stroke();
  };
  /**
   * Determine the colors for the 'regular' graph styles.
   *
   * @param {object} point
   * @returns {{fill, border}}
   * @private
   */


  Graph3d.prototype._getColorsRegular = function (point) {
    // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
    var hue = (1 - (point.point.z - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;

    var color = this._hsv2rgb(hue, 1, 1);

    var borderColor = this._hsv2rgb(hue, 1, 0.8);

    return {
      fill: color,
      border: borderColor
    };
  };
  /**
   * Get the colors for the 'color' graph styles.
   * These styles are currently: 'bar-color' and 'dot-color'
   * Color may be set as a string representation of HTML color, like #ff00ff,
   * or calculated from a number, for example, distance from this point
   * The first option is useful when we have some pre-given legend, to which we have to adjust ourselves
   * The second option is useful when we are interested in automatically setting the color, from some value,
   * using some color scale
   * @param {object} point
   * @returns {{fill: *, border: *}}
   * @private
   */


  Graph3d.prototype._getColorsColor = function (point) {
    // calculate the color based on the value
    var color, borderColor, pointStyle;

    if (point && point.point && point.point.data && point.point.data.style) {
      pointStyle = point.point.data.style;
    }

    if (pointStyle && typeof pointStyle === 'object' && pointStyle.fill && pointStyle.stroke) {
      return {
        fill: pointStyle.fill,
        border: pointStyle.stroke
      };
    }

    if (typeof point.point.value === "string") {
      color = point.point.value;
      borderColor = point.point.value;
    } else {
      var hue = (1 - (point.point.value - this.valueRange.min) * this.scale.value) * 240;
      color = this._hsv2rgb(hue, 1, 1);
      borderColor = this._hsv2rgb(hue, 1, 0.8);
    }

    return {
      fill: color,
      border: borderColor
    };
  };
  /**
   * Get the colors for the 'size' graph styles.
   * These styles are currently: 'bar-size' and 'dot-size'
   *
   * @returns {{fill: *, border: (string|colorOptions.stroke|{string, undefined}|string|colorOptions.stroke|{string}|*)}}
   * @private
   */


  Graph3d.prototype._getColorsSize = function () {
    return {
      fill: this.dataColor.fill,
      border: this.dataColor.stroke
    };
  };
  /**
   * Determine the size of a point on-screen, as determined by the
   * distance to the camera.
   *
   * @param {Object} point
   * @param {number} [size=this._dotSize()] the size that needs to be translated to screen coordinates.
   *             optional; if not passed, use the default point size.
   * @returns {number}
   * @private
   */


  Graph3d.prototype._calcRadius = function (point, size) {
    if (size === undefined) {
      size = this._dotSize();
    }

    var radius;

    if (this.showPerspective) {
      radius = size / -point.trans.z;
    } else {
      radius = size * -(this.eye.z / this.camera.getArmLength());
    }

    if (radius < 0) {
      radius = 0;
    }

    return radius;
  }; // -----------------------------------------------------------------------------
  // Methods for drawing points per graph style.
  // -----------------------------------------------------------------------------

  /**
   * Draw single datapoint for graph style 'bar'.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Object} point
   * @private
   */


  Graph3d.prototype._redrawBarGraphPoint = function (ctx, point) {
    var xWidth = this.xBarWidth / 2;
    var yWidth = this.yBarWidth / 2;

    var colors = this._getColorsRegular(point);

    this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
  };
  /**
   * Draw single datapoint for graph style 'bar-color'.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Object} point
   * @private
   */


  Graph3d.prototype._redrawBarColorGraphPoint = function (ctx, point) {
    var xWidth = this.xBarWidth / 2;
    var yWidth = this.yBarWidth / 2;

    var colors = this._getColorsColor(point);

    this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
  };
  /**
   * Draw single datapoint for graph style 'bar-size'.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Object} point
   * @private
   */


  Graph3d.prototype._redrawBarSizeGraphPoint = function (ctx, point) {
    // calculate size for the bar
    var fraction = (point.point.value - this.valueRange.min) / this.valueRange.range();
    var xWidth = this.xBarWidth / 2 * (fraction * 0.8 + 0.2);
    var yWidth = this.yBarWidth / 2 * (fraction * 0.8 + 0.2);

    var colors = this._getColorsSize();

    this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
  };
  /**
   * Draw single datapoint for graph style 'dot'.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Object} point
   * @private
   */


  Graph3d.prototype._redrawDotGraphPoint = function (ctx, point) {
    var colors = this._getColorsRegular(point);

    this._drawCircle(ctx, point, colors.fill, colors.border);
  };
  /**
   * Draw single datapoint for graph style 'dot-line'.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Object} point
   * @private
   */


  Graph3d.prototype._redrawDotLineGraphPoint = function (ctx, point) {
    // draw a vertical line from the XY-plane to the graph value
    var from = this._convert3Dto2D(point.bottom);

    ctx.lineWidth = 1;

    this._line(ctx, from, point.screen, this.gridColor);

    this._redrawDotGraphPoint(ctx, point);
  };
  /**
   * Draw single datapoint for graph style 'dot-color'.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Object} point
   * @private
   */


  Graph3d.prototype._redrawDotColorGraphPoint = function (ctx, point) {
    var colors = this._getColorsColor(point);

    this._drawCircle(ctx, point, colors.fill, colors.border);
  };
  /**
   * Draw single datapoint for graph style 'dot-size'.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Object} point
   * @private
   */


  Graph3d.prototype._redrawDotSizeGraphPoint = function (ctx, point) {
    var dotSize = this._dotSize();

    var fraction = (point.point.value - this.valueRange.min) / this.valueRange.range();
    var sizeMin = dotSize * this.dotSizeMinFraction;
    var sizeRange = dotSize * this.dotSizeMaxFraction - sizeMin;
    var size = sizeMin + sizeRange * fraction;

    var colors = this._getColorsSize();

    this._drawCircle(ctx, point, colors.fill, colors.border, size);
  };
  /**
   * Draw single datapoint for graph style 'surface'.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Object} point
   * @private
   */


  Graph3d.prototype._redrawSurfaceGraphPoint = function (ctx, point) {
    var right = point.pointRight;
    var top = point.pointTop;
    var cross = point.pointCross;

    if (point === undefined || right === undefined || top === undefined || cross === undefined) {
      return;
    }

    var topSideVisible = true;
    var fillStyle;
    var strokeStyle;

    if (this.showGrayBottom || this.showShadow) {
      // calculate the cross product of the two vectors from center
      // to left and right, in order to know whether we are looking at the
      // bottom or at the top side. We can also use the cross product
      // for calculating light intensity
      var aDiff = Point3d_1.subtract(cross.trans, point.trans);
      var bDiff = Point3d_1.subtract(top.trans, right.trans);
      var crossproduct = Point3d_1.crossProduct(aDiff, bDiff);
      var len = crossproduct.length(); // FIXME: there is a bug with determining the surface side (shadow or colored)

      topSideVisible = crossproduct.z > 0;
    }

    if (topSideVisible) {
      // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
      var zAvg = (point.point.z + right.point.z + top.point.z + cross.point.z) / 4;
      var h = (1 - (zAvg - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;
      var s = 1; // saturation

      var v;

      if (this.showShadow) {
        v = Math.min(1 + crossproduct.x / len / 2, 1); // value. TODO: scale

        fillStyle = this._hsv2rgb(h, s, v);
        strokeStyle = fillStyle;
      } else {
        v = 1;
        fillStyle = this._hsv2rgb(h, s, v);
        strokeStyle = this.axisColor; // TODO: should be customizable
      }
    } else {
      fillStyle = 'gray';
      strokeStyle = this.axisColor;
    }

    ctx.lineWidth = this._getStrokeWidth(point); // TODO: only draw stroke when strokeWidth > 0

    var points = [point, right, cross, top];

    this._polygon(ctx, points, fillStyle, strokeStyle);
  };
  /**
   * Helper method for _redrawGridGraphPoint()
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Object} from
   * @param {Object} to
   * @private
   */


  Graph3d.prototype._drawGridLine = function (ctx, from, to) {
    if (from === undefined || to === undefined) {
      return;
    } // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0


    var zAvg = (from.point.z + to.point.z) / 2;
    var h = (1 - (zAvg - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;
    ctx.lineWidth = this._getStrokeWidth(from) * 2;
    ctx.strokeStyle = this._hsv2rgb(h, 1, 1);

    this._line(ctx, from.screen, to.screen);
  };
  /**
   * Draw single datapoint for graph style 'Grid'.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Object} point
   * @private
   */


  Graph3d.prototype._redrawGridGraphPoint = function (ctx, point) {
    this._drawGridLine(ctx, point, point.pointRight);

    this._drawGridLine(ctx, point, point.pointTop);
  };
  /**
   * Draw single datapoint for graph style 'line'.
   *
   * @param {CanvasRenderingContext2D} ctx
   * @param {Object} point
   * @private
   */


  Graph3d.prototype._redrawLineGraphPoint = function (ctx, point) {
    if (point.pointNext === undefined) {
      return;
    }

    ctx.lineWidth = this._getStrokeWidth(point);
    ctx.strokeStyle = this.dataColor.stroke;

    this._line(ctx, point.screen, point.pointNext.screen);
  };
  /**
   * Draw all datapoints for currently selected graph style.
   *
   */


  Graph3d.prototype._redrawDataGraph = function () {
    var ctx = this._getContext();

    var i;
    if (this.dataPoints === undefined || this.dataPoints.length <= 0) return; // TODO: throw exception?

    this._calcTranslations(this.dataPoints);

    for (i = 0; i < this.dataPoints.length; i++) {
      var point = this.dataPoints[i]; // Using call() ensures that the correct context is used

      this._pointDrawingMethod.call(this, ctx, point);
    }
  }; // -----------------------------------------------------------------------------
  // End methods for drawing points per graph style.
  // -----------------------------------------------------------------------------

  /**
   * Store startX, startY and startOffset for mouse operations
   *
   * @param {Event}     event     The event that occurred
   */


  Graph3d.prototype._storeMousePosition = function (event) {
    // get mouse position (different code for IE and all other browsers)
    this.startMouseX = getMouseX(event);
    this.startMouseY = getMouseY(event);
    this._startCameraOffset = this.camera.getOffset();
  };
  /**
   * Start a moving operation inside the provided parent element
   * @param {Event}     event     The event that occurred (required for
   *                  retrieving the  mouse position)
   */


  Graph3d.prototype._onMouseDown = function (event) {
    event = event || window.event; // check if mouse is still down (may be up when focus is lost for example
    // in an iframe)

    if (this.leftButtonDown) {
      this._onMouseUp(event);
    } // only react on left mouse button down


    this.leftButtonDown = event.which ? event.which === 1 : event.button === 1;
    if (!this.leftButtonDown && !this.touchDown) return;

    this._storeMousePosition(event);

    this.startStart = new Date(this.start);
    this.startEnd = new Date(this.end);
    this.startArmRotation = this.camera.getArmRotation();
    this.frame.style.cursor = 'move'; // add event listeners to handle moving the contents
    // we store the function onmousemove and onmouseup in the graph, so we can
    // remove the eventlisteners lateron in the function mouseUp()

    var me = this;

    this.onmousemove = function (event) {
      me._onMouseMove(event);
    };

    this.onmouseup = function (event) {
      me._onMouseUp(event);
    };

    util.addEventListener(document, 'mousemove', me.onmousemove);
    util.addEventListener(document, 'mouseup', me.onmouseup);
    util.preventDefault(event);
  };
  /**
   * Perform moving operating.
   * This function activated from within the funcion Graph.mouseDown().
   * @param {Event}   event  Well, eehh, the event
   */


  Graph3d.prototype._onMouseMove = function (event) {
    this.moving = true;
    event = event || window.event; // calculate change in mouse position

    var diffX = parseFloat(getMouseX(event)) - this.startMouseX;
    var diffY = parseFloat(getMouseY(event)) - this.startMouseY; // move with ctrl or rotate by other

    if (event && event.ctrlKey === true) {
      // calculate change in mouse position
      var scaleX = this.frame.clientWidth * 0.5;
      var scaleY = this.frame.clientHeight * 0.5;
      var offXNew = (this._startCameraOffset.x || 0) - diffX / scaleX * this.camera.armLength * 0.8;
      var offYNew = (this._startCameraOffset.y || 0) + diffY / scaleY * this.camera.armLength * 0.8;
      this.camera.setOffset(offXNew, offYNew);

      this._storeMousePosition(event);
    } else {
      var horizontalNew = this.startArmRotation.horizontal + diffX / 200;
      var verticalNew = this.startArmRotation.vertical + diffY / 200;
      var snapAngle = 4; // degrees

      var snapValue = Math.sin(snapAngle / 360 * 2 * Math.PI); // snap horizontally to nice angles at 0pi, 0.5pi, 1pi, 1.5pi, etc...
      // the -0.001 is to take care that the vertical axis is always drawn at the left front corner

      if (Math.abs(Math.sin(horizontalNew)) < snapValue) {
        horizontalNew = Math.round(horizontalNew / Math.PI) * Math.PI - 0.001;
      }

      if (Math.abs(Math.cos(horizontalNew)) < snapValue) {
        horizontalNew = (Math.round(horizontalNew / Math.PI - 0.5) + 0.5) * Math.PI - 0.001;
      } // snap vertically to nice angles


      if (Math.abs(Math.sin(verticalNew)) < snapValue) {
        verticalNew = Math.round(verticalNew / Math.PI) * Math.PI;
      }

      if (Math.abs(Math.cos(verticalNew)) < snapValue) {
        verticalNew = (Math.round(verticalNew / Math.PI - 0.5) + 0.5) * Math.PI;
      }

      this.camera.setArmRotation(horizontalNew, verticalNew);
    }

    this.redraw(); // fire a cameraPositionChange event

    var parameters = this.getCameraPosition();
    this.emit('cameraPositionChange', parameters);
    util.preventDefault(event);
  };
  /**
   * Stop moving operating.
   * This function activated from within the funcion Graph.mouseDown().
   * @param {Event}  event   The event
   */


  Graph3d.prototype._onMouseUp = function (event) {
    this.frame.style.cursor = 'auto';
    this.leftButtonDown = false; // remove event listeners here

    util.removeEventListener(document, 'mousemove', this.onmousemove);
    util.removeEventListener(document, 'mouseup', this.onmouseup);
    util.preventDefault(event);
  };
  /**
   * @param {Event}  event   The event
   */


  Graph3d.prototype._onClick = function (event) {
    if (!this.onclick_callback) return;

    if (!this.moving) {
      var boundingRect = this.frame.getBoundingClientRect();
      var mouseX = getMouseX(event) - boundingRect.left;
      var mouseY = getMouseY(event) - boundingRect.top;

      var dataPoint = this._dataPointFromXY(mouseX, mouseY);

      if (dataPoint) this.onclick_callback(dataPoint.point.data);
    } else {
      // disable onclick callback, if it came immediately after rotate/pan
      this.moving = false;
    }

    util.preventDefault(event);
  };
  /**
   * After having moved the mouse, a tooltip should pop up when the mouse is resting on a data point
   * @param {Event}  event   A mouse move event
   */


  Graph3d.prototype._onTooltip = function (event) {
    var delay = this.tooltipDelay; // ms

    var boundingRect = this.frame.getBoundingClientRect();
    var mouseX = getMouseX(event) - boundingRect.left;
    var mouseY = getMouseY(event) - boundingRect.top;

    if (!this.showTooltip) {
      return;
    }

    if (this.tooltipTimeout) {
      clearTimeout(this.tooltipTimeout);
    } // (delayed) display of a tooltip only if no mouse button is down


    if (this.leftButtonDown) {
      this._hideTooltip();

      return;
    }

    if (this.tooltip && this.tooltip.dataPoint) {
      // tooltip is currently visible
      var dataPoint = this._dataPointFromXY(mouseX, mouseY);

      if (dataPoint !== this.tooltip.dataPoint) {
        // datapoint changed
        if (dataPoint) {
          this._showTooltip(dataPoint);
        } else {
          this._hideTooltip();
        }
      }
    } else {
      // tooltip is currently not visible
      var me = this;
      this.tooltipTimeout = setTimeout(function () {
        me.tooltipTimeout = null; // show a tooltip if we have a data point

        var dataPoint = me._dataPointFromXY(mouseX, mouseY);

        if (dataPoint) {
          me._showTooltip(dataPoint);
        }
      }, delay);
    }
  };
  /**
   * Event handler for touchstart event on mobile devices
   * @param {Event}  event   The event
   */


  Graph3d.prototype._onTouchStart = function (event) {
    this.touchDown = true;
    var me = this;

    this.ontouchmove = function (event) {
      me._onTouchMove(event);
    };

    this.ontouchend = function (event) {
      me._onTouchEnd(event);
    };

    util.addEventListener(document, 'touchmove', me.ontouchmove);
    util.addEventListener(document, 'touchend', me.ontouchend);

    this._onMouseDown(event);
  };
  /**
   * Event handler for touchmove event on mobile devices
   * @param {Event}  event   The event
   */


  Graph3d.prototype._onTouchMove = function (event) {
    this._onMouseMove(event);
  };
  /**
   * Event handler for touchend event on mobile devices
   * @param {Event}  event   The event
   */


  Graph3d.prototype._onTouchEnd = function (event) {
    this.touchDown = false;
    util.removeEventListener(document, 'touchmove', this.ontouchmove);
    util.removeEventListener(document, 'touchend', this.ontouchend);

    this._onMouseUp(event);
  };
  /**
   * Event handler for mouse wheel event, used to zoom the graph
   * Code from http://adomas.org/javascript-mouse-wheel/
   * @param {Event}  event   The event
   */


  Graph3d.prototype._onWheel = function (event) {
    if (!event)
      /* For IE. */
      event = window.event;

    if (this.zoomable && (!this.ctrlToZoom || event.ctrlKey)) {
      // retrieve delta
      var delta = 0;

      if (event.wheelDelta) {
        /* IE/Opera. */
        delta = event.wheelDelta / 120;
      } else if (event.detail) {
        /* Mozilla case. */
        // In Mozilla, sign of delta is different than in IE.
        // Also, delta is multiple of 3.
        delta = -event.detail / 3;
      } // If delta is nonzero, handle it.
      // Basically, delta is now positive if wheel was scrolled up,
      // and negative, if wheel was scrolled down.


      if (delta) {
        var oldLength = this.camera.getArmLength();
        var newLength = oldLength * (1 - delta / 10);
        this.camera.setArmLength(newLength);
        this.redraw();

        this._hideTooltip();
      } // fire a cameraPositionChange event


      var parameters = this.getCameraPosition();
      this.emit('cameraPositionChange', parameters); // Prevent default actions caused by mouse wheel.
      // That might be ugly, but we handle scrolls somehow
      // anyway, so don't bother here..

      util.preventDefault(event);
    }
  };
  /**
   * Test whether a point lies inside given 2D triangle
   *
   * @param   {vis.Point2d}   point
   * @param   {vis.Point2d[]} triangle
   * @returns {boolean}   true if given point lies inside or on the edge of the
   *                      triangle, false otherwise
   * @private
   */


  Graph3d.prototype._insideTriangle = function (point, triangle) {
    var a = triangle[0],
        b = triangle[1],
        c = triangle[2];
    /**
     *
     * @param {number} x
     * @returns {number}
     */

    function sign(x) {
      return x > 0 ? 1 : x < 0 ? -1 : 0;
    }

    var as = sign((b.x - a.x) * (point.y - a.y) - (b.y - a.y) * (point.x - a.x));
    var bs = sign((c.x - b.x) * (point.y - b.y) - (c.y - b.y) * (point.x - b.x));
    var cs = sign((a.x - c.x) * (point.y - c.y) - (a.y - c.y) * (point.x - c.x)); // each of the three signs must be either equal to each other or zero

    return (as == 0 || bs == 0 || as == bs) && (bs == 0 || cs == 0 || bs == cs) && (as == 0 || cs == 0 || as == cs);
  };
  /**
   * Find a data point close to given screen position (x, y)
   *
   * @param   {number} x
   * @param   {number} y
   * @returns {Object | null} The closest data point or null if not close to any
   *                          data point
   * @private
   */


  Graph3d.prototype._dataPointFromXY = function (x, y) {
    var i,
        distMax = 100,
        // px
    dataPoint = null,
        closestDataPoint = null,
        closestDist = null,
        center = new Point2d_1(x, y);

    if (this.style === Graph3d.STYLE.BAR || this.style === Graph3d.STYLE.BARCOLOR || this.style === Graph3d.STYLE.BARSIZE) {
      // the data points are ordered from far away to closest
      for (i = this.dataPoints.length - 1; i >= 0; i--) {
        dataPoint = this.dataPoints[i];
        var surfaces = dataPoint.surfaces;

        if (surfaces) {
          for (var s = surfaces.length - 1; s >= 0; s--) {
            // split each surface in two triangles, and see if the center point is inside one of these
            var surface = surfaces[s];
            var corners = surface.corners;
            var triangle1 = [corners[0].screen, corners[1].screen, corners[2].screen];
            var triangle2 = [corners[2].screen, corners[3].screen, corners[0].screen];

            if (this._insideTriangle(center, triangle1) || this._insideTriangle(center, triangle2)) {
              // return immediately at the first hit
              return dataPoint;
            }
          }
        }
      }
    } else {
      // find the closest data point, using distance to the center of the point on 2d screen
      for (i = 0; i < this.dataPoints.length; i++) {
        dataPoint = this.dataPoints[i];
        var point = dataPoint.screen;

        if (point) {
          var distX = Math.abs(x - point.x);
          var distY = Math.abs(y - point.y);
          var dist = Math.sqrt(distX * distX + distY * distY);

          if ((closestDist === null || dist < closestDist) && dist < distMax) {
            closestDist = dist;
            closestDataPoint = dataPoint;
          }
        }
      }
    }

    return closestDataPoint;
  };
  /**
   * Determine if the given style has bars
   *
   * @param   {number} style the style to check
   * @returns {boolean} true if bar style, false otherwise
   */


  Graph3d.prototype.hasBars = function (style) {
    return style == Graph3d.STYLE.BAR || style == Graph3d.STYLE.BARCOLOR || style == Graph3d.STYLE.BARSIZE;
  };
  /**
   * Display a tooltip for given data point
   * @param {Object} dataPoint
   * @private
   */


  Graph3d.prototype._showTooltip = function (dataPoint) {
    var content, line, dot;

    if (!this.tooltip) {
      content = document.createElement('div');
      Object.assign(content.style, {}, this.tooltipStyle.content);
      content.style.position = 'absolute';
      line = document.createElement('div');
      Object.assign(line.style, {}, this.tooltipStyle.line);
      line.style.position = 'absolute';
      dot = document.createElement('div');
      Object.assign(dot.style, {}, this.tooltipStyle.dot);
      dot.style.position = 'absolute';
      this.tooltip = {
        dataPoint: null,
        dom: {
          content: content,
          line: line,
          dot: dot
        }
      };
    } else {
      content = this.tooltip.dom.content;
      line = this.tooltip.dom.line;
      dot = this.tooltip.dom.dot;
    }

    this._hideTooltip();

    this.tooltip.dataPoint = dataPoint;

    if (typeof this.showTooltip === 'function') {
      content.innerHTML = this.showTooltip(dataPoint.point);
    } else {
      content.innerHTML = '<table>' + '<tr><td>' + this.xLabel + ':</td><td>' + dataPoint.point.x + '</td></tr>' + '<tr><td>' + this.yLabel + ':</td><td>' + dataPoint.point.y + '</td></tr>' + '<tr><td>' + this.zLabel + ':</td><td>' + dataPoint.point.z + '</td></tr>' + '</table>';
    }

    content.style.left = '0';
    content.style.top = '0';
    this.frame.appendChild(content);
    this.frame.appendChild(line);
    this.frame.appendChild(dot); // calculate sizes

    var contentWidth = content.offsetWidth;
    var contentHeight = content.offsetHeight;
    var lineHeight = line.offsetHeight;
    var dotWidth = dot.offsetWidth;
    var dotHeight = dot.offsetHeight;
    var left = dataPoint.screen.x - contentWidth / 2;
    left = Math.min(Math.max(left, 10), this.frame.clientWidth - 10 - contentWidth);
    line.style.left = dataPoint.screen.x + 'px';
    line.style.top = dataPoint.screen.y - lineHeight + 'px';
    content.style.left = left + 'px';
    content.style.top = dataPoint.screen.y - lineHeight - contentHeight + 'px';
    dot.style.left = dataPoint.screen.x - dotWidth / 2 + 'px';
    dot.style.top = dataPoint.screen.y - dotHeight / 2 + 'px';
  };
  /**
   * Hide the tooltip when displayed
   * @private
   */


  Graph3d.prototype._hideTooltip = function () {
    if (this.tooltip) {
      this.tooltip.dataPoint = null;

      for (var prop in this.tooltip.dom) {
        if (this.tooltip.dom.hasOwnProperty(prop)) {
          var elem = this.tooltip.dom[prop];

          if (elem && elem.parentNode) {
            elem.parentNode.removeChild(elem);
          }
        }
      }
    }
  };
  /**--------------------------------------------------------------------------**/

  /**
   * Get the horizontal mouse position from a mouse event
   *
   * @param   {Event}  event
   * @returns {number} mouse x
   */


  function getMouseX(event) {
    if ('clientX' in event) return event.clientX;
    return event.targetTouches[0] && event.targetTouches[0].clientX || 0;
  }
  /**
   * Get the vertical mouse position from a mouse event
   *
   * @param   {Event}  event
   * @returns {number} mouse y
   */


  function getMouseY(event) {
    if ('clientY' in event) return event.clientY;
    return event.targetTouches[0] && event.targetTouches[0].clientY || 0;
  } // -----------------------------------------------------------------------------
  //  Public methods for specific settings
  // -----------------------------------------------------------------------------

  /**
   * Set the rotation and distance of the camera
   *
   * @param {Object}  pos            An object with the camera position
   * @param {number} [pos.horizontal] The horizontal rotation, between 0 and 2*PI.
   *                                 Optional, can be left undefined.
   * @param {number} [pos.vertical]  The vertical rotation, between 0 and 0.5*PI.
   *                                 if vertical=0.5*PI, the graph is shown from
   *                                 the top. Optional, can be left undefined.
   * @param {number} [pos.distance]  The (normalized) distance of the camera to the
   *                                 center of the graph, a value between 0.71 and
   *                                 5.0. Optional, can be left undefined.
   */


  Graph3d.prototype.setCameraPosition = function (pos) {
    Settings.setCameraPosition(pos, this);
    this.redraw();
  };
  /**
   * Set a new size for the graph
   *
   * @param {string} width  Width in pixels or percentage (for example '800px'
   *                        or '50%')
   * @param {string} height Height in pixels or percentage  (for example '400px'
   *                        or '30%')
   */


  Graph3d.prototype.setSize = function (width, height) {
    this._setSize(width, height);

    this.redraw();
  }; // -----------------------------------------------------------------------------
  //  End public methods for specific settings
  // -----------------------------------------------------------------------------


  var Graph3d_1 = Graph3d;

  var moment$2 = createCommonjsModule$2(function (module, exports) {

    (function (global, factory) {
       module.exports = factory() ;
    })(commonjsGlobal$2, function () {

      var hookCallback;

      function hooks() {
        return hookCallback.apply(null, arguments);
      } // This is done to register the method called with moment()
      // without creating circular dependencies.


      function setHookCallback(callback) {
        hookCallback = callback;
      }

      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
      }

      function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
      }

      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;

          for (k in obj) {
            if (obj.hasOwnProperty(k)) {
              return false;
            }
          }

          return true;
        }
      }

      function isUndefined(input) {
        return input === void 0;
      }

      function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
      }

      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
      }

      function map(arr, fn) {
        var res = [],
            i;

        for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i));
        }

        return res;
      }

      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }

      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }

        if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf;
        }

        return a;
      }

      function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
      }

      function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }

      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }

        return m._pf;
      }

      var some;

      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function (fun) {
          var t = Object(this);
          var len = t.length >>> 0;

          for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }

          return false;
        };
      }

      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m);
          var parsedParts = some.call(flags.parsedDateParts, function (i) {
            return i != null;
          });
          var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
          }

          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }

        return m._isValid;
      }

      function createInvalid(flags) {
        var m = createUTC(NaN);

        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }

        return m;
      } // Plugins that add properties should also add the key here (null value),
      // so we can properly clone ourselves.


      var momentProperties = hooks.momentProperties = [];

      function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
          to._isAMomentObject = from._isAMomentObject;
        }

        if (!isUndefined(from._i)) {
          to._i = from._i;
        }

        if (!isUndefined(from._f)) {
          to._f = from._f;
        }

        if (!isUndefined(from._l)) {
          to._l = from._l;
        }

        if (!isUndefined(from._strict)) {
          to._strict = from._strict;
        }

        if (!isUndefined(from._tzm)) {
          to._tzm = from._tzm;
        }

        if (!isUndefined(from._isUTC)) {
          to._isUTC = from._isUTC;
        }

        if (!isUndefined(from._offset)) {
          to._offset = from._offset;
        }

        if (!isUndefined(from._pf)) {
          to._pf = getParsingFlags(from);
        }

        if (!isUndefined(from._locale)) {
          to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
          for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from[prop];

            if (!isUndefined(val)) {
              to[prop] = val;
            }
          }
        }

        return to;
      }

      var updateInProgress = false; // Moment prototype object

      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);

        if (!this.isValid()) {
          this._d = new Date(NaN);
        } // Prevent infinite loop in case updateOffset creates new moment
        // objects.


        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }

      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }

      function absFloor(number) {
        if (number < 0) {
          // -0 -> 0
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }

      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }

        return value;
      } // compare two arrays, return the number of differences


      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;

        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }

        return diffs + lengthDiff;
      }

      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
          console.warn('Deprecation warning: ' + msg);
        }
      }

      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }

          if (firstTime) {
            var args = [];
            var arg;

            for (var i = 0; i < arguments.length; i++) {
              arg = '';

              if (typeof arguments[i] === 'object') {
                arg += '\n[' + i + '] ';

                for (var key in arguments[0]) {
                  arg += key + ': ' + arguments[0][key] + ', ';
                }

                arg = arg.slice(0, -2); // Remove trailing comma and space
              } else {
                arg = arguments[i];
              }

              args.push(arg);
            }

            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
            firstTime = false;
          }

          return fn.apply(this, arguments);
        }, fn);
      }

      var deprecations = {};

      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }

        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }

      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;

      function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
      }

      function set(config) {
        var prop, i;

        for (i in config) {
          prop = config[i];

          if (isFunction(prop)) {
            this[i] = prop;
          } else {
            this['_' + i] = prop;
          }
        }

        this._config = config; // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.

        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
      }

      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;

        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }

        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
          }
        }

        return res;
      }

      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }

      var keys;

      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function (obj) {
          var i,
              res = [];

          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }

          return res;
        };
      }

      var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
      };

      function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
      }

      var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
      };

      function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
          return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
          return val.slice(1);
        });
        return this._longDateFormat[key];
      }

      var defaultInvalidDate = 'Invalid date';

      function invalidDate() {
        return this._invalidDate;
      }

      var defaultOrdinal = '%d';
      var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

      function ordinal(number) {
        return this._ordinal.replace('%d', number);
      }

      var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
      };

      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }

      function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
      }

      var aliases = {};

      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
      }

      function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
      }

      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);

            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }

        return normalizedInput;
      }

      var priorities = {};

      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }

      function getPrioritizedUnits(unitsObj) {
        var units = [];

        for (var u in unitsObj) {
          units.push({
            unit: u,
            priority: priorities[u]
          });
        }

        units.sort(function (a, b) {
          return a.priority - b.priority;
        });
        return units;
      }

      function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }

      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
      var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
      var formatFunctions = {};
      var formatTokenFunctions = {}; // token:    'M'
      // padded:   ['MM', 2]
      // ordinal:  'Mo'
      // callback: function () { this.month() + 1 }

      function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;

        if (typeof callback === 'string') {
          func = function () {
            return this[callback]();
          };
        }

        if (token) {
          formatTokenFunctions[token] = func;
        }

        if (padded) {
          formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }

        if (ordinal) {
          formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
          };
        }
      }

      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '');
        }

        return input.replace(/\\/g, '');
      }

      function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }

        return function (mom) {
          var output = '',
              i;

          for (i = 0; i < length; i++) {
            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
          }

          return output;
        };
      } // format date using native date object


      function formatMoment(m, format) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
      }

      function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
          return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;

        while (i >= 0 && localFormattingTokens.test(format)) {
          format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }

        return format;
      }

      var match1 = /\d/; //       0 - 9

      var match2 = /\d\d/; //      00 - 99

      var match3 = /\d{3}/; //     000 - 999

      var match4 = /\d{4}/; //    0000 - 9999

      var match6 = /[+-]?\d{6}/; // -999999 - 999999

      var match1to2 = /\d\d?/; //       0 - 99

      var match3to4 = /\d\d\d\d?/; //     999 - 9999

      var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999

      var match1to3 = /\d{1,3}/; //       0 - 999

      var match1to4 = /\d{1,4}/; //       0 - 9999

      var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

      var matchUnsigned = /\d+/; //       0 - inf

      var matchSigned = /[+-]?\d+/; //    -inf - inf

      var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

      var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

      var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
      // any word (or two) characters or numbers including two/three word month in arabic.
      // includes scottish gaelic two word and hyphenated months

      var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
      var regexes = {};

      function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }

      function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
          return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
      } // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript


      function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
        }));
      }

      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      }

      var tokens = {};

      function addParseToken(token, callback) {
        var i,
            func = callback;

        if (typeof token === 'string') {
          token = [token];
        }

        if (isNumber(callback)) {
          func = function (input, array) {
            array[callback] = toInt(input);
          };
        }

        for (i = 0; i < token.length; i++) {
          tokens[token[i]] = func;
        }
      }

      function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
          config._w = config._w || {};
          callback(input, config._w, config, token);
        });
      }

      function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
          tokens[token](input, config._a, config, token);
        }
      }

      var YEAR = 0;
      var MONTH = 1;
      var DATE = 2;
      var HOUR = 3;
      var MINUTE = 4;
      var SECOND = 5;
      var MILLISECOND = 6;
      var WEEK = 7;
      var WEEKDAY = 8; // FORMATTING

      addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
      });
      addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
      });
      addFormatToken(0, ['YYYY', 4], 0, 'year');
      addFormatToken(0, ['YYYYY', 5], 0, 'year');
      addFormatToken(0, ['YYYYYY', 6, true], 0, 'year'); // ALIASES

      addUnitAlias('year', 'y'); // PRIORITIES

      addUnitPriority('year', 1); // PARSING

      addRegexToken('Y', matchSigned);
      addRegexToken('YY', match1to2, match2);
      addRegexToken('YYYY', match1to4, match4);
      addRegexToken('YYYYY', match1to6, match6);
      addRegexToken('YYYYYY', match1to6, match6);
      addParseToken(['YYYYY', 'YYYYYY'], YEAR);
      addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
      }); // HELPERS

      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }

      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      } // HOOKS


      hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
      }; // MOMENTS


      var getSetYear = makeGetSet('FullYear', true);

      function getIsLeapYear() {
        return isLeapYear(this.year());
      }

      function makeGetSet(unit, keepTime) {
        return function (value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }

      function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
      }

      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
          } else {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
          }
        }
      } // MOMENTS


      function stringGet(units) {
        units = normalizeUnits(units);

        if (isFunction(this[units])) {
          return this[units]();
        }

        return this;
      }

      function stringSet(units, value) {
        if (typeof units === 'object') {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units);

          for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);

          if (isFunction(this[units])) {
            return this[units](value);
          }
        }

        return this;
      }

      function mod(n, x) {
        return (n % x + x) % x;
      }

      var indexOf;

      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function (o) {
          // I know
          var i;

          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }

          return -1;
        };
      }

      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }

        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      } // FORMATTING


      addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
      });
      addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
      });
      addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
      }); // ALIASES

      addUnitAlias('month', 'M'); // PRIORITY

      addUnitPriority('month', 8); // PARSING

      addRegexToken('M', match1to2);
      addRegexToken('MM', match1to2, match2);
      addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
      });
      addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
      });
      addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict); // if we didn't find a month name, mark the date as invalid.


        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      }); // LOCALES

      var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
      var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');

      function localeMonths(m, format) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months['standalone'];
        }

        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
      }

      var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');

      function localeMonthsShort(m, format) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        }

        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
      }

      function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();

        if (!this._monthsParse) {
          // this is not used
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];

          for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
          }
        }

        if (strict) {
          if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }

      function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        } // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse


        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);

          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
          }

          if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
          } // test the regex


          if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      } // MOMENTS


      function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
          // No op
          return mom;
        }

        if (typeof value === 'string') {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value); // TODO: Another silent failure?

            if (!isNumber(value)) {
              return mom;
            }
          }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));

        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);

        return mom;
      }

      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, 'Month');
        }
      }

      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }

      var defaultMonthsShortRegex = matchWord;

      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }

          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }

          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }

      var defaultMonthsRegex = matchWord;

      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }

          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
          }

          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }

      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;

        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          shortPieces.push(this.monthsShort(mom, ''));
          longPieces.push(this.months(mom, ''));
          mixedPieces.push(this.months(mom, ''));
          mixedPieces.push(this.monthsShort(mom, ''));
        } // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.


        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
        }

        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
      }

      function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date; // the date constructor remaps years 0-99 to 1900-1999

        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          date = new Date(y + 400, m, d, h, M, s, ms);

          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
      }

      function createUTCDate(y) {
        var date; // the Date.UTC function remaps years 0-99 to 1900-1999

        if (y < 100 && y >= 0) {
          var args = Array.prototype.slice.call(arguments); // preserve leap years using a full 400 year cycle, then reset

          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));

          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
      } // start-of-first-week - start-of-year


      function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      } // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday


      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }

        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }

      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }

        return {
          week: resWeek,
          year: resYear
        };
      }

      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      } // FORMATTING


      addFormatToken('w', ['ww', 2], 'wo', 'week');
      addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek'); // ALIASES

      addUnitAlias('week', 'w');
      addUnitAlias('isoWeek', 'W'); // PRIORITIES

      addUnitPriority('week', 5);
      addUnitPriority('isoWeek', 5); // PARSING

      addRegexToken('w', match1to2);
      addRegexToken('ww', match1to2, match2);
      addRegexToken('W', match1to2);
      addRegexToken('WW', match1to2, match2);
      addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
      }); // HELPERS
      // LOCALES

      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }

      var defaultLocaleWeek = {
        dow: 0,
        // Sunday is the first day of the week.
        doy: 6 // The week that contains Jan 6th is the first week of the year.

      };

      function localeFirstDayOfWeek() {
        return this._week.dow;
      }

      function localeFirstDayOfYear() {
        return this._week.doy;
      } // MOMENTS


      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
      }

      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
      } // FORMATTING


      addFormatToken('d', 0, 'do', 'day');
      addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
      });
      addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
      });
      addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
      });
      addFormatToken('e', 0, 0, 'weekday');
      addFormatToken('E', 0, 0, 'isoWeekday'); // ALIASES

      addUnitAlias('day', 'd');
      addUnitAlias('weekday', 'e');
      addUnitAlias('isoWeekday', 'E'); // PRIORITY

      addUnitPriority('day', 11);
      addUnitPriority('weekday', 11);
      addUnitPriority('isoWeekday', 11); // PARSING

      addRegexToken('d', match1to2);
      addRegexToken('e', match1to2);
      addRegexToken('E', match1to2);
      addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
      });
      addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
      });
      addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
      });
      addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict); // if we didn't get a weekday name, mark the date as invalid


        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
      }); // HELPERS

      function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
          return input;
        }

        if (!isNaN(input)) {
          return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);

        if (typeof input === 'number') {
          return input;
        }

        return null;
      }

      function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
          return locale.weekdaysParse(input) % 7 || 7;
        }

        return isNaN(input) ? null : input;
      } // LOCALES


      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }

      var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');

      function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }

      var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');

      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }

      var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');

      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }

      function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();

        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];

          for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
          }
        }

        if (strict) {
          if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._shortWeekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._weekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._weekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }

      function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, 1]).day(i);

          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
          }

          if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
          } // test the regex


          if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      } // MOMENTS


      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();

        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, 'd');
        } else {
          return day;
        }
      }

      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
      }

      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        } // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.


        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }

      var defaultWeekdaysRegex = matchWord;

      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }

          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }

          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }

      var defaultWeekdaysShortRegex = matchWord;

      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }

          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }

          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }

      var defaultWeekdaysMinRegex = matchWord;

      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }

          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }

          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }

      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;

        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, 1]).day(i);
          minp = this.weekdaysMin(mom, '');
          shortp = this.weekdaysShort(mom, '');
          longp = this.weekdays(mom, '');
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        } // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.


        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        for (i = 0; i < 7; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
      } // FORMATTING


      function hFormat() {
        return this.hours() % 12 || 12;
      }

      function kFormat() {
        return this.hours() || 24;
      }

      addFormatToken('H', ['HH', 2], 0, 'hour');
      addFormatToken('h', ['hh', 2], 0, hFormat);
      addFormatToken('k', ['kk', 2], 0, kFormat);
      addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });

      function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
      }

      meridiem('a', true);
      meridiem('A', false); // ALIASES

      addUnitAlias('hour', 'h'); // PRIORITY

      addUnitPriority('hour', 13); // PARSING

      function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
      }

      addRegexToken('a', matchMeridiem);
      addRegexToken('A', matchMeridiem);
      addRegexToken('H', match1to2);
      addRegexToken('h', match1to2);
      addRegexToken('k', match1to2);
      addRegexToken('HH', match1to2, match2);
      addRegexToken('hh', match1to2, match2);
      addRegexToken('kk', match1to2, match2);
      addRegexToken('hmm', match3to4);
      addRegexToken('hmmss', match5to6);
      addRegexToken('Hmm', match3to4);
      addRegexToken('Hmmss', match5to6);
      addParseToken(['H', 'HH'], HOUR);
      addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      }); // LOCALES

      function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
      }

      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

      function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
          return isLower ? 'pm' : 'PM';
        } else {
          return isLower ? 'am' : 'AM';
        }
      } // MOMENTS
      // Setting the hour should keep the time, because the user explicitly
      // specified which hour they want. So trying to maintain the same hour (in
      // a new timezone) makes sense. Adding/subtracting hours does not follow
      // this rule.


      var getSetHour = makeGetSet('Hours', true);
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      }; // internal storage for locale config files

      var locales = {};
      var localeFamilies = {};
      var globalLocale;

      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
      } // pick the locale from the array
      // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
      // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root


      function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
          split = normalizeLocale(names[i]).split('-');
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;

          while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));

            if (locale) {
              return locale;
            }

            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
              //the next array item is better than a shallower substring of this one
              break;
            }

            j--;
          }

          i++;
        }

        return globalLocale;
      }

      function loadLocale(name) {
        var oldLocale = null; // TODO: Find a better way to register and load all the locales in Node

        if (!locales[name] && 'object' !== 'undefined' && module && module.exports) {
          try {
            oldLocale = globalLocale._abbr;
            var aliasedRequire = commonjsRequire$2;
            aliasedRequire('./locale/' + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {}
        }

        return locales[name];
      } // This function will load locale and then set the global locale.  If
      // no arguments are passed in, it will simply return the current global
      // locale key.


      function getSetGlobalLocale(key, values) {
        var data;

        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }

          if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
          } else {
            if (typeof console !== 'undefined' && console.warn) {
              //warn user if arguments are passed but the locale could not be set
              console.warn('Locale ' + key + ' not found. Did you forget to load it?');
            }
          }
        }

        return globalLocale._abbr;
      }

      function defineLocale(name, config) {
        if (config !== null) {
          var locale,
              parentConfig = baseConfig;
          config.abbr = name;

          if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale = loadLocale(config.parentLocale);

              if (locale != null) {
                parentConfig = locale._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }

                localeFamilies[config.parentLocale].push({
                  name: name,
                  config: config
                });
                return null;
              }
            }
          }

          locales[name] = new Locale(mergeConfigs(parentConfig, config));

          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
              defineLocale(x.name, x.config);
            });
          } // backwards compat for now: also set the locale
          // make sure we set the locale AFTER all child locales have been
          // created, so we won't end up with the child locale set.


          getSetGlobalLocale(name);
          return locales[name];
        } else {
          // useful for testing
          delete locales[name];
          return null;
        }
      }

      function updateLocale(name, config) {
        if (config != null) {
          var locale,
              tmpLocale,
              parentConfig = baseConfig; // MERGE

          tmpLocale = loadLocale(name);

          if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
          }

          config = mergeConfigs(parentConfig, config);
          locale = new Locale(config);
          locale.parentLocale = locales[name];
          locales[name] = locale; // backwards compat for now: also set the locale

          getSetGlobalLocale(name);
        } else {
          // pass null for config to unupdate, useful for tests
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }

        return locales[name];
      } // returns locale data


      function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }

        if (!key) {
          return globalLocale;
        }

        if (!isArray(key)) {
          //short-circuit everything else
          locale = loadLocale(key);

          if (locale) {
            return locale;
          }

          key = [key];
        }

        return chooseLocale(key);
      }

      function listLocales() {
        return keys(locales);
      }

      function checkOverflow(m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }

          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }

          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }

          getParsingFlags(m).overflow = overflow;
        }

        return m;
      } // Pick the first defined of two or three arguments.


      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }

        if (b != null) {
          return b;
        }

        return c;
      }

      function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());

        if (config._useUTC) {
          return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }

        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      } // convert an array to a date.
      // the array should mirror the parameters below
      // note: all values past the year are optional and will default to the lowest possible value.
      // [year, month, day , hour, minute, second, millisecond]


      function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
          return;
        }

        currentDate = currentDateArray(config); //compute day of the year from weeks and weekdays

        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        } //if the day of the year is set, figure out what it is


        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }

          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        } // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything


        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        } // Zero out whatever was not defaulted, including time


        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        } // Check for 24:00:00.000


        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay(); // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.

        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
          config._a[HOUR] = 24;
        } // check for mismatching day of week


        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }

      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
        w = config._w;

        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4; // TODO: We need to take the current isoWeekYear, but that depends on
          // how we interpret now (local, utc, fixed offset). So create
          // a now version of current config (take local/utc/offset flags, and
          // create now).

          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);

          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          var curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year); // Default to current week.

          week = defaults(w.w, curWeek.week);

          if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;

            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            // local weekday -- counting starts from beginning of week
            weekday = w.e + dow;

            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            // default to beginning of week
            weekday = dow;
          }
        }

        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      } // iso 8601 regex
      // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)


      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
      var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
      var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
      var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], // YYYYMM is NOT allowed by the standard
      ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]]; // iso time formats and regexes

      var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];
      var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i; // date from iso format

      function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
          getParsingFlags(config).iso = true;

          for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }

          if (dateFormat == null) {
            config._isValid = false;
            return;
          }

          if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                // match[2] should be 'T' or space
                timeFormat = (match[2] || ' ') + isoTimes[i][0];
                break;
              }
            }

            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }

          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }

          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = 'Z';
            } else {
              config._isValid = false;
              return;
            }
          }

          config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      } // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3


      var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];

        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }

        return result;
      }

      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);

        if (year <= 49) {
          return 2000 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }

        return year;
      }

      function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
      }

      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
              weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();

          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }

        return true;
      }

      var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };

      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          // the only allowed military tz is Z
          return 0;
        } else {
          var hm = parseInt(numOffset, 10);
          var m = hm % 100,
              h = (hm - m) / 100;
          return h * 60 + m;
        }
      } // date and time from ref 2822 format


      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));

        if (match) {
          var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);

          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }

          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);

          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      } // date from iso format or fallback


      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }

        configFromISO(config);

        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }

        configFromRFC2822(config);

        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        } // Final attempt, use Input Fallback


        hooks.createFromInputFallback(config);
      }

      hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
      }); // constant that refers to the ISO standard

      hooks.ISO_8601 = function () {}; // constant that refers to the RFC 2822 form


      hooks.RFC_2822 = function () {}; // date from string and format string


      function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }

        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }

        config._a = [];
        getParsingFlags(config).empty = true; // This array is used to make a Date, either with `new Date` or `Date.UTC`

        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
          token = tokens[i];
          parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0]; // console.log('token', token, 'parsedInput', parsedInput,
          //         'regex', getParseRegexForToken(token, config));

          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));

            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }

            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          } // don't parse if it's not a known token


          if (formatTokenFunctions[token]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token);
            }

            addTimeToArrayFromToken(token, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
          }
        } // add remaining unparsed input length to the string


        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;

        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        } // clear _12h flag if hour is <= 12


        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem; // handle meridiem

        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        configFromArray(config);
        checkOverflow(config);
      }

      function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
          // nothing to do
          return hour;
        }

        if (locale.meridiemHour != null) {
          return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
          // Fallback
          isPm = locale.isPM(meridiem);

          if (isPm && hour < 12) {
            hour += 12;
          }

          if (!isPm && hour === 12) {
            hour = 0;
          }

          return hour;
        } else {
          // this is not supposed to happen
          return hour;
        }
      } // date from string and array of format strings


      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;

        if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }

        for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          tempConfig = copyConfig({}, config);

          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }

          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);

          if (!isValid(tempConfig)) {
            continue;
          } // if there is any input that was not parsed add a penalty for that format


          currentScore += getParsingFlags(tempConfig).charsLeftOver; //or tokens

          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;

          if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }

        extend(config, bestMoment || tempConfig);
      }

      function configFromObject(config) {
        if (config._d) {
          return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
          return obj && parseInt(obj, 10);
        });
        configFromArray(config);
      }

      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));

        if (res._nextDay) {
          // Adding is smart enough around DST
          res.add(1, 'd');
          res._nextDay = undefined;
        }

        return res;
      }

      function prepareConfig(config) {
        var input = config._i,
            format = config._f;
        config._locale = config._locale || getLocale(config._l);

        if (input === null || format === undefined && input === '') {
          return createInvalid({
            nullInput: true
          });
        }

        if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format)) {
          configFromStringAndArray(config);
        } else if (format) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }

        if (!isValid(config)) {
          config._d = null;
        }

        return config;
      }

      function configFromInput(config) {
        var input = config._i;

        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          // from milliseconds
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }

      function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
          strict = locale;
          locale = undefined;
        }

        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = undefined;
        } // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423


        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
      }

      function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
      }

      var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);

        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      });
      var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);

        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }); // Pick a moment m from moments so that m[fn](other) is true for all
      // other. This relies on the function fn to be transitive.
      //
      // moments should either be an array of moment objects or an array, whose
      // first element is an array of moment objects.

      function pickBy(fn, moments) {
        var res, i;

        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }

        if (!moments.length) {
          return createLocal();
        }

        res = moments[0];

        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }

        return res;
      } // TODO: Use [].sort instead?


      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
      }

      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
      }

      var now = function () {
        return Date.now ? Date.now() : +new Date();
      };

      var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

      function isDurationValid(m) {
        for (var key in m) {
          if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }

        var unitHasDecimal = false;

        for (var i = 0; i < ordering.length; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false; // only allow non-integers for smallest unit
            }

            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }

        return true;
      }

      function isValid$1() {
        return this._isValid;
      }

      function createInvalid$1() {
        return createDuration(NaN);
      }

      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput); // representation for dateAddRemove

        this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately

        this._days = +days + weeks * 7; // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.

        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = getLocale();

        this._bubble();
      }

      function isDuration(obj) {
        return obj instanceof Duration;
      }

      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      } // FORMATTING


      function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
          var offset = this.utcOffset();
          var sign = '+';

          if (offset < 0) {
            offset = -offset;
            sign = '-';
          }

          return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
      }

      offset('Z', ':');
      offset('ZZ', ''); // PARSING

      addRegexToken('Z', matchShortOffset);
      addRegexToken('ZZ', matchShortOffset);
      addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      }); // HELPERS
      // timezone chunker
      // '+10:00' > ['10',  '00']
      // '-1530'  > ['-15', '30']

      var chunkOffset = /([\+\-]|\d\d)/gi;

      function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
          return null;
        }

        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
      } // Return a moment from input, that is local/utc/zone equivalent to model.


      function cloneWithOffset(input, model) {
        var res, diff;

        if (model._isUTC) {
          res = model.clone();
          diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf(); // Use low-level api, because this fn is low-level api.

          res._d.setTime(res._d.valueOf() + diff);

          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }

      function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
      } // HOOKS
      // This function will be called whenever a moment is mutated.
      // It is intended to keep the offset in sync with the timezone.


      hooks.updateOffset = function () {}; // MOMENTS
      // keepLocalTime = true means only change the timezone, without
      // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
      // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
      // +0200, so we adjust the time as needed, to be valid.
      //
      // Keeping the time actually adds/subtracts (one hour)
      // from the actual represented time. That is why we call updateOffset
      // a second time. In case it wants us to change the offset again
      // _changeInProgress == true case, then we have to adjust, because
      // there is no such time in the given timezone.


      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;

        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        if (input != null) {
          if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);

            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }

          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }

          this._offset = input;
          this._isUTC = true;

          if (localAdjust != null) {
            this.add(localAdjust, 'm');
          }

          if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }

          return this;
        } else {
          return this._isUTC ? offset : getDateOffset(this);
        }
      }

      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== 'string') {
            input = -input;
          }

          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }

      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }

      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;

          if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
          }
        }

        return this;
      }

      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
          var tZone = offsetFromString(matchOffset, this._i);

          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }

        return this;
      }

      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }

        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }

      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }

      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }

        var c = {};
        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
          var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }

        return this._isDSTShifted;
      }

      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }

      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }

      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      } // ASP.NET json date format regex


      var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/; // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
      // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
      // and further modified to allow for strings containing both week and day

      var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

      function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
        match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input)) {
          duration = {};

          if (key) {
            duration[key] = input;
          } else {
            duration.milliseconds = input;
          }
        } else if (!!(match = aspNetRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign,
            h: toInt(match[HOUR]) * sign,
            m: toInt(match[MINUTE]) * sign,
            s: toInt(match[SECOND]) * sign,
            ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match

          };
        } else if (!!(match = isoRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign),
            M: parseIso(match[3], sign),
            w: parseIso(match[4], sign),
            d: parseIso(match[5], sign),
            h: parseIso(match[6], sign),
            m: parseIso(match[7], sign),
            s: parseIso(match[8], sign)
          };
        } else if (duration == null) {
          // checks for null or undefined
          duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale;
        }

        return ret;
      }

      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;

      function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.')); // apply sign while we're at it

        return (isNaN(res) ? 0 : res) * sign;
      }

      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;

        if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
      }

      function momentsDifference(base, other) {
        var res;

        if (!(base.isValid() && other.isValid())) {
          return {
            milliseconds: 0,
            months: 0
          };
        }

        other = cloneWithOffset(other, base);

        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }

        return res;
      } // TODO: remove 'name' arg after deprecation is removed


      function createAdder(direction, name) {
        return function (val, period) {
          var dur, tmp; //invert the arguments, but complain about it

          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val;
            val = period;
            period = tmp;
          }

          val = typeof val === 'string' ? +val : val;
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }

      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
          // No op
          return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
          setMonth(mom, get(mom, 'Month') + months * isAdding);
        }

        if (days) {
          set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }

        if (milliseconds) {
          mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }

        if (updateOffset) {
          hooks.updateOffset(mom, days || months);
        }
      }

      var add = createAdder(1, 'add');
      var subtract = createAdder(-1, 'subtract');

      function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
      }

      function calendar$1(time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';
        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
      }

      function clone() {
        return new Moment(this);
      }

      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);

        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }

        units = normalizeUnits(units) || 'millisecond';

        if (units === 'millisecond') {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }

      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);

        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }

        units = normalizeUnits(units) || 'millisecond';

        if (units === 'millisecond') {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }

      function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);

        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }

        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }

      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;

        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }

        units = normalizeUnits(units) || 'millisecond';

        if (units === 'millisecond') {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }

      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }

      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }

      function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
          return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
          return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);

        switch (units) {
          case 'year':
            output = monthDiff(this, that) / 12;
            break;

          case 'month':
            output = monthDiff(this, that);
            break;

          case 'quarter':
            output = monthDiff(this, that) / 3;
            break;

          case 'second':
            output = (this - that) / 1e3;
            break;
          // 1000

          case 'minute':
            output = (this - that) / 6e4;
            break;
          // 1000 * 60

          case 'hour':
            output = (this - that) / 36e5;
            break;
          // 1000 * 60 * 60

          case 'day':
            output = (this - that - zoneDelta) / 864e5;
            break;
          // 1000 * 60 * 60 * 24, negate dst

          case 'week':
            output = (this - that - zoneDelta) / 6048e5;
            break;
          // 1000 * 60 * 60 * 24 * 7, negate dst

          default:
            output = this - that;
        }

        return asFloat ? output : absFloor(output);
      }

      function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, 'months'); // linear across the month

          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, 'months'); // linear across the month

          adjust = (b - anchor) / (anchor2 - anchor);
        } //check for negative zero, return zero if negative zero


        return -(wholeMonthDiff + adjust) || 0;
      }

      hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
      hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

      function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
      }

      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }

        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;

        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }

        if (isFunction(Date.prototype.toISOString)) {
          // native implementation is ~50x faster, use it when we can
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
          }
        }

        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
      }
      /**
       * Return a human readable representation of a moment that can
       * also be evaluated to get a new moment which is the same
       *
       * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
       */


      function inspect() {
        if (!this.isValid()) {
          return 'moment.invalid(/* ' + this._i + ' */)';
        }

        var func = 'moment';
        var zone = '';

        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
          zone = 'Z';
        }

        var prefix = '[' + func + '("]';
        var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }

      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }

        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }

      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            to: this,
            from: time
          }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }

      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }

      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            from: this,
            to: time
          }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }

      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      } // If passed a locale key, it will set the locale for this
      // instance.  Otherwise, it will return the locale configuration
      // variables for this instance.


      function locale(key) {
        var newLocaleData;

        if (key === undefined) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);

          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }

          return this;
        }
      }

      var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      });

      function localeData() {
        return this._locale;
      }

      var MS_PER_SECOND = 1000;
      var MS_PER_MINUTE = 60 * MS_PER_SECOND;
      var MS_PER_HOUR = 60 * MS_PER_MINUTE;
      var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR; // actual modulo - handles negative numbers (for dates before 1970):

      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }

      function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }

      function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }

      function startOf(units) {
        var time;
        units = normalizeUnits(units);

        if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
          case 'year':
            time = startOfDate(this.year(), 0, 1);
            break;

          case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;

          case 'month':
            time = startOfDate(this.year(), this.month(), 1);
            break;

          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;

          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;

          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date());
            break;

          case 'hour':
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;

          case 'minute':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;

          case 'second':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }

        this._d.setTime(time);

        hooks.updateOffset(this, true);
        return this;
      }

      function endOf(units) {
        var time;
        units = normalizeUnits(units);

        if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
          case 'year':
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;

          case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;

          case 'month':
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;

          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;

          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;

          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;

          case 'hour':
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;

          case 'minute':
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;

          case 'second':
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }

        this._d.setTime(time);

        hooks.updateOffset(this, true);
        return this;
      }

      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
      }

      function unix() {
        return Math.floor(this.valueOf() / 1000);
      }

      function toDate() {
        return new Date(this.valueOf());
      }

      function toArray() {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
      }

      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }

      function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
      }

      function isValid$2() {
        return isValid(this);
      }

      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }

      function invalidAt() {
        return getParsingFlags(this).overflow;
      }

      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      } // FORMATTING


      addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
      });

      function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
      }

      addWeekYearFormatToken('gggg', 'weekYear');
      addWeekYearFormatToken('ggggg', 'weekYear');
      addWeekYearFormatToken('GGGG', 'isoWeekYear');
      addWeekYearFormatToken('GGGGG', 'isoWeekYear'); // ALIASES

      addUnitAlias('weekYear', 'gg');
      addUnitAlias('isoWeekYear', 'GG'); // PRIORITY

      addUnitPriority('weekYear', 1);
      addUnitPriority('isoWeekYear', 1); // PARSING

      addRegexToken('G', matchSigned);
      addRegexToken('g', matchSigned);
      addRegexToken('GG', match1to2, match2);
      addRegexToken('gg', match1to2, match2);
      addRegexToken('GGGG', match1to4, match4);
      addRegexToken('gggg', match1to4, match4);
      addRegexToken('GGGGG', match1to6, match6);
      addRegexToken('ggggg', match1to6, match6);
      addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
      });
      addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
      }); // MOMENTS

      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
      }

      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }

      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }

      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;

        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }

      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;

        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);

          if (week > weeksTarget) {
            week = weeksTarget;
          }

          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }

      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      } // FORMATTING


      addFormatToken('Q', 0, 'Qo', 'quarter'); // ALIASES

      addUnitAlias('quarter', 'Q'); // PRIORITY

      addUnitPriority('quarter', 7); // PARSING

      addRegexToken('Q', match1);
      addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      }); // MOMENTS

      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      } // FORMATTING


      addFormatToken('D', ['DD', 2], 'Do', 'date'); // ALIASES

      addUnitAlias('date', 'D'); // PRIORITY

      addUnitPriority('date', 9); // PARSING

      addRegexToken('D', match1to2);
      addRegexToken('DD', match1to2, match2);
      addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(['D', 'DD'], DATE);
      addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      }); // MOMENTS

      var getSetDayOfMonth = makeGetSet('Date', true); // FORMATTING

      addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear'); // ALIASES

      addUnitAlias('dayOfYear', 'DDD'); // PRIORITY

      addUnitPriority('dayOfYear', 4); // PARSING

      addRegexToken('DDD', match1to3);
      addRegexToken('DDDD', match3);
      addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
      }); // HELPERS
      // MOMENTS

      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
      } // FORMATTING


      addFormatToken('m', ['mm', 2], 0, 'minute'); // ALIASES

      addUnitAlias('minute', 'm'); // PRIORITY

      addUnitPriority('minute', 14); // PARSING

      addRegexToken('m', match1to2);
      addRegexToken('mm', match1to2, match2);
      addParseToken(['m', 'mm'], MINUTE); // MOMENTS

      var getSetMinute = makeGetSet('Minutes', false); // FORMATTING

      addFormatToken('s', ['ss', 2], 0, 'second'); // ALIASES

      addUnitAlias('second', 's'); // PRIORITY

      addUnitPriority('second', 15); // PARSING

      addRegexToken('s', match1to2);
      addRegexToken('ss', match1to2, match2);
      addParseToken(['s', 'ss'], SECOND); // MOMENTS

      var getSetSecond = makeGetSet('Seconds', false); // FORMATTING

      addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ['SSS', 3], 0, 'millisecond');
      addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
      });
      addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
      });
      addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
      });
      addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
      }); // ALIASES

      addUnitAlias('millisecond', 'ms'); // PRIORITY

      addUnitPriority('millisecond', 16); // PARSING

      addRegexToken('S', match1to3, match1);
      addRegexToken('SS', match1to3, match2);
      addRegexToken('SSS', match1to3, match3);
      var token;

      for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
      }

      function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
      }

      for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
      } // MOMENTS


      var getSetMillisecond = makeGetSet('Milliseconds', false); // FORMATTING

      addFormatToken('z', 0, 0, 'zoneAbbr');
      addFormatToken('zz', 0, 0, 'zoneName'); // MOMENTS

      function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
      }

      function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
      }

      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
      proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
      proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
      proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
      proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

      function createUnix(input) {
        return createLocal(input * 1000);
      }

      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }

      function preParsePostFormat(string) {
        return string;
      }

      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;

      function get$1(format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
      }

      function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
          index = format;
          format = undefined;
        }

        format = format || '';

        if (index != null) {
          return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];

        for (i = 0; i < 12; i++) {
          out[i] = get$1(format, i, field, 'month');
        }

        return out;
      } // ()
      // (5)
      // (fmt, 5)
      // (fmt)
      // (true)
      // (true, 5)
      // (true, fmt, 5)
      // (true, fmt)


      function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
          if (isNumber(format)) {
            index = format;
            format = undefined;
          }

          format = format || '';
        } else {
          format = localeSorted;
          index = format;
          localeSorted = false;

          if (isNumber(format)) {
            index = format;
            format = undefined;
          }

          format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
          return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];

        for (i = 0; i < 7; i++) {
          out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }

        return out;
      }

      function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
      }

      function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
      }

      function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
      }

      function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
      }

      function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
      }

      getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
          var b = number % 10,
              output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
          return number + output;
        }
      }); // Side effect imports

      hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
      hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
      var mathAbs = Math.abs;

      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }

      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      } // supports only 2.0-style add(1, 's') or add(duration)


      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      } // supports only 2.0-style subtract(1, 's') or subtract(duration)


      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }

      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }

      function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays; // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166

        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
          milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
          days = 0;
          months = 0;
        } // The following code bubbles up values, see the tests for
        // examples of what that means.


        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24); // convert days to months

        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays)); // 12 months -> 1 year

        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
      }

      function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
      }

      function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
      }

      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }

        var days;
        var months;
        var milliseconds = this._milliseconds;
        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
          days = this._days + milliseconds / 864e5;
          months = this._months + daysToMonths(days);

          switch (units) {
            case 'month':
              return months;

            case 'quarter':
              return months / 3;

            case 'year':
              return months / 12;
          }
        } else {
          // handle milliseconds separately because of floating point math errors (issue #1867)
          days = this._days + Math.round(monthsToDays(this._months));

          switch (units) {
            case 'week':
              return days / 7 + milliseconds / 6048e5;

            case 'day':
              return days + milliseconds / 864e5;

            case 'hour':
              return days * 24 + milliseconds / 36e5;

            case 'minute':
              return days * 1440 + milliseconds / 6e4;

            case 'second':
              return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here

            case 'millisecond':
              return Math.floor(days * 864e5) + milliseconds;

            default:
              throw new Error('Unknown unit ' + units);
          }
        }
      } // TODO: Use this.as('ms')?


      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }

        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }

      function makeAs(alias) {
        return function () {
          return this.as(alias);
        };
      }

      var asMilliseconds = makeAs('ms');
      var asSeconds = makeAs('s');
      var asMinutes = makeAs('m');
      var asHours = makeAs('h');
      var asDays = makeAs('d');
      var asWeeks = makeAs('w');
      var asMonths = makeAs('M');
      var asQuarters = makeAs('Q');
      var asYears = makeAs('y');

      function clone$1() {
        return createDuration(this);
      }

      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
      }

      function makeGetter(name) {
        return function () {
          return this.isValid() ? this._data[name] : NaN;
        };
      }

      var milliseconds = makeGetter('milliseconds');
      var seconds = makeGetter('seconds');
      var minutes = makeGetter('minutes');
      var hours = makeGetter('hours');
      var days = makeGetter('days');
      var months = makeGetter('months');
      var years = makeGetter('years');

      function weeks() {
        return absFloor(this.days() / 7);
      }

      var round = Math.round;
      var thresholds = {
        ss: 44,
        // a few seconds to seconds
        s: 45,
        // seconds to minute
        m: 45,
        // minutes to hour
        h: 22,
        // hours to day
        d: 26,
        // days to month
        M: 11 // months to year

      }; // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize

      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }

      function relativeTime$1(posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));
        var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
      } // This function allows you to set the rounding function for relative time strings


      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
          return round;
        }

        if (typeof roundingFunction === 'function') {
          round = roundingFunction;
          return true;
        }

        return false;
      } // This function allows you to set a threshold for relative time strings


      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
          return false;
        }

        if (limit === undefined) {
          return thresholds[threshold];
        }

        thresholds[threshold] = limit;

        if (threshold === 's') {
          thresholds.ss = limit - 1;
        }

        return true;
      }

      function humanize(withSuffix) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
          output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
      }

      var abs$1 = Math.abs;

      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }

      function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days = abs$1(this._days);
        var months = abs$1(this._months);
        var minutes, hours, years; // 3600 seconds -> 60 minutes -> 1 hour

        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60; // 12 months -> 1 year

        years = absFloor(months / 12);
        months %= 12; // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js

        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
          // this is the same as C#'s (Noda) and python (isodate)...
          // but not other JS (goog.date)
          return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
        return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
      }

      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
      proto$2.lang = lang; // Side effect imports
      // FORMATTING

      addFormatToken('X', 0, 0, 'unix');
      addFormatToken('x', 0, 0, 'valueOf'); // PARSING

      addRegexToken('x', matchSigned);
      addRegexToken('X', matchTimestamp);
      addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
      });
      addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
      }); // Side effect imports

      hooks.version = '2.24.0';
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto; // currently HTML5 input type only supports 24-hour formats

      hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
        // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
        // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
        // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',
        // <input type="date" />
        TIME: 'HH:mm',
        // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',
        // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',
        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',
        // <input type="week" />
        MONTH: 'YYYY-MM' // <input type="month" />

      };
      return hooks;
    });
  });

  var propagating = createCommonjsModule$2(function (module, exports) {

    (function (factory) {
      {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
      }
    })(function () {
      var _firstTarget = null; // singleton, will contain the target element where the touch event started

      /**
       * Extend an Hammer.js instance with event propagation.
       *
       * Features:
       * - Events emitted by hammer will propagate in order from child to parent
       *   elements.
       * - Events are extended with a function `event.stopPropagation()` to stop
       *   propagation to parent elements.
       * - An option `preventDefault` to stop all default browser behavior.
       *
       * Usage:
       *   var hammer = propagatingHammer(new Hammer(element));
       *   var hammer = propagatingHammer(new Hammer(element), {preventDefault: true});
       *
       * @param {Hammer.Manager} hammer   An hammer instance.
       * @param {Object} [options]        Available options:
       *                                  - `preventDefault: true | false | 'mouse' | 'touch' | 'pen'`.
       *                                    Enforce preventing the default browser behavior.
       *                                    Cannot be set to `false`.
       * @return {Hammer.Manager} Returns the same hammer instance with extended
       *                          functionality
       */

      return function propagating(hammer, options) {
        var _options = options || {
          preventDefault: false
        };

        if (hammer.Manager) {
          // This looks like the Hammer constructor.
          // Overload the constructors with our own.
          var Hammer = hammer;

          var PropagatingHammer = function (element, options) {
            var o = Object.create(_options);
            if (options) Hammer.assign(o, options);
            return propagating(new Hammer(element, o), o);
          };

          Hammer.assign(PropagatingHammer, Hammer);

          PropagatingHammer.Manager = function (element, options) {
            var o = Object.create(_options);
            if (options) Hammer.assign(o, options);
            return propagating(new Hammer.Manager(element, o), o);
          };

          return PropagatingHammer;
        } // create a wrapper object which will override the functions
        // `on`, `off`, `destroy`, and `emit` of the hammer instance


        var wrapper = Object.create(hammer); // attach to DOM element

        var element = hammer.element;
        if (!element.hammer) element.hammer = [];
        element.hammer.push(wrapper); // register an event to catch the start of a gesture and store the
        // target in a singleton

        hammer.on('hammer.input', function (event) {
          if (_options.preventDefault === true || _options.preventDefault === event.pointerType) {
            event.preventDefault();
          }

          if (event.isFirst) {
            _firstTarget = event.target;
          }
        });
        /** @type {Object.<String, Array.<function>>} */

        wrapper._handlers = {};
        /**
         * Register a handler for one or multiple events
         * @param {String} events    A space separated string with events
         * @param {function} handler A callback function, called as handler(event)
         * @returns {Hammer.Manager} Returns the hammer instance
         */

        wrapper.on = function (events, handler) {
          // register the handler
          split(events).forEach(function (event) {
            var _handlers = wrapper._handlers[event];

            if (!_handlers) {
              wrapper._handlers[event] = _handlers = []; // register the static, propagated handler

              hammer.on(event, propagatedHandler);
            }

            _handlers.push(handler);
          });
          return wrapper;
        };
        /**
         * Unregister a handler for one or multiple events
         * @param {String} events      A space separated string with events
         * @param {function} [handler] Optional. The registered handler. If not
         *                             provided, all handlers for given events
         *                             are removed.
         * @returns {Hammer.Manager}   Returns the hammer instance
         */


        wrapper.off = function (events, handler) {
          // unregister the handler
          split(events).forEach(function (event) {
            var _handlers = wrapper._handlers[event];

            if (_handlers) {
              _handlers = handler ? _handlers.filter(function (h) {
                return h !== handler;
              }) : [];

              if (_handlers.length > 0) {
                wrapper._handlers[event] = _handlers;
              } else {
                // remove static, propagated handler
                hammer.off(event, propagatedHandler);
                delete wrapper._handlers[event];
              }
            }
          });
          return wrapper;
        };
        /**
         * Emit to the event listeners
         * @param {string} eventType
         * @param {Event} event
         */


        wrapper.emit = function (eventType, event) {
          _firstTarget = event.target;
          hammer.emit(eventType, event);
        };

        wrapper.destroy = function () {
          // Detach from DOM element
          var hammers = hammer.element.hammer;
          var idx = hammers.indexOf(wrapper);
          if (idx !== -1) hammers.splice(idx, 1);
          if (!hammers.length) delete hammer.element.hammer; // clear all handlers

          wrapper._handlers = {}; // call original hammer destroy

          hammer.destroy();
        }; // split a string with space separated words


        function split(events) {
          return events.match(/[^ ]+/g);
        }
        /**
         * A static event handler, applying event propagation.
         * @param {Object} event
         */


        function propagatedHandler(event) {
          // let only a single hammer instance handle this event
          if (event.type !== 'hammer.input') {
            // it is possible that the same srcEvent is used with multiple hammer events,
            // we keep track on which events are handled in an object _handled
            if (!event.srcEvent._handled) {
              event.srcEvent._handled = {};
            }

            if (event.srcEvent._handled[event.type]) {
              return;
            } else {
              event.srcEvent._handled[event.type] = true;
            }
          } // attach a stopPropagation function to the event


          var stopped = false;

          event.stopPropagation = function () {
            stopped = true;
          }; //wrap the srcEvent's stopPropagation to also stop hammer propagation:


          var srcStop = event.srcEvent.stopPropagation.bind(event.srcEvent);

          if (typeof srcStop == "function") {
            event.srcEvent.stopPropagation = function () {
              srcStop();
              event.stopPropagation();
            };
          } // attach firstTarget property to the event


          event.firstTarget = _firstTarget; // propagate over all elements (until stopped)

          var elem = _firstTarget;

          while (elem && !stopped) {
            var elemHammer = elem.hammer;

            if (elemHammer) {
              var _handlers;

              for (var k = 0; k < elemHammer.length; k++) {
                _handlers = elemHammer[k]._handlers[event.type];
                if (_handlers) for (var i = 0; i < _handlers.length && !stopped; i++) {
                  _handlers[i](event);
                }
              }
            }

            elem = elem.parentNode;
          }
        }

        return wrapper;
      };
    });
  });

  var hammer = createCommonjsModule$2(function (module) {
    /*! Hammer.JS - v2.0.7 - 2016-04-22
     * http://hammerjs.github.io/
     *
     * Copyright (c) 2016 Jorik Tangelder;
     * Licensed under the MIT license */
    (function (window, document, exportName, undefined$1) {

      var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
      var TEST_ELEMENT = document.createElement('div');
      var TYPE_FUNCTION = 'function';
      var round = Math.round;
      var abs = Math.abs;
      var now = Date.now;
      /**
       * set a timeout with a given scope
       * @param {Function} fn
       * @param {Number} timeout
       * @param {Object} context
       * @returns {number}
       */

      function setTimeoutContext(fn, timeout, context) {
        return setTimeout(bindFn(fn, context), timeout);
      }
      /**
       * if the argument is an array, we want to execute the fn on each entry
       * if it aint an array we don't want to do a thing.
       * this is used by all the methods that accept a single and array argument.
       * @param {*|Array} arg
       * @param {String} fn
       * @param {Object} [context]
       * @returns {Boolean}
       */


      function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
          each(arg, context[fn], context);
          return true;
        }

        return false;
      }
      /**
       * walk objects and arrays
       * @param {Object} obj
       * @param {Function} iterator
       * @param {Object} context
       */


      function each(obj, iterator, context) {
        var i;

        if (!obj) {
          return;
        }

        if (obj.forEach) {
          obj.forEach(iterator, context);
        } else if (obj.length !== undefined$1) {
          i = 0;

          while (i < obj.length) {
            iterator.call(context, obj[i], i, obj);
            i++;
          }
        } else {
          for (i in obj) {
            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
          }
        }
      }
      /**
       * wrap a method with a deprecation warning and stack trace
       * @param {Function} method
       * @param {String} name
       * @param {String} message
       * @returns {Function} A new function wrapping the supplied method.
       */


      function deprecate(method, name, message) {
        var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
        return function () {
          var e = new Error('get-stack-trace');
          var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';
          var log = window.console && (window.console.warn || window.console.log);

          if (log) {
            log.call(window.console, deprecationMessage, stack);
          }

          return method.apply(this, arguments);
        };
      }
      /**
       * extend object.
       * means that properties in dest will be overwritten by the ones in src.
       * @param {Object} target
       * @param {...Object} objects_to_assign
       * @returns {Object} target
       */


      var assign;

      if (typeof Object.assign !== 'function') {
        assign = function assign(target) {
          if (target === undefined$1 || target === null) {
            throw new TypeError('Cannot convert undefined or null to object');
          }

          var output = Object(target);

          for (var index = 1; index < arguments.length; index++) {
            var source = arguments[index];

            if (source !== undefined$1 && source !== null) {
              for (var nextKey in source) {
                if (source.hasOwnProperty(nextKey)) {
                  output[nextKey] = source[nextKey];
                }
              }
            }
          }

          return output;
        };
      } else {
        assign = Object.assign;
      }
      /**
       * extend object.
       * means that properties in dest will be overwritten by the ones in src.
       * @param {Object} dest
       * @param {Object} src
       * @param {Boolean} [merge=false]
       * @returns {Object} dest
       */


      var extend = deprecate(function extend(dest, src, merge) {
        var keys = Object.keys(src);
        var i = 0;

        while (i < keys.length) {
          if (!merge || merge && dest[keys[i]] === undefined$1) {
            dest[keys[i]] = src[keys[i]];
          }

          i++;
        }

        return dest;
      }, 'extend', 'Use `assign`.');
      /**
       * merge the values from src in the dest.
       * means that properties that exist in dest will not be overwritten by src
       * @param {Object} dest
       * @param {Object} src
       * @returns {Object} dest
       */

      var merge = deprecate(function merge(dest, src) {
        return extend(dest, src, true);
      }, 'merge', 'Use `assign`.');
      /**
       * simple class inheritance
       * @param {Function} child
       * @param {Function} base
       * @param {Object} [properties]
       */

      function inherit(child, base, properties) {
        var baseP = base.prototype,
            childP;
        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;

        if (properties) {
          assign(childP, properties);
        }
      }
      /**
       * simple function bind
       * @param {Function} fn
       * @param {Object} context
       * @returns {Function}
       */


      function bindFn(fn, context) {
        return function boundFn() {
          return fn.apply(context, arguments);
        };
      }
      /**
       * let a boolean value also be a function that must return a boolean
       * this first item in args will be used as the context
       * @param {Boolean|Function} val
       * @param {Array} [args]
       * @returns {Boolean}
       */


      function boolOrFn(val, args) {
        if (typeof val == TYPE_FUNCTION) {
          return val.apply(args ? args[0] || undefined$1 : undefined$1, args);
        }

        return val;
      }
      /**
       * use the val2 when val1 is undefined
       * @param {*} val1
       * @param {*} val2
       * @returns {*}
       */


      function ifUndefined(val1, val2) {
        return val1 === undefined$1 ? val2 : val1;
      }
      /**
       * addEventListener with multiple events at once
       * @param {EventTarget} target
       * @param {String} types
       * @param {Function} handler
       */


      function addEventListeners(target, types, handler) {
        each(splitStr(types), function (type) {
          target.addEventListener(type, handler, false);
        });
      }
      /**
       * removeEventListener with multiple events at once
       * @param {EventTarget} target
       * @param {String} types
       * @param {Function} handler
       */


      function removeEventListeners(target, types, handler) {
        each(splitStr(types), function (type) {
          target.removeEventListener(type, handler, false);
        });
      }
      /**
       * find if a node is in the given parent
       * @method hasParent
       * @param {HTMLElement} node
       * @param {HTMLElement} parent
       * @return {Boolean} found
       */


      function hasParent(node, parent) {
        while (node) {
          if (node == parent) {
            return true;
          }

          node = node.parentNode;
        }

        return false;
      }
      /**
       * small indexOf wrapper
       * @param {String} str
       * @param {String} find
       * @returns {Boolean} found
       */


      function inStr(str, find) {
        return str.indexOf(find) > -1;
      }
      /**
       * split string on whitespace
       * @param {String} str
       * @returns {Array} words
       */


      function splitStr(str) {
        return str.trim().split(/\s+/g);
      }
      /**
       * find if a array contains the object using indexOf or a simple polyFill
       * @param {Array} src
       * @param {String} find
       * @param {String} [findByKey]
       * @return {Boolean|Number} false when not found, or the index
       */


      function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) {
          return src.indexOf(find);
        } else {
          var i = 0;

          while (i < src.length) {
            if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
              return i;
            }

            i++;
          }

          return -1;
        }
      }
      /**
       * convert array-like objects to real arrays
       * @param {Object} obj
       * @returns {Array}
       */


      function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
      }
      /**
       * unique array with objects based on a key (like 'id') or just by the array's value
       * @param {Array} src [{id:1},{id:2},{id:1}]
       * @param {String} [key]
       * @param {Boolean} [sort=False]
       * @returns {Array} [{id:1},{id:2}]
       */


      function uniqueArray(src, key, sort) {
        var results = [];
        var values = [];
        var i = 0;

        while (i < src.length) {
          var val = key ? src[i][key] : src[i];

          if (inArray(values, val) < 0) {
            results.push(src[i]);
          }

          values[i] = val;
          i++;
        }

        if (sort) {
          if (!key) {
            results = results.sort();
          } else {
            results = results.sort(function sortUniqueArray(a, b) {
              return a[key] > b[key];
            });
          }
        }

        return results;
      }
      /**
       * get the prefixed property
       * @param {Object} obj
       * @param {String} property
       * @returns {String|Undefined} prefixed
       */


      function prefixed(obj, property) {
        var prefix, prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);
        var i = 0;

        while (i < VENDOR_PREFIXES.length) {
          prefix = VENDOR_PREFIXES[i];
          prop = prefix ? prefix + camelProp : property;

          if (prop in obj) {
            return prop;
          }

          i++;
        }

        return undefined$1;
      }
      /**
       * get a unique id
       * @returns {number} uniqueId
       */


      var _uniqueId = 1;

      function uniqueId() {
        return _uniqueId++;
      }
      /**
       * get the window object of an element
       * @param {HTMLElement} element
       * @returns {DocumentView|Window}
       */


      function getWindowForElement(element) {
        var doc = element.ownerDocument || element;
        return doc.defaultView || doc.parentWindow || window;
      }

      var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
      var SUPPORT_TOUCH = 'ontouchstart' in window;
      var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined$1;
      var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
      var INPUT_TYPE_TOUCH = 'touch';
      var INPUT_TYPE_PEN = 'pen';
      var INPUT_TYPE_MOUSE = 'mouse';
      var INPUT_TYPE_KINECT = 'kinect';
      var COMPUTE_INTERVAL = 25;
      var INPUT_START = 1;
      var INPUT_MOVE = 2;
      var INPUT_END = 4;
      var INPUT_CANCEL = 8;
      var DIRECTION_NONE = 1;
      var DIRECTION_LEFT = 2;
      var DIRECTION_RIGHT = 4;
      var DIRECTION_UP = 8;
      var DIRECTION_DOWN = 16;
      var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
      var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
      var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
      var PROPS_XY = ['x', 'y'];
      var PROPS_CLIENT_XY = ['clientX', 'clientY'];
      /**
       * create new input type manager
       * @param {Manager} manager
       * @param {Function} callback
       * @returns {Input}
       * @constructor
       */

      function Input(manager, callback) {
        var self = this;
        this.manager = manager;
        this.callback = callback;
        this.element = manager.element;
        this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,
        // so when disabled the input events are completely bypassed.

        this.domHandler = function (ev) {
          if (boolOrFn(manager.options.enable, [manager])) {
            self.handler(ev);
          }
        };

        this.init();
      }

      Input.prototype = {
        /**
         * should handle the inputEvent data and trigger the callback
         * @virtual
         */
        handler: function () {},

        /**
         * bind the events
         */
        init: function () {
          this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
          this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
          this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        },

        /**
         * unbind the events
         */
        destroy: function () {
          this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
          this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
          this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        }
      };
      /**
       * create new input type manager
       * called by the Manager constructor
       * @param {Hammer} manager
       * @returns {Input}
       */

      function createInputInstance(manager) {
        var Type;
        var inputClass = manager.options.inputClass;

        if (inputClass) {
          Type = inputClass;
        } else if (SUPPORT_POINTER_EVENTS) {
          Type = PointerEventInput;
        } else if (SUPPORT_ONLY_TOUCH) {
          Type = TouchInput;
        } else if (!SUPPORT_TOUCH) {
          Type = MouseInput;
        } else {
          Type = TouchMouseInput;
        }

        return new Type(manager, inputHandler);
      }
      /**
       * handle input events
       * @param {Manager} manager
       * @param {String} eventType
       * @param {Object} input
       */


      function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
        var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;

        if (isFirst) {
          manager.session = {};
        } // source event is the normalized value of the domEvents
        // like 'touchstart, mouseup, pointerdown'


        input.eventType = eventType; // compute scale, rotation etc

        computeInputData(manager, input); // emit secret event

        manager.emit('hammer.input', input);
        manager.recognize(input);
        manager.session.prevInput = input;
      }
      /**
       * extend the data with some usable properties like scale, rotate, velocity etc
       * @param {Object} manager
       * @param {Object} input
       */


      function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length; // store the first input to calculate the distance and direction

        if (!session.firstInput) {
          session.firstInput = simpleCloneInputData(input);
        } // to compute scale and rotation we need to store the multiple touches


        if (pointersLength > 1 && !session.firstMultiple) {
          session.firstMultiple = simpleCloneInputData(input);
        } else if (pointersLength === 1) {
          session.firstMultiple = false;
        }

        var firstInput = session.firstInput;
        var firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
        var center = input.center = getCenter(pointers);
        input.timeStamp = now();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;
        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);
        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);
        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
        input.overallVelocityX = overallVelocity.x;
        input.overallVelocityY = overallVelocity.y;
        input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
        input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
        computeIntervalInputData(session, input); // find the correct target

        var target = manager.element;

        if (hasParent(input.srcEvent.target, target)) {
          target = input.srcEvent.target;
        }

        input.target = target;
      }

      function computeDeltaXY(session, input) {
        var center = input.center;
        var offset = session.offsetDelta || {};
        var prevDelta = session.prevDelta || {};
        var prevInput = session.prevInput || {};

        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
          prevDelta = session.prevDelta = {
            x: prevInput.deltaX || 0,
            y: prevInput.deltaY || 0
          };
          offset = session.offsetDelta = {
            x: center.x,
            y: center.y
          };
        }

        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
      }
      /**
       * velocity is calculated every x ms
       * @param {Object} session
       * @param {Object} input
       */


      function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input,
            deltaTime = input.timeStamp - last.timeStamp,
            velocity,
            velocityX,
            velocityY,
            direction;

        if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined$1)) {
          var deltaX = input.deltaX - last.deltaX;
          var deltaY = input.deltaY - last.deltaY;
          var v = getVelocity(deltaTime, deltaX, deltaY);
          velocityX = v.x;
          velocityY = v.y;
          velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
          direction = getDirection(deltaX, deltaY);
          session.lastInterval = input;
        } else {
          // use latest velocity info if it doesn't overtake a minimum period
          velocity = last.velocity;
          velocityX = last.velocityX;
          velocityY = last.velocityY;
          direction = last.direction;
        }

        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
      }
      /**
       * create a simple clone from the input used for storage of firstInput and firstMultiple
       * @param {Object} input
       * @returns {Object} clonedInputData
       */


      function simpleCloneInputData(input) {
        // make a simple copy of the pointers because we will get a reference if we don't
        // we only need clientXY for the calculations
        var pointers = [];
        var i = 0;

        while (i < input.pointers.length) {
          pointers[i] = {
            clientX: round(input.pointers[i].clientX),
            clientY: round(input.pointers[i].clientY)
          };
          i++;
        }

        return {
          timeStamp: now(),
          pointers: pointers,
          center: getCenter(pointers),
          deltaX: input.deltaX,
          deltaY: input.deltaY
        };
      }
      /**
       * get the center of all the pointers
       * @param {Array} pointers
       * @return {Object} center contains `x` and `y` properties
       */


      function getCenter(pointers) {
        var pointersLength = pointers.length; // no need to loop when only one touch

        if (pointersLength === 1) {
          return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
          };
        }

        var x = 0,
            y = 0,
            i = 0;

        while (i < pointersLength) {
          x += pointers[i].clientX;
          y += pointers[i].clientY;
          i++;
        }

        return {
          x: round(x / pointersLength),
          y: round(y / pointersLength)
        };
      }
      /**
       * calculate the velocity between two points. unit is in px per ms.
       * @param {Number} deltaTime
       * @param {Number} x
       * @param {Number} y
       * @return {Object} velocity `x` and `y`
       */


      function getVelocity(deltaTime, x, y) {
        return {
          x: x / deltaTime || 0,
          y: y / deltaTime || 0
        };
      }
      /**
       * get the direction between two points
       * @param {Number} x
       * @param {Number} y
       * @return {Number} direction
       */


      function getDirection(x, y) {
        if (x === y) {
          return DIRECTION_NONE;
        }

        if (abs(x) >= abs(y)) {
          return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        }

        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
      }
      /**
       * calculate the absolute distance between two points
       * @param {Object} p1 {x, y}
       * @param {Object} p2 {x, y}
       * @param {Array} [props] containing x and y keys
       * @return {Number} distance
       */


      function getDistance(p1, p2, props) {
        if (!props) {
          props = PROPS_XY;
        }

        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];
        return Math.sqrt(x * x + y * y);
      }
      /**
       * calculate the angle between two coordinates
       * @param {Object} p1
       * @param {Object} p2
       * @param {Array} [props] containing x and y keys
       * @return {Number} angle
       */


      function getAngle(p1, p2, props) {
        if (!props) {
          props = PROPS_XY;
        }

        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
      }
      /**
       * calculate the rotation degrees between two pointersets
       * @param {Array} start array of pointers
       * @param {Array} end array of pointers
       * @return {Number} rotation
       */


      function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
      }
      /**
       * calculate the scale factor between two pointersets
       * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
       * @param {Array} start array of pointers
       * @param {Array} end array of pointers
       * @return {Number} scale
       */


      function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
      }

      var MOUSE_INPUT_MAP = {
        mousedown: INPUT_START,
        mousemove: INPUT_MOVE,
        mouseup: INPUT_END
      };
      var MOUSE_ELEMENT_EVENTS = 'mousedown';
      var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
      /**
       * Mouse events input
       * @constructor
       * @extends Input
       */

      function MouseInput() {
        this.evEl = MOUSE_ELEMENT_EVENTS;
        this.evWin = MOUSE_WINDOW_EVENTS;
        this.pressed = false; // mousedown state

        Input.apply(this, arguments);
      }

      inherit(MouseInput, Input, {
        /**
         * handle mouse events
         * @param {Object} ev
         */
        handler: function MEhandler(ev) {
          var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down

          if (eventType & INPUT_START && ev.button === 0) {
            this.pressed = true;
          }

          if (eventType & INPUT_MOVE && ev.which !== 1) {
            eventType = INPUT_END;
          } // mouse must be down


          if (!this.pressed) {
            return;
          }

          if (eventType & INPUT_END) {
            this.pressed = false;
          }

          this.callback(this.manager, eventType, {
            pointers: [ev],
            changedPointers: [ev],
            pointerType: INPUT_TYPE_MOUSE,
            srcEvent: ev
          });
        }
      });
      var POINTER_INPUT_MAP = {
        pointerdown: INPUT_START,
        pointermove: INPUT_MOVE,
        pointerup: INPUT_END,
        pointercancel: INPUT_CANCEL,
        pointerout: INPUT_CANCEL
      }; // in IE10 the pointer types is defined as an enum

      var IE10_POINTER_TYPE_ENUM = {
        2: INPUT_TYPE_TOUCH,
        3: INPUT_TYPE_PEN,
        4: INPUT_TYPE_MOUSE,
        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816

      };
      var POINTER_ELEMENT_EVENTS = 'pointerdown';
      var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive

      if (window.MSPointerEvent && !window.PointerEvent) {
        POINTER_ELEMENT_EVENTS = 'MSPointerDown';
        POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
      }
      /**
       * Pointer events input
       * @constructor
       * @extends Input
       */


      function PointerEventInput() {
        this.evEl = POINTER_ELEMENT_EVENTS;
        this.evWin = POINTER_WINDOW_EVENTS;
        Input.apply(this, arguments);
        this.store = this.manager.session.pointerEvents = [];
      }

      inherit(PointerEventInput, Input, {
        /**
         * handle mouse events
         * @param {Object} ev
         */
        handler: function PEhandler(ev) {
          var store = this.store;
          var removePointer = false;
          var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
          var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
          var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
          var isTouch = pointerType == INPUT_TYPE_TOUCH; // get index of the event in the store

          var storeIndex = inArray(store, ev.pointerId, 'pointerId'); // start and mouse must be down

          if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
            if (storeIndex < 0) {
              store.push(ev);
              storeIndex = store.length - 1;
            }
          } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            removePointer = true;
          } // it not found, so the pointer hasn't been down (so it's probably a hover)


          if (storeIndex < 0) {
            return;
          } // update the event in the store


          store[storeIndex] = ev;
          this.callback(this.manager, eventType, {
            pointers: store,
            changedPointers: [ev],
            pointerType: pointerType,
            srcEvent: ev
          });

          if (removePointer) {
            // remove from the store
            store.splice(storeIndex, 1);
          }
        }
      });
      var SINGLE_TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
      };
      var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
      var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
      /**
       * Touch events input
       * @constructor
       * @extends Input
       */

      function SingleTouchInput() {
        this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
        this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
        this.started = false;
        Input.apply(this, arguments);
      }

      inherit(SingleTouchInput, Input, {
        handler: function TEhandler(ev) {
          var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?

          if (type === INPUT_START) {
            this.started = true;
          }

          if (!this.started) {
            return;
          }

          var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state

          if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
            this.started = false;
          }

          this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
          });
        }
      });
      /**
       * @this {TouchInput}
       * @param {Object} ev
       * @param {Number} type flag
       * @returns {undefined|Array} [all, changed]
       */

      function normalizeSingleTouches(ev, type) {
        var all = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);

        if (type & (INPUT_END | INPUT_CANCEL)) {
          all = uniqueArray(all.concat(changed), 'identifier', true);
        }

        return [all, changed];
      }

      var TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
      };
      var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
      /**
       * Multi-user touch events input
       * @constructor
       * @extends Input
       */

      function TouchInput() {
        this.evTarget = TOUCH_TARGET_EVENTS;
        this.targetIds = {};
        Input.apply(this, arguments);
      }

      inherit(TouchInput, Input, {
        handler: function MTEhandler(ev) {
          var type = TOUCH_INPUT_MAP[ev.type];
          var touches = getTouches.call(this, ev, type);

          if (!touches) {
            return;
          }

          this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
          });
        }
      });
      /**
       * @this {TouchInput}
       * @param {Object} ev
       * @param {Number} type flag
       * @returns {undefined|Array} [all, changed]
       */

      function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds; // when there is only one touch, the process can be simplified

        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
          targetIds[allTouches[0].identifier] = true;
          return [allTouches, allTouches];
        }

        var i,
            targetTouches,
            changedTouches = toArray(ev.changedTouches),
            changedTargetTouches = [],
            target = this.target; // get target touches from touches

        targetTouches = allTouches.filter(function (touch) {
          return hasParent(touch.target, target);
        }); // collect touches

        if (type === INPUT_START) {
          i = 0;

          while (i < targetTouches.length) {
            targetIds[targetTouches[i].identifier] = true;
            i++;
          }
        } // filter changed touches to only contain touches that exist in the collected target ids


        i = 0;

        while (i < changedTouches.length) {
          if (targetIds[changedTouches[i].identifier]) {
            changedTargetTouches.push(changedTouches[i]);
          } // cleanup removed touches


          if (type & (INPUT_END | INPUT_CANCEL)) {
            delete targetIds[changedTouches[i].identifier];
          }

          i++;
        }

        if (!changedTargetTouches.length) {
          return;
        }

        return [// merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];
      }
      /**
       * Combined touch and mouse input
       *
       * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
       * This because touch devices also emit mouse events while doing a touch.
       *
       * @constructor
       * @extends Input
       */


      var DEDUP_TIMEOUT = 2500;
      var DEDUP_DISTANCE = 25;

      function TouchMouseInput() {
        Input.apply(this, arguments);
        var handler = bindFn(this.handler, this);
        this.touch = new TouchInput(this.manager, handler);
        this.mouse = new MouseInput(this.manager, handler);
        this.primaryTouch = null;
        this.lastTouches = [];
      }

      inherit(TouchMouseInput, Input, {
        /**
         * handle mouse and touch events
         * @param {Hammer} manager
         * @param {String} inputEvent
         * @param {Object} inputData
         */
        handler: function TMEhandler(manager, inputEvent, inputData) {
          var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,
              isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;

          if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
            return;
          } // when we're in a touch event, record touches to  de-dupe synthetic mouse event


          if (isTouch) {
            recordTouches.call(this, inputEvent, inputData);
          } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
            return;
          }

          this.callback(manager, inputEvent, inputData);
        },

        /**
         * remove the event listeners
         */
        destroy: function destroy() {
          this.touch.destroy();
          this.mouse.destroy();
        }
      });

      function recordTouches(eventType, eventData) {
        if (eventType & INPUT_START) {
          this.primaryTouch = eventData.changedPointers[0].identifier;
          setLastTouch.call(this, eventData);
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
          setLastTouch.call(this, eventData);
        }
      }

      function setLastTouch(eventData) {
        var touch = eventData.changedPointers[0];

        if (touch.identifier === this.primaryTouch) {
          var lastTouch = {
            x: touch.clientX,
            y: touch.clientY
          };
          this.lastTouches.push(lastTouch);
          var lts = this.lastTouches;

          var removeLastTouch = function () {
            var i = lts.indexOf(lastTouch);

            if (i > -1) {
              lts.splice(i, 1);
            }
          };

          setTimeout(removeLastTouch, DEDUP_TIMEOUT);
        }
      }

      function isSyntheticEvent(eventData) {
        var x = eventData.srcEvent.clientX,
            y = eventData.srcEvent.clientY;

        for (var i = 0; i < this.lastTouches.length; i++) {
          var t = this.lastTouches[i];
          var dx = Math.abs(x - t.x),
              dy = Math.abs(y - t.y);

          if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
            return true;
          }
        }

        return false;
      }

      var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
      var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined$1; // magical touchAction value

      var TOUCH_ACTION_COMPUTE = 'compute';
      var TOUCH_ACTION_AUTO = 'auto';
      var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented

      var TOUCH_ACTION_NONE = 'none';
      var TOUCH_ACTION_PAN_X = 'pan-x';
      var TOUCH_ACTION_PAN_Y = 'pan-y';
      var TOUCH_ACTION_MAP = getTouchActionProps();
      /**
       * Touch Action
       * sets the touchAction property or uses the js alternative
       * @param {Manager} manager
       * @param {String} value
       * @constructor
       */

      function TouchAction(manager, value) {
        this.manager = manager;
        this.set(value);
      }

      TouchAction.prototype = {
        /**
         * set the touchAction value on the element or enable the polyfill
         * @param {String} value
         */
        set: function (value) {
          // find out the touch-action by the event handlers
          if (value == TOUCH_ACTION_COMPUTE) {
            value = this.compute();
          }

          if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
          }

          this.actions = value.toLowerCase().trim();
        },

        /**
         * just re-set the touchAction value
         */
        update: function () {
          this.set(this.manager.options.touchAction);
        },

        /**
         * compute the value for the touchAction property based on the recognizer's settings
         * @returns {String} value
         */
        compute: function () {
          var actions = [];
          each(this.manager.recognizers, function (recognizer) {
            if (boolOrFn(recognizer.options.enable, [recognizer])) {
              actions = actions.concat(recognizer.getTouchAction());
            }
          });
          return cleanTouchActions(actions.join(' '));
        },

        /**
         * this method is called on each input cycle and provides the preventing of the browser behavior
         * @param {Object} input
         */
        preventDefaults: function (input) {
          var srcEvent = input.srcEvent;
          var direction = input.offsetDirection; // if the touch action did prevented once this session

          if (this.manager.session.prevented) {
            srcEvent.preventDefault();
            return;
          }

          var actions = this.actions;
          var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
          var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
          var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

          if (hasNone) {
            //do not prevent defaults if this is a tap gesture
            var isTapPointer = input.pointers.length === 1;
            var isTapMovement = input.distance < 2;
            var isTapTouchTime = input.deltaTime < 250;

            if (isTapPointer && isTapMovement && isTapTouchTime) {
              return;
            }
          }

          if (hasPanX && hasPanY) {
            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
          }

          if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
            return this.preventSrc(srcEvent);
          }
        },

        /**
         * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
         * @param {Object} srcEvent
         */
        preventSrc: function (srcEvent) {
          this.manager.session.prevented = true;
          srcEvent.preventDefault();
        }
      };
      /**
       * when the touchActions are collected they are not a valid value, so we need to clean things up. *
       * @param {String} actions
       * @returns {*}
       */

      function cleanTouchActions(actions) {
        // none
        if (inStr(actions, TOUCH_ACTION_NONE)) {
          return TOUCH_ACTION_NONE;
        }

        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers
        // for different directions, e.g. horizontal pan but vertical swipe?)
        // we need none (as otherwise with pan-x pan-y combined none of these
        // recognizers will work, since the browser would handle all panning

        if (hasPanX && hasPanY) {
          return TOUCH_ACTION_NONE;
        } // pan-x OR pan-y


        if (hasPanX || hasPanY) {
          return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
        } // manipulation


        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
          return TOUCH_ACTION_MANIPULATION;
        }

        return TOUCH_ACTION_AUTO;
      }

      function getTouchActionProps() {
        if (!NATIVE_TOUCH_ACTION) {
          return false;
        }

        var touchMap = {};
        var cssSupports = window.CSS && window.CSS.supports;
        ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {
          // If css.supports is not supported but there is native touch-action assume it supports
          // all values. This is the case for IE 10 and 11.
          touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
        });
        return touchMap;
      }
      /**
       * Recognizer flow explained; *
       * All recognizers have the initial state of POSSIBLE when a input session starts.
       * The definition of a input session is from the first input until the last input, with all it's movement in it. *
       * Example session for mouse-input: mousedown -> mousemove -> mouseup
       *
       * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
       * which determines with state it should be.
       *
       * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
       * POSSIBLE to give it another change on the next cycle.
       *
       *               Possible
       *                  |
       *            +-----+---------------+
       *            |                     |
       *      +-----+-----+               |
       *      |           |               |
       *   Failed      Cancelled          |
       *                          +-------+------+
       *                          |              |
       *                      Recognized       Began
       *                                         |
       *                                      Changed
       *                                         |
       *                                  Ended/Recognized
       */


      var STATE_POSSIBLE = 1;
      var STATE_BEGAN = 2;
      var STATE_CHANGED = 4;
      var STATE_ENDED = 8;
      var STATE_RECOGNIZED = STATE_ENDED;
      var STATE_CANCELLED = 16;
      var STATE_FAILED = 32;
      /**
       * Recognizer
       * Every recognizer needs to extend from this class.
       * @constructor
       * @param {Object} options
       */

      function Recognizer(options) {
        this.options = assign({}, this.defaults, options || {});
        this.id = uniqueId();
        this.manager = null; // default is enable true

        this.options.enable = ifUndefined(this.options.enable, true);
        this.state = STATE_POSSIBLE;
        this.simultaneous = {};
        this.requireFail = [];
      }

      Recognizer.prototype = {
        /**
         * @virtual
         * @type {Object}
         */
        defaults: {},

        /**
         * set options
         * @param {Object} options
         * @return {Recognizer}
         */
        set: function (options) {
          assign(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state

          this.manager && this.manager.touchAction.update();
          return this;
        },

        /**
         * recognize simultaneous with an other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        recognizeWith: function (otherRecognizer) {
          if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
            return this;
          }

          var simultaneous = this.simultaneous;
          otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);

          if (!simultaneous[otherRecognizer.id]) {
            simultaneous[otherRecognizer.id] = otherRecognizer;
            otherRecognizer.recognizeWith(this);
          }

          return this;
        },

        /**
         * drop the simultaneous link. it doesnt remove the link on the other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        dropRecognizeWith: function (otherRecognizer) {
          if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
            return this;
          }

          otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
          delete this.simultaneous[otherRecognizer.id];
          return this;
        },

        /**
         * recognizer can only run when an other is failing
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        requireFailure: function (otherRecognizer) {
          if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
            return this;
          }

          var requireFail = this.requireFail;
          otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);

          if (inArray(requireFail, otherRecognizer) === -1) {
            requireFail.push(otherRecognizer);
            otherRecognizer.requireFailure(this);
          }

          return this;
        },

        /**
         * drop the requireFailure link. it does not remove the link on the other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        dropRequireFailure: function (otherRecognizer) {
          if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
            return this;
          }

          otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
          var index = inArray(this.requireFail, otherRecognizer);

          if (index > -1) {
            this.requireFail.splice(index, 1);
          }

          return this;
        },

        /**
         * has require failures boolean
         * @returns {boolean}
         */
        hasRequireFailures: function () {
          return this.requireFail.length > 0;
        },

        /**
         * if the recognizer can recognize simultaneous with an other recognizer
         * @param {Recognizer} otherRecognizer
         * @returns {Boolean}
         */
        canRecognizeWith: function (otherRecognizer) {
          return !!this.simultaneous[otherRecognizer.id];
        },

        /**
         * You should use `tryEmit` instead of `emit` directly to check
         * that all the needed recognizers has failed before emitting.
         * @param {Object} input
         */
        emit: function (input) {
          var self = this;
          var state = this.state;

          function emit(event) {
            self.manager.emit(event, input);
          } // 'panstart' and 'panmove'


          if (state < STATE_ENDED) {
            emit(self.options.event + stateStr(state));
          }

          emit(self.options.event); // simple 'eventName' events

          if (input.additionalEvent) {
            // additional event(panleft, panright, pinchin, pinchout...)
            emit(input.additionalEvent);
          } // panend and pancancel


          if (state >= STATE_ENDED) {
            emit(self.options.event + stateStr(state));
          }
        },

        /**
         * Check that all the require failure recognizers has failed,
         * if true, it emits a gesture event,
         * otherwise, setup the state to FAILED.
         * @param {Object} input
         */
        tryEmit: function (input) {
          if (this.canEmit()) {
            return this.emit(input);
          } // it's failing anyway


          this.state = STATE_FAILED;
        },

        /**
         * can we emit?
         * @returns {boolean}
         */
        canEmit: function () {
          var i = 0;

          while (i < this.requireFail.length) {
            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
              return false;
            }

            i++;
          }

          return true;
        },

        /**
         * update the recognizer
         * @param {Object} inputData
         */
        recognize: function (inputData) {
          // make a new copy of the inputData
          // so we can change the inputData without messing up the other recognizers
          var inputDataClone = assign({}, inputData); // is is enabled and allow recognizing?

          if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
            this.reset();
            this.state = STATE_FAILED;
            return;
          } // reset when we've reached the end


          if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
            this.state = STATE_POSSIBLE;
          }

          this.state = this.process(inputDataClone); // the recognizer has recognized a gesture
          // so trigger an event

          if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
            this.tryEmit(inputDataClone);
          }
        },

        /**
         * return the state of the recognizer
         * the actual recognizing happens in this method
         * @virtual
         * @param {Object} inputData
         * @returns {Const} STATE
         */
        process: function (inputData) {},
        // jshint ignore:line

        /**
         * return the preferred touch-action
         * @virtual
         * @returns {Array}
         */
        getTouchAction: function () {},

        /**
         * called when the gesture isn't allowed to recognize
         * like when another is being recognized or it is disabled
         * @virtual
         */
        reset: function () {}
      };
      /**
       * get a usable string, used as event postfix
       * @param {Const} state
       * @returns {String} state
       */

      function stateStr(state) {
        if (state & STATE_CANCELLED) {
          return 'cancel';
        } else if (state & STATE_ENDED) {
          return 'end';
        } else if (state & STATE_CHANGED) {
          return 'move';
        } else if (state & STATE_BEGAN) {
          return 'start';
        }

        return '';
      }
      /**
       * direction cons to string
       * @param {Const} direction
       * @returns {String}
       */


      function directionStr(direction) {
        if (direction == DIRECTION_DOWN) {
          return 'down';
        } else if (direction == DIRECTION_UP) {
          return 'up';
        } else if (direction == DIRECTION_LEFT) {
          return 'left';
        } else if (direction == DIRECTION_RIGHT) {
          return 'right';
        }

        return '';
      }
      /**
       * get a recognizer by name if it is bound to a manager
       * @param {Recognizer|String} otherRecognizer
       * @param {Recognizer} recognizer
       * @returns {Recognizer}
       */


      function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;

        if (manager) {
          return manager.get(otherRecognizer);
        }

        return otherRecognizer;
      }
      /**
       * This recognizer is just used as a base for the simple attribute recognizers.
       * @constructor
       * @extends Recognizer
       */


      function AttrRecognizer() {
        Recognizer.apply(this, arguments);
      }

      inherit(AttrRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof AttrRecognizer
         */
        defaults: {
          /**
           * @type {Number}
           * @default 1
           */
          pointers: 1
        },

        /**
         * Used to check if it the recognizer receives valid input, like input.distance > 10.
         * @memberof AttrRecognizer
         * @param {Object} input
         * @returns {Boolean} recognized
         */
        attrTest: function (input) {
          var optionPointers = this.options.pointers;
          return optionPointers === 0 || input.pointers.length === optionPointers;
        },

        /**
         * Process the input and return the state for the recognizer
         * @memberof AttrRecognizer
         * @param {Object} input
         * @returns {*} State
         */
        process: function (input) {
          var state = this.state;
          var eventType = input.eventType;
          var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
          var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED

          if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
          } else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
              return state | STATE_ENDED;
            } else if (!(state & STATE_BEGAN)) {
              return STATE_BEGAN;
            }

            return state | STATE_CHANGED;
          }

          return STATE_FAILED;
        }
      });
      /**
       * Pan
       * Recognized when the pointer is down and moved in the allowed direction.
       * @constructor
       * @extends AttrRecognizer
       */

      function PanRecognizer() {
        AttrRecognizer.apply(this, arguments);
        this.pX = null;
        this.pY = null;
      }

      inherit(PanRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof PanRecognizer
         */
        defaults: {
          event: 'pan',
          threshold: 10,
          pointers: 1,
          direction: DIRECTION_ALL
        },
        getTouchAction: function () {
          var direction = this.options.direction;
          var actions = [];

          if (direction & DIRECTION_HORIZONTAL) {
            actions.push(TOUCH_ACTION_PAN_Y);
          }

          if (direction & DIRECTION_VERTICAL) {
            actions.push(TOUCH_ACTION_PAN_X);
          }

          return actions;
        },
        directionTest: function (input) {
          var options = this.options;
          var hasMoved = true;
          var distance = input.distance;
          var direction = input.direction;
          var x = input.deltaX;
          var y = input.deltaY; // lock to axis?

          if (!(direction & options.direction)) {
            if (options.direction & DIRECTION_HORIZONTAL) {
              direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
              hasMoved = x != this.pX;
              distance = Math.abs(input.deltaX);
            } else {
              direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
              hasMoved = y != this.pY;
              distance = Math.abs(input.deltaY);
            }
          }

          input.direction = direction;
          return hasMoved && distance > options.threshold && direction & options.direction;
        },
        attrTest: function (input) {
          return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
        },
        emit: function (input) {
          this.pX = input.deltaX;
          this.pY = input.deltaY;
          var direction = directionStr(input.direction);

          if (direction) {
            input.additionalEvent = this.options.event + direction;
          }

          this._super.emit.call(this, input);
        }
      });
      /**
       * Pinch
       * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
       * @constructor
       * @extends AttrRecognizer
       */

      function PinchRecognizer() {
        AttrRecognizer.apply(this, arguments);
      }

      inherit(PinchRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof PinchRecognizer
         */
        defaults: {
          event: 'pinch',
          threshold: 0,
          pointers: 2
        },
        getTouchAction: function () {
          return [TOUCH_ACTION_NONE];
        },
        attrTest: function (input) {
          return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
        },
        emit: function (input) {
          if (input.scale !== 1) {
            var inOut = input.scale < 1 ? 'in' : 'out';
            input.additionalEvent = this.options.event + inOut;
          }

          this._super.emit.call(this, input);
        }
      });
      /**
       * Press
       * Recognized when the pointer is down for x ms without any movement.
       * @constructor
       * @extends Recognizer
       */

      function PressRecognizer() {
        Recognizer.apply(this, arguments);
        this._timer = null;
        this._input = null;
      }

      inherit(PressRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof PressRecognizer
         */
        defaults: {
          event: 'press',
          pointers: 1,
          time: 251,
          // minimal time of the pointer to be pressed
          threshold: 9 // a minimal movement is ok, but keep it low

        },
        getTouchAction: function () {
          return [TOUCH_ACTION_AUTO];
        },
        process: function (input) {
          var options = this.options;
          var validPointers = input.pointers.length === options.pointers;
          var validMovement = input.distance < options.threshold;
          var validTime = input.deltaTime > options.time;
          this._input = input; // we only allow little movement
          // and we've reached an end event, so a tap is possible

          if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
            this.reset();
          } else if (input.eventType & INPUT_START) {
            this.reset();
            this._timer = setTimeoutContext(function () {
              this.state = STATE_RECOGNIZED;
              this.tryEmit();
            }, options.time, this);
          } else if (input.eventType & INPUT_END) {
            return STATE_RECOGNIZED;
          }

          return STATE_FAILED;
        },
        reset: function () {
          clearTimeout(this._timer);
        },
        emit: function (input) {
          if (this.state !== STATE_RECOGNIZED) {
            return;
          }

          if (input && input.eventType & INPUT_END) {
            this.manager.emit(this.options.event + 'up', input);
          } else {
            this._input.timeStamp = now();
            this.manager.emit(this.options.event, this._input);
          }
        }
      });
      /**
       * Rotate
       * Recognized when two or more pointer are moving in a circular motion.
       * @constructor
       * @extends AttrRecognizer
       */

      function RotateRecognizer() {
        AttrRecognizer.apply(this, arguments);
      }

      inherit(RotateRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof RotateRecognizer
         */
        defaults: {
          event: 'rotate',
          threshold: 0,
          pointers: 2
        },
        getTouchAction: function () {
          return [TOUCH_ACTION_NONE];
        },
        attrTest: function (input) {
          return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
        }
      });
      /**
       * Swipe
       * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
       * @constructor
       * @extends AttrRecognizer
       */

      function SwipeRecognizer() {
        AttrRecognizer.apply(this, arguments);
      }

      inherit(SwipeRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof SwipeRecognizer
         */
        defaults: {
          event: 'swipe',
          threshold: 10,
          velocity: 0.3,
          direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
          pointers: 1
        },
        getTouchAction: function () {
          return PanRecognizer.prototype.getTouchAction.call(this);
        },
        attrTest: function (input) {
          var direction = this.options.direction;
          var velocity;

          if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
            velocity = input.overallVelocity;
          } else if (direction & DIRECTION_HORIZONTAL) {
            velocity = input.overallVelocityX;
          } else if (direction & DIRECTION_VERTICAL) {
            velocity = input.overallVelocityY;
          }

          return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
        },
        emit: function (input) {
          var direction = directionStr(input.offsetDirection);

          if (direction) {
            this.manager.emit(this.options.event + direction, input);
          }

          this.manager.emit(this.options.event, input);
        }
      });
      /**
       * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
       * between the given interval and position. The delay option can be used to recognize multi-taps without firing
       * a single tap.
       *
       * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
       * multi-taps being recognized.
       * @constructor
       * @extends Recognizer
       */

      function TapRecognizer() {
        Recognizer.apply(this, arguments); // previous time and center,
        // used for tap counting

        this.pTime = false;
        this.pCenter = false;
        this._timer = null;
        this._input = null;
        this.count = 0;
      }

      inherit(TapRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof PinchRecognizer
         */
        defaults: {
          event: 'tap',
          pointers: 1,
          taps: 1,
          interval: 300,
          // max time between the multi-tap taps
          time: 250,
          // max time of the pointer to be down (like finger on the screen)
          threshold: 9,
          // a minimal movement is ok, but keep it low
          posThreshold: 10 // a multi-tap can be a bit off the initial position

        },
        getTouchAction: function () {
          return [TOUCH_ACTION_MANIPULATION];
        },
        process: function (input) {
          var options = this.options;
          var validPointers = input.pointers.length === options.pointers;
          var validMovement = input.distance < options.threshold;
          var validTouchTime = input.deltaTime < options.time;
          this.reset();

          if (input.eventType & INPUT_START && this.count === 0) {
            return this.failTimeout();
          } // we only allow little movement
          // and we've reached an end event, so a tap is possible


          if (validMovement && validTouchTime && validPointers) {
            if (input.eventType != INPUT_END) {
              return this.failTimeout();
            }

            var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
            this.pTime = input.timeStamp;
            this.pCenter = input.center;

            if (!validMultiTap || !validInterval) {
              this.count = 1;
            } else {
              this.count += 1;
            }

            this._input = input; // if tap count matches we have recognized it,
            // else it has began recognizing...

            var tapCount = this.count % options.taps;

            if (tapCount === 0) {
              // no failing requirements, immediately trigger the tap event
              // or wait as long as the multitap interval to trigger
              if (!this.hasRequireFailures()) {
                return STATE_RECOGNIZED;
              } else {
                this._timer = setTimeoutContext(function () {
                  this.state = STATE_RECOGNIZED;
                  this.tryEmit();
                }, options.interval, this);
                return STATE_BEGAN;
              }
            }
          }

          return STATE_FAILED;
        },
        failTimeout: function () {
          this._timer = setTimeoutContext(function () {
            this.state = STATE_FAILED;
          }, this.options.interval, this);
          return STATE_FAILED;
        },
        reset: function () {
          clearTimeout(this._timer);
        },
        emit: function () {
          if (this.state == STATE_RECOGNIZED) {
            this._input.tapCount = this.count;
            this.manager.emit(this.options.event, this._input);
          }
        }
      });
      /**
       * Simple way to create a manager with a default set of recognizers.
       * @param {HTMLElement} element
       * @param {Object} [options]
       * @constructor
       */

      function Hammer(element, options) {
        options = options || {};
        options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
        return new Manager(element, options);
      }
      /**
       * @const {string}
       */


      Hammer.VERSION = '2.0.7';
      /**
       * default settings
       * @namespace
       */

      Hammer.defaults = {
        /**
         * set if DOM events are being triggered.
         * But this is slower and unused by simple implementations, so disabled by default.
         * @type {Boolean}
         * @default false
         */
        domEvents: false,

        /**
         * The value for the touchAction property/fallback.
         * When set to `compute` it will magically set the correct value based on the added recognizers.
         * @type {String}
         * @default compute
         */
        touchAction: TOUCH_ACTION_COMPUTE,

        /**
         * @type {Boolean}
         * @default true
         */
        enable: true,

        /**
         * EXPERIMENTAL FEATURE -- can be removed/changed
         * Change the parent input target element.
         * If Null, then it is being set the to main element.
         * @type {Null|EventTarget}
         * @default null
         */
        inputTarget: null,

        /**
         * force an input class
         * @type {Null|Function}
         * @default null
         */
        inputClass: null,

        /**
         * Default recognizer setup when calling `Hammer()`
         * When creating a new Manager these will be skipped.
         * @type {Array}
         */
        preset: [// RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
        [RotateRecognizer, {
          enable: false
        }], [PinchRecognizer, {
          enable: false
        }, ['rotate']], [SwipeRecognizer, {
          direction: DIRECTION_HORIZONTAL
        }], [PanRecognizer, {
          direction: DIRECTION_HORIZONTAL
        }, ['swipe']], [TapRecognizer], [TapRecognizer, {
          event: 'doubletap',
          taps: 2
        }, ['tap']], [PressRecognizer]],

        /**
         * Some CSS properties can be used to improve the working of Hammer.
         * Add them to this method and they will be set when creating a new Manager.
         * @namespace
         */
        cssProps: {
          /**
           * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
           * @type {String}
           * @default 'none'
           */
          userSelect: 'none',

          /**
           * Disable the Windows Phone grippers when pressing an element.
           * @type {String}
           * @default 'none'
           */
          touchSelect: 'none',

          /**
           * Disables the default callout shown when you touch and hold a touch target.
           * On iOS, when you touch and hold a touch target such as a link, Safari displays
           * a callout containing information about the link. This property allows you to disable that callout.
           * @type {String}
           * @default 'none'
           */
          touchCallout: 'none',

          /**
           * Specifies whether zooming is enabled. Used by IE10>
           * @type {String}
           * @default 'none'
           */
          contentZooming: 'none',

          /**
           * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
           * @type {String}
           * @default 'none'
           */
          userDrag: 'none',

          /**
           * Overrides the highlight color shown when the user taps a link or a JavaScript
           * clickable element in iOS. This property obeys the alpha value, if specified.
           * @type {String}
           * @default 'rgba(0,0,0,0)'
           */
          tapHighlightColor: 'rgba(0,0,0,0)'
        }
      };
      var STOP = 1;
      var FORCED_STOP = 2;
      /**
       * Manager
       * @param {HTMLElement} element
       * @param {Object} [options]
       * @constructor
       */

      function Manager(element, options) {
        this.options = assign({}, Hammer.defaults, options || {});
        this.options.inputTarget = this.options.inputTarget || element;
        this.handlers = {};
        this.session = {};
        this.recognizers = [];
        this.oldCssProps = {};
        this.element = element;
        this.input = createInputInstance(this);
        this.touchAction = new TouchAction(this, this.options.touchAction);
        toggleCssProps(this, true);
        each(this.options.recognizers, function (item) {
          var recognizer = this.add(new item[0](item[1]));
          item[2] && recognizer.recognizeWith(item[2]);
          item[3] && recognizer.requireFailure(item[3]);
        }, this);
      }

      Manager.prototype = {
        /**
         * set options
         * @param {Object} options
         * @returns {Manager}
         */
        set: function (options) {
          assign(this.options, options); // Options that need a little more setup

          if (options.touchAction) {
            this.touchAction.update();
          }

          if (options.inputTarget) {
            // Clean up existing event listeners and reinitialize
            this.input.destroy();
            this.input.target = options.inputTarget;
            this.input.init();
          }

          return this;
        },

        /**
         * stop recognizing for this session.
         * This session will be discarded, when a new [input]start event is fired.
         * When forced, the recognizer cycle is stopped immediately.
         * @param {Boolean} [force]
         */
        stop: function (force) {
          this.session.stopped = force ? FORCED_STOP : STOP;
        },

        /**
         * run the recognizers!
         * called by the inputHandler function on every movement of the pointers (touches)
         * it walks through all the recognizers and tries to detect the gesture that is being made
         * @param {Object} inputData
         */
        recognize: function (inputData) {
          var session = this.session;

          if (session.stopped) {
            return;
          } // run the touch-action polyfill


          this.touchAction.preventDefaults(inputData);
          var recognizer;
          var recognizers = this.recognizers; // this holds the recognizer that is being recognized.
          // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
          // if no recognizer is detecting a thing, it is set to `null`

          var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized
          // or when we're in a new session

          if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
            curRecognizer = session.curRecognizer = null;
          }

          var i = 0;

          while (i < recognizers.length) {
            recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.
            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
            //      that is being recognized.
            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
            //      this can be setup with the `recognizeWith()` method on the recognizer.

            if (session.stopped !== FORCED_STOP && ( // 1
            !curRecognizer || recognizer == curRecognizer || // 2
            recognizer.canRecognizeWith(curRecognizer))) {
              // 3
              recognizer.recognize(inputData);
            } else {
              recognizer.reset();
            } // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
            // current active recognizer. but only if we don't already have an active recognizer


            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
              curRecognizer = session.curRecognizer = recognizer;
            }

            i++;
          }
        },

        /**
         * get a recognizer by its event name.
         * @param {Recognizer|String} recognizer
         * @returns {Recognizer|Null}
         */
        get: function (recognizer) {
          if (recognizer instanceof Recognizer) {
            return recognizer;
          }

          var recognizers = this.recognizers;

          for (var i = 0; i < recognizers.length; i++) {
            if (recognizers[i].options.event == recognizer) {
              return recognizers[i];
            }
          }

          return null;
        },

        /**
         * add a recognizer to the manager
         * existing recognizers with the same event name will be removed
         * @param {Recognizer} recognizer
         * @returns {Recognizer|Manager}
         */
        add: function (recognizer) {
          if (invokeArrayArg(recognizer, 'add', this)) {
            return this;
          } // remove existing


          var existing = this.get(recognizer.options.event);

          if (existing) {
            this.remove(existing);
          }

          this.recognizers.push(recognizer);
          recognizer.manager = this;
          this.touchAction.update();
          return recognizer;
        },

        /**
         * remove a recognizer by name or instance
         * @param {Recognizer|String} recognizer
         * @returns {Manager}
         */
        remove: function (recognizer) {
          if (invokeArrayArg(recognizer, 'remove', this)) {
            return this;
          }

          recognizer = this.get(recognizer); // let's make sure this recognizer exists

          if (recognizer) {
            var recognizers = this.recognizers;
            var index = inArray(recognizers, recognizer);

            if (index !== -1) {
              recognizers.splice(index, 1);
              this.touchAction.update();
            }
          }

          return this;
        },

        /**
         * bind event
         * @param {String} events
         * @param {Function} handler
         * @returns {EventEmitter} this
         */
        on: function (events, handler) {
          if (events === undefined$1) {
            return;
          }

          if (handler === undefined$1) {
            return;
          }

          var handlers = this.handlers;
          each(splitStr(events), function (event) {
            handlers[event] = handlers[event] || [];
            handlers[event].push(handler);
          });
          return this;
        },

        /**
         * unbind event, leave emit blank to remove all handlers
         * @param {String} events
         * @param {Function} [handler]
         * @returns {EventEmitter} this
         */
        off: function (events, handler) {
          if (events === undefined$1) {
            return;
          }

          var handlers = this.handlers;
          each(splitStr(events), function (event) {
            if (!handler) {
              delete handlers[event];
            } else {
              handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            }
          });
          return this;
        },

        /**
         * emit event to the listeners
         * @param {String} event
         * @param {Object} data
         */
        emit: function (event, data) {
          // we also want to trigger dom events
          if (this.options.domEvents) {
            triggerDomEvent(event, data);
          } // no handlers, so skip it all


          var handlers = this.handlers[event] && this.handlers[event].slice();

          if (!handlers || !handlers.length) {
            return;
          }

          data.type = event;

          data.preventDefault = function () {
            data.srcEvent.preventDefault();
          };

          var i = 0;

          while (i < handlers.length) {
            handlers[i](data);
            i++;
          }
        },

        /**
         * destroy the manager and unbinds all events
         * it doesn't unbind dom events, that is the user own responsibility
         */
        destroy: function () {
          this.element && toggleCssProps(this, false);
          this.handlers = {};
          this.session = {};
          this.input.destroy();
          this.element = null;
        }
      };
      /**
       * add/remove the css properties as defined in manager.options.cssProps
       * @param {Manager} manager
       * @param {Boolean} add
       */

      function toggleCssProps(manager, add) {
        var element = manager.element;

        if (!element.style) {
          return;
        }

        var prop;
        each(manager.options.cssProps, function (value, name) {
          prop = prefixed(element.style, name);

          if (add) {
            manager.oldCssProps[prop] = element.style[prop];
            element.style[prop] = value;
          } else {
            element.style[prop] = manager.oldCssProps[prop] || '';
          }
        });

        if (!add) {
          manager.oldCssProps = {};
        }
      }
      /**
       * trigger dom event
       * @param {String} event
       * @param {Object} data
       */


      function triggerDomEvent(event, data) {
        var gestureEvent = document.createEvent('Event');
        gestureEvent.initEvent(event, true, true);
        gestureEvent.gesture = data;
        data.target.dispatchEvent(gestureEvent);
      }

      assign(Hammer, {
        INPUT_START: INPUT_START,
        INPUT_MOVE: INPUT_MOVE,
        INPUT_END: INPUT_END,
        INPUT_CANCEL: INPUT_CANCEL,
        STATE_POSSIBLE: STATE_POSSIBLE,
        STATE_BEGAN: STATE_BEGAN,
        STATE_CHANGED: STATE_CHANGED,
        STATE_ENDED: STATE_ENDED,
        STATE_RECOGNIZED: STATE_RECOGNIZED,
        STATE_CANCELLED: STATE_CANCELLED,
        STATE_FAILED: STATE_FAILED,
        DIRECTION_NONE: DIRECTION_NONE,
        DIRECTION_LEFT: DIRECTION_LEFT,
        DIRECTION_RIGHT: DIRECTION_RIGHT,
        DIRECTION_UP: DIRECTION_UP,
        DIRECTION_DOWN: DIRECTION_DOWN,
        DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
        DIRECTION_VERTICAL: DIRECTION_VERTICAL,
        DIRECTION_ALL: DIRECTION_ALL,
        Manager: Manager,
        Input: Input,
        TouchAction: TouchAction,
        TouchInput: TouchInput,
        MouseInput: MouseInput,
        PointerEventInput: PointerEventInput,
        TouchMouseInput: TouchMouseInput,
        SingleTouchInput: SingleTouchInput,
        Recognizer: Recognizer,
        AttrRecognizer: AttrRecognizer,
        Tap: TapRecognizer,
        Pan: PanRecognizer,
        Swipe: SwipeRecognizer,
        Pinch: PinchRecognizer,
        Rotate: RotateRecognizer,
        Press: PressRecognizer,
        on: addEventListeners,
        off: removeEventListeners,
        each: each,
        merge: merge,
        extend: extend,
        assign: assign,
        inherit: inherit,
        bindFn: bindFn,
        prefixed: prefixed
      }); // this prevents errors when Hammer is loaded in the presence of an AMD
      //  style loader but by script tag, not by the loader.

      var freeGlobal = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}; // jshint ignore:line

      freeGlobal.Hammer = Hammer;

      if (typeof undefined$1 === 'function' && undefined$1.amd) {
        undefined$1(function () {
          return Hammer;
        });
      } else if ( module.exports) {
        module.exports = Hammer;
      } else {
        window[exportName] = Hammer;
      }
    })(window, document, 'Hammer');
  });

  var hammer$1 = createCommonjsModule$2(function (module) {
    /**
     * Setup a mock hammer.js object, for unit testing.
     *
     * Inspiration: https://github.com/uber/deck.gl/pull/658
     *
     * @returns {{on: noop, off: noop, destroy: noop, emit: noop, get: get}}
     */
    function hammerMock() {
      const noop = () => {};

      return {
        on: noop,
        off: noop,
        destroy: noop,
        emit: noop,
        get: function (m) {
          //eslint-disable-line no-unused-vars
          return {
            set: noop
          };
        }
      };
    }

    if (typeof window !== 'undefined') {
      var propagating$1 = propagating;
      var Hammer = window['Hammer'] || hammer;
      module.exports = propagating$1(Hammer, {
        preventDefault: 'mouse'
      });
    } else {
      module.exports = function () {
        // hammer.js is only available in a browser, not in node.js. Replacing it with a mock object.
        return hammerMock();
      };
    }
  });

  var Graph3d$1 = Graph3d_1;
  var graph3d = {
    Camera: Camera_1,
    Filter: Filter_1,
    Point2d: Point2d_1,
    Point3d: Point3d_1,
    Slider: Slider_1,
    StepNumber: StepNumber_1
  }; // bundled external libraries

  var DOMutil$1 = createCommonjsModule$2(function (module, exports) {
    // DOM utility methods

    /**
     * this prepares the JSON container for allocating SVG elements
     * @param {Object} JSONcontainer
     * @private
     */
    exports.prepareElements = function (JSONcontainer) {
      // cleanup the redundant svgElements;
      for (var elementType in JSONcontainer) {
        if (JSONcontainer.hasOwnProperty(elementType)) {
          JSONcontainer[elementType].redundant = JSONcontainer[elementType].used;
          JSONcontainer[elementType].used = [];
        }
      }
    };
    /**
     * this cleans up all the unused SVG elements. By asking for the parentNode, we only need to supply the JSON container from
     * which to remove the redundant elements.
     *
     * @param {Object} JSONcontainer
     * @private
     */


    exports.cleanupElements = function (JSONcontainer) {
      // cleanup the redundant svgElements;
      for (var elementType in JSONcontainer) {
        if (JSONcontainer.hasOwnProperty(elementType)) {
          if (JSONcontainer[elementType].redundant) {
            for (var i = 0; i < JSONcontainer[elementType].redundant.length; i++) {
              JSONcontainer[elementType].redundant[i].parentNode.removeChild(JSONcontainer[elementType].redundant[i]);
            }

            JSONcontainer[elementType].redundant = [];
          }
        }
      }
    };
    /**
     * Ensures that all elements are removed first up so they can be recreated cleanly
     * @param {Object} JSONcontainer
     */


    exports.resetElements = function (JSONcontainer) {
      exports.prepareElements(JSONcontainer);
      exports.cleanupElements(JSONcontainer);
      exports.prepareElements(JSONcontainer);
    };
    /**
     * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
     * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
     *
     * @param {string} elementType
     * @param {Object} JSONcontainer
     * @param {Object} svgContainer
     * @returns {Element}
     * @private
     */


    exports.getSVGElement = function (elementType, JSONcontainer, svgContainer) {
      var element; // allocate SVG element, if it doesnt yet exist, create one.

      if (JSONcontainer.hasOwnProperty(elementType)) {
        // this element has been created before
        // check if there is an redundant element
        if (JSONcontainer[elementType].redundant.length > 0) {
          element = JSONcontainer[elementType].redundant[0];
          JSONcontainer[elementType].redundant.shift();
        } else {
          // create a new element and add it to the SVG
          element = document.createElementNS('http://www.w3.org/2000/svg', elementType);
          svgContainer.appendChild(element);
        }
      } else {
        // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
        element = document.createElementNS('http://www.w3.org/2000/svg', elementType);
        JSONcontainer[elementType] = {
          used: [],
          redundant: []
        };
        svgContainer.appendChild(element);
      }

      JSONcontainer[elementType].used.push(element);
      return element;
    };
    /**
     * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
     * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
     *
     * @param {string} elementType
     * @param {Object} JSONcontainer
     * @param {Element} DOMContainer
     * @param {Element} insertBefore
     * @returns {*}
     */


    exports.getDOMElement = function (elementType, JSONcontainer, DOMContainer, insertBefore) {
      var element; // allocate DOM element, if it doesnt yet exist, create one.

      if (JSONcontainer.hasOwnProperty(elementType)) {
        // this element has been created before
        // check if there is an redundant element
        if (JSONcontainer[elementType].redundant.length > 0) {
          element = JSONcontainer[elementType].redundant[0];
          JSONcontainer[elementType].redundant.shift();
        } else {
          // create a new element and add it to the SVG
          element = document.createElement(elementType);

          if (insertBefore !== undefined) {
            DOMContainer.insertBefore(element, insertBefore);
          } else {
            DOMContainer.appendChild(element);
          }
        }
      } else {
        // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
        element = document.createElement(elementType);
        JSONcontainer[elementType] = {
          used: [],
          redundant: []
        };

        if (insertBefore !== undefined) {
          DOMContainer.insertBefore(element, insertBefore);
        } else {
          DOMContainer.appendChild(element);
        }
      }

      JSONcontainer[elementType].used.push(element);
      return element;
    };
    /**
     * Draw a point object. This is a separate function because it can also be called by the legend.
     * The reason the JSONcontainer and the target SVG svgContainer have to be supplied is so the legend can use these functions
     * as well.
     *
     * @param {number} x
     * @param {number} y
     * @param {Object} groupTemplate: A template containing the necessary information to draw the datapoint e.g., {style: 'circle', size: 5, className: 'className' }
     * @param {Object} JSONcontainer
     * @param {Object} svgContainer
     * @param {Object} labelObj
     * @returns {vis.PointItem}
     */


    exports.drawPoint = function (x, y, groupTemplate, JSONcontainer, svgContainer, labelObj) {
      var point;

      if (groupTemplate.style == 'circle') {
        point = exports.getSVGElement('circle', JSONcontainer, svgContainer);
        point.setAttributeNS(null, "cx", x);
        point.setAttributeNS(null, "cy", y);
        point.setAttributeNS(null, "r", 0.5 * groupTemplate.size);
      } else {
        point = exports.getSVGElement('rect', JSONcontainer, svgContainer);
        point.setAttributeNS(null, "x", x - 0.5 * groupTemplate.size);
        point.setAttributeNS(null, "y", y - 0.5 * groupTemplate.size);
        point.setAttributeNS(null, "width", groupTemplate.size);
        point.setAttributeNS(null, "height", groupTemplate.size);
      }

      if (groupTemplate.styles !== undefined) {
        point.setAttributeNS(null, "style", groupTemplate.styles);
      }

      point.setAttributeNS(null, "class", groupTemplate.className + " vis-point"); //handle label

      if (labelObj) {
        var label = exports.getSVGElement('text', JSONcontainer, svgContainer);

        if (labelObj.xOffset) {
          x = x + labelObj.xOffset;
        }

        if (labelObj.yOffset) {
          y = y + labelObj.yOffset;
        }

        if (labelObj.content) {
          label.textContent = labelObj.content;
        }

        if (labelObj.className) {
          label.setAttributeNS(null, "class", labelObj.className + " vis-label");
        }

        label.setAttributeNS(null, "x", x);
        label.setAttributeNS(null, "y", y);
      }

      return point;
    };
    /**
     * draw a bar SVG element centered on the X coordinate
     *
     * @param {number} x
     * @param {number} y
     * @param {number} width
     * @param {number} height
     * @param {string} className
     * @param {Object} JSONcontainer
     * @param {Object} svgContainer
     * @param {string} style
     */


    exports.drawBar = function (x, y, width, height, className, JSONcontainer, svgContainer, style) {
      if (height != 0) {
        if (height < 0) {
          height *= -1;
          y -= height;
        }

        var rect = exports.getSVGElement('rect', JSONcontainer, svgContainer);
        rect.setAttributeNS(null, "x", x - 0.5 * width);
        rect.setAttributeNS(null, "y", y);
        rect.setAttributeNS(null, "width", width);
        rect.setAttributeNS(null, "height", height);
        rect.setAttributeNS(null, "class", className);

        if (style) {
          rect.setAttributeNS(null, "style", style);
        }
      }
    };
  });
  var DOMutil_1$1 = DOMutil$1.prepareElements;
  var DOMutil_2$1 = DOMutil$1.cleanupElements;
  var DOMutil_3$1 = DOMutil$1.resetElements;
  var DOMutil_4$1 = DOMutil$1.getSVGElement;
  var DOMutil_5$1 = DOMutil$1.getDOMElement;
  var DOMutil_6$1 = DOMutil$1.drawPoint;
  var DOMutil_7$1 = DOMutil$1.drawBar;

  // use this instance. Else, load via commonjs.

  var moment$3 = typeof window !== 'undefined' && window['moment'] || moment$2;

  /**
   * Prototype for visual components
   * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} [body]
   * @param {Object} [options]
   */

  function Component(body, options) {
    // eslint-disable-line no-unused-vars
    this.options = null;
    this.props = null;
  }
  /**
   * Set options for the component. The new options will be merged into the
   * current options.
   * @param {Object} options
   */


  Component.prototype.setOptions = function (options) {
    if (options) {
      util.extend(this.options, options);
    }
  };
  /**
   * Repaint the component
   * @return {boolean} Returns true if the component is resized
   */


  Component.prototype.redraw = function () {
    // should be implemented by the component
    return false;
  };
  /**
   * Destroy the component. Cleanup DOM and event listeners
   */


  Component.prototype.destroy = function () {// should be implemented by the component
  };
  /**
   * Test whether the component is resized since the last time _isResized() was
   * called.
   * @return {Boolean} Returns true if the component is resized
   * @protected
   */


  Component.prototype._isResized = function () {
    var resized = this.props._previousWidth !== this.props.width || this.props._previousHeight !== this.props.height;
    this.props._previousWidth = this.props.width;
    this.props._previousHeight = this.props.height;
    return resized;
  };

  var Component_1 = Component;

  var DateUtil = createCommonjsModule$2(function (module, exports) {
    /**
     * used in Core to convert the options into a volatile variable
     * 
     * @param {function} moment
     * @param {Object} body
     * @param {Array | Object} hiddenDates
     * @returns {number}
     */
    exports.convertHiddenOptions = function (moment, body, hiddenDates) {
      if (hiddenDates && !Array.isArray(hiddenDates)) {
        return exports.convertHiddenOptions(moment, body, [hiddenDates]);
      }

      body.hiddenDates = [];

      if (hiddenDates) {
        if (Array.isArray(hiddenDates) == true) {
          for (var i = 0; i < hiddenDates.length; i++) {
            if (hiddenDates[i].repeat === undefined) {
              var dateItem = {};
              dateItem.start = moment(hiddenDates[i].start).toDate().valueOf();
              dateItem.end = moment(hiddenDates[i].end).toDate().valueOf();
              body.hiddenDates.push(dateItem);
            }
          }

          body.hiddenDates.sort(function (a, b) {
            return a.start - b.start;
          }); // sort by start time
        }
      }
    };
    /**
     * create new entrees for the repeating hidden dates
     *
     * @param {function} moment
     * @param {Object} body
     * @param {Array | Object} hiddenDates
     * @returns {null}
     */


    exports.updateHiddenDates = function (moment, body, hiddenDates) {
      if (hiddenDates && !Array.isArray(hiddenDates)) {
        return exports.updateHiddenDates(moment, body, [hiddenDates]);
      }

      if (hiddenDates && body.domProps.centerContainer.width !== undefined) {
        exports.convertHiddenOptions(moment, body, hiddenDates);
        var start = moment(body.range.start);
        var end = moment(body.range.end);
        var totalRange = body.range.end - body.range.start;
        var pixelTime = totalRange / body.domProps.centerContainer.width;

        for (var i = 0; i < hiddenDates.length; i++) {
          if (hiddenDates[i].repeat !== undefined) {
            var startDate = moment(hiddenDates[i].start);
            var endDate = moment(hiddenDates[i].end);

            if (startDate._d == "Invalid Date") {
              throw new Error("Supplied start date is not valid: " + hiddenDates[i].start);
            }

            if (endDate._d == "Invalid Date") {
              throw new Error("Supplied end date is not valid: " + hiddenDates[i].end);
            }

            var duration = endDate - startDate;

            if (duration >= 4 * pixelTime) {
              var offset = 0;
              var runUntil = end.clone();

              switch (hiddenDates[i].repeat) {
                case "daily":
                  // case of time
                  if (startDate.day() != endDate.day()) {
                    offset = 1;
                  }

                  startDate.dayOfYear(start.dayOfYear());
                  startDate.year(start.year());
                  startDate.subtract(7, 'days');
                  endDate.dayOfYear(start.dayOfYear());
                  endDate.year(start.year());
                  endDate.subtract(7 - offset, 'days');
                  runUntil.add(1, 'weeks');
                  break;

                case "weekly":
                  var dayOffset = endDate.diff(startDate, 'days');
                  var day = startDate.day(); // set the start date to the range.start

                  startDate.date(start.date());
                  startDate.month(start.month());
                  startDate.year(start.year());
                  endDate = startDate.clone(); // force

                  startDate.day(day);
                  endDate.day(day);
                  endDate.add(dayOffset, 'days');
                  startDate.subtract(1, 'weeks');
                  endDate.subtract(1, 'weeks');
                  runUntil.add(1, 'weeks');
                  break;

                case "monthly":
                  if (startDate.month() != endDate.month()) {
                    offset = 1;
                  }

                  startDate.month(start.month());
                  startDate.year(start.year());
                  startDate.subtract(1, 'months');
                  endDate.month(start.month());
                  endDate.year(start.year());
                  endDate.subtract(1, 'months');
                  endDate.add(offset, 'months');
                  runUntil.add(1, 'months');
                  break;

                case "yearly":
                  if (startDate.year() != endDate.year()) {
                    offset = 1;
                  }

                  startDate.year(start.year());
                  startDate.subtract(1, 'years');
                  endDate.year(start.year());
                  endDate.subtract(1, 'years');
                  endDate.add(offset, 'years');
                  runUntil.add(1, 'years');
                  break;

                default:
                  console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:", hiddenDates[i].repeat);
                  return;
              }

              while (startDate < runUntil) {
                body.hiddenDates.push({
                  start: startDate.valueOf(),
                  end: endDate.valueOf()
                });

                switch (hiddenDates[i].repeat) {
                  case "daily":
                    startDate.add(1, 'days');
                    endDate.add(1, 'days');
                    break;

                  case "weekly":
                    startDate.add(1, 'weeks');
                    endDate.add(1, 'weeks');
                    break;

                  case "monthly":
                    startDate.add(1, 'months');
                    endDate.add(1, 'months');
                    break;

                  case "yearly":
                    startDate.add(1, 'y');
                    endDate.add(1, 'y');
                    break;

                  default:
                    console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:", hiddenDates[i].repeat);
                    return;
                }
              }

              body.hiddenDates.push({
                start: startDate.valueOf(),
                end: endDate.valueOf()
              });
            }
          }
        } // remove duplicates, merge where possible


        exports.removeDuplicates(body); // ensure the new positions are not on hidden dates

        var startHidden = exports.isHidden(body.range.start, body.hiddenDates);
        var endHidden = exports.isHidden(body.range.end, body.hiddenDates);
        var rangeStart = body.range.start;
        var rangeEnd = body.range.end;

        if (startHidden.hidden == true) {
          rangeStart = body.range.startToFront == true ? startHidden.startDate - 1 : startHidden.endDate + 1;
        }

        if (endHidden.hidden == true) {
          rangeEnd = body.range.endToFront == true ? endHidden.startDate - 1 : endHidden.endDate + 1;
        }

        if (startHidden.hidden == true || endHidden.hidden == true) {
          body.range._applyRange(rangeStart, rangeEnd);
        }
      }
    };
    /**
     * remove duplicates from the hidden dates list. Duplicates are evil. They mess everything up.
     * Scales with N^2
     *
     * @param {Object} body
     */


    exports.removeDuplicates = function (body) {
      var hiddenDates = body.hiddenDates;
      var safeDates = [];

      for (var i = 0; i < hiddenDates.length; i++) {
        for (var j = 0; j < hiddenDates.length; j++) {
          if (i != j && hiddenDates[j].remove != true && hiddenDates[i].remove != true) {
            // j inside i
            if (hiddenDates[j].start >= hiddenDates[i].start && hiddenDates[j].end <= hiddenDates[i].end) {
              hiddenDates[j].remove = true;
            } // j start inside i
            else if (hiddenDates[j].start >= hiddenDates[i].start && hiddenDates[j].start <= hiddenDates[i].end) {
                hiddenDates[i].end = hiddenDates[j].end;
                hiddenDates[j].remove = true;
              } // j end inside i
              else if (hiddenDates[j].end >= hiddenDates[i].start && hiddenDates[j].end <= hiddenDates[i].end) {
                  hiddenDates[i].start = hiddenDates[j].start;
                  hiddenDates[j].remove = true;
                }
          }
        }
      }

      for (i = 0; i < hiddenDates.length; i++) {
        if (hiddenDates[i].remove !== true) {
          safeDates.push(hiddenDates[i]);
        }
      }

      body.hiddenDates = safeDates;
      body.hiddenDates.sort(function (a, b) {
        return a.start - b.start;
      }); // sort by start time
    };

    exports.printDates = function (dates) {
      for (var i = 0; i < dates.length; i++) {
        console.log(i, new Date(dates[i].start), new Date(dates[i].end), dates[i].start, dates[i].end, dates[i].remove);
      }
    };
    /**
     * Used in TimeStep to avoid the hidden times.
     * @param {function} moment
     * @param {TimeStep} timeStep
     * @param {Date} previousTime
     */


    exports.stepOverHiddenDates = function (moment, timeStep, previousTime) {
      var stepInHidden = false;
      var currentValue = timeStep.current.valueOf();

      for (var i = 0; i < timeStep.hiddenDates.length; i++) {
        var startDate = timeStep.hiddenDates[i].start;
        var endDate = timeStep.hiddenDates[i].end;

        if (currentValue >= startDate && currentValue < endDate) {
          stepInHidden = true;
          break;
        }
      }

      if (stepInHidden == true && currentValue < timeStep._end.valueOf() && currentValue != previousTime) {
        var prevValue = moment(previousTime);
        var newValue = moment(endDate); //check if the next step should be major

        if (prevValue.year() != newValue.year()) {
          timeStep.switchedYear = true;
        } else if (prevValue.month() != newValue.month()) {
          timeStep.switchedMonth = true;
        } else if (prevValue.dayOfYear() != newValue.dayOfYear()) {
          timeStep.switchedDay = true;
        }

        timeStep.current = newValue;
      }
    }; ///**
    // * Used in TimeStep to avoid the hidden times.
    // * @param timeStep
    // * @param previousTime
    // */
    //exports.checkFirstStep = function(timeStep) {
    //  var stepInHidden = false;
    //  var currentValue = timeStep.current.valueOf();
    //  for (var i = 0; i < timeStep.hiddenDates.length; i++) {
    //    var startDate = timeStep.hiddenDates[i].start;
    //    var endDate = timeStep.hiddenDates[i].end;
    //    if (currentValue >= startDate && currentValue < endDate) {
    //      stepInHidden = true;
    //      break;
    //    }
    //  }
    //
    //  if (stepInHidden == true && currentValue <= timeStep._end.valueOf()) {
    //    var newValue = moment(endDate);
    //    timeStep.current = newValue.toDate();
    //  }
    //};

    /**
     * replaces the Core toScreen methods
     *
     * @param {vis.Core} Core
     * @param {Date} time
     * @param {number} width
     * @returns {number}
     */


    exports.toScreen = function (Core, time, width) {
      var conversion;

      if (Core.body.hiddenDates.length == 0) {
        conversion = Core.range.conversion(width);
        return (time.valueOf() - conversion.offset) * conversion.scale;
      } else {
        var hidden = exports.isHidden(time, Core.body.hiddenDates);

        if (hidden.hidden == true) {
          time = hidden.startDate;
        }

        var duration = exports.getHiddenDurationBetween(Core.body.hiddenDates, Core.range.start, Core.range.end);

        if (time < Core.range.start) {
          conversion = Core.range.conversion(width, duration);
          var hiddenBeforeStart = exports.getHiddenDurationBeforeStart(Core.body.hiddenDates, time, conversion.offset);
          time = Core.options.moment(time).toDate().valueOf();
          time = time + hiddenBeforeStart;
          return -(conversion.offset - time.valueOf()) * conversion.scale;
        } else if (time > Core.range.end) {
          var rangeAfterEnd = {
            start: Core.range.start,
            end: time
          };
          time = exports.correctTimeForHidden(Core.options.moment, Core.body.hiddenDates, rangeAfterEnd, time);
          conversion = Core.range.conversion(width, duration);
          return (time.valueOf() - conversion.offset) * conversion.scale;
        } else {
          time = exports.correctTimeForHidden(Core.options.moment, Core.body.hiddenDates, Core.range, time);
          conversion = Core.range.conversion(width, duration);
          return (time.valueOf() - conversion.offset) * conversion.scale;
        }
      }
    };
    /**
     * Replaces the core toTime methods
     *
     * @param {vis.Core} Core
     * @param {number} x
     * @param {number} width
     * @returns {Date}
     */


    exports.toTime = function (Core, x, width) {
      if (Core.body.hiddenDates.length == 0) {
        var conversion = Core.range.conversion(width);
        return new Date(x / conversion.scale + conversion.offset);
      } else {
        var hiddenDuration = exports.getHiddenDurationBetween(Core.body.hiddenDates, Core.range.start, Core.range.end);
        var totalDuration = Core.range.end - Core.range.start - hiddenDuration;
        var partialDuration = totalDuration * x / width;
        var accumulatedHiddenDuration = exports.getAccumulatedHiddenDuration(Core.body.hiddenDates, Core.range, partialDuration);
        return new Date(accumulatedHiddenDuration + partialDuration + Core.range.start);
      }
    };
    /**
     * Support function
     *
     * @param {Array.<{start: Window.start, end: *}>} hiddenDates
     * @param {number} start
     * @param {number} end
     * @returns {number}
     */


    exports.getHiddenDurationBetween = function (hiddenDates, start, end) {
      var duration = 0;

      for (var i = 0; i < hiddenDates.length; i++) {
        var startDate = hiddenDates[i].start;
        var endDate = hiddenDates[i].end; // if time after the cutout, and the

        if (startDate >= start && endDate < end) {
          duration += endDate - startDate;
        }
      }

      return duration;
    };
    /**
     * Support function
     *
     * @param {Array.<{start: Window.start, end: *}>} hiddenDates
     * @param {number} start
     * @param {number} end
     * @returns {number}
     */


    exports.getHiddenDurationBeforeStart = function (hiddenDates, start, end) {
      var duration = 0;

      for (var i = 0; i < hiddenDates.length; i++) {
        var startDate = hiddenDates[i].start;
        var endDate = hiddenDates[i].end;

        if (startDate >= start && endDate <= end) {
          duration += endDate - startDate;
        }
      }

      return duration;
    };
    /**
     * Support function
     * @param {function} moment
     * @param {Array.<{start: Window.start, end: *}>} hiddenDates
     * @param {{start: number, end: number}} range
     * @param {Date} time
     * @returns {number}
     */


    exports.correctTimeForHidden = function (moment, hiddenDates, range, time) {
      time = moment(time).toDate().valueOf();
      time -= exports.getHiddenDurationBefore(moment, hiddenDates, range, time);
      return time;
    };

    exports.getHiddenDurationBefore = function (moment, hiddenDates, range, time) {
      var timeOffset = 0;
      time = moment(time).toDate().valueOf();

      for (var i = 0; i < hiddenDates.length; i++) {
        var startDate = hiddenDates[i].start;
        var endDate = hiddenDates[i].end; // if time after the cutout, and the

        if (startDate >= range.start && endDate < range.end) {
          if (time >= endDate) {
            timeOffset += endDate - startDate;
          }
        }
      }

      return timeOffset;
    };
    /**
     * sum the duration from start to finish, including the hidden duration,
     * until the required amount has been reached, return the accumulated hidden duration
     * @param {Array.<{start: Window.start, end: *}>} hiddenDates
     * @param {{start: number, end: number}} range
     * @param {number} [requiredDuration=0]
     * @returns {number}
     */


    exports.getAccumulatedHiddenDuration = function (hiddenDates, range, requiredDuration) {
      var hiddenDuration = 0;
      var duration = 0;
      var previousPoint = range.start; //exports.printDates(hiddenDates)

      for (var i = 0; i < hiddenDates.length; i++) {
        var startDate = hiddenDates[i].start;
        var endDate = hiddenDates[i].end; // if time after the cutout, and the

        if (startDate >= range.start && endDate < range.end) {
          duration += startDate - previousPoint;
          previousPoint = endDate;

          if (duration >= requiredDuration) {
            break;
          } else {
            hiddenDuration += endDate - startDate;
          }
        }
      }

      return hiddenDuration;
    };
    /**
     * used to step over to either side of a hidden block. Correction is disabled on tablets, might be set to true
     * @param {Array.<{start: Window.start, end: *}>} hiddenDates
     * @param {Date} time
     * @param {number} direction
     * @param {boolean} correctionEnabled
     * @returns {Date|number}
     */


    exports.snapAwayFromHidden = function (hiddenDates, time, direction, correctionEnabled) {
      var isHidden = exports.isHidden(time, hiddenDates);

      if (isHidden.hidden == true) {
        if (direction < 0) {
          if (correctionEnabled == true) {
            return isHidden.startDate - (isHidden.endDate - time) - 1;
          } else {
            return isHidden.startDate - 1;
          }
        } else {
          if (correctionEnabled == true) {
            return isHidden.endDate + (time - isHidden.startDate) + 1;
          } else {
            return isHidden.endDate + 1;
          }
        }
      } else {
        return time;
      }
    };
    /**
     * Check if a time is hidden
     *
     * @param {Date} time
     * @param {Array.<{start: Window.start, end: *}>} hiddenDates
     * @returns {{hidden: boolean, startDate: Window.start, endDate: *}}
     */


    exports.isHidden = function (time, hiddenDates) {
      for (var i = 0; i < hiddenDates.length; i++) {
        var startDate = hiddenDates[i].start;
        var endDate = hiddenDates[i].end;

        if (time >= startDate && time < endDate) {
          // if the start is entering a hidden zone
          return {
            hidden: true,
            startDate: startDate,
            endDate: endDate
          };
        }
      }

      return {
        hidden: false,
        startDate: startDate,
        endDate: endDate
      };
    };
  });
  var DateUtil_1 = DateUtil.convertHiddenOptions;
  var DateUtil_2 = DateUtil.updateHiddenDates;
  var DateUtil_3 = DateUtil.removeDuplicates;
  var DateUtil_4 = DateUtil.printDates;
  var DateUtil_5 = DateUtil.stepOverHiddenDates;
  var DateUtil_6 = DateUtil.toScreen;
  var DateUtil_7 = DateUtil.toTime;
  var DateUtil_8 = DateUtil.getHiddenDurationBetween;
  var DateUtil_9 = DateUtil.getHiddenDurationBeforeStart;
  var DateUtil_10 = DateUtil.correctTimeForHidden;
  var DateUtil_11 = DateUtil.getHiddenDurationBefore;
  var DateUtil_12 = DateUtil.getAccumulatedHiddenDuration;
  var DateUtil_13 = DateUtil.snapAwayFromHidden;
  var DateUtil_14 = DateUtil.isHidden;

  /**
   * A Range controls a numeric range with a start and end value.
   * The Range adjusts the range based on mouse events or programmatic changes,
   * and triggers events when the range is changing or has been changed.
   * @param {{dom: Object, domProps: Object, emitter: Emitter}} body
   * @param {Object} [options]    See description at Range.setOptions
   * @constructor Range
   * @extends Component
   */

  function Range$1(body, options) {
    var now = moment$3().hours(0).minutes(0).seconds(0).milliseconds(0);
    var start = now.clone().add(-3, 'days').valueOf();
    var end = now.clone().add(3, 'days').valueOf();
    this.millisecondsPerPixelCache = undefined;

    if (options === undefined) {
      this.start = start;
      this.end = end;
    } else {
      this.start = options.start || start;
      this.end = options.end || end;
    }

    this.rolling = false;
    this.body = body;
    this.deltaDifference = 0;
    this.scaleOffset = 0;
    this.startToFront = false;
    this.endToFront = true; // default options

    this.defaultOptions = {
      rtl: false,
      start: null,
      end: null,
      moment: moment$3,
      direction: 'horizontal',
      // 'horizontal' or 'vertical'
      moveable: true,
      zoomable: true,
      min: null,
      max: null,
      zoomMin: 10,
      // milliseconds
      zoomMax: 1000 * 60 * 60 * 24 * 365 * 10000,
      // milliseconds
      rollingMode: {
        follow: false,
        offset: 0.5
      }
    };
    this.options = util.extend({}, this.defaultOptions);
    this.props = {
      touch: {}
    };
    this.animationTimer = null; // drag listeners for dragging

    this.body.emitter.on('panstart', this._onDragStart.bind(this));
    this.body.emitter.on('panmove', this._onDrag.bind(this));
    this.body.emitter.on('panend', this._onDragEnd.bind(this)); // mouse wheel for zooming

    this.body.emitter.on('mousewheel', this._onMouseWheel.bind(this)); // pinch to zoom

    this.body.emitter.on('touch', this._onTouch.bind(this));
    this.body.emitter.on('pinch', this._onPinch.bind(this)); // on click of rolling mode button

    this.body.dom.rollingModeBtn.addEventListener('click', this.startRolling.bind(this));
    this.setOptions(options);
  }

  Range$1.prototype = new Component_1();
  /**
   * Set options for the range controller
   * @param {Object} options      Available options:
   *                              {number | Date | String} start  Start date for the range
   *                              {number | Date | String} end    End date for the range
   *                              {number} min    Minimum value for start
   *                              {number} max    Maximum value for end
   *                              {number} zoomMin    Set a minimum value for
   *                                                  (end - start).
   *                              {number} zoomMax    Set a maximum value for
   *                                                  (end - start).
   *                              {boolean} moveable Enable moving of the range
   *                                                 by dragging. True by default
   *                              {boolean} zoomable Enable zooming of the range
   *                                                 by pinching/scrolling. True by default
   */

  Range$1.prototype.setOptions = function (options) {
    if (options) {
      // copy the options that we know
      var fields = ['animation', 'direction', 'min', 'max', 'zoomMin', 'zoomMax', 'moveable', 'zoomable', 'moment', 'activate', 'hiddenDates', 'zoomKey', 'rtl', 'showCurrentTime', 'rollingMode', 'horizontalScroll'];
      util.selectiveExtend(fields, this.options, options);

      if (options.rollingMode && options.rollingMode.follow) {
        this.startRolling();
      }

      if ('start' in options || 'end' in options) {
        // apply a new range. both start and end are optional
        this.setRange(options.start, options.end);
      }
    }
  };
  /**
   * Test whether direction has a valid value
   * @param {string} direction    'horizontal' or 'vertical'
   */


  function validateDirection(direction) {
    if (direction != 'horizontal' && direction != 'vertical') {
      throw new TypeError('Unknown direction "' + direction + '". ' + 'Choose "horizontal" or "vertical".');
    }
  }
  /**
   * Start auto refreshing the current time bar
   */


  Range$1.prototype.startRolling = function () {
    var me = this;
    /**
     *  Updates the current time.
     */

    function update() {
      me.stopRolling();
      me.rolling = true;
      var interval = me.end - me.start;
      var t = util.convert(new Date(), 'Date').valueOf();
      var start = t - interval * me.options.rollingMode.offset;
      var end = t + interval * (1 - me.options.rollingMode.offset);
      var options = {
        animation: false
      };
      me.setRange(start, end, options); // determine interval to refresh

      var scale = me.conversion(me.body.domProps.center.width).scale;
      interval = 1 / scale / 10;
      if (interval < 30) interval = 30;
      if (interval > 1000) interval = 1000;
      me.body.dom.rollingModeBtn.style.visibility = "hidden"; // start a renderTimer to adjust for the new time

      me.currentTimeTimer = setTimeout(update, interval);
    }

    update();
  };
  /**
   * Stop auto refreshing the current time bar
   */


  Range$1.prototype.stopRolling = function () {
    if (this.currentTimeTimer !== undefined) {
      clearTimeout(this.currentTimeTimer);
      this.rolling = false;
      this.body.dom.rollingModeBtn.style.visibility = "visible";
    }
  };
  /**
   * Set a new start and end range
   * @param {Date | number | string} [start]
   * @param {Date | number | string} [end]
   * @param {Object} options      Available options:
   *                              {boolean | {duration: number, easingFunction: string}} [animation=false]
   *                                    If true, the range is animated
   *                                    smoothly to the new window. An object can be
   *                                    provided to specify duration and easing function.
   *                                    Default duration is 500 ms, and default easing
   *                                    function is 'easeInOutQuad'.
   *                              {boolean} [byUser=false]
   *                              {Event}  event  Mouse event
   * @param {Function} callback     a callback function to be executed at the end of this function  
   * @param {Function} frameCallback    a callback function executed each frame of the range animation.
   *                                    The callback will be passed three parameters:
   *                                    {number} easeCoefficient    an easing coefficent
   *                                    {boolean} willDraw          If true the caller will redraw after the callback completes
   *                                    {boolean} done              If true then animation is ending after the current frame
   */


  Range$1.prototype.setRange = function (start, end, options, callback, frameCallback) {
    if (!options) {
      options = {};
    }

    if (options.byUser !== true) {
      options.byUser = false;
    }

    var me = this;
    var finalStart = start != undefined ? util.convert(start, 'Date').valueOf() : null;
    var finalEnd = end != undefined ? util.convert(end, 'Date').valueOf() : null;

    this._cancelAnimation();

    this.millisecondsPerPixelCache = undefined;

    if (options.animation) {
      // true or an Object
      var initStart = this.start;
      var initEnd = this.end;
      var duration = typeof options.animation === 'object' && 'duration' in options.animation ? options.animation.duration : 500;
      var easingName = typeof options.animation === 'object' && 'easingFunction' in options.animation ? options.animation.easingFunction : 'easeInOutQuad';
      var easingFunction = util.easingFunctions[easingName];

      if (!easingFunction) {
        throw new Error('Unknown easing function ' + JSON.stringify(easingName) + '. ' + 'Choose from: ' + Object.keys(util.easingFunctions).join(', '));
      }

      var initTime = new Date().valueOf();
      var anyChanged = false;

      var next = function () {
        if (!me.props.touch.dragging) {
          var now = new Date().valueOf();
          var time = now - initTime;
          var ease = easingFunction(time / duration);
          var done = time > duration;
          var s = done || finalStart === null ? finalStart : initStart + (finalStart - initStart) * ease;
          var e = done || finalEnd === null ? finalEnd : initEnd + (finalEnd - initEnd) * ease;
          changed = me._applyRange(s, e);
          DateUtil.updateHiddenDates(me.options.moment, me.body, me.options.hiddenDates);
          anyChanged = anyChanged || changed;
          var params = {
            start: new Date(me.start),
            end: new Date(me.end),
            byUser: options.byUser,
            event: options.event
          };

          if (frameCallback) {
            frameCallback(ease, changed, done);
          }

          if (changed) {
            me.body.emitter.emit('rangechange', params);
          }

          if (done) {
            if (anyChanged) {
              me.body.emitter.emit('rangechanged', params);

              if (callback) {
                return callback();
              }
            }
          } else {
            // animate with as high as possible frame rate, leave 20 ms in between
            // each to prevent the browser from blocking
            me.animationTimer = setTimeout(next, 20);
          }
        }
      };

      return next();
    } else {
      var changed = this._applyRange(finalStart, finalEnd);

      DateUtil.updateHiddenDates(this.options.moment, this.body, this.options.hiddenDates);

      if (changed) {
        var params = {
          start: new Date(this.start),
          end: new Date(this.end),
          byUser: options.byUser,
          event: options.event
        };
        this.body.emitter.emit('rangechange', params);
        clearTimeout(me.timeoutID);
        me.timeoutID = setTimeout(function () {
          me.body.emitter.emit('rangechanged', params);
        }, 200);

        if (callback) {
          return callback();
        }
      }
    }
  };
  /**
   * Get the number of milliseconds per pixel.
   *
   * @returns {undefined|number}
   */


  Range$1.prototype.getMillisecondsPerPixel = function () {
    if (this.millisecondsPerPixelCache === undefined) {
      this.millisecondsPerPixelCache = (this.end - this.start) / this.body.dom.center.clientWidth;
    }

    return this.millisecondsPerPixelCache;
  };
  /**
   * Stop an animation
   * @private
   */


  Range$1.prototype._cancelAnimation = function () {
    if (this.animationTimer) {
      clearTimeout(this.animationTimer);
      this.animationTimer = null;
    }
  };
  /**
   * Set a new start and end range. This method is the same as setRange, but
   * does not trigger a range change and range changed event, and it returns
   * true when the range is changed
   * @param {number} [start]
   * @param {number} [end]
   * @return {boolean} changed
   * @private
   */


  Range$1.prototype._applyRange = function (start, end) {
    var newStart = start != null ? util.convert(start, 'Date').valueOf() : this.start,
        newEnd = end != null ? util.convert(end, 'Date').valueOf() : this.end,
        max = this.options.max != null ? util.convert(this.options.max, 'Date').valueOf() : null,
        min = this.options.min != null ? util.convert(this.options.min, 'Date').valueOf() : null,
        diff; // check for valid number

    if (isNaN(newStart) || newStart === null) {
      throw new Error('Invalid start "' + start + '"');
    }

    if (isNaN(newEnd) || newEnd === null) {
      throw new Error('Invalid end "' + end + '"');
    } // prevent end < start


    if (newEnd < newStart) {
      newEnd = newStart;
    } // prevent start < min


    if (min !== null) {
      if (newStart < min) {
        diff = min - newStart;
        newStart += diff;
        newEnd += diff; // prevent end > max

        if (max != null) {
          if (newEnd > max) {
            newEnd = max;
          }
        }
      }
    } // prevent end > max


    if (max !== null) {
      if (newEnd > max) {
        diff = newEnd - max;
        newStart -= diff;
        newEnd -= diff; // prevent start < min

        if (min != null) {
          if (newStart < min) {
            newStart = min;
          }
        }
      }
    } // prevent (end-start) < zoomMin


    if (this.options.zoomMin !== null) {
      var zoomMin = parseFloat(this.options.zoomMin);

      if (zoomMin < 0) {
        zoomMin = 0;
      }

      if (newEnd - newStart < zoomMin) {
        // compensate for a scale of 0.5 ms
        var compensation = 0.5;

        if (this.end - this.start === zoomMin && newStart >= this.start - compensation && newEnd <= this.end) {
          // ignore this action, we are already zoomed to the minimum
          newStart = this.start;
          newEnd = this.end;
        } else {
          // zoom to the minimum
          diff = zoomMin - (newEnd - newStart);
          newStart -= diff / 2;
          newEnd += diff / 2;
        }
      }
    } // prevent (end-start) > zoomMax


    if (this.options.zoomMax !== null) {
      var zoomMax = parseFloat(this.options.zoomMax);

      if (zoomMax < 0) {
        zoomMax = 0;
      }

      if (newEnd - newStart > zoomMax) {
        if (this.end - this.start === zoomMax && newStart < this.start && newEnd > this.end) {
          // ignore this action, we are already zoomed to the maximum
          newStart = this.start;
          newEnd = this.end;
        } else {
          // zoom to the maximum
          diff = newEnd - newStart - zoomMax;
          newStart += diff / 2;
          newEnd -= diff / 2;
        }
      }
    }

    var changed = this.start != newStart || this.end != newEnd; // if the new range does NOT overlap with the old range, emit checkRangedItems to avoid not showing ranged items (ranged meaning has end time, not necessarily of type Range)

    if (!(newStart >= this.start && newStart <= this.end || newEnd >= this.start && newEnd <= this.end) && !(this.start >= newStart && this.start <= newEnd || this.end >= newStart && this.end <= newEnd)) {
      this.body.emitter.emit('checkRangedItems');
    }

    this.start = newStart;
    this.end = newEnd;
    return changed;
  };
  /**
   * Retrieve the current range.
   * @return {Object} An object with start and end properties
   */


  Range$1.prototype.getRange = function () {
    return {
      start: this.start,
      end: this.end
    };
  };
  /**
   * Calculate the conversion offset and scale for current range, based on
   * the provided width
   * @param {number} width
   * @param {number} [totalHidden=0]
   * @returns {{offset: number, scale: number}} conversion
   */


  Range$1.prototype.conversion = function (width, totalHidden) {
    return Range$1.conversion(this.start, this.end, width, totalHidden);
  };
  /**
   * Static method to calculate the conversion offset and scale for a range,
   * based on the provided start, end, and width
   * @param {number} start
   * @param {number} end
   * @param {number} width
   * @param {number} [totalHidden=0]
   * @returns {{offset: number, scale: number}} conversion
   */


  Range$1.conversion = function (start, end, width, totalHidden) {
    if (totalHidden === undefined) {
      totalHidden = 0;
    }

    if (width != 0 && end - start != 0) {
      return {
        offset: start,
        scale: width / (end - start - totalHidden)
      };
    } else {
      return {
        offset: 0,
        scale: 1
      };
    }
  };
  /**
   * Start dragging horizontally or vertically
   * @param {Event} event
   * @private
   */


  Range$1.prototype._onDragStart = function (event) {
    this.deltaDifference = 0;
    this.previousDelta = 0; // only allow dragging when configured as movable

    if (!this.options.moveable) return; // only start dragging when the mouse is inside the current range

    if (!this._isInsideRange(event)) return; // refuse to drag when we where pinching to prevent the timeline make a jump
    // when releasing the fingers in opposite order from the touch screen

    if (!this.props.touch.allowDragging) return;
    this.stopRolling();
    this.props.touch.start = this.start;
    this.props.touch.end = this.end;
    this.props.touch.dragging = true;

    if (this.body.dom.root) {
      this.body.dom.root.style.cursor = 'move';
    }
  };
  /**
   * Perform dragging operation
   * @param {Event} event
   * @private
   */


  Range$1.prototype._onDrag = function (event) {
    if (!event) return;
    if (!this.props.touch.dragging) return; // only allow dragging when configured as movable

    if (!this.options.moveable) return; // TODO: this may be redundant in hammerjs2
    // refuse to drag when we where pinching to prevent the timeline make a jump
    // when releasing the fingers in opposite order from the touch screen

    if (!this.props.touch.allowDragging) return;
    var direction = this.options.direction;
    validateDirection(direction);
    var delta = direction == 'horizontal' ? event.deltaX : event.deltaY;
    delta -= this.deltaDifference;
    var interval = this.props.touch.end - this.props.touch.start; // normalize dragging speed if cutout is in between.

    var duration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
    interval -= duration;
    var width = direction == 'horizontal' ? this.body.domProps.center.width : this.body.domProps.center.height;
    var diffRange;

    if (this.options.rtl) {
      diffRange = delta / width * interval;
    } else {
      diffRange = -delta / width * interval;
    }

    var newStart = this.props.touch.start + diffRange;
    var newEnd = this.props.touch.end + diffRange; // snapping times away from hidden zones

    var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, this.previousDelta - delta, true);
    var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, this.previousDelta - delta, true);

    if (safeStart != newStart || safeEnd != newEnd) {
      this.deltaDifference += delta;
      this.props.touch.start = safeStart;
      this.props.touch.end = safeEnd;

      this._onDrag(event);

      return;
    }

    this.previousDelta = delta;

    this._applyRange(newStart, newEnd);

    var startDate = new Date(this.start);
    var endDate = new Date(this.end); // fire a rangechange event

    this.body.emitter.emit('rangechange', {
      start: startDate,
      end: endDate,
      byUser: true,
      event: event
    }); // fire a panmove event

    this.body.emitter.emit('panmove');
  };
  /**
   * Stop dragging operation
   * @param {event} event
   * @private
   */


  Range$1.prototype._onDragEnd = function (event) {
    if (!this.props.touch.dragging) return; // only allow dragging when configured as movable

    if (!this.options.moveable) return; // TODO: this may be redundant in hammerjs2
    // refuse to drag when we where pinching to prevent the timeline make a jump
    // when releasing the fingers in opposite order from the touch screen

    if (!this.props.touch.allowDragging) return;
    this.props.touch.dragging = false;

    if (this.body.dom.root) {
      this.body.dom.root.style.cursor = 'auto';
    } // fire a rangechanged event


    this.body.emitter.emit('rangechanged', {
      start: new Date(this.start),
      end: new Date(this.end),
      byUser: true,
      event: event
    });
  };
  /**
   * Event handler for mouse wheel event, used to zoom
   * Code from http://adomas.org/javascript-mouse-wheel/
   * @param {Event} event
   * @private
   */


  Range$1.prototype._onMouseWheel = function (event) {
    // retrieve delta
    var delta = 0;

    if (event.wheelDelta) {
      /* IE/Opera. */
      delta = event.wheelDelta / 120;
    } else if (event.detail) {
      /* Mozilla case. */
      // In Mozilla, sign of delta is different than in IE.
      // Also, delta is multiple of 3.
      delta = -event.detail / 3;
    } else if (event.deltaY) {
      delta = -event.deltaY / 3;
    } // don't allow zoom when the according key is pressed and the zoomKey option or not zoomable but movable


    if (this.options.zoomKey && !event[this.options.zoomKey] && this.options.zoomable || !this.options.zoomable && this.options.moveable) {
      return;
    } // only allow zooming when configured as zoomable and moveable


    if (!(this.options.zoomable && this.options.moveable)) return; // only zoom when the mouse is inside the current range

    if (!this._isInsideRange(event)) return; // If delta is nonzero, handle it.
    // Basically, delta is now positive if wheel was scrolled up,
    // and negative, if wheel was scrolled down.

    if (delta) {
      // perform the zoom action. Delta is normally 1 or -1
      // adjust a negative delta such that zooming in with delta 0.1
      // equals zooming out with a delta -0.1
      var scale;

      if (delta < 0) {
        scale = 1 - delta / 5;
      } else {
        scale = 1 / (1 + delta / 5);
      } // calculate center, the date to zoom around


      var pointerDate;

      if (this.rolling) {
        pointerDate = this.start + (this.end - this.start) * this.options.rollingMode.offset;
      } else {
        var pointer = this.getPointer({
          x: event.clientX,
          y: event.clientY
        }, this.body.dom.center);
        pointerDate = this._pointerToDate(pointer);
      }

      this.zoom(scale, pointerDate, delta, event); // Prevent default actions caused by mouse wheel
      // (else the page and timeline both scroll)

      event.preventDefault();
    }
  };
  /**
   * Start of a touch gesture
   * @param {Event} event
   * @private
   */


  Range$1.prototype._onTouch = function (event) {
    // eslint-disable-line no-unused-vars
    this.props.touch.start = this.start;
    this.props.touch.end = this.end;
    this.props.touch.allowDragging = true;
    this.props.touch.center = null;
    this.scaleOffset = 0;
    this.deltaDifference = 0; // Disable the browser default handling of this event.

    util.preventDefault(event);
  };
  /**
   * Handle pinch event
   * @param {Event} event
   * @private
   */


  Range$1.prototype._onPinch = function (event) {
    // only allow zooming when configured as zoomable and moveable
    if (!(this.options.zoomable && this.options.moveable)) return; // Disable the browser default handling of this event.

    util.preventDefault(event);
    this.props.touch.allowDragging = false;

    if (!this.props.touch.center) {
      this.props.touch.center = this.getPointer(event.center, this.body.dom.center);
    }

    this.stopRolling();
    var scale = 1 / (event.scale + this.scaleOffset);

    var centerDate = this._pointerToDate(this.props.touch.center);

    var hiddenDuration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
    var hiddenDurationBefore = DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this, centerDate);
    var hiddenDurationAfter = hiddenDuration - hiddenDurationBefore; // calculate new start and end

    var newStart = centerDate - hiddenDurationBefore + (this.props.touch.start - (centerDate - hiddenDurationBefore)) * scale;
    var newEnd = centerDate + hiddenDurationAfter + (this.props.touch.end - (centerDate + hiddenDurationAfter)) * scale; // snapping times away from hidden zones

    this.startToFront = 1 - scale <= 0; // used to do the right auto correction with periodic hidden times

    this.endToFront = scale - 1 <= 0; // used to do the right auto correction with periodic hidden times

    var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, 1 - scale, true);
    var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, scale - 1, true);

    if (safeStart != newStart || safeEnd != newEnd) {
      this.props.touch.start = safeStart;
      this.props.touch.end = safeEnd;
      this.scaleOffset = 1 - event.scale;
      newStart = safeStart;
      newEnd = safeEnd;
    }

    var options = {
      animation: false,
      byUser: true,
      event: event
    };
    this.setRange(newStart, newEnd, options);
    this.startToFront = false; // revert to default

    this.endToFront = true; // revert to default
  };
  /**
   * Test whether the mouse from a mouse event is inside the visible window,
   * between the current start and end date
   * @param {Object} event
   * @return {boolean} Returns true when inside the visible window
   * @private
   */


  Range$1.prototype._isInsideRange = function (event) {
    // calculate the time where the mouse is, check whether inside
    // and no scroll action should happen.
    var clientX = event.center ? event.center.x : event.clientX;
    var x;

    if (this.options.rtl) {
      x = clientX - util.getAbsoluteLeft(this.body.dom.centerContainer);
    } else {
      x = util.getAbsoluteRight(this.body.dom.centerContainer) - clientX;
    }

    var time = this.body.util.toTime(x);
    return time >= this.start && time <= this.end;
  };
  /**
   * Helper function to calculate the center date for zooming
   * @param {{x: number, y: number}} pointer
   * @return {number} date
   * @private
   */


  Range$1.prototype._pointerToDate = function (pointer) {
    var conversion;
    var direction = this.options.direction;
    validateDirection(direction);

    if (direction == 'horizontal') {
      return this.body.util.toTime(pointer.x).valueOf();
    } else {
      var height = this.body.domProps.center.height;
      conversion = this.conversion(height);
      return pointer.y / conversion.scale + conversion.offset;
    }
  };
  /**
   * Get the pointer location relative to the location of the dom element
   * @param {{x: number, y: number}} touch
   * @param {Element} element   HTML DOM element
   * @return {{x: number, y: number}} pointer
   * @private
   */


  Range$1.prototype.getPointer = function (touch, element) {
    if (this.options.rtl) {
      return {
        x: util.getAbsoluteRight(element) - touch.x,
        y: touch.y - util.getAbsoluteTop(element)
      };
    } else {
      return {
        x: touch.x - util.getAbsoluteLeft(element),
        y: touch.y - util.getAbsoluteTop(element)
      };
    }
  };
  /**
   * Zoom the range the given scale in or out. Start and end date will
   * be adjusted, and the timeline will be redrawn. You can optionally give a
   * date around which to zoom.
   * For example, try scale = 0.9 or 1.1
   * @param {number} scale      Scaling factor. Values above 1 will zoom out,
   *                            values below 1 will zoom in.
   * @param {number} [center]   Value representing a date around which will
   *                            be zoomed.
   * @param {number} delta
   * @param {Event} event
   */


  Range$1.prototype.zoom = function (scale, center, delta, event) {
    // if centerDate is not provided, take it half between start Date and end Date
    if (center == null) {
      center = (this.start + this.end) / 2;
    }

    var hiddenDuration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
    var hiddenDurationBefore = DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this, center);
    var hiddenDurationAfter = hiddenDuration - hiddenDurationBefore; // calculate new start and end

    var newStart = center - hiddenDurationBefore + (this.start - (center - hiddenDurationBefore)) * scale;
    var newEnd = center + hiddenDurationAfter + (this.end - (center + hiddenDurationAfter)) * scale; // snapping times away from hidden zones

    this.startToFront = delta > 0 ? false : true; // used to do the right autocorrection with periodic hidden times

    this.endToFront = -delta > 0 ? false : true; // used to do the right autocorrection with periodic hidden times

    var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, delta, true);
    var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, -delta, true);

    if (safeStart != newStart || safeEnd != newEnd) {
      newStart = safeStart;
      newEnd = safeEnd;
    }

    var options = {
      animation: false,
      byUser: true,
      event: event
    };
    this.setRange(newStart, newEnd, options);
    this.startToFront = false; // revert to default

    this.endToFront = true; // revert to default
  };
  /**
   * Move the range with a given delta to the left or right. Start and end
   * value will be adjusted. For example, try delta = 0.1 or -0.1
   * @param {number}  delta     Moving amount. Positive value will move right,
   *                            negative value will move left
   */


  Range$1.prototype.move = function (delta) {
    // zoom start Date and end Date relative to the centerDate
    var diff = this.end - this.start; // apply new values

    var newStart = this.start + diff * delta;
    var newEnd = this.end + diff * delta; // TODO: reckon with min and max range

    this.start = newStart;
    this.end = newEnd;
  };
  /**
   * Move the range to a new center point
   * @param {number} moveTo      New center point of the range
   */


  Range$1.prototype.moveTo = function (moveTo) {
    var center = (this.start + this.end) / 2;
    var diff = center - moveTo; // calculate new start and end

    var newStart = this.start - diff;
    var newEnd = this.end - diff;
    var options = {
      animation: false,
      byUser: true,
      event: null
    };
    this.setRange(newStart, newEnd, options);
  };

  var Range_1$1 = Range$1;

  var hammer$2 = createCommonjsModule$2(function (module) {
    /**
     * Setup a mock hammer.js object, for unit testing.
     *
     * Inspiration: https://github.com/uber/deck.gl/pull/658
     *
     * @returns {{on: noop, off: noop, destroy: noop, emit: noop, get: get}}
     */
    function hammerMock() {
      const noop = () => {};

      return {
        on: noop,
        off: noop,
        destroy: noop,
        emit: noop,
        get: function (m) {
          //eslint-disable-line no-unused-vars
          return {
            set: noop
          };
        }
      };
    }

    if (typeof window !== 'undefined') {
      var propagating$1 = propagating;
      var Hammer = window['Hammer'] || hammer;
      module.exports = propagating$1(Hammer, {
        preventDefault: 'mouse'
      });
    } else {
      module.exports = function () {
        // hammer.js is only available in a browser, not in node.js. Replacing it with a mock object.
        return hammerMock();
      };
    }
  });

  var hammerUtil = createCommonjsModule$2(function (module, exports) {
    /**
     * Register a touch event, taking place before a gesture
     * @param {Hammer} hammer       A hammer instance
     * @param {function} callback   Callback, called as callback(event)
     */
    exports.onTouch = function (hammer, callback) {
      callback.inputHandler = function (event) {
        if (event.isFirst) {
          callback(event);
        }
      };

      hammer.on('hammer.input', callback.inputHandler);
    };
    /**
     * Register a release event, taking place after a gesture
     * @param {Hammer} hammer       A hammer instance
     * @param {function} callback   Callback, called as callback(event)
     * @returns {*}
     */


    exports.onRelease = function (hammer, callback) {
      callback.inputHandler = function (event) {
        if (event.isFinal) {
          callback(event);
        }
      };

      return hammer.on('hammer.input', callback.inputHandler);
    };
    /**
     * Unregister a touch event, taking place before a gesture
     * @param {Hammer} hammer       A hammer instance
     * @param {function} callback   Callback, called as callback(event)
     */


    exports.offTouch = function (hammer, callback) {
      hammer.off('hammer.input', callback.inputHandler);
    };
    /**
     * Unregister a release event, taking place before a gesture
     * @param {Hammer} hammer       A hammer instance
     * @param {function} callback   Callback, called as callback(event)
     */


    exports.offRelease = exports.offTouch;
    /**
     * Hack the PinchRecognizer such that it doesn't prevent default behavior
     * for vertical panning.
     *
     * Yeah ... this is quite a hack ... see https://github.com/hammerjs/hammer.js/issues/932
     *
     * @param {Hammer.Pinch} pinchRecognizer
     * @return {Hammer.Pinch} returns the pinchRecognizer
     */

    exports.disablePreventDefaultVertically = function (pinchRecognizer) {
      var TOUCH_ACTION_PAN_Y = 'pan-y';

      pinchRecognizer.getTouchAction = function () {
        // default method returns [TOUCH_ACTION_NONE]
        return [TOUCH_ACTION_PAN_Y];
      };

      return pinchRecognizer;
    };
  });
  var hammerUtil_1 = hammerUtil.onTouch;
  var hammerUtil_2 = hammerUtil.onRelease;
  var hammerUtil_3 = hammerUtil.offTouch;
  var hammerUtil_4 = hammerUtil.offRelease;
  var hammerUtil_5 = hammerUtil.disablePreventDefaultVertically;

  /**
   * The class TimeStep is an iterator for dates. You provide a start date and an
   * end date. The class itself determines the best scale (step size) based on the
   * provided start Date, end Date, and minimumStep.
   *
   * If minimumStep is provided, the step size is chosen as close as possible
   * to the minimumStep but larger than minimumStep. If minimumStep is not
   * provided, the scale is set to 1 DAY.
   * The minimumStep should correspond with the onscreen size of about 6 characters
   *
   * Alternatively, you can set a scale by hand.
   * After creation, you can initialize the class by executing first(). Then you
   * can iterate from the start date to the end date via next(). You can check if
   * the end date is reached with the function hasNext(). After each step, you can
   * retrieve the current date via getCurrent().
   * The TimeStep has scales ranging from milliseconds, seconds, minutes, hours,
   * days, to years.
   *
   * Version: 1.2
   *
   * @param {Date} [start]         The start date, for example new Date(2010, 9, 21)
   *                               or new Date(2010, 9, 21, 23, 45, 00)
   * @param {Date} [end]           The end date
   * @param {number} [minimumStep] Optional. Minimum step size in milliseconds
   * @param {Date|Array.<Date>} [hiddenDates] Optional.
   * @param {{showMajorLabels: boolean}} [options] Optional.
   * @constructor  TimeStep
   */

  function TimeStep(start, end, minimumStep, hiddenDates, options) {
    this.moment = moment$3; // variables

    this.current = this.moment();
    this._start = this.moment();
    this._end = this.moment();
    this.autoScale = true;
    this.scale = 'day';
    this.step = 1; // initialize the range

    this.setRange(start, end, minimumStep); // hidden Dates options

    this.switchedDay = false;
    this.switchedMonth = false;
    this.switchedYear = false;

    if (Array.isArray(hiddenDates)) {
      this.hiddenDates = hiddenDates;
    } else if (hiddenDates != undefined) {
      this.hiddenDates = [hiddenDates];
    } else {
      this.hiddenDates = [];
    }

    this.format = TimeStep.FORMAT; // default formatting

    this.options = options ? options : {};
  } // Time formatting


  TimeStep.FORMAT = {
    minorLabels: {
      millisecond: 'SSS',
      second: 's',
      minute: 'HH:mm',
      hour: 'HH:mm',
      weekday: 'ddd D',
      day: 'D',
      week: 'D',
      month: 'MMM',
      quarter: 'MMM',
      year: 'YYYY'
    },
    majorLabels: {
      millisecond: 'HH:mm:ss',
      second: 'D MMMM HH:mm',
      minute: 'ddd D MMMM',
      hour: 'ddd D MMMM',
      weekday: 'MMMM YYYY',
      day: 'MMMM YYYY',
      week: 'MMMM YYYY',
      month: 'YYYY',
      quarter: 'YYYY',
      year: ''
    }
  };
  /**
   * Set custom constructor function for moment. Can be used to set dates
   * to UTC or to set a utcOffset.
   * @param {function} moment
   */

  TimeStep.prototype.setMoment = function (moment) {
    this.moment = moment; // update the date properties, can have a new utcOffset

    this.current = this.moment(this.current.valueOf());
    this._start = this.moment(this._start.valueOf());
    this._end = this.moment(this._end.valueOf());
  };
  /**
   * Set custom formatting for the minor an major labels of the TimeStep.
   * Both `minorLabels` and `majorLabels` are an Object with properties:
   * 'millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'quarter', 'year'.
   * @param {{minorLabels: Object, majorLabels: Object}} format
   */


  TimeStep.prototype.setFormat = function (format) {
    var defaultFormat = util.deepExtend({}, TimeStep.FORMAT);
    this.format = util.deepExtend(defaultFormat, format);
  };
  /**
   * Set a new range
   * If minimumStep is provided, the step size is chosen as close as possible
   * to the minimumStep but larger than minimumStep. If minimumStep is not
   * provided, the scale is set to 1 DAY.
   * The minimumStep should correspond with the onscreen size of about 6 characters
   * @param {Date} [start]      The start date and time.
   * @param {Date} [end]        The end date and time.
   * @param {int} [minimumStep] Optional. Minimum step size in milliseconds
   */


  TimeStep.prototype.setRange = function (start, end, minimumStep) {
    if (!(start instanceof Date) || !(end instanceof Date)) {
      throw "No legal start or end date in method setRange";
    }

    this._start = start != undefined ? this.moment(start.valueOf()) : new Date();
    this._end = end != undefined ? this.moment(end.valueOf()) : new Date();

    if (this.autoScale) {
      this.setMinimumStep(minimumStep);
    }
  };
  /**
   * Set the range iterator to the start date.
   */


  TimeStep.prototype.start = function () {
    this.current = this._start.clone();
    this.roundToMinor();
  };
  /**
   * Round the current date to the first minor date value
   * This must be executed once when the current date is set to start Date
   */


  TimeStep.prototype.roundToMinor = function () {
    // round to floor
    // to prevent year & month scales rounding down to the first day of week we perform this separately
    if (this.scale == 'week') {
      this.current.weekday(0);
    } // IMPORTANT: we have no breaks in this switch! (this is no bug)
    // noinspection FallThroughInSwitchStatementJS


    switch (this.scale) {
      case 'year':
        this.current.year(this.step * Math.floor(this.current.year() / this.step));
        this.current.month(0);

      case 'quarter':
        this.current.month(0);
      // eslint-disable-line no-fallthrough

      case 'month':
        this.current.date(1);
      // eslint-disable-line no-fallthrough

      case 'week': // eslint-disable-line no-fallthrough

      case 'day': // eslint-disable-line no-fallthrough

      case 'weekday':
        this.current.hours(0);
      // eslint-disable-line no-fallthrough

      case 'hour':
        this.current.minutes(0);
      // eslint-disable-line no-fallthrough

      case 'minute':
        this.current.seconds(0);
      // eslint-disable-line no-fallthrough

      case 'second':
        this.current.milliseconds(0);
      // eslint-disable-line no-fallthrough
      //case 'millisecond': // nothing to do for milliseconds
    }

    if (this.step != 1) {
      // round down to the first minor value that is a multiple of the current step size
      switch (this.scale) {
        case 'millisecond':
          this.current.subtract(this.current.milliseconds() % this.step, 'milliseconds');
          break;

        case 'second':
          this.current.subtract(this.current.seconds() % this.step, 'seconds');
          break;

        case 'minute':
          this.current.subtract(this.current.minutes() % this.step, 'minutes');
          break;

        case 'hour':
          this.current.subtract(this.current.hours() % this.step, 'hours');
          break;

        case 'weekday': // intentional fall through

        case 'day':
          this.current.subtract((this.current.date() - 1) % this.step, 'day');
          break;

        case 'week':
          this.current.subtract(this.current.week() % this.step, 'week');
          break;

        case 'month':
          this.current.subtract(this.current.month() % this.step, 'month');
          break;

        case 'quarter':
          this.current.subtract((this.current.quarter() - 1) % this.step, 'quarter');
          break;

        case 'year':
          this.current.subtract(this.current.year() % this.step, 'year');
          break;
      }
    }
  };
  /**
   * Check if the there is a next step
   * @return {boolean}  true if the current date has not passed the end date
   */


  TimeStep.prototype.hasNext = function () {
    return this.current.valueOf() <= this._end.valueOf();
  };
  /**
   * Do the next step
   */


  TimeStep.prototype.next = function () {
    var prev = this.current.valueOf(); // Two cases, needed to prevent issues with switching daylight savings
    // (end of March and end of October)

    switch (this.scale) {
      case 'millisecond':
        this.current.add(this.step, 'millisecond');
        break;

      case 'second':
        this.current.add(this.step, 'second');
        break;

      case 'minute':
        this.current.add(this.step, 'minute');
        break;

      case 'hour':
        this.current.add(this.step, 'hour');

        if (this.current.month() < 6) {
          this.current.subtract(this.current.hours() % this.step, 'hour');
        } else {
          if (this.current.hours() % this.step !== 0) {
            this.current.add(this.step - this.current.hours() % this.step, 'hour');
          }
        }

        break;

      case 'weekday': // intentional fall through

      case 'day':
        this.current.add(this.step, 'day');
        break;

      case 'week':
        if (this.current.weekday() !== 0) {
          // we had a month break not correlating with a week's start before
          this.current.weekday(0); // switch back to week cycles

          this.current.add(this.step, 'week');
        } else if (this.options.showMajorLabels === false) {
          this.current.add(this.step, 'week'); // the default case
        } else {
          // first day of the week
          var nextWeek = this.current.clone();
          nextWeek.add(1, 'week');

          if (nextWeek.isSame(this.current, 'month')) {
            // is the first day of the next week in the same month?
            this.current.add(this.step, 'week'); // the default case
          } else {
            // inject a step at each first day of the month
            this.current.add(this.step, 'week');
            this.current.date(1);
          }
        }

        break;

      case 'month':
        this.current.add(this.step, 'month');
        break;

      case 'quarter':
        this.current.add(this.step, 'quarter');
        break;

      case 'year':
        this.current.add(this.step, 'year');
        break;
    }

    if (this.step != 1) {
      // round down to the correct major value
      switch (this.scale) {
        case 'millisecond':
          if (this.current.milliseconds() > 0 && this.current.milliseconds() < this.step) this.current.milliseconds(0);
          break;

        case 'second':
          if (this.current.seconds() > 0 && this.current.seconds() < this.step) this.current.seconds(0);
          break;

        case 'minute':
          if (this.current.minutes() > 0 && this.current.minutes() < this.step) this.current.minutes(0);
          break;

        case 'hour':
          if (this.current.hours() > 0 && this.current.hours() < this.step) this.current.hours(0);
          break;

        case 'weekday': // intentional fall through

        case 'day':
          if (this.current.date() < this.step + 1) this.current.date(1);
          break;

        case 'week':
          if (this.current.week() < this.step) this.current.week(1);
          break;
        // week numbering starts at 1, not 0

        case 'month':
          if (this.current.month() < this.step) this.current.month(0);
          break;

        case 'quarter':
          if (this.current.quarter() < this.step + 1) this.current.quarter(1);
          break;
      }
    } // safety mechanism: if current time is still unchanged, move to the end


    if (this.current.valueOf() == prev) {
      this.current = this._end.clone();
    } // Reset switches for year, month and day. Will get set to true where appropriate in DateUtil.stepOverHiddenDates


    this.switchedDay = false;
    this.switchedMonth = false;
    this.switchedYear = false;
    DateUtil.stepOverHiddenDates(this.moment, this, prev);
  };
  /**
   * Get the current datetime
   * @return {Moment}  current The current date
   */


  TimeStep.prototype.getCurrent = function () {
    return this.current.clone();
  };
  /**
   * Set a custom scale. Autoscaling will be disabled.
   * For example setScale('minute', 5) will result
   * in minor steps of 5 minutes, and major steps of an hour.
   *
   * @param {{scale: string, step: number}} params
   *                               An object containing two properties:
   *                               - A string 'scale'. Choose from 'millisecond', 'second',
   *                                 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'quarter, 'year'.
   *                               - A number 'step'. A step size, by default 1.
   *                                 Choose for example 1, 2, 5, or 10.
   */


  TimeStep.prototype.setScale = function (params) {
    if (params && typeof params.scale == 'string') {
      this.scale = params.scale;
      this.step = params.step > 0 ? params.step : 1;
      this.autoScale = false;
    }
  };
  /**
   * Enable or disable autoscaling
   * @param {boolean} enable  If true, autoascaling is set true
   */


  TimeStep.prototype.setAutoScale = function (enable) {
    this.autoScale = enable;
  };
  /**
   * Automatically determine the scale that bests fits the provided minimum step
   * @param {number} [minimumStep]  The minimum step size in milliseconds
   */


  TimeStep.prototype.setMinimumStep = function (minimumStep) {
    if (minimumStep == undefined) {
      return;
    } //var b = asc + ds;


    var stepYear = 1000 * 60 * 60 * 24 * 30 * 12;
    var stepQuarter = 1000 * 60 * 60 * 24 * 30 * 3;
    var stepMonth = 1000 * 60 * 60 * 24 * 30;
    var stepDay = 1000 * 60 * 60 * 24;
    var stepHour = 1000 * 60 * 60;
    var stepMinute = 1000 * 60;
    var stepSecond = 1000;
    var stepMillisecond = 1; // find the smallest step that is larger than the provided minimumStep

    if (stepYear * 1000 > minimumStep) {
      this.scale = 'year';
      this.step = 1000;
    }

    if (stepYear * 500 > minimumStep) {
      this.scale = 'year';
      this.step = 500;
    }

    if (stepYear * 100 > minimumStep) {
      this.scale = 'year';
      this.step = 100;
    }

    if (stepYear * 50 > minimumStep) {
      this.scale = 'year';
      this.step = 50;
    }

    if (stepYear * 10 > minimumStep) {
      this.scale = 'year';
      this.step = 10;
    }

    if (stepYear * 5 > minimumStep) {
      this.scale = 'year';
      this.step = 5;
    }

    if (stepYear > minimumStep) {
      this.scale = 'year';
      this.step = 1;
    }

    if (stepQuarter > minimumStep) {
      this.scale = 'quarter';
      this.step = 1;
    }

    if (stepMonth > minimumStep) {
      this.scale = 'month';
      this.step = 1;
    }

    if (stepDay * 7 > minimumStep) {
      this.scale = 'week';
      this.step = 1;
    }

    if (stepDay * 2 > minimumStep) {
      this.scale = 'day';
      this.step = 2;
    }

    if (stepDay > minimumStep) {
      this.scale = 'day';
      this.step = 1;
    }

    if (stepDay / 2 > minimumStep) {
      this.scale = 'weekday';
      this.step = 1;
    }

    if (stepHour * 4 > minimumStep) {
      this.scale = 'hour';
      this.step = 4;
    }

    if (stepHour > minimumStep) {
      this.scale = 'hour';
      this.step = 1;
    }

    if (stepMinute * 15 > minimumStep) {
      this.scale = 'minute';
      this.step = 15;
    }

    if (stepMinute * 10 > minimumStep) {
      this.scale = 'minute';
      this.step = 10;
    }

    if (stepMinute * 5 > minimumStep) {
      this.scale = 'minute';
      this.step = 5;
    }

    if (stepMinute > minimumStep) {
      this.scale = 'minute';
      this.step = 1;
    }

    if (stepSecond * 15 > minimumStep) {
      this.scale = 'second';
      this.step = 15;
    }

    if (stepSecond * 10 > minimumStep) {
      this.scale = 'second';
      this.step = 10;
    }

    if (stepSecond * 5 > minimumStep) {
      this.scale = 'second';
      this.step = 5;
    }

    if (stepSecond > minimumStep) {
      this.scale = 'second';
      this.step = 1;
    }

    if (stepMillisecond * 200 > minimumStep) {
      this.scale = 'millisecond';
      this.step = 200;
    }

    if (stepMillisecond * 100 > minimumStep) {
      this.scale = 'millisecond';
      this.step = 100;
    }

    if (stepMillisecond * 50 > minimumStep) {
      this.scale = 'millisecond';
      this.step = 50;
    }

    if (stepMillisecond * 10 > minimumStep) {
      this.scale = 'millisecond';
      this.step = 10;
    }

    if (stepMillisecond * 5 > minimumStep) {
      this.scale = 'millisecond';
      this.step = 5;
    }

    if (stepMillisecond > minimumStep) {
      this.scale = 'millisecond';
      this.step = 1;
    }
  };
  /**
   * Snap a date to a rounded value.
   * The snap intervals are dependent on the current scale and step.
   * Static function
   * @param {Date} date    the date to be snapped.
   * @param {string} scale Current scale, can be 'millisecond', 'second',
   *                       'minute', 'hour', 'weekday, 'day', 'week', 'month', 'quarter', 'year'.
   * @param {number} step  Current step (1, 2, 4, 5, ...
   * @return {Date} snappedDate
   */


  TimeStep.snap = function (date, scale, step) {
    var clone = moment$3(date);

    if (scale == 'year') {
      var year = clone.year() + Math.round(clone.month() / 12);
      clone.year(Math.round(year / step) * step);
      clone.month(0);
      clone.date(0);
      clone.hours(0);
      clone.minutes(0);
      clone.seconds(0);
      clone.milliseconds(0);
    } else if (scale == 'quarter') {
      if (clone.month() % 3 == 1 && clone.date() > 15 || clone.month() % 3 == 2) {
        clone.date(1);
        clone.month(Math.floor(clone.month() / 3) * 3);
        clone.add(1, 'quarter'); // important: first set Date to 1, after that change the month and the quarter.
      } else {
        clone.date(1);
        clone.month(Math.floor(clone.month() / 3) * 3);
      }

      clone.hours(0);
      clone.minutes(0);
      clone.seconds(0);
      clone.milliseconds(0);
    } else if (scale == 'month') {
      if (clone.date() > 15) {
        clone.date(1);
        clone.add(1, 'month'); // important: first set Date to 1, after that change the month.
      } else {
        clone.date(1);
      }

      clone.hours(0);
      clone.minutes(0);
      clone.seconds(0);
      clone.milliseconds(0);
    } else if (scale == 'week') {
      if (clone.weekday() > 2) {
        // doing it the momentjs locale aware way
        clone.weekday(0);
        clone.add(1, 'week');
      } else {
        clone.weekday(0);
      }

      clone.hours(0);
      clone.minutes(0);
      clone.seconds(0);
      clone.milliseconds(0);
    } else if (scale == 'day') {
      //noinspection FallthroughInSwitchStatementJS
      switch (step) {
        case 5:
        case 2:
          clone.hours(Math.round(clone.hours() / 24) * 24);
          break;

        default:
          clone.hours(Math.round(clone.hours() / 12) * 12);
          break;
      }

      clone.minutes(0);
      clone.seconds(0);
      clone.milliseconds(0);
    } else if (scale == 'weekday') {
      //noinspection FallthroughInSwitchStatementJS
      switch (step) {
        case 5:
        case 2:
          clone.hours(Math.round(clone.hours() / 12) * 12);
          break;

        default:
          clone.hours(Math.round(clone.hours() / 6) * 6);
          break;
      }

      clone.minutes(0);
      clone.seconds(0);
      clone.milliseconds(0);
    } else if (scale == 'hour') {
      switch (step) {
        case 4:
          clone.minutes(Math.round(clone.minutes() / 60) * 60);
          break;

        default:
          clone.minutes(Math.round(clone.minutes() / 30) * 30);
          break;
      }

      clone.seconds(0);
      clone.milliseconds(0);
    } else if (scale == 'minute') {
      //noinspection FallthroughInSwitchStatementJS
      switch (step) {
        case 15:
        case 10:
          clone.minutes(Math.round(clone.minutes() / 5) * 5);
          clone.seconds(0);
          break;

        case 5:
          clone.seconds(Math.round(clone.seconds() / 60) * 60);
          break;

        default:
          clone.seconds(Math.round(clone.seconds() / 30) * 30);
          break;
      }

      clone.milliseconds(0);
    } else if (scale == 'second') {
      //noinspection FallthroughInSwitchStatementJS
      switch (step) {
        case 15:
        case 10:
          clone.seconds(Math.round(clone.seconds() / 5) * 5);
          clone.milliseconds(0);
          break;

        case 5:
          clone.milliseconds(Math.round(clone.milliseconds() / 1000) * 1000);
          break;

        default:
          clone.milliseconds(Math.round(clone.milliseconds() / 500) * 500);
          break;
      }
    } else if (scale == 'millisecond') {
      var _step = step > 5 ? step / 2 : 1;

      clone.milliseconds(Math.round(clone.milliseconds() / _step) * _step);
    }

    return clone;
  };
  /**
   * Check if the current value is a major value (for example when the step
   * is DAY, a major value is each first day of the MONTH)
   * @return {boolean} true if current date is major, else false.
   */


  TimeStep.prototype.isMajor = function () {
    if (this.switchedYear == true) {
      switch (this.scale) {
        case 'year':
        case 'quarter':
        case 'month':
        case 'week':
        case 'weekday':
        case 'day':
        case 'hour':
        case 'minute':
        case 'second':
        case 'millisecond':
          return true;

        default:
          return false;
      }
    } else if (this.switchedMonth == true) {
      switch (this.scale) {
        case 'week':
        case 'weekday':
        case 'day':
        case 'hour':
        case 'minute':
        case 'second':
        case 'millisecond':
          return true;

        default:
          return false;
      }
    } else if (this.switchedDay == true) {
      switch (this.scale) {
        case 'millisecond':
        case 'second':
        case 'minute':
        case 'hour':
          return true;

        default:
          return false;
      }
    }

    var date = this.moment(this.current);

    switch (this.scale) {
      case 'millisecond':
        return date.milliseconds() == 0;

      case 'second':
        return date.seconds() == 0;

      case 'minute':
        return date.hours() == 0 && date.minutes() == 0;

      case 'hour':
        return date.hours() == 0;

      case 'weekday': // intentional fall through

      case 'day':
        return date.date() == 1;

      case 'week':
        return date.date() == 1;

      case 'month':
        return date.month() == 0;

      case 'quarter':
        return date.quarter() == 1;

      case 'year':
        return false;

      default:
        return false;
    }
  };
  /**
   * Returns formatted text for the minor axislabel, depending on the current
   * date and the scale. For example when scale is MINUTE, the current time is
   * formatted as "hh:mm".
   * @param {Date} [date=this.current] custom date. if not provided, current date is taken
   * @returns {String}
   */


  TimeStep.prototype.getLabelMinor = function (date) {
    if (date == undefined) {
      date = this.current;
    }

    if (date instanceof Date) {
      date = this.moment(date);
    }

    if (typeof this.format.minorLabels === "function") {
      return this.format.minorLabels(date, this.scale, this.step);
    }

    var format = this.format.minorLabels[this.scale]; // noinspection FallThroughInSwitchStatementJS

    switch (this.scale) {
      case 'week':
        if (this.isMajor() && date.weekday() !== 0) {
          return "";
        }

      default:
        // eslint-disable-line no-fallthrough
        return format && format.length > 0 ? this.moment(date).format(format) : '';
    }
  };
  /**
   * Returns formatted text for the major axis label, depending on the current
   * date and the scale. For example when scale is MINUTE, the major scale is
   * hours, and the hour will be formatted as "hh".
   * @param {Date} [date=this.current] custom date. if not provided, current date is taken
   * @returns {String}
   */


  TimeStep.prototype.getLabelMajor = function (date) {
    if (date == undefined) {
      date = this.current;
    }

    if (date instanceof Date) {
      date = this.moment(date);
    }

    if (typeof this.format.majorLabels === "function") {
      return this.format.majorLabels(date, this.scale, this.step);
    }

    var format = this.format.majorLabels[this.scale];
    return format && format.length > 0 ? this.moment(date).format(format) : '';
  };

  TimeStep.prototype.getClassName = function () {
    var _moment = this.moment;
    var m = this.moment(this.current);
    var current = m.locale ? m.locale('en') : m.lang('en'); // old versions of moment have .lang() function

    var step = this.step;
    var classNames = [];
    /**
     *
     * @param {number} value
     * @returns {String}
     */

    function even(value) {
      return value / step % 2 == 0 ? ' vis-even' : ' vis-odd';
    }
    /**
     *
     * @param {Date} date
     * @returns {String}
     */


    function today(date) {
      if (date.isSame(new Date(), 'day')) {
        return ' vis-today';
      }

      if (date.isSame(_moment().add(1, 'day'), 'day')) {
        return ' vis-tomorrow';
      }

      if (date.isSame(_moment().add(-1, 'day'), 'day')) {
        return ' vis-yesterday';
      }

      return '';
    }
    /**
     *
     * @param {Date} date
     * @returns {String}
     */


    function currentWeek(date) {
      return date.isSame(new Date(), 'week') ? ' vis-current-week' : '';
    }
    /**
     *
     * @param {Date} date
     * @returns {String}
     */


    function currentMonth(date) {
      return date.isSame(new Date(), 'month') ? ' vis-current-month' : '';
    }
    /**
     *
     * @param {Date} date
     * @returns {String}
     */


    function currentQuarter(date) {
      return date.isSame(new Date(), 'quarter') ? ' vis-current-quarter' : '';
    }
    /**
     *
     * @param {Date} date
     * @returns {String}
     */


    function currentYear(date) {
      return date.isSame(new Date(), 'year') ? ' vis-current-year' : '';
    }

    switch (this.scale) {
      case 'millisecond':
        classNames.push(today(current));
        classNames.push(even(current.milliseconds()));
        break;

      case 'second':
        classNames.push(today(current));
        classNames.push(even(current.seconds()));
        break;

      case 'minute':
        classNames.push(today(current));
        classNames.push(even(current.minutes()));
        break;

      case 'hour':
        classNames.push('vis-h' + current.hours() + (this.step == 4 ? '-h' + (current.hours() + 4) : ''));
        classNames.push(today(current));
        classNames.push(even(current.hours()));
        break;

      case 'weekday':
        classNames.push('vis-' + current.format('dddd').toLowerCase());
        classNames.push(today(current));
        classNames.push(currentWeek(current));
        classNames.push(even(current.date()));
        break;

      case 'day':
        classNames.push('vis-day' + current.date());
        classNames.push('vis-' + current.format('MMMM').toLowerCase());
        classNames.push(today(current));
        classNames.push(currentMonth(current));
        classNames.push(this.step <= 2 ? today(current) : '');
        classNames.push(this.step <= 2 ? 'vis-' + current.format('dddd').toLowerCase() : '');
        classNames.push(even(current.date() - 1));
        break;

      case 'week':
        classNames.push('vis-week' + current.format('w'));
        classNames.push(currentWeek(current));
        classNames.push(even(current.week()));
        break;

      case 'month':
        classNames.push('vis-' + current.format('MMMM').toLowerCase());
        classNames.push(currentMonth(current));
        classNames.push(even(current.month()));
        break;

      case 'quarter':
        classNames.push('vis-q' + current.quarter());
        classNames.push(currentQuarter(current));
        classNames.push(even(current.quarter()));
        break;

      case 'year':
        classNames.push('vis-year' + current.year());
        classNames.push(currentYear(current));
        classNames.push(even(current.year()));
        break;
    }

    return classNames.filter(String).join(" ");
  };

  var TimeStep_1 = TimeStep;

  /**
   * A horizontal time axis
   * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} body
   * @param {Object} [options]        See TimeAxis.setOptions for the available
   *                                  options.
   * @constructor TimeAxis
   * @extends Component
   */

  function TimeAxis(body, options) {
    this.dom = {
      foreground: null,
      lines: [],
      majorTexts: [],
      minorTexts: [],
      redundant: {
        lines: [],
        majorTexts: [],
        minorTexts: []
      }
    };
    this.props = {
      range: {
        start: 0,
        end: 0,
        minimumStep: 0
      },
      lineTop: 0
    };
    this.defaultOptions = {
      orientation: {
        axis: 'bottom'
      },
      // axis orientation: 'top' or 'bottom'
      showMinorLabels: true,
      showMajorLabels: true,
      maxMinorChars: 7,
      format: TimeStep_1.FORMAT,
      moment: moment$3,
      timeAxis: null
    };
    this.options = util.extend({}, this.defaultOptions);
    this.body = body; // create the HTML DOM

    this._create();

    this.setOptions(options);
  }

  TimeAxis.prototype = new Component_1();
  /**
   * Set options for the TimeAxis.
   * Parameters will be merged in current options.
   * @param {Object} options  Available options:
   *                          {string} [orientation.axis]
   *                          {boolean} [showMinorLabels]
   *                          {boolean} [showMajorLabels]
   */

  TimeAxis.prototype.setOptions = function (options) {
    if (options) {
      // copy all options that we know
      util.selectiveExtend(['showMinorLabels', 'showMajorLabels', 'maxMinorChars', 'hiddenDates', 'timeAxis', 'moment', 'rtl'], this.options, options); // deep copy the format options

      util.selectiveDeepExtend(['format'], this.options, options);

      if ('orientation' in options) {
        if (typeof options.orientation === 'string') {
          this.options.orientation.axis = options.orientation;
        } else if (typeof options.orientation === 'object' && 'axis' in options.orientation) {
          this.options.orientation.axis = options.orientation.axis;
        }
      } // apply locale to moment.js
      // TODO: not so nice, this is applied globally to moment.js


      if ('locale' in options) {
        if (typeof moment$3.locale === 'function') {
          // moment.js 2.8.1+
          moment$3.locale(options.locale);
        } else {
          moment$3.lang(options.locale);
        }
      }
    }
  };
  /**
   * Create the HTML DOM for the TimeAxis
   */


  TimeAxis.prototype._create = function () {
    this.dom.foreground = document.createElement('div');
    this.dom.background = document.createElement('div');
    this.dom.foreground.className = 'vis-time-axis vis-foreground';
    this.dom.background.className = 'vis-time-axis vis-background';
  };
  /**
   * Destroy the TimeAxis
   */


  TimeAxis.prototype.destroy = function () {
    // remove from DOM
    if (this.dom.foreground.parentNode) {
      this.dom.foreground.parentNode.removeChild(this.dom.foreground);
    }

    if (this.dom.background.parentNode) {
      this.dom.background.parentNode.removeChild(this.dom.background);
    }

    this.body = null;
  };
  /**
   * Repaint the component
   * @return {boolean} Returns true if the component is resized
   */


  TimeAxis.prototype.redraw = function () {
    var props = this.props;
    var foreground = this.dom.foreground;
    var background = this.dom.background; // determine the correct parent DOM element (depending on option orientation)

    var parent = this.options.orientation.axis == 'top' ? this.body.dom.top : this.body.dom.bottom;
    var parentChanged = foreground.parentNode !== parent; // calculate character width and height

    this._calculateCharSize(); // TODO: recalculate sizes only needed when parent is resized or options is changed


    var showMinorLabels = this.options.showMinorLabels && this.options.orientation.axis !== 'none';
    var showMajorLabels = this.options.showMajorLabels && this.options.orientation.axis !== 'none'; // determine the width and height of the elemens for the axis

    props.minorLabelHeight = showMinorLabels ? props.minorCharHeight : 0;
    props.majorLabelHeight = showMajorLabels ? props.majorCharHeight : 0;
    props.height = props.minorLabelHeight + props.majorLabelHeight;
    props.width = foreground.offsetWidth;
    props.minorLineHeight = this.body.domProps.root.height - props.majorLabelHeight - (this.options.orientation.axis == 'top' ? this.body.domProps.bottom.height : this.body.domProps.top.height);
    props.minorLineWidth = 1; // TODO: really calculate width

    props.majorLineHeight = props.minorLineHeight + props.majorLabelHeight;
    props.majorLineWidth = 1; // TODO: really calculate width
    //  take foreground and background offline while updating (is almost twice as fast)

    var foregroundNextSibling = foreground.nextSibling;
    var backgroundNextSibling = background.nextSibling;
    foreground.parentNode && foreground.parentNode.removeChild(foreground);
    background.parentNode && background.parentNode.removeChild(background);
    foreground.style.height = this.props.height + 'px';

    this._repaintLabels(); // put DOM online again (at the same place)


    if (foregroundNextSibling) {
      parent.insertBefore(foreground, foregroundNextSibling);
    } else {
      parent.appendChild(foreground);
    }

    if (backgroundNextSibling) {
      this.body.dom.backgroundVertical.insertBefore(background, backgroundNextSibling);
    } else {
      this.body.dom.backgroundVertical.appendChild(background);
    }

    return this._isResized() || parentChanged;
  };
  /**
   * Repaint major and minor text labels and vertical grid lines
   * @private
   */


  TimeAxis.prototype._repaintLabels = function () {
    var orientation = this.options.orientation.axis; // calculate range and step (step such that we have space for 7 characters per label)

    var start = util.convert(this.body.range.start, 'Number');
    var end = util.convert(this.body.range.end, 'Number');
    var timeLabelsize = this.body.util.toTime((this.props.minorCharWidth || 10) * this.options.maxMinorChars).valueOf();
    var minimumStep = timeLabelsize - DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this.body.range, timeLabelsize);
    minimumStep -= this.body.util.toTime(0).valueOf();
    var step = new TimeStep_1(new Date(start), new Date(end), minimumStep, this.body.hiddenDates, this.options);
    step.setMoment(this.options.moment);

    if (this.options.format) {
      step.setFormat(this.options.format);
    }

    if (this.options.timeAxis) {
      step.setScale(this.options.timeAxis);
    }

    this.step = step; // Move all DOM elements to a "redundant" list, where they
    // can be picked for re-use, and clear the lists with lines and texts.
    // At the end of the function _repaintLabels, left over elements will be cleaned up

    var dom = this.dom;
    dom.redundant.lines = dom.lines;
    dom.redundant.majorTexts = dom.majorTexts;
    dom.redundant.minorTexts = dom.minorTexts;
    dom.lines = [];
    dom.majorTexts = [];
    dom.minorTexts = [];
    var current;
    var next;
    var x;
    var xNext;
    var isMajor;
    var showMinorGrid;
    var width = 0,
        prevWidth;
    var line;
    var xFirstMajorLabel = undefined;
    var count = 0;
    const MAX = 1000;
    var className;
    step.start();
    next = step.getCurrent();
    xNext = this.body.util.toScreen(next);

    while (step.hasNext() && count < MAX) {
      count++;
      isMajor = step.isMajor();
      className = step.getClassName();
      current = next;
      x = xNext;
      step.next();
      next = step.getCurrent();
      xNext = this.body.util.toScreen(next);
      prevWidth = width;
      width = xNext - x;

      switch (step.scale) {
        case 'week':
          showMinorGrid = true;
          break;

        default:
          showMinorGrid = width >= prevWidth * 0.4;
          break;
        // prevent displaying of the 31th of the month on a scale of 5 days
      }

      if (this.options.showMinorLabels && showMinorGrid) {
        var label = this._repaintMinorText(x, step.getLabelMinor(current), orientation, className);

        label.style.width = width + 'px'; // set width to prevent overflow
      }

      if (isMajor && this.options.showMajorLabels) {
        if (x > 0) {
          if (xFirstMajorLabel == undefined) {
            xFirstMajorLabel = x;
          }

          label = this._repaintMajorText(x, step.getLabelMajor(current), orientation, className);
        }

        line = this._repaintMajorLine(x, width, orientation, className);
      } else {
        // minor line
        if (showMinorGrid) {
          line = this._repaintMinorLine(x, width, orientation, className);
        } else {
          if (line) {
            // adjust the width of the previous grid
            line.style.width = parseInt(line.style.width) + width + 'px';
          }
        }
      }
    }

    if (count === MAX && !warnedForOverflow) {
      console.warn(`Something is wrong with the Timeline scale. Limited drawing of grid lines to ${MAX} lines.`);
      warnedForOverflow = true;
    } // create a major label on the left when needed


    if (this.options.showMajorLabels) {
      var leftTime = this.body.util.toTime(0),
          leftText = step.getLabelMajor(leftTime),
          widthText = leftText.length * (this.props.majorCharWidth || 10) + 10; // upper bound estimation

      if (xFirstMajorLabel == undefined || widthText < xFirstMajorLabel) {
        this._repaintMajorText(0, leftText, orientation, className);
      }
    } // Cleanup leftover DOM elements from the redundant list


    util.forEach(this.dom.redundant, function (arr) {
      while (arr.length) {
        var elem = arr.pop();

        if (elem && elem.parentNode) {
          elem.parentNode.removeChild(elem);
        }
      }
    });
  };
  /**
   * Create a minor label for the axis at position x
   * @param {number} x
   * @param {string} text
   * @param {string} orientation   "top" or "bottom" (default)
   * @param {string} className
   * @return {Element} Returns the HTML element of the created label
   * @private
   */


  TimeAxis.prototype._repaintMinorText = function (x, text, orientation, className) {
    // reuse redundant label
    var label = this.dom.redundant.minorTexts.shift();

    if (!label) {
      // create new label
      var content = document.createTextNode('');
      label = document.createElement('div');
      label.appendChild(content);
      this.dom.foreground.appendChild(label);
    }

    this.dom.minorTexts.push(label);
    label.innerHTML = text;
    label.style.top = orientation == 'top' ? this.props.majorLabelHeight + 'px' : '0';

    if (this.options.rtl) {
      label.style.left = "";
      label.style.right = x + 'px';
    } else {
      label.style.left = x + 'px';
    }

    label.className = 'vis-text vis-minor ' + className; //label.title = title;  // TODO: this is a heavy operation

    return label;
  };
  /**
   * Create a Major label for the axis at position x
   * @param {number} x
   * @param {string} text
   * @param {string} orientation   "top" or "bottom" (default)
   * @param {string} className
   * @return {Element} Returns the HTML element of the created label
   * @private
   */


  TimeAxis.prototype._repaintMajorText = function (x, text, orientation, className) {
    // reuse redundant label
    var label = this.dom.redundant.majorTexts.shift();

    if (!label) {
      // create label
      var content = document.createElement('div');
      label = document.createElement('div');
      label.appendChild(content);
      this.dom.foreground.appendChild(label);
    }

    label.childNodes[0].innerHTML = text;
    label.className = 'vis-text vis-major ' + className; //label.title = title; // TODO: this is a heavy operation

    label.style.top = orientation == 'top' ? '0' : this.props.minorLabelHeight + 'px';

    if (this.options.rtl) {
      label.style.left = "";
      label.style.right = x + 'px';
    } else {
      label.style.left = x + 'px';
    }

    this.dom.majorTexts.push(label);
    return label;
  };
  /**
   * Create a minor line for the axis at position x
   * @param {number} x
   * @param {number} width
   * @param {string} orientation   "top" or "bottom" (default)
   * @param {string} className
   * @return {Element} Returns the created line
   * @private
   */


  TimeAxis.prototype._repaintMinorLine = function (x, width, orientation, className) {
    // reuse redundant line
    var line = this.dom.redundant.lines.shift();

    if (!line) {
      // create vertical line
      line = document.createElement('div');
      this.dom.background.appendChild(line);
    }

    this.dom.lines.push(line);
    var props = this.props;

    if (orientation == 'top') {
      line.style.top = props.majorLabelHeight + 'px';
    } else {
      line.style.top = this.body.domProps.top.height + 'px';
    }

    line.style.height = props.minorLineHeight + 'px';

    if (this.options.rtl) {
      line.style.left = "";
      line.style.right = x - props.minorLineWidth / 2 + 'px';
      line.className = 'vis-grid vis-vertical-rtl vis-minor ' + className;
    } else {
      line.style.left = x - props.minorLineWidth / 2 + 'px';
      line.className = 'vis-grid vis-vertical vis-minor ' + className;
    }

    line.style.width = width + 'px';
    return line;
  };
  /**
   * Create a Major line for the axis at position x
   * @param {number} x
   * @param {number} width
   * @param {string} orientation   "top" or "bottom" (default)
   * @param {string} className
   * @return {Element} Returns the created line
   * @private
   */


  TimeAxis.prototype._repaintMajorLine = function (x, width, orientation, className) {
    // reuse redundant line
    var line = this.dom.redundant.lines.shift();

    if (!line) {
      // create vertical line
      line = document.createElement('div');
      this.dom.background.appendChild(line);
    }

    this.dom.lines.push(line);
    var props = this.props;

    if (orientation == 'top') {
      line.style.top = '0';
    } else {
      line.style.top = this.body.domProps.top.height + 'px';
    }

    if (this.options.rtl) {
      line.style.left = "";
      line.style.right = x - props.majorLineWidth / 2 + 'px';
      line.className = 'vis-grid vis-vertical-rtl vis-major ' + className;
    } else {
      line.style.left = x - props.majorLineWidth / 2 + 'px';
      line.className = 'vis-grid vis-vertical vis-major ' + className;
    }

    line.style.height = props.majorLineHeight + 'px';
    line.style.width = width + 'px';
    return line;
  };
  /**
   * Determine the size of text on the axis (both major and minor axis).
   * The size is calculated only once and then cached in this.props.
   * @private
   */


  TimeAxis.prototype._calculateCharSize = function () {
    // Note: We calculate char size with every redraw. Size may change, for
    // example when any of the timelines parents had display:none for example.
    // determine the char width and height on the minor axis
    if (!this.dom.measureCharMinor) {
      this.dom.measureCharMinor = document.createElement('DIV');
      this.dom.measureCharMinor.className = 'vis-text vis-minor vis-measure';
      this.dom.measureCharMinor.style.position = 'absolute';
      this.dom.measureCharMinor.appendChild(document.createTextNode('0'));
      this.dom.foreground.appendChild(this.dom.measureCharMinor);
    }

    this.props.minorCharHeight = this.dom.measureCharMinor.clientHeight;
    this.props.minorCharWidth = this.dom.measureCharMinor.clientWidth; // determine the char width and height on the major axis

    if (!this.dom.measureCharMajor) {
      this.dom.measureCharMajor = document.createElement('DIV');
      this.dom.measureCharMajor.className = 'vis-text vis-major vis-measure';
      this.dom.measureCharMajor.style.position = 'absolute';
      this.dom.measureCharMajor.appendChild(document.createTextNode('0'));
      this.dom.foreground.appendChild(this.dom.measureCharMajor);
    }

    this.props.majorCharHeight = this.dom.measureCharMajor.clientHeight;
    this.props.majorCharWidth = this.dom.measureCharMajor.clientWidth;
  };

  var warnedForOverflow = false;

  /**
   * Turn an element into an clickToUse element.
   * When not active, the element has a transparent overlay. When the overlay is
   * clicked, the mode is changed to active.
   * When active, the element is displayed with a blue border around it, and
   * the interactive contents of the element can be used. When clicked outside
   * the element, the elements mode is changed to inactive.
   * @param {Element} container
   * @constructor Activator
   */

  function Activator(container) {
    this.active = false;
    this.dom = {
      container: container
    };
    this.dom.overlay = document.createElement('div');
    this.dom.overlay.className = 'vis-overlay';
    this.dom.container.appendChild(this.dom.overlay);
    this.hammer = hammer$2(this.dom.overlay);
    this.hammer.on('tap', this._onTapOverlay.bind(this)); // block all touch events (except tap)

    var me = this;
    var events = ['tap', 'doubletap', 'press', 'pinch', 'pan', 'panstart', 'panmove', 'panend'];
    events.forEach(function (event) {
      me.hammer.on(event, function (event) {
        event.stopPropagation();
      });
    }); // attach a click event to the window, in order to deactivate when clicking outside the timeline

    if (document && document.body) {
      this.onClick = function (event) {
        if (!_hasParent(event.target, container)) {
          me.deactivate();
        }
      };

      document.body.addEventListener('click', this.onClick);
    }

    if (this.keycharm !== undefined) {
      this.keycharm.destroy();
    }

    this.keycharm = keycharm(); // keycharm listener only bounded when active)

    this.escListener = this.deactivate.bind(this);
  } // turn into an event emitter


  emitterComponent(Activator.prototype); // The currently active activator

  Activator.current = null;
  /**
   * Destroy the activator. Cleans up all created DOM and event listeners
   */

  Activator.prototype.destroy = function () {
    this.deactivate(); // remove dom

    this.dom.overlay.parentNode.removeChild(this.dom.overlay); // remove global event listener

    if (this.onClick) {
      document.body.removeEventListener('click', this.onClick);
    } // remove keycharm


    if (this.keycharm !== undefined) {
      this.keycharm.destroy();
    }

    this.keycharm = null; // cleanup hammer instances

    this.hammer.destroy();
    this.hammer = null; // FIXME: cleaning up hammer instances doesn't work (Timeline not removed from memory)
  };
  /**
   * Activate the element
   * Overlay is hidden, element is decorated with a blue shadow border
   */


  Activator.prototype.activate = function () {
    // we allow only one active activator at a time
    if (Activator.current) {
      Activator.current.deactivate();
    }

    Activator.current = this;
    this.active = true;
    this.dom.overlay.style.display = 'none';
    util.addClassName(this.dom.container, 'vis-active');
    this.emit('change');
    this.emit('activate'); // ugly hack: bind ESC after emitting the events, as the Network rebinds all
    // keyboard events on a 'change' event

    this.keycharm.bind('esc', this.escListener);
  };
  /**
   * Deactivate the element
   * Overlay is displayed on top of the element
   */


  Activator.prototype.deactivate = function () {
    this.active = false;
    this.dom.overlay.style.display = '';
    util.removeClassName(this.dom.container, 'vis-active');
    this.keycharm.unbind('esc', this.escListener);
    this.emit('change');
    this.emit('deactivate');
  };
  /**
   * Handle a tap event: activate the container
   * @param {Event}  event   The event
   * @private
   */


  Activator.prototype._onTapOverlay = function (event) {
    // activate the container
    this.activate();
    event.stopPropagation();
  };
  /**
   * Test whether the element has the requested parent element somewhere in
   * its chain of parent nodes.
   * @param {HTMLElement} element
   * @param {HTMLElement} parent
   * @returns {boolean} Returns true when the parent is found somewhere in the
   *                    chain of parent nodes.
   * @private
   */


  function _hasParent(element, parent) {
    while (element) {
      if (element === parent) {
        return true;
      }

      element = element.parentNode;
    }

    return false;
  }

  var locales = createCommonjsModule$2(function (module, exports) {
    // English
    exports['en'] = {
      current: 'current',
      time: 'time'
    };
    exports['en_EN'] = exports['en'];
    exports['en_US'] = exports['en']; // Italiano

    exports['it'] = {
      current: 'attuale',
      time: 'tempo'
    };
    exports['it_IT'] = exports['it'];
    exports['it_CH'] = exports['it']; // Dutch

    exports['nl'] = {
      current: 'huidige',
      time: 'tijd'
    };
    exports['nl_NL'] = exports['nl'];
    exports['nl_BE'] = exports['nl']; // German

    exports['de'] = {
      current: 'Aktuelle',
      time: 'Zeit'
    };
    exports['de_DE'] = exports['de']; // French

    exports['fr'] = {
      current: 'actuel',
      time: 'heure'
    };
    exports['fr_FR'] = exports['fr'];
    exports['fr_CA'] = exports['fr'];
    exports['fr_BE'] = exports['fr']; // Espanol

    exports['es'] = {
      current: 'corriente',
      time: 'hora'
    };
    exports['es_ES'] = exports['es']; // Ukrainian

    exports['uk'] = {
      current: 'Ð¿Ð¾ÑÐ¾ÑÐ½Ð¸Ð¹',
      time: 'ÑÐ°Ñ'
    };
    exports['uk_UA'] = exports['uk']; // Russian

    exports['ru'] = {
      current: 'ÑÐµÐºÑÑÐµÐµ',
      time: 'Ð²ÑÐµÐ¼Ñ'
    };
    exports['ru_RU'] = exports['ru'];
  });

  /**
   * A custom time bar
   * @param {{range: Range, dom: Object}} body
   * @param {Object} [options]        Available parameters:
   *                                  {number | string} id
   *                                  {string} locales
   *                                  {string} locale
   * @constructor CustomTime
   * @extends Component
   */

  function CustomTime(body, options) {
    this.body = body; // default options

    this.defaultOptions = {
      moment: moment$3,
      locales: locales,
      locale: 'en',
      id: undefined,
      title: undefined,
      editable: true
    };
    this.options = util.extend({}, this.defaultOptions);

    if (options && options.time) {
      this.customTime = options.time;
    } else {
      this.customTime = new Date();
    }

    this.eventParams = {}; // stores state parameters while dragging the bar

    this.setOptions(options); // create the DOM

    this._create();
  }

  CustomTime.prototype = new Component_1();
  /**
   * Set options for the component. Options will be merged in current options.
   * @param {Object} options  Available parameters:
   *                                  {number | string} id
   *                                  {string} locales
   *                                  {string} locale
   */

  CustomTime.prototype.setOptions = function (options) {
    if (options) {
      // copy all options that we know
      util.selectiveExtend(['moment', 'locale', 'locales', 'id', 'editable'], this.options, options);
    }
  };
  /**
   * Create the DOM for the custom time
   * @private
   */


  CustomTime.prototype._create = function () {
    var bar = document.createElement('div');
    bar['custom-time'] = this;
    bar.className = 'vis-custom-time ' + (!this.options.editable ? 'disabled ' : '') + (this.options.id || '');
    bar.style.position = 'absolute';
    bar.style.top = '0px';
    bar.style.height = '100%';
    this.bar = bar;
    var drag = document.createElement('div');
    drag.style.position = 'relative';
    drag.style.top = '0px';
    drag.style.left = '-10px';
    drag.style.height = '100%';
    drag.style.width = '20px';
    /**
     *
     * @param {WheelEvent} e
     */

    function onMouseWheel(e) {
      this.body.range._onMouseWheel(e);
    }

    if (drag.addEventListener) {
      // IE9, Chrome, Safari, Opera
      drag.addEventListener("mousewheel", onMouseWheel.bind(this), false); // Firefox

      drag.addEventListener("DOMMouseScroll", onMouseWheel.bind(this), false);
    } else {
      // IE 6/7/8
      drag.attachEvent("onmousewheel", onMouseWheel.bind(this));
    }

    bar.appendChild(drag); // if bar is editable by the user, attach drag handlers

    if (this.options.editable) {
      // attach event listeners
      this.hammer = new hammer$2(drag);
      this.hammer.on('panstart', this._onDragStart.bind(this));
      this.hammer.on('panmove', this._onDrag.bind(this));
      this.hammer.on('panend', this._onDragEnd.bind(this));
      this.hammer.get('pan').set({
        threshold: 5,
        direction: hammer$2.DIRECTION_HORIZONTAL
      });
    }
  };
  /**
   * Destroy the CustomTime bar
   */


  CustomTime.prototype.destroy = function () {
    this.hide();
    this.hammer.destroy();
    this.hammer = null;
    this.body = null;
  };
  /**
   * Repaint the component
   * @return {boolean} Returns true if the component is resized
   */


  CustomTime.prototype.redraw = function () {
    var parent = this.body.dom.backgroundVertical;

    if (this.bar.parentNode != parent) {
      // attach to the dom
      if (this.bar.parentNode) {
        this.bar.parentNode.removeChild(this.bar);
      }

      parent.appendChild(this.bar);
    }

    var x = this.body.util.toScreen(this.customTime);
    var locale = this.options.locales[this.options.locale];

    if (!locale) {
      if (!this.warned) {
        console.log('WARNING: options.locales[\'' + this.options.locale + '\'] not found. See http://visjs.org/docs/timeline/#Localization');
        this.warned = true;
      }

      locale = this.options.locales['en']; // fall back on english when not available
    }

    var title = this.options.title; // To hide the title completely use empty string ''.

    if (title === undefined) {
      title = locale.time + ': ' + this.options.moment(this.customTime).format('dddd, MMMM Do YYYY, H:mm:ss');
      title = title.charAt(0).toUpperCase() + title.substring(1);
    } else if (typeof title === "function") {
      title = title.call(this.customTime);
    }

    this.bar.style.left = x + 'px';
    this.bar.title = title;
    return false;
  };
  /**
   * Remove the CustomTime from the DOM
   */


  CustomTime.prototype.hide = function () {
    // remove the line from the DOM
    if (this.bar.parentNode) {
      this.bar.parentNode.removeChild(this.bar);
    }
  };
  /**
   * Set custom time.
   * @param {Date | number | string} time
   */


  CustomTime.prototype.setCustomTime = function (time) {
    this.customTime = util.convert(time, 'Date');
    this.redraw();
  };
  /**
   * Retrieve the current custom time.
   * @return {Date} customTime
   */


  CustomTime.prototype.getCustomTime = function () {
    return new Date(this.customTime.valueOf());
  };
  /**
    * Set custom title.
    * @param {Date | number | string} title
    */


  CustomTime.prototype.setCustomTitle = function (title) {
    this.options.title = title;
  };
  /**
   * Start moving horizontally
   * @param {Event} event
   * @private
   */


  CustomTime.prototype._onDragStart = function (event) {
    this.eventParams.dragging = true;
    this.eventParams.customTime = this.customTime;
    event.stopPropagation();
  };
  /**
   * Perform moving operating.
   * @param {Event} event
   * @private
   */


  CustomTime.prototype._onDrag = function (event) {
    if (!this.eventParams.dragging) return;
    var x = this.body.util.toScreen(this.eventParams.customTime) + event.deltaX;
    var time = this.body.util.toTime(x);
    this.setCustomTime(time); // fire a timechange event

    this.body.emitter.emit('timechange', {
      id: this.options.id,
      time: new Date(this.customTime.valueOf()),
      event: event
    });
    event.stopPropagation();
  };
  /**
   * Stop moving operating.
   * @param {Event} event
   * @private
   */


  CustomTime.prototype._onDragEnd = function (event) {
    if (!this.eventParams.dragging) return; // fire a timechanged event

    this.body.emitter.emit('timechanged', {
      id: this.options.id,
      time: new Date(this.customTime.valueOf()),
      event: event
    });
    event.stopPropagation();
  };
  /**
   * Find a custom time from an event target:
   * searches for the attribute 'custom-time' in the event target's element tree
   * @param {Event} event
   * @return {CustomTime | null} customTime
   */


  CustomTime.customTimeFromTarget = function (event) {
    var target = event.target;

    while (target) {
      if (target.hasOwnProperty('custom-time')) {
        return target['custom-time'];
      }

      target = target.parentNode;
    }

    return null;
  };

  /**
   * Create a timeline visualization
   * @constructor Core
   */

  function Core() {} // turn Core into an event emitter


  emitterComponent(Core.prototype);
  /**
   * Create the main DOM for the Core: a root panel containing left, right,
   * top, bottom, content, and background panel.
   * @param {Element} container  The container element where the Core will
   *                             be attached.
   * @protected
   */

  Core.prototype._create = function (container) {
    this.dom = {};
    this.dom.container = container;
    this.dom.container.style.position = 'relative';
    this.dom.root = document.createElement('div');
    this.dom.background = document.createElement('div');
    this.dom.backgroundVertical = document.createElement('div');
    this.dom.backgroundHorizontal = document.createElement('div');
    this.dom.centerContainer = document.createElement('div');
    this.dom.leftContainer = document.createElement('div');
    this.dom.rightContainer = document.createElement('div');
    this.dom.center = document.createElement('div');
    this.dom.left = document.createElement('div');
    this.dom.right = document.createElement('div');
    this.dom.top = document.createElement('div');
    this.dom.bottom = document.createElement('div');
    this.dom.shadowTop = document.createElement('div');
    this.dom.shadowBottom = document.createElement('div');
    this.dom.shadowTopLeft = document.createElement('div');
    this.dom.shadowBottomLeft = document.createElement('div');
    this.dom.shadowTopRight = document.createElement('div');
    this.dom.shadowBottomRight = document.createElement('div');
    this.dom.rollingModeBtn = document.createElement('div');
    this.dom.loadingScreen = document.createElement('div');
    this.dom.root.className = 'vis-timeline';
    this.dom.background.className = 'vis-panel vis-background';
    this.dom.backgroundVertical.className = 'vis-panel vis-background vis-vertical';
    this.dom.backgroundHorizontal.className = 'vis-panel vis-background vis-horizontal';
    this.dom.centerContainer.className = 'vis-panel vis-center';
    this.dom.leftContainer.className = 'vis-panel vis-left';
    this.dom.rightContainer.className = 'vis-panel vis-right';
    this.dom.top.className = 'vis-panel vis-top';
    this.dom.bottom.className = 'vis-panel vis-bottom';
    this.dom.left.className = 'vis-content';
    this.dom.center.className = 'vis-content';
    this.dom.right.className = 'vis-content';
    this.dom.shadowTop.className = 'vis-shadow vis-top';
    this.dom.shadowBottom.className = 'vis-shadow vis-bottom';
    this.dom.shadowTopLeft.className = 'vis-shadow vis-top';
    this.dom.shadowBottomLeft.className = 'vis-shadow vis-bottom';
    this.dom.shadowTopRight.className = 'vis-shadow vis-top';
    this.dom.shadowBottomRight.className = 'vis-shadow vis-bottom';
    this.dom.rollingModeBtn.className = 'vis-rolling-mode-btn';
    this.dom.loadingScreen.className = 'vis-loading-screen';
    this.dom.root.appendChild(this.dom.background);
    this.dom.root.appendChild(this.dom.backgroundVertical);
    this.dom.root.appendChild(this.dom.backgroundHorizontal);
    this.dom.root.appendChild(this.dom.centerContainer);
    this.dom.root.appendChild(this.dom.leftContainer);
    this.dom.root.appendChild(this.dom.rightContainer);
    this.dom.root.appendChild(this.dom.top);
    this.dom.root.appendChild(this.dom.bottom);
    this.dom.root.appendChild(this.dom.rollingModeBtn);
    this.dom.centerContainer.appendChild(this.dom.center);
    this.dom.leftContainer.appendChild(this.dom.left);
    this.dom.rightContainer.appendChild(this.dom.right);
    this.dom.centerContainer.appendChild(this.dom.shadowTop);
    this.dom.centerContainer.appendChild(this.dom.shadowBottom);
    this.dom.leftContainer.appendChild(this.dom.shadowTopLeft);
    this.dom.leftContainer.appendChild(this.dom.shadowBottomLeft);
    this.dom.rightContainer.appendChild(this.dom.shadowTopRight);
    this.dom.rightContainer.appendChild(this.dom.shadowBottomRight); // size properties of each of the panels

    this.props = {
      root: {},
      background: {},
      centerContainer: {},
      leftContainer: {},
      rightContainer: {},
      center: {},
      left: {},
      right: {},
      top: {},
      bottom: {},
      border: {},
      scrollTop: 0,
      scrollTopMin: 0
    };
    this.on('rangechange', function () {
      if (this.initialDrawDone === true) {
        this._redraw();
      }
    }.bind(this));
    this.on('rangechanged', function () {
      if (!this.initialRangeChangeDone) {
        this.initialRangeChangeDone = true;
      }
    }.bind(this));
    this.on('touch', this._onTouch.bind(this));
    this.on('panmove', this._onDrag.bind(this));
    var me = this;
    this._origRedraw = this._redraw.bind(this);
    this._redraw = util.throttle(this._origRedraw);
    this.on('_change', function (properties) {
      if (me.itemSet && me.itemSet.initialItemSetDrawn && properties && properties.queue == true) {
        me._redraw();
      } else {
        me._origRedraw();
      }
    }); // create event listeners for all interesting events, these events will be
    // emitted via emitter

    this.hammer = new hammer$2(this.dom.root);
    var pinchRecognizer = this.hammer.get('pinch').set({
      enable: true
    });
    pinchRecognizer && hammerUtil.disablePreventDefaultVertically(pinchRecognizer);
    this.hammer.get('pan').set({
      threshold: 5,
      direction: hammer$2.DIRECTION_HORIZONTAL
    });
    this.listeners = {};
    var events = ['tap', 'doubletap', 'press', 'pinch', 'pan', 'panstart', 'panmove', 'panend' // TODO: cleanup
    //'touch', 'pinch',
    //'tap', 'doubletap', 'hold',
    //'dragstart', 'drag', 'dragend',
    //'mousewheel', 'DOMMouseScroll' // DOMMouseScroll is needed for Firefox
    ];
    events.forEach(function (type) {
      var listener = function (event) {
        if (me.isActive()) {
          me.emit(type, event);
        }
      };

      me.hammer.on(type, listener);
      me.listeners[type] = listener;
    }); // emulate a touch event (emitted before the start of a pan, pinch, tap, or press)

    hammerUtil.onTouch(this.hammer, function (event) {
      me.emit('touch', event);
    }.bind(this)); // emulate a release event (emitted after a pan, pinch, tap, or press)

    hammerUtil.onRelease(this.hammer, function (event) {
      me.emit('release', event);
    }.bind(this));
    /**
     *
     * @param {WheelEvent} event
     */

    function onMouseWheel(event) {
      // Reasonable default wheel deltas
      const LINE_HEIGHT = 40;
      const PAGE_HEIGHT = 800;

      if (this.isActive()) {
        this.emit('mousewheel', event);
      } // deltaX and deltaY normalization from jquery.mousewheel.js


      var deltaX = 0;
      var deltaY = 0; // Old school scrollwheel delta

      if ('detail' in event) {
        deltaY = event.detail * -1;
      }

      if ('wheelDelta' in event) {
        deltaY = event.wheelDelta;
      }

      if ('wheelDeltaY' in event) {
        deltaY = event.wheelDeltaY;
      }

      if ('wheelDeltaX' in event) {
        deltaX = event.wheelDeltaX * -1;
      } // Firefox < 17 horizontal scrolling related to DOMMouseScroll event


      if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
        deltaX = deltaY * -1;
        deltaY = 0;
      } // New school wheel delta (wheel event)


      if ('deltaY' in event) {
        deltaY = event.deltaY * -1;
      }

      if ('deltaX' in event) {
        deltaX = event.deltaX;
      } // Normalize deltas


      if (event.deltaMode) {
        if (event.deltaMode === 1) {
          // delta in LINE units
          deltaX *= LINE_HEIGHT;
          deltaY *= LINE_HEIGHT;
        } else {
          // delta in PAGE units
          deltaX *= LINE_HEIGHT;
          deltaY *= PAGE_HEIGHT;
        }
      } // Prevent scrolling when zooming (no zoom key, or pressing zoom key)


      if (!this.options.zoomKey || event[this.options.zoomKey]) return; // Don't preventDefault if you can't scroll

      if (!this.options.verticalScroll && !this.options.horizontalScroll) return; // Prevent default actions caused by mouse wheel
      // (else the page and timeline both scroll)

      event.preventDefault();

      if (this.options.verticalScroll && Math.abs(deltaY) >= Math.abs(deltaX)) {
        var current = this.props.scrollTop;
        var adjusted = current + deltaY;

        if (this.isActive()) {
          this._setScrollTop(adjusted);

          this._redraw();

          this.emit('scroll', event);
        }
      } else if (this.options.horizontalScroll) {
        var delta = Math.abs(deltaX) >= Math.abs(deltaY) ? deltaX : deltaY; // calculate a single scroll jump relative to the range scale

        var diff = delta / 120 * (this.range.end - this.range.start) / 20; // calculate new start and end

        var newStart = this.range.start + diff;
        var newEnd = this.range.end + diff;
        var options = {
          animation: false,
          byUser: true,
          event: event
        };
        this.range.setRange(newStart, newEnd, options);
      }
    } // Add modern wheel event listener


    if (this.dom.centerContainer.addEventListener) {
      const wheel = "onwheel" in document.createElement("div") ? "wheel" : // Modern browsers support "wheel"
      document.onmousewheel !== undefined ? "mousewheel" : // Webkit and IE support at least "mousewheel"
      "DOMMouseScroll"; // Older Firefox versions like "DOMMouseScroll"

      this.dom.centerContainer.addEventListener(wheel, onMouseWheel.bind(this), false);
    } else {
      // IE 6/7/8
      this.dom.centerContainer.attachEvent("onmousewheel", onMouseWheel.bind(this));
    }
    /**
     *
     * @param {scroll} event
     */


    function onMouseScrollSide(event) {
      if (!me.options.verticalScroll) return;
      event.preventDefault();

      if (me.isActive()) {
        var adjusted = -event.target.scrollTop;

        me._setScrollTop(adjusted);

        me._redraw();

        me.emit('scrollSide', event);
      }
    }

    this.dom.left.parentNode.addEventListener('scroll', onMouseScrollSide.bind(this));
    this.dom.right.parentNode.addEventListener('scroll', onMouseScrollSide.bind(this));
    var itemAddedToTimeline = false;
    /**
     *
     * @param {dragover} event
     * @returns {boolean}
     */

    function handleDragOver(event) {
      if (event.preventDefault) {
        event.preventDefault(); // Necessary. Allows us to drop.
      } // make sure your target is a vis element


      if (!event.target.className.indexOf("vis") > -1) return; // make sure only one item is added every time you're over the timeline

      if (itemAddedToTimeline) return;
      event.dataTransfer.dropEffect = 'move';
      itemAddedToTimeline = true;
      return false;
    }
    /**
     *
     * @param {drop} event
     * @returns {boolean}
     */


    function handleDrop(event) {
      // prevent redirect to blank page - Firefox
      if (event.preventDefault) {
        event.preventDefault();
      }

      if (event.stopPropagation) {
        event.stopPropagation();
      } // return when dropping non-vis items


      try {
        var itemData = JSON.parse(event.dataTransfer.getData("text"));
        if (!itemData || !itemData.content) return;
      } catch (err) {
        return false;
      }

      itemAddedToTimeline = false;
      event.center = {
        x: event.clientX,
        y: event.clientY
      };

      if (itemData.target !== 'item') {
        me.itemSet._onAddItem(event);
      } else {
        me.itemSet._onDropObjectOnItem(event);
      }

      me.emit('drop', me.getEventProperties(event));
      return false;
    }

    this.dom.center.addEventListener('dragover', handleDragOver.bind(this), false);
    this.dom.center.addEventListener('drop', handleDrop.bind(this), false);
    this.customTimes = []; // store state information needed for touch events

    this.touch = {};
    this.redrawCount = 0;
    this.initialDrawDone = false;
    this.initialRangeChangeDone = false; // attach the root panel to the provided container

    if (!container) throw new Error('No container provided');
    container.appendChild(this.dom.root);
    container.appendChild(this.dom.loadingScreen);
  };
  /**
   * Set options. Options will be passed to all components loaded in the Timeline.
   * @param {Object} [options]
   *                           {String} orientation
   *                              Vertical orientation for the Timeline,
   *                              can be 'bottom' (default) or 'top'.
   *                           {string | number} width
   *                              Width for the timeline, a number in pixels or
   *                              a css string like '1000px' or '75%'. '100%' by default.
   *                           {string | number} height
   *                              Fixed height for the Timeline, a number in pixels or
   *                              a css string like '400px' or '75%'. If undefined,
   *                              The Timeline will automatically size such that
   *                              its contents fit.
   *                           {string | number} minHeight
   *                              Minimum height for the Timeline, a number in pixels or
   *                              a css string like '400px' or '75%'.
   *                           {string | number} maxHeight
   *                              Maximum height for the Timeline, a number in pixels or
   *                              a css string like '400px' or '75%'.
   *                           {number | Date | string} start
   *                              Start date for the visible window
   *                           {number | Date | string} end
   *                              End date for the visible window
   */


  Core.prototype.setOptions = function (options) {
    if (options) {
      // copy the known options
      var fields = ['width', 'height', 'minHeight', 'maxHeight', 'autoResize', 'start', 'end', 'clickToUse', 'dataAttributes', 'hiddenDates', 'locale', 'locales', 'moment', 'rtl', 'zoomKey', 'horizontalScroll', 'verticalScroll'];
      util.selectiveExtend(fields, this.options, options);
      this.dom.rollingModeBtn.style.visibility = 'hidden';

      if (this.options.rtl) {
        this.dom.container.style.direction = "rtl";
        this.dom.backgroundVertical.className = 'vis-panel vis-background vis-vertical-rtl';
      }

      if (this.options.verticalScroll) {
        if (this.options.rtl) {
          this.dom.rightContainer.className = 'vis-panel vis-right vis-vertical-scroll';
        } else {
          this.dom.leftContainer.className = 'vis-panel vis-left vis-vertical-scroll';
        }
      }

      if (typeof this.options.orientation !== 'object') {
        this.options.orientation = {
          item: undefined,
          axis: undefined
        };
      }

      if ('orientation' in options) {
        if (typeof options.orientation === 'string') {
          this.options.orientation = {
            item: options.orientation,
            axis: options.orientation
          };
        } else if (typeof options.orientation === 'object') {
          if ('item' in options.orientation) {
            this.options.orientation.item = options.orientation.item;
          }

          if ('axis' in options.orientation) {
            this.options.orientation.axis = options.orientation.axis;
          }
        }
      }

      if (this.options.orientation.axis === 'both') {
        if (!this.timeAxis2) {
          var timeAxis2 = this.timeAxis2 = new TimeAxis(this.body);

          timeAxis2.setOptions = function (options) {
            var _options = options ? util.extend({}, options) : {};

            _options.orientation = 'top'; // override the orientation option, always top

            TimeAxis.prototype.setOptions.call(timeAxis2, _options);
          };

          this.components.push(timeAxis2);
        }
      } else {
        if (this.timeAxis2) {
          var index = this.components.indexOf(this.timeAxis2);

          if (index !== -1) {
            this.components.splice(index, 1);
          }

          this.timeAxis2.destroy();
          this.timeAxis2 = null;
        }
      } // if the graph2d's drawPoints is a function delegate the callback to the onRender property


      if (typeof options.drawPoints == 'function') {
        options.drawPoints = {
          onRender: options.drawPoints
        };
      }

      if ('hiddenDates' in this.options) {
        DateUtil.convertHiddenOptions(this.options.moment, this.body, this.options.hiddenDates);
      }

      if ('clickToUse' in options) {
        if (options.clickToUse) {
          if (!this.activator) {
            this.activator = new Activator(this.dom.root);
          }
        } else {
          if (this.activator) {
            this.activator.destroy();
            delete this.activator;
          }
        }
      }

      if ('showCustomTime' in options) {
        throw new Error('Option `showCustomTime` is deprecated. Create a custom time bar via timeline.addCustomTime(time [, id])');
      } // enable/disable autoResize


      this._initAutoResize();
    } // propagate options to all components


    this.components.forEach(component => component.setOptions(options)); // enable/disable configure

    if ('configure' in options) {
      if (!this.configurator) {
        this.configurator = this._createConfigurator();
      }

      this.configurator.setOptions(options.configure); // collect the settings of all components, and pass them to the configuration system

      var appliedOptions = util.deepExtend({}, this.options);
      this.components.forEach(function (component) {
        util.deepExtend(appliedOptions, component.options);
      });
      this.configurator.setModuleOptions({
        global: appliedOptions
      });
    }

    this._redraw();
  };
  /**
   * Returns true when the Timeline is active.
   * @returns {boolean}
   */


  Core.prototype.isActive = function () {
    return !this.activator || this.activator.active;
  };
  /**
   * Destroy the Core, clean up all DOM elements and event listeners.
   */


  Core.prototype.destroy = function () {
    // unbind datasets
    this.setItems(null);
    this.setGroups(null); // remove all event listeners

    this.off(); // stop checking for changed size

    this._stopAutoResize(); // remove from DOM


    if (this.dom.root.parentNode) {
      this.dom.root.parentNode.removeChild(this.dom.root);
    }

    this.dom = null; // remove Activator

    if (this.activator) {
      this.activator.destroy();
      delete this.activator;
    } // cleanup hammer touch events


    for (var event in this.listeners) {
      if (this.listeners.hasOwnProperty(event)) {
        delete this.listeners[event];
      }
    }

    this.listeners = null;
    this.hammer && this.hammer.destroy();
    this.hammer = null; // give all components the opportunity to cleanup

    this.components.forEach(component => component.destroy());
    this.body = null;
  };
  /**
   * Set a custom time bar
   * @param {Date} time
   * @param {number} [id=undefined] Optional id of the custom time bar to be adjusted.
   */


  Core.prototype.setCustomTime = function (time, id) {
    var customTimes = this.customTimes.filter(function (component) {
      return id === component.options.id;
    });

    if (customTimes.length === 0) {
      throw new Error('No custom time bar found with id ' + JSON.stringify(id));
    }

    if (customTimes.length > 0) {
      customTimes[0].setCustomTime(time);
    }
  };
  /**
   * Retrieve the current custom time.
   * @param {number} [id=undefined]    Id of the custom time bar.
   * @return {Date | undefined} customTime
   */


  Core.prototype.getCustomTime = function (id) {
    var customTimes = this.customTimes.filter(function (component) {
      return component.options.id === id;
    });

    if (customTimes.length === 0) {
      throw new Error('No custom time bar found with id ' + JSON.stringify(id));
    }

    return customTimes[0].getCustomTime();
  };
  /**
   * Set a custom title for the custom time bar.
   * @param {string} [title] Custom title
   * @param {number} [id=undefined]    Id of the custom time bar.
   * @returns {*}
   */


  Core.prototype.setCustomTimeTitle = function (title, id) {
    var customTimes = this.customTimes.filter(function (component) {
      return component.options.id === id;
    });

    if (customTimes.length === 0) {
      throw new Error('No custom time bar found with id ' + JSON.stringify(id));
    }

    if (customTimes.length > 0) {
      return customTimes[0].setCustomTitle(title);
    }
  };
  /**
   * Retrieve meta information from an event.
   * Should be overridden by classes extending Core
   * @param {Event} event
   * @return {Object} An object with related information.
   */


  Core.prototype.getEventProperties = function (event) {
    return {
      event: event
    };
  };
  /**
   * Add custom vertical bar
   * @param {Date | string | number} [time]  A Date, unix timestamp, or
   *                                         ISO date string. Time point where
   *                                         the new bar should be placed.
   *                                         If not provided, `new Date()` will
   *                                         be used.
   * @param {number | string} [id=undefined] Id of the new bar. Optional
   * @param {object} [options={}]            Control options for the new bar. Supported
   *                                         optoins are:
   *                                         editable {true, false} determines whether the 
   *                                         bar can be dragged by the user. Default is true.
   * @return {number | string}               Returns the id of the new bar
   */


  Core.prototype.addCustomTime = function (time, id, options) {
    var timestamp = time !== undefined ? util.convert(time, 'Date').valueOf() : new Date();
    var exists = this.customTimes.some(function (customTime) {
      return customTime.options.id === id;
    });

    if (exists) {
      throw new Error('A custom time with id ' + JSON.stringify(id) + ' already exists');
    }

    var customTime = new CustomTime(this.body, util.extend({}, this.options, options, {
      time: timestamp,
      id: id
    }));
    this.customTimes.push(customTime);
    this.components.push(customTime);

    this._redraw();

    return id;
  };
  /**
   * Remove previously added custom bar
   * @param {int} id ID of the custom bar to be removed
   * [at]returns {boolean} True if the bar exists and is removed, false otherwise
   */


  Core.prototype.removeCustomTime = function (id) {
    var customTimes = this.customTimes.filter(function (bar) {
      return bar.options.id === id;
    });

    if (customTimes.length === 0) {
      throw new Error('No custom time bar found with id ' + JSON.stringify(id));
    }

    customTimes.forEach(function (customTime) {
      this.customTimes.splice(this.customTimes.indexOf(customTime), 1);
      this.components.splice(this.components.indexOf(customTime), 1);
      customTime.destroy();
    }.bind(this));
  };
  /**
   * Get the id's of the currently visible items.
   * @returns {Array} The ids of the visible items
   */


  Core.prototype.getVisibleItems = function () {
    return this.itemSet && this.itemSet.getVisibleItems() || [];
  };
  /**
   * Get the id's of the currently visible groups.
   * @returns {Array} The ids of the visible groups
   */


  Core.prototype.getVisibleGroups = function () {
    return this.itemSet && this.itemSet.getVisibleGroups() || [];
  };
  /**
   * Set Core window such that it fits all items
   * @param {Object} [options]  Available options:
   *                                `animation: boolean | {duration: number, easingFunction: string}`
   *                                    If true (default), the range is animated
   *                                    smoothly to the new window. An object can be
   *                                    provided to specify duration and easing function.
   *                                    Default duration is 500 ms, and default easing
   *                                    function is 'easeInOutQuad'.
   * @param {function} [callback] a callback funtion to be executed at the end of this function
   */


  Core.prototype.fit = function (options, callback) {
    var range = this.getDataRange(); // skip range set if there is no min and max date

    if (range.min === null && range.max === null) {
      return;
    } // apply a margin of 1% left and right of the data


    var interval = range.max - range.min;
    var min = new Date(range.min.valueOf() - interval * 0.01);
    var max = new Date(range.max.valueOf() + interval * 0.01);
    var animation = options && options.animation !== undefined ? options.animation : true;
    this.range.setRange(min, max, {
      animation: animation
    }, callback);
  };
  /**
   * Calculate the data range of the items start and end dates
   * [at]returns {{min: [Date], max: [Date]}}
   * @protected
   */


  Core.prototype.getDataRange = function () {
    // must be implemented by Timeline and Graph2d
    throw new Error('Cannot invoke abstract method getDataRange');
  };
  /**
   * Set the visible window. Both parameters are optional, you can change only
   * start or only end. Syntax:
   *
   *     TimeLine.setWindow(start, end)
   *     TimeLine.setWindow(start, end, options)
   *     TimeLine.setWindow(range)
   *
   * Where start and end can be a Date, number, or string, and range is an
   * object with properties start and end.
   *
   * @param {Date | number | string | Object} [start] Start date of visible window
   * @param {Date | number | string} [end]            End date of visible window
   * @param {Object} [options]  Available options:
   *                                `animation: boolean | {duration: number, easingFunction: string}`
   *                                    If true (default), the range is animated
   *                                    smoothly to the new window. An object can be
   *                                    provided to specify duration and easing function.
   *                                    Default duration is 500 ms, and default easing
   *                                    function is 'easeInOutQuad'.
   * @param {function} [callback] a callback funtion to be executed at the end of this function
   */


  Core.prototype.setWindow = function (start, end, options, callback) {
    if (typeof arguments[2] == "function") {
      callback = arguments[2];
      options = {};
    }

    var animation;
    var range;

    if (arguments.length == 1) {
      range = arguments[0];
      animation = range.animation !== undefined ? range.animation : true;
      this.range.setRange(range.start, range.end, {
        animation: animation
      });
    } else if (arguments.length == 2 && typeof arguments[1] == "function") {
      range = arguments[0];
      callback = arguments[1];
      animation = range.animation !== undefined ? range.animation : true;
      this.range.setRange(range.start, range.end, {
        animation: animation
      }, callback);
    } else {
      animation = options && options.animation !== undefined ? options.animation : true;
      this.range.setRange(start, end, {
        animation: animation
      }, callback);
    }
  };
  /**
   * Move the window such that given time is centered on screen.
   * @param {Date | number | string} time
   * @param {Object} [options]  Available options:
   *                                `animation: boolean | {duration: number, easingFunction: string}`
   *                                    If true (default), the range is animated
   *                                    smoothly to the new window. An object can be
   *                                    provided to specify duration and easing function.
   *                                    Default duration is 500 ms, and default easing
   *                                    function is 'easeInOutQuad'.
   * @param {function} [callback] a callback funtion to be executed at the end of this function
   */


  Core.prototype.moveTo = function (time, options, callback) {
    if (typeof arguments[1] == "function") {
      callback = arguments[1];
      options = {};
    }

    var interval = this.range.end - this.range.start;
    var t = util.convert(time, 'Date').valueOf();
    var start = t - interval / 2;
    var end = t + interval / 2;
    var animation = options && options.animation !== undefined ? options.animation : true;
    this.range.setRange(start, end, {
      animation: animation
    }, callback);
  };
  /**
   * Get the visible window
   * @return {{start: Date, end: Date}}   Visible range
   */


  Core.prototype.getWindow = function () {
    var range = this.range.getRange();
    return {
      start: new Date(range.start),
      end: new Date(range.end)
    };
  };
  /**
   * Zoom in the window such that given time is centered on screen.
   * @param {number} percentage - must be between [0..1]
   * @param {Object} [options]  Available options:
   *                                `animation: boolean | {duration: number, easingFunction: string}`
   *                                    If true (default), the range is animated
   *                                    smoothly to the new window. An object can be
   *                                    provided to specify duration and easing function.
   *                                    Default duration is 500 ms, and default easing
   *                                    function is 'easeInOutQuad'.
   * @param {function} [callback] a callback funtion to be executed at the end of this function
   */


  Core.prototype.zoomIn = function (percentage, options, callback) {
    if (!percentage || percentage < 0 || percentage > 1) return;

    if (typeof arguments[1] == "function") {
      callback = arguments[1];
      options = {};
    }

    var range = this.getWindow();
    var start = range.start.valueOf();
    var end = range.end.valueOf();
    var interval = end - start;
    var newInterval = interval / (1 + percentage);
    var distance = (interval - newInterval) / 2;
    var newStart = start + distance;
    var newEnd = end - distance;
    this.setWindow(newStart, newEnd, options, callback);
  };
  /**
   * Zoom out the window such that given time is centered on screen.
   * @param {number} percentage - must be between [0..1]
   * @param {Object} [options]  Available options:
   *                                `animation: boolean | {duration: number, easingFunction: string}`
   *                                    If true (default), the range is animated
   *                                    smoothly to the new window. An object can be
   *                                    provided to specify duration and easing function.
   *                                    Default duration is 500 ms, and default easing
   *                                    function is 'easeInOutQuad'.
   * @param {function} [callback] a callback funtion to be executed at the end of this function
   */


  Core.prototype.zoomOut = function (percentage, options, callback) {
    if (!percentage || percentage < 0 || percentage > 1) return;

    if (typeof arguments[1] == "function") {
      callback = arguments[1];
      options = {};
    }

    var range = this.getWindow();
    var start = range.start.valueOf();
    var end = range.end.valueOf();
    var interval = end - start;
    var newStart = start - interval * percentage / 2;
    var newEnd = end + interval * percentage / 2;
    this.setWindow(newStart, newEnd, options, callback);
  };
  /**
   * Force a redraw. Can be overridden by implementations of Core
   *
   * Note: this function will be overridden on construction with a trottled version
   */


  Core.prototype.redraw = function () {
    this._redraw();
  };
  /**
   * Redraw for internal use. Redraws all components. See also the public
   * method redraw.
   * @protected
   */


  Core.prototype._redraw = function () {
    this.redrawCount++;
    var resized = false;
    var options = this.options;
    var props = this.props;
    var dom = this.dom;
    if (!dom || !dom.container || dom.root.offsetWidth == 0) return; // when destroyed, or invisible

    DateUtil.updateHiddenDates(this.options.moment, this.body, this.options.hiddenDates); // update class names

    if (options.orientation == 'top') {
      util.addClassName(dom.root, 'vis-top');
      util.removeClassName(dom.root, 'vis-bottom');
    } else {
      util.removeClassName(dom.root, 'vis-top');
      util.addClassName(dom.root, 'vis-bottom');
    } // update root width and height options


    dom.root.style.maxHeight = util.option.asSize(options.maxHeight, '');
    dom.root.style.minHeight = util.option.asSize(options.minHeight, '');
    dom.root.style.width = util.option.asSize(options.width, ''); // calculate border widths

    props.border.left = (dom.centerContainer.offsetWidth - dom.centerContainer.clientWidth) / 2;
    props.border.right = props.border.left;
    props.border.top = (dom.centerContainer.offsetHeight - dom.centerContainer.clientHeight) / 2;
    props.border.bottom = props.border.top;
    props.borderRootHeight = dom.root.offsetHeight - dom.root.clientHeight;
    props.borderRootWidth = dom.root.offsetWidth - dom.root.clientWidth; // workaround for a bug in IE: the clientWidth of an element with
    // a height:0px and overflow:hidden is not calculated and always has value 0

    if (dom.centerContainer.clientHeight === 0) {
      props.border.left = props.border.top;
      props.border.right = props.border.left;
    }

    if (dom.root.clientHeight === 0) {
      props.borderRootWidth = props.borderRootHeight;
    } // calculate the heights. If any of the side panels is empty, we set the height to
    // minus the border width, such that the border will be invisible


    props.center.height = dom.center.offsetHeight;
    props.left.height = dom.left.offsetHeight;
    props.right.height = dom.right.offsetHeight;
    props.top.height = dom.top.clientHeight || -props.border.top;
    props.bottom.height = dom.bottom.clientHeight || -props.border.bottom; // TODO: compensate borders when any of the panels is empty.
    // apply auto height
    // TODO: only calculate autoHeight when needed (else we cause an extra reflow/repaint of the DOM)

    var contentHeight = Math.max(props.left.height, props.center.height, props.right.height);
    var autoHeight = props.top.height + contentHeight + props.bottom.height + props.borderRootHeight + props.border.top + props.border.bottom;
    dom.root.style.height = util.option.asSize(options.height, autoHeight + 'px'); // calculate heights of the content panels

    props.root.height = dom.root.offsetHeight;
    props.background.height = props.root.height - props.borderRootHeight;
    var containerHeight = props.root.height - props.top.height - props.bottom.height - props.borderRootHeight;
    props.centerContainer.height = containerHeight;
    props.leftContainer.height = containerHeight;
    props.rightContainer.height = props.leftContainer.height; // calculate the widths of the panels

    props.root.width = dom.root.offsetWidth;
    props.background.width = props.root.width - props.borderRootWidth;

    if (!this.initialDrawDone) {
      props.scrollbarWidth = util.getScrollBarWidth();
    }

    if (options.verticalScroll) {
      if (options.rtl) {
        props.left.width = dom.leftContainer.clientWidth || -props.border.left;
        props.right.width = dom.rightContainer.clientWidth + props.scrollbarWidth || -props.border.right;
      } else {
        props.left.width = dom.leftContainer.clientWidth + props.scrollbarWidth || -props.border.left;
        props.right.width = dom.rightContainer.clientWidth || -props.border.right;
      }
    } else {
      props.left.width = dom.leftContainer.clientWidth || -props.border.left;
      props.right.width = dom.rightContainer.clientWidth || -props.border.right;
    }

    this._setDOM(); // update the scrollTop, feasible range for the offset can be changed
    // when the height of the Core or of the contents of the center changed


    var offset = this._updateScrollTop(); // reposition the scrollable contents


    if (options.orientation.item != 'top') {
      offset += Math.max(props.centerContainer.height - props.center.height - props.border.top - props.border.bottom, 0);
    }

    dom.center.style.top = offset + 'px'; // show shadows when vertical scrolling is available

    var visibilityTop = props.scrollTop == 0 ? 'hidden' : '';
    var visibilityBottom = props.scrollTop == props.scrollTopMin ? 'hidden' : '';
    dom.shadowTop.style.visibility = visibilityTop;
    dom.shadowBottom.style.visibility = visibilityBottom;
    dom.shadowTopLeft.style.visibility = visibilityTop;
    dom.shadowBottomLeft.style.visibility = visibilityBottom;
    dom.shadowTopRight.style.visibility = visibilityTop;
    dom.shadowBottomRight.style.visibility = visibilityBottom;

    if (options.verticalScroll) {
      dom.rightContainer.className = 'vis-panel vis-right vis-vertical-scroll';
      dom.leftContainer.className = 'vis-panel vis-left vis-vertical-scroll';
      dom.shadowTopRight.style.visibility = "hidden";
      dom.shadowBottomRight.style.visibility = "hidden";
      dom.shadowTopLeft.style.visibility = "hidden";
      dom.shadowBottomLeft.style.visibility = "hidden";
      dom.left.style.top = '0px';
      dom.right.style.top = '0px';
    }

    if (!options.verticalScroll || props.center.height < props.centerContainer.height) {
      dom.left.style.top = offset + 'px';
      dom.right.style.top = offset + 'px';
      dom.rightContainer.className = dom.rightContainer.className.replace(new RegExp('(?:^|\\s)' + 'vis-vertical-scroll' + '(?:\\s|$)'), ' ');
      dom.leftContainer.className = dom.leftContainer.className.replace(new RegExp('(?:^|\\s)' + 'vis-vertical-scroll' + '(?:\\s|$)'), ' ');
      props.left.width = dom.leftContainer.clientWidth || -props.border.left;
      props.right.width = dom.rightContainer.clientWidth || -props.border.right;

      this._setDOM();
    } // enable/disable vertical panning


    var contentsOverflow = props.center.height > props.centerContainer.height;
    this.hammer.get('pan').set({
      direction: contentsOverflow ? hammer$2.DIRECTION_ALL : hammer$2.DIRECTION_HORIZONTAL
    }); // redraw all components

    this.components.forEach(function (component) {
      resized = component.redraw() || resized;
    });
    var MAX_REDRAW = 5;

    if (resized) {
      if (this.redrawCount < MAX_REDRAW) {
        this.body.emitter.emit('_change');
        return;
      } else {
        console.log('WARNING: infinite loop in redraw?');
      }
    } else {
      this.redrawCount = 0;
    } //Emit public 'changed' event for UI updates, see issue #1592


    this.body.emitter.emit("changed");
  };

  Core.prototype._setDOM = function () {
    var props = this.props;
    var dom = this.dom;
    props.leftContainer.width = props.left.width;
    props.rightContainer.width = props.right.width;
    var centerWidth = props.root.width - props.left.width - props.right.width - props.borderRootWidth;
    props.center.width = centerWidth;
    props.centerContainer.width = centerWidth;
    props.top.width = centerWidth;
    props.bottom.width = centerWidth; // resize the panels

    dom.background.style.height = props.background.height + 'px';
    dom.backgroundVertical.style.height = props.background.height + 'px';
    dom.backgroundHorizontal.style.height = props.centerContainer.height + 'px';
    dom.centerContainer.style.height = props.centerContainer.height + 'px';
    dom.leftContainer.style.height = props.leftContainer.height + 'px';
    dom.rightContainer.style.height = props.rightContainer.height + 'px';
    dom.background.style.width = props.background.width + 'px';
    dom.backgroundVertical.style.width = props.centerContainer.width + 'px';
    dom.backgroundHorizontal.style.width = props.background.width + 'px';
    dom.centerContainer.style.width = props.center.width + 'px';
    dom.top.style.width = props.top.width + 'px';
    dom.bottom.style.width = props.bottom.width + 'px'; // reposition the panels

    dom.background.style.left = '0';
    dom.background.style.top = '0';
    dom.backgroundVertical.style.left = props.left.width + props.border.left + 'px';
    dom.backgroundVertical.style.top = '0';
    dom.backgroundHorizontal.style.left = '0';
    dom.backgroundHorizontal.style.top = props.top.height + 'px';
    dom.centerContainer.style.left = props.left.width + 'px';
    dom.centerContainer.style.top = props.top.height + 'px';
    dom.leftContainer.style.left = '0';
    dom.leftContainer.style.top = props.top.height + 'px';
    dom.rightContainer.style.left = props.left.width + props.center.width + 'px';
    dom.rightContainer.style.top = props.top.height + 'px';
    dom.top.style.left = props.left.width + 'px';
    dom.top.style.top = '0';
    dom.bottom.style.left = props.left.width + 'px';
    dom.bottom.style.top = props.top.height + props.centerContainer.height + 'px';
    dom.center.style.left = '0';
    dom.left.style.left = '0';
    dom.right.style.left = '0';
  }; // TODO: deprecated since version 1.1.0, remove some day


  Core.prototype.repaint = function () {
    throw new Error('Function repaint is deprecated. Use redraw instead.');
  };
  /**
   * Set a current time. This can be used for example to ensure that a client's
   * time is synchronized with a shared server time.
   * Only applicable when option `showCurrentTime` is true.
   * @param {Date | string | number} time     A Date, unix timestamp, or
   *                                          ISO date string.
   */


  Core.prototype.setCurrentTime = function (time) {
    if (!this.currentTime) {
      throw new Error('Option showCurrentTime must be true');
    }

    this.currentTime.setCurrentTime(time);
  };
  /**
   * Get the current time.
   * Only applicable when option `showCurrentTime` is true.
   * @return {Date} Returns the current time.
   */


  Core.prototype.getCurrentTime = function () {
    if (!this.currentTime) {
      throw new Error('Option showCurrentTime must be true');
    }

    return this.currentTime.getCurrentTime();
  };
  /**
   * Convert a position on screen (pixels) to a datetime
   * @param {int}     x    Position on the screen in pixels
   * @return {Date}   time The datetime the corresponds with given position x
   * @protected
   */
  // TODO: move this function to Range


  Core.prototype._toTime = function (x) {
    return DateUtil.toTime(this, x, this.props.center.width);
  };
  /**
   * Convert a position on the global screen (pixels) to a datetime
   * @param {int}     x    Position on the screen in pixels
   * @return {Date}   time The datetime the corresponds with given position x
   * @protected
   */
  // TODO: move this function to Range


  Core.prototype._toGlobalTime = function (x) {
    return DateUtil.toTime(this, x, this.props.root.width); //var conversion = this.range.conversion(this.props.root.width);
    //return new Date(x / conversion.scale + conversion.offset);
  };
  /**
   * Convert a datetime (Date object) into a position on the screen
   * @param {Date}   time A date
   * @return {int}   x    The position on the screen in pixels which corresponds
   *                      with the given date.
   * @protected
   */
  // TODO: move this function to Range


  Core.prototype._toScreen = function (time) {
    return DateUtil.toScreen(this, time, this.props.center.width);
  };
  /**
   * Convert a datetime (Date object) into a position on the root
   * This is used to get the pixel density estimate for the screen, not the center panel
   * @param {Date}   time A date
   * @return {int}   x    The position on root in pixels which corresponds
   *                      with the given date.
   * @protected
   */
  // TODO: move this function to Range


  Core.prototype._toGlobalScreen = function (time) {
    return DateUtil.toScreen(this, time, this.props.root.width); //var conversion = this.range.conversion(this.props.root.width);
    //return (time.valueOf() - conversion.offset) * conversion.scale;
  };
  /**
   * Initialize watching when option autoResize is true
   * @private
   */


  Core.prototype._initAutoResize = function () {
    if (this.options.autoResize == true) {
      this._startAutoResize();
    } else {
      this._stopAutoResize();
    }
  };
  /**
   * Watch for changes in the size of the container. On resize, the Panel will
   * automatically redraw itself.
   * @private
   */


  Core.prototype._startAutoResize = function () {
    var me = this;

    this._stopAutoResize();

    this._onResize = function () {
      if (me.options.autoResize != true) {
        // stop watching when the option autoResize is changed to false
        me._stopAutoResize();

        return;
      }

      if (me.dom.root) {
        // check whether the frame is resized
        // Note: we compare offsetWidth here, not clientWidth. For some reason,
        // IE does not restore the clientWidth from 0 to the actual width after
        // changing the timeline's container display style from none to visible
        if (me.dom.root.offsetWidth != me.props.lastWidth || me.dom.root.offsetHeight != me.props.lastHeight) {
          me.props.lastWidth = me.dom.root.offsetWidth;
          me.props.lastHeight = me.dom.root.offsetHeight;
          me.props.scrollbarWidth = util.getScrollBarWidth();
          me.body.emitter.emit('_change');
        }
      }
    }; // add event listener to window resize


    util.addEventListener(window, 'resize', this._onResize); //Prevent initial unnecessary redraw

    if (me.dom.root) {
      me.props.lastWidth = me.dom.root.offsetWidth;
      me.props.lastHeight = me.dom.root.offsetHeight;
    }

    this.watchTimer = setInterval(this._onResize, 1000);
  };
  /**
   * Stop watching for a resize of the frame.
   * @private
   */


  Core.prototype._stopAutoResize = function () {
    if (this.watchTimer) {
      clearInterval(this.watchTimer);
      this.watchTimer = undefined;
    } // remove event listener on window.resize


    if (this._onResize) {
      util.removeEventListener(window, 'resize', this._onResize);
      this._onResize = null;
    }
  };
  /**
   * Start moving the timeline vertically
   * @param {Event} event
   * @private
   */


  Core.prototype._onTouch = function (event) {
    // eslint-disable-line no-unused-vars
    this.touch.allowDragging = true;
    this.touch.initialScrollTop = this.props.scrollTop;
  };
  /**
   * Start moving the timeline vertically
   * @param {Event} event
   * @private
   */


  Core.prototype._onPinch = function (event) {
    // eslint-disable-line no-unused-vars
    this.touch.allowDragging = false;
  };
  /**
   * Move the timeline vertically
   * @param {Event} event
   * @private
   */


  Core.prototype._onDrag = function (event) {
    if (!event) return; // refuse to drag when we where pinching to prevent the timeline make a jump
    // when releasing the fingers in opposite order from the touch screen

    if (!this.touch.allowDragging) return;
    var delta = event.deltaY;

    var oldScrollTop = this._getScrollTop();

    var newScrollTop = this._setScrollTop(this.touch.initialScrollTop + delta);

    if (this.options.verticalScroll) {
      this.dom.left.parentNode.scrollTop = -this.props.scrollTop;
      this.dom.right.parentNode.scrollTop = -this.props.scrollTop;
    }

    if (newScrollTop != oldScrollTop) {
      this.emit("verticalDrag");
    }
  };
  /**
   * Apply a scrollTop
   * @param {number} scrollTop
   * @returns {number} scrollTop  Returns the applied scrollTop
   * @private
   */


  Core.prototype._setScrollTop = function (scrollTop) {
    this.props.scrollTop = scrollTop;

    this._updateScrollTop();

    return this.props.scrollTop;
  };
  /**
   * Update the current scrollTop when the height of  the containers has been changed
   * @returns {number} scrollTop  Returns the applied scrollTop
   * @private
   */


  Core.prototype._updateScrollTop = function () {
    // recalculate the scrollTopMin
    var scrollTopMin = Math.min(this.props.centerContainer.height - this.props.center.height, 0); // is negative or zero

    if (scrollTopMin != this.props.scrollTopMin) {
      // in case of bottom orientation, change the scrollTop such that the contents
      // do not move relative to the time axis at the bottom
      if (this.options.orientation.item != 'top') {
        this.props.scrollTop += scrollTopMin - this.props.scrollTopMin;
      }

      this.props.scrollTopMin = scrollTopMin;
    } // limit the scrollTop to the feasible scroll range


    if (this.props.scrollTop > 0) this.props.scrollTop = 0;
    if (this.props.scrollTop < scrollTopMin) this.props.scrollTop = scrollTopMin;

    if (this.options.verticalScroll) {
      this.dom.left.parentNode.scrollTop = -this.props.scrollTop;
      this.dom.right.parentNode.scrollTop = -this.props.scrollTop;
    }

    return this.props.scrollTop;
  };
  /**
   * Get the current scrollTop
   * @returns {number} scrollTop
   * @private
   */


  Core.prototype._getScrollTop = function () {
    return this.props.scrollTop;
  };
  /**
   * Load a configurator
   * [at]returns {Object}
   * @private
   */


  Core.prototype._createConfigurator = function () {
    throw new Error('Cannot invoke abstract method _createConfigurator');
  };

  /**
   * A current time bar
   * @param {{range: Range, dom: Object, domProps: Object}} body
   * @param {Object} [options]        Available parameters:
   *                                  {Boolean} [showCurrentTime]
   *                                  {String}  [alignCurrentTime]
   * @constructor CurrentTime
   * @extends Component
   */

  function CurrentTime(body, options) {
    this.body = body; // default options

    this.defaultOptions = {
      rtl: false,
      showCurrentTime: true,
      alignCurrentTime: undefined,
      moment: moment$3,
      locales: locales,
      locale: 'en'
    };
    this.options = util.extend({}, this.defaultOptions);
    this.offset = 0;

    this._create();

    this.setOptions(options);
  }

  CurrentTime.prototype = new Component_1();
  /**
   * Create the HTML DOM for the current time bar
   * @private
   */

  CurrentTime.prototype._create = function () {
    var bar = document.createElement('div');
    bar.className = 'vis-current-time';
    bar.style.position = 'absolute';
    bar.style.top = '0px';
    bar.style.height = '100%';
    this.bar = bar;
  };
  /**
   * Destroy the CurrentTime bar
   */


  CurrentTime.prototype.destroy = function () {
    this.options.showCurrentTime = false;
    this.redraw(); // will remove the bar from the DOM and stop refreshing

    this.body = null;
  };
  /**
   * Set options for the component. Options will be merged in current options.
   * @param {Object} options  Available parameters:
   *                          {boolean} [showCurrentTime]
   *                          {String}  [alignCurrentTime]
   */


  CurrentTime.prototype.setOptions = function (options) {
    if (options) {
      // copy all options that we know
      util.selectiveExtend(['rtl', 'showCurrentTime', 'alignCurrentTime', 'moment', 'locale', 'locales'], this.options, options);
    }
  };
  /**
   * Repaint the component
   * @return {boolean} Returns true if the component is resized
   */


  CurrentTime.prototype.redraw = function () {
    if (this.options.showCurrentTime) {
      var parent = this.body.dom.backgroundVertical;

      if (this.bar.parentNode != parent) {
        // attach to the dom
        if (this.bar.parentNode) {
          this.bar.parentNode.removeChild(this.bar);
        }

        parent.appendChild(this.bar);
        this.start();
      }

      var now = this.options.moment(new Date().valueOf() + this.offset);

      if (this.options.alignCurrentTime) {
        now = now.startOf(this.options.alignCurrentTime);
      }

      var x = this.body.util.toScreen(now);
      var locale = this.options.locales[this.options.locale];

      if (!locale) {
        if (!this.warned) {
          console.log('WARNING: options.locales[\'' + this.options.locale + '\'] not found. See http://visjs.org/docs/timeline/#Localization');
          this.warned = true;
        }

        locale = this.options.locales['en']; // fall back on english when not available
      }

      var title = locale.current + ' ' + locale.time + ': ' + now.format('dddd, MMMM Do YYYY, H:mm:ss');
      title = title.charAt(0).toUpperCase() + title.substring(1);

      if (this.options.rtl) {
        this.bar.style.right = x + 'px';
      } else {
        this.bar.style.left = x + 'px';
      }

      this.bar.title = title;
    } else {
      // remove the line from the DOM
      if (this.bar.parentNode) {
        this.bar.parentNode.removeChild(this.bar);
      }

      this.stop();
    }

    return false;
  };
  /**
   * Start auto refreshing the current time bar
   */


  CurrentTime.prototype.start = function () {
    var me = this;
    /**
     *  Updates the current time.
     */

    function update() {
      me.stop(); // determine interval to refresh

      var scale = me.body.range.conversion(me.body.domProps.center.width).scale;
      var interval = 1 / scale / 10;
      if (interval < 30) interval = 30;
      if (interval > 1000) interval = 1000;
      me.redraw();
      me.body.emitter.emit('currentTimeTick'); // start a renderTimer to adjust for the new time

      me.currentTimeTimer = setTimeout(update, interval);
    }

    update();
  };
  /**
   * Stop auto refreshing the current time bar
   */


  CurrentTime.prototype.stop = function () {
    if (this.currentTimeTimer !== undefined) {
      clearTimeout(this.currentTimeTimer);
      delete this.currentTimeTimer;
    }
  };
  /**
   * Set a current time. This can be used for example to ensure that a client's
   * time is synchronized with a shared server time.
   * @param {Date | string | number} time     A Date, unix timestamp, or
   *                                          ISO date string.
   */


  CurrentTime.prototype.setCurrentTime = function (time) {
    var t = util.convert(time, 'Date').valueOf();
    var now = new Date().valueOf();
    this.offset = t - now;
    this.redraw();
  };
  /**
   * Get the current time.
   * @return {Date} Returns the current time.
   */


  CurrentTime.prototype.getCurrentTime = function () {
    return new Date(new Date().valueOf() + this.offset);
  };

  var CurrentTime_1 = CurrentTime;

  var Stack = createCommonjsModule$2(function (module, exports) {
    // Utility functions for ordering and stacking of items
    var EPSILON = 0.001; // used when checking collisions, to prevent round-off errors

    /**
     * Order items by their start data
     * @param {Item[]} items
     */

    exports.orderByStart = function (items) {
      items.sort(function (a, b) {
        return a.data.start - b.data.start;
      });
    };
    /**
     * Order items by their end date. If they have no end date, their start date
     * is used.
     * @param {Item[]} items
     */


    exports.orderByEnd = function (items) {
      items.sort(function (a, b) {
        var aTime = 'end' in a.data ? a.data.end : a.data.start,
            bTime = 'end' in b.data ? b.data.end : b.data.start;
        return aTime - bTime;
      });
    };
    /**
     * Adjust vertical positions of the items such that they don't overlap each
     * other.
     * @param {Item[]} items
     *            All visible items
     * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
     *            Margins between items and between items and the axis.
     * @param {boolean} [force=false]
     *            If true, all items will be repositioned. If false (default), only
     *            items having a top===null will be re-stacked
     * @param {function} shouldBailItemsRedrawFunction
     *            bailing function
     * @return {boolean} shouldBail
     */


    exports.stack = function (items, margin, force, shouldBailItemsRedrawFunction) {
      if (force) {
        // reset top position of all items
        for (var i = 0; i < items.length; i++) {
          items[i].top = null;
        }
      } // calculate new, non-overlapping positions


      for (var i = 0; i < items.length; i++) {
        // eslint-disable-line no-redeclare
        var item = items[i];

        if (item.stack && item.top === null) {
          // initialize top position
          item.top = margin.axis;
          var shouldBail = false;

          do {
            // TODO: optimize checking for overlap. when there is a gap without items,
            //       you only need to check for items from the next item on, not from zero
            var collidingItem = null;

            for (var j = 0, jj = items.length; j < jj; j++) {
              var other = items[j];
              shouldBail = shouldBailItemsRedrawFunction() || false;

              if (shouldBail) {
                return true;
              }

              if (other.top !== null && other !== item && other.stack && exports.collision(item, other, margin.item, other.options.rtl)) {
                collidingItem = other;
                break;
              }
            }

            if (collidingItem != null) {
              // There is a collision. Reposition the items above the colliding element
              item.top = collidingItem.top + collidingItem.height + margin.item.vertical;
            }
          } while (collidingItem);
        }
      }

      return shouldBail;
    };
    /**
     * Adjust vertical positions of the items within a single subgroup such that they 
     * don't overlap each other.
     * @param {Item[]} items
     *            All items withina subgroup
     * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
     *            Margins between items and between items and the axis.
     * @param {subgroup} subgroup
     *            The subgroup that is being stacked 
     */


    exports.substack = function (items, margin, subgroup) {
      for (var i = 0; i < items.length; i++) {
        items[i].top = null;
      } // Set the initial height


      var subgroupHeight = subgroup.height; // calculate new, non-overlapping positions

      for (i = 0; i < items.length; i++) {
        var item = items[i];

        if (item.stack && item.top === null) {
          // initialize top position
          item.top = item.baseTop; //margin.axis + item.baseTop;

          do {
            // TODO: optimize checking for overlap. when there is a gap without items,
            //       you only need to check for items from the next item on, not from zero
            var collidingItem = null;

            for (var j = 0, jj = items.length; j < jj; j++) {
              var other = items[j];

              if (other.top !== null && other !== item
              /*&& other.stack*/
              && exports.collision(item, other, margin.item, other.options.rtl)) {
                collidingItem = other;
                break;
              }
            }

            if (collidingItem != null) {
              // There is a collision. Reposition the items above the colliding element
              item.top = collidingItem.top + collidingItem.height + margin.item.vertical; // + item.baseTop;
            }

            if (item.top + item.height > subgroupHeight) {
              subgroupHeight = item.top + item.height;
            }
          } while (collidingItem);
        }
      } // Set the new height


      subgroup.height = subgroupHeight - subgroup.top + 0.5 * margin.item.vertical;
    };
    /**
     * Adjust vertical positions of the items without stacking them
     * @param {Item[]} items
     *            All visible items
     * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
     *            Margins between items and between items and the axis.
     * @param {subgroups[]} subgroups
     *            All subgroups
     * @param {boolean} stackSubgroups
     */


    exports.nostack = function (items, margin, subgroups, stackSubgroups) {
      for (var i = 0; i < items.length; i++) {
        if (items[i].data.subgroup == undefined) {
          items[i].top = margin.item.vertical;
        } else if (items[i].data.subgroup !== undefined && stackSubgroups) {
          var newTop = 0;

          for (var subgroup in subgroups) {
            if (subgroups.hasOwnProperty(subgroup)) {
              if (subgroups[subgroup].visible == true && subgroups[subgroup].index < subgroups[items[i].data.subgroup].index) {
                newTop += subgroups[subgroup].height;
                subgroups[items[i].data.subgroup].top = newTop;
              }
            }
          }

          items[i].top = newTop + 0.5 * margin.item.vertical;
        }
      }

      if (!stackSubgroups) {
        exports.stackSubgroups(items, margin, subgroups);
      }
    };
    /**
     * Adjust vertical positions of the subgroups such that they don't overlap each
     * other.
     * @param {Array.<vis.Item>} items
     * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin Margins between items and between items and the axis.
     * @param {subgroups[]} subgroups
     *            All subgroups
     */


    exports.stackSubgroups = function (items, margin, subgroups) {
      for (var subgroup in subgroups) {
        if (subgroups.hasOwnProperty(subgroup)) {
          subgroups[subgroup].top = 0;

          do {
            // TODO: optimize checking for overlap. when there is a gap without items,
            //       you only need to check for items from the next item on, not from zero
            var collidingItem = null;

            for (var otherSubgroup in subgroups) {
              if (subgroups[otherSubgroup].top !== null && otherSubgroup !== subgroup && subgroups[subgroup].index > subgroups[otherSubgroup].index && exports.collisionByTimes(subgroups[subgroup], subgroups[otherSubgroup])) {
                collidingItem = subgroups[otherSubgroup];
                break;
              }
            }

            if (collidingItem != null) {
              // There is a collision. Reposition the subgroups above the colliding element
              subgroups[subgroup].top = collidingItem.top + collidingItem.height;
            }
          } while (collidingItem);
        }
      }

      for (var i = 0; i < items.length; i++) {
        if (items[i].data.subgroup !== undefined) {
          items[i].top = subgroups[items[i].data.subgroup].top + 0.5 * margin.item.vertical;
        }
      }
    };
    /**
     * Adjust vertical positions of the subgroups such that they don't overlap each
     * other, then stacks the contents of each subgroup individually.
     * @param {Item[]} subgroupItems
     *            All the items in a subgroup
     * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
     *            Margins between items and between items and the axis.
     * @param {subgroups[]} subgroups
     *            All subgroups 
     */


    exports.stackSubgroupsWithInnerStack = function (subgroupItems, margin, subgroups) {
      var doSubStack = false; // Run subgroups in their order (if any)

      var subgroupOrder = [];

      for (var subgroup in subgroups) {
        if (subgroups[subgroup].hasOwnProperty("index")) {
          subgroupOrder[subgroups[subgroup].index] = subgroup;
        } else {
          subgroupOrder.push(subgroup);
        }
      }

      for (var j = 0; j < subgroupOrder.length; j++) {
        subgroup = subgroupOrder[j];

        if (subgroups.hasOwnProperty(subgroup)) {
          doSubStack = doSubStack || subgroups[subgroup].stack;
          subgroups[subgroup].top = 0;

          for (var otherSubgroup in subgroups) {
            if (subgroups[otherSubgroup].visible && subgroups[subgroup].index > subgroups[otherSubgroup].index) {
              subgroups[subgroup].top += subgroups[otherSubgroup].height;
            }
          }

          var items = subgroupItems[subgroup];

          for (var i = 0; i < items.length; i++) {
            if (items[i].data.subgroup !== undefined) {
              items[i].top = subgroups[items[i].data.subgroup].top + 0.5 * margin.item.vertical;

              if (subgroups[subgroup].stack) {
                items[i].baseTop = items[i].top;
              }
            }
          }

          if (doSubStack && subgroups[subgroup].stack) {
            exports.substack(subgroupItems[subgroup], margin, subgroups[subgroup]);
          }
        }
      }
    };
    /**
     * Test if the two provided items collide
     * The items must have parameters left, width, top, and height.
     * @param {Item} a          The first item
     * @param {Item} b          The second item
     * @param {{horizontal: number, vertical: number}} margin
     *                          An object containing a horizontal and vertical
     *                          minimum required margin.
     * @param {boolean} rtl
     * @return {boolean}        true if a and b collide, else false
     */


    exports.collision = function (a, b, margin, rtl) {
      if (rtl) {
        return a.right - margin.horizontal + EPSILON < b.right + b.width && a.right + a.width + margin.horizontal - EPSILON > b.right && a.top - margin.vertical + EPSILON < b.top + b.height && a.top + a.height + margin.vertical - EPSILON > b.top;
      } else {
        return a.left - margin.horizontal + EPSILON < b.left + b.width && a.left + a.width + margin.horizontal - EPSILON > b.left && a.top - margin.vertical + EPSILON < b.top + b.height && a.top + a.height + margin.vertical - EPSILON > b.top;
      }
    };
    /**
     * Test if the two provided objects collide
     * The objects must have parameters start, end, top, and height.
     * @param {Object} a          The first Object
     * @param {Object} b          The second Object
     * @return {boolean}        true if a and b collide, else false
     */


    exports.collisionByTimes = function (a, b) {
      return a.start <= b.start && a.end >= b.start && a.top < b.top + b.height && a.top + a.height > b.top || b.start <= a.start && b.end >= a.start && b.top < a.top + a.height && b.top + b.height > a.top;
    };
  });
  var Stack_1 = Stack.orderByStart;
  var Stack_2 = Stack.orderByEnd;
  var Stack_3 = Stack.stack;
  var Stack_4 = Stack.substack;
  var Stack_5 = Stack.nostack;
  var Stack_6 = Stack.stackSubgroups;
  var Stack_7 = Stack.stackSubgroupsWithInnerStack;
  var Stack_8 = Stack.collision;
  var Stack_9 = Stack.collisionByTimes;

  /**
   * @param {number | string} groupId
   * @param {Object} data
   * @param {ItemSet} itemSet
   * @constructor Group
   */

  function Group(groupId, data, itemSet) {
    this.groupId = groupId;
    this.subgroups = {};
    this.subgroupStack = {};
    this.subgroupStackAll = false;
    this.doInnerStack = false;
    this.shouldBailStackItems = false;
    this.subgroupIndex = 0;
    this.subgroupOrderer = data && data.subgroupOrder;
    this.itemSet = itemSet;
    this.isVisible = null;
    this.stackDirty = true; // if true, items will be restacked on next redraw

    if (data && data.nestedGroups) {
      this.nestedGroups = data.nestedGroups;

      if (data.showNested == false) {
        this.showNested = false;
      } else {
        this.showNested = true;
      }
    }

    if (data && data.subgroupStack) {
      if (typeof data.subgroupStack === "boolean") {
        this.doInnerStack = data.subgroupStack;
        this.subgroupStackAll = data.subgroupStack;
      } else {
        // We might be doing stacking on specific sub groups, but only
        // if at least one is set to do stacking
        for (var key in data.subgroupStack) {
          this.subgroupStack[key] = data.subgroupStack[key];
          this.doInnerStack = this.doInnerStack || data.subgroupStack[key];
        }
      }
    }

    if (data && data.heightMode) {
      this.heightMode = data.heightMode;
    } else {
      this.heightMode = itemSet.options.groupHeightMode;
    }

    this.nestedInGroup = null;
    this.dom = {};
    this.props = {
      label: {
        width: 0,
        height: 0
      }
    };
    this.className = null;
    this.items = {}; // items filtered by groupId of this group

    this.visibleItems = []; // items currently visible in window

    this.itemsInRange = []; // items currently in range

    this.orderedItems = {
      byStart: [],
      byEnd: []
    };
    this.checkRangedItems = false; // needed to refresh the ranged items if the window is programatically changed with NO overlap.

    var me = this;
    this.itemSet.body.emitter.on("checkRangedItems", function () {
      me.checkRangedItems = true;
    });

    this._create();

    this.setData(data);
  }
  /**
   * Create DOM elements for the group
   * @private
   */


  Group.prototype._create = function () {
    var label = document.createElement('div');

    if (this.itemSet.options.groupEditable.order) {
      label.className = 'vis-label draggable';
    } else {
      label.className = 'vis-label';
    }

    if (this.itemSet.options.groupLabelDirection === 'vertical') {
      label.className += ' vertical';
    }

    this.dom.label = label;
    var inner = document.createElement('div');
    inner.className = 'vis-inner';
    label.appendChild(inner);
    this.dom.inner = inner;
    var foreground = document.createElement('div');
    foreground.className = 'vis-group';
    foreground['timeline-group'] = this;
    this.dom.foreground = foreground;
    this.dom.background = document.createElement('div');
    this.dom.background.className = 'vis-group';
    this.dom.axis = document.createElement('div');
    this.dom.axis.className = 'vis-group'; // create a hidden marker to detect when the Timelines container is attached
    // to the DOM, or the style of a parent of the Timeline is changed from
    // display:none is changed to visible.

    this.dom.marker = document.createElement('div');
    this.dom.marker.style.visibility = 'hidden';
    this.dom.marker.style.position = 'absolute';
    this.dom.marker.innerHTML = '';
    this.dom.background.appendChild(this.dom.marker);
  };
  /**
   * Set the group data for this group
   * @param {Object} data   Group data, can contain properties content and className
   */


  Group.prototype.setData = function (data) {
    // update contents
    var content;
    var templateFunction;

    if (this.itemSet.options && this.itemSet.options.groupTemplate) {
      templateFunction = this.itemSet.options.groupTemplate.bind(this);
      content = templateFunction(data, this.dom.inner);
    } else {
      content = data && data.content;
    }

    if (content instanceof Element) {
      while (this.dom.inner.firstChild) {
        this.dom.inner.removeChild(this.dom.inner.firstChild);
      }

      this.dom.inner.appendChild(content);
    } else if (content instanceof Object && content.isReactComponent) ; else if (content instanceof Object) {
      templateFunction(data, this.dom.inner);
    } else if (content !== undefined && content !== null) {
      this.dom.inner.innerHTML = content;
    } else {
      this.dom.inner.innerHTML = this.groupId || ''; // groupId can be null
    } // update title


    this.dom.label.title = data && data.title || '';

    if (!this.dom.inner.firstChild) {
      util.addClassName(this.dom.inner, 'vis-hidden');
    } else {
      util.removeClassName(this.dom.inner, 'vis-hidden');
    }

    if (data && data.nestedGroups) {
      if (!this.nestedGroups || this.nestedGroups != data.nestedGroups) {
        this.nestedGroups = data.nestedGroups;
      }

      if (data.showNested !== undefined || this.showNested === undefined) {
        if (data.showNested == false) {
          this.showNested = false;
        } else {
          this.showNested = true;
        }
      }

      util.addClassName(this.dom.label, 'vis-nesting-group');
      var collapsedDirClassName = this.itemSet.options.rtl ? 'collapsed-rtl' : 'collapsed';

      if (this.showNested) {
        util.removeClassName(this.dom.label, collapsedDirClassName);
        util.addClassName(this.dom.label, 'expanded');
      } else {
        util.removeClassName(this.dom.label, 'expanded');
        util.addClassName(this.dom.label, collapsedDirClassName);
      }
    } else if (this.nestedGroups) {
      this.nestedGroups = null;
      collapsedDirClassName = this.itemSet.options.rtl ? 'collapsed-rtl' : 'collapsed';
      util.removeClassName(this.dom.label, collapsedDirClassName);
      util.removeClassName(this.dom.label, 'expanded');
      util.removeClassName(this.dom.label, 'vis-nesting-group');
    }

    if (data && data.nestedInGroup) {
      util.addClassName(this.dom.label, 'vis-nested-group');

      if (this.itemSet.options && this.itemSet.options.rtl) {
        this.dom.inner.style.paddingRight = '30px';
      } else {
        this.dom.inner.style.paddingLeft = '30px';
      }
    } // update className


    var className = data && data.className || null;

    if (className != this.className) {
      if (this.className) {
        util.removeClassName(this.dom.label, this.className);
        util.removeClassName(this.dom.foreground, this.className);
        util.removeClassName(this.dom.background, this.className);
        util.removeClassName(this.dom.axis, this.className);
      }

      util.addClassName(this.dom.label, className);
      util.addClassName(this.dom.foreground, className);
      util.addClassName(this.dom.background, className);
      util.addClassName(this.dom.axis, className);
      this.className = className;
    } // update style


    if (this.style) {
      util.removeCssText(this.dom.label, this.style);
      this.style = null;
    }

    if (data && data.style) {
      util.addCssText(this.dom.label, data.style);
      this.style = data.style;
    }
  };
  /**
   * Get the width of the group label
   * @return {number} width
   */


  Group.prototype.getLabelWidth = function () {
    return this.props.label.width;
  };

  Group.prototype._didMarkerHeightChange = function () {
    var markerHeight = this.dom.marker.clientHeight;

    if (markerHeight != this.lastMarkerHeight) {
      this.lastMarkerHeight = markerHeight;
      var redrawQueue = {};
      var redrawQueueLength = 0;
      util.forEach(this.items, function (item, key) {
        item.dirty = true;

        if (item.displayed) {
          var returnQueue = true;
          redrawQueue[key] = item.redraw(returnQueue);
          redrawQueueLength = redrawQueue[key].length;
        }
      });
      var needRedraw = redrawQueueLength > 0;

      if (needRedraw) {
        // redraw all regular items
        for (var i = 0; i < redrawQueueLength; i++) {
          util.forEach(redrawQueue, function (fns) {
            fns[i]();
          });
        }
      }

      return true;
    }
  };

  Group.prototype._calculateGroupSizeAndPosition = function () {
    var offsetTop = this.dom.foreground.offsetTop;
    var offsetLeft = this.dom.foreground.offsetLeft;
    var offsetWidth = this.dom.foreground.offsetWidth;
    this.top = offsetTop;
    this.right = offsetLeft;
    this.width = offsetWidth;
  };

  Group.prototype._shouldBailItemsRedraw = function () {
    var me = this;
    var timeoutOptions = this.itemSet.options.onTimeout;
    var bailOptions = {
      relativeBailingTime: this.itemSet.itemsSettingTime,
      bailTimeMs: timeoutOptions && timeoutOptions.timeoutMs,
      userBailFunction: timeoutOptions && timeoutOptions.callback,
      shouldBailStackItems: this.shouldBailStackItems
    };
    var bail = null;

    if (!this.itemSet.initialDrawDone) {
      if (bailOptions.shouldBailStackItems) {
        return true;
      }

      if (Math.abs(new Date() - new Date(bailOptions.relativeBailingTime)) > bailOptions.bailTimeMs) {
        if (bailOptions.userBailFunction && this.itemSet.userContinueNotBail == null) {
          bailOptions.userBailFunction(function (didUserContinue) {
            me.itemSet.userContinueNotBail = didUserContinue;
            bail = !didUserContinue;
          });
        } else if (me.itemSet.userContinueNotBail == false) {
          bail = true;
        } else {
          bail = false;
        }
      }
    }

    return bail;
  };

  Group.prototype._redrawItems = function (forceRestack, lastIsVisible, margin, range) {
    var restack = forceRestack || this.stackDirty || this.isVisible && !lastIsVisible; // if restacking, reposition visible items vertically

    if (restack) {
      var visibleSubgroups = {};
      var subgroup = null;

      if (typeof this.itemSet.options.order === 'function') {
        // a custom order function
        // brute force restack of all items
        // show all items
        var me = this;
        var limitSize = false;
        var redrawQueue = {};
        var redrawQueueLength = 0;
        util.forEach(this.items, function (item, key) {
          if (!item.displayed && (item.isVisible(range) || !item.dom)) {
            var returnQueue = true;
            redrawQueue[key] = item.show(returnQueue);
            redrawQueueLength = redrawQueue[key].length;
            me.visibleItems.push(item);
          }
        });
        var needRedraw = redrawQueueLength > 0;

        if (needRedraw) {
          // redraw all regular items
          for (var i = 0; i < redrawQueueLength; i++) {
            util.forEach(redrawQueue, function (fns) {
              fns[i]();
            });
          }
        }

        util.forEach(this.items, function (item) {
          if (item.displayed) {
            item.repositionX(limitSize);
          }
        });

        if (this.doInnerStack && this.itemSet.options.stackSubgroups) {
          // Order the items within each subgroup
          for (subgroup in this.subgroups) {
            visibleSubgroups[subgroup] = this.subgroups[subgroup].items.slice().sort(function (a, b) {
              return me.itemSet.options.order(a.data, b.data);
            });
          }

          Stack.stackSubgroupsWithInnerStack(visibleSubgroups, margin, this.subgroups);
        } else {
          // order all items and force a restacking
          var customOrderedItems = this.orderedItems.byStart.slice().sort(function (a, b) {
            return me.itemSet.options.order(a.data, b.data);
          });
          this.shouldBailStackItems = Stack.stack(customOrderedItems, margin, true, this._shouldBailItemsRedraw.bind(this));
        }

        this.visibleItems = this._updateItemsInRange(this.orderedItems, this.visibleItems, range);
      } else {
        // no custom order function, lazy stacking
        this.visibleItems = this._updateItemsInRange(this.orderedItems, this.visibleItems, range);

        if (this.itemSet.options.stack) {
          if (this.doInnerStack && this.itemSet.options.stackSubgroups) {
            for (subgroup in this.subgroups) {
              visibleSubgroups[subgroup] = this.subgroups[subgroup].items;
            }

            Stack.stackSubgroupsWithInnerStack(visibleSubgroups, margin, this.subgroups);
          } else {
            // TODO: ugly way to access options...
            this.shouldBailStackItems = Stack.stack(this.visibleItems, margin, true, this._shouldBailItemsRedraw.bind(this));
          }
        } else {
          // no stacking
          Stack.nostack(this.visibleItems, margin, this.subgroups, this.itemSet.options.stackSubgroups);
        }
      }

      if (this.shouldBailStackItems) {
        this.itemSet.body.emitter.emit('destroyTimeline');
      }

      this.stackDirty = false;
    }
  };

  Group.prototype._didResize = function (resized, height) {
    resized = util.updateProperty(this, 'height', height) || resized; // recalculate size of label

    var boundingRect = this.dom.inner.getBoundingClientRect();
    var labelWidth = boundingRect.width;
    var labelHeight = boundingRect.height;
    resized = util.updateProperty(this.props.label, 'width', labelWidth) || resized;
    resized = util.updateProperty(this.props.label, 'height', labelHeight) || resized;
    return resized;
  };

  Group.prototype._applyGroupHeight = function (height) {
    this.dom.background.style.height = height + 'px';
    this.dom.foreground.style.height = height + 'px';
    this.dom.label.style.height = height + 'px';
  }; // update vertical position of items after they are re-stacked and the height of the group is calculated


  Group.prototype._updateItemsVerticalPosition = function (margin) {
    for (var i = 0, ii = this.visibleItems.length; i < ii; i++) {
      var item = this.visibleItems[i];
      item.repositionY(margin);

      if (!this.isVisible && this.groupId != "__background__") {
        if (item.displayed) item.hide();
      }
    }
  };
  /**
   * Repaint this group
   * @param {{start: number, end: number}} range
   * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
   * @param {boolean} [forceRestack=false]  Force restacking of all items
   * @param {boolean} [returnQueue=false]  return the queue or if the group resized
   * @return {boolean} Returns true if the group is resized or the redraw queue if returnQueue=true
   */


  Group.prototype.redraw = function (range, margin, forceRestack, returnQueue) {
    var resized = false;
    var lastIsVisible = this.isVisible;
    var height;
    var queue = [// force recalculation of the height of the items when the marker height changed
    // (due to the Timeline being attached to the DOM or changed from display:none to visible)
    function () {
      forceRestack = this._didMarkerHeightChange.bind(this);
    }.bind(this), // recalculate the height of the subgroups
    this._updateSubGroupHeights.bind(this, margin), // calculate actual size and position
    this._calculateGroupSizeAndPosition.bind(this), // check if group is visible
    function () {
      this.isVisible = this._isGroupVisible.bind(this)(range, margin);
    }.bind(this), // redraw Items if needed
    function () {
      this._redrawItems.bind(this)(forceRestack, lastIsVisible, margin, range);
    }.bind(this), // update subgroups
    this._updateSubgroupsSizes.bind(this), // recalculate the height of the group
    function () {
      height = this._calculateHeight.bind(this)(margin);
    }.bind(this), // calculate actual size and position again
    this._calculateGroupSizeAndPosition.bind(this), // check if resized
    function () {
      resized = this._didResize.bind(this)(resized, height);
    }.bind(this), // apply group height
    function () {
      this._applyGroupHeight.bind(this)(height);
    }.bind(this), // update vertical position of items after they are re-stacked and the height of the group is calculated
    function () {
      this._updateItemsVerticalPosition.bind(this)(margin);
    }.bind(this), function () {
      if (!this.isVisible && this.height) {
        resized = false;
      }

      return resized;
    }];

    if (returnQueue) {
      return queue;
    } else {
      var result;
      queue.forEach(function (fn) {
        result = fn();
      });
      return result;
    }
  };
  /**
   * recalculate the height of the subgroups
   *
   * @param {{item: vis.Item}} margin
   * @private
   */


  Group.prototype._updateSubGroupHeights = function (margin) {
    if (Object.keys(this.subgroups).length > 0) {
      var me = this;
      this.resetSubgroups();
      util.forEach(this.visibleItems, function (item) {
        if (item.data.subgroup !== undefined) {
          me.subgroups[item.data.subgroup].height = Math.max(me.subgroups[item.data.subgroup].height, item.height + margin.item.vertical);
          me.subgroups[item.data.subgroup].visible = true;
        }
      });
    }
  };
  /**
   * check if group is visible
   *
   * @param {vis.Range} range
   * @param {{axis: vis.DataAxis}} margin
   * @returns {boolean} is visible
   * @private
   */


  Group.prototype._isGroupVisible = function (range, margin) {
    return this.top <= range.body.domProps.centerContainer.height - range.body.domProps.scrollTop + margin.axis && this.top + this.height + margin.axis >= -range.body.domProps.scrollTop;
  };
  /**
   * recalculate the height of the group
   * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
   * @returns {number} Returns the height
   * @private
   */


  Group.prototype._calculateHeight = function (margin) {
    // recalculate the height of the group
    var height, items;

    if (this.heightMode === 'fixed') {
      items = util.toArray(this.items);
    } else {
      // default or 'auto'
      items = this.visibleItems;
    }

    if (items.length > 0) {
      var min = items[0].top;
      var max = items[0].top + items[0].height;
      util.forEach(items, function (item) {
        min = Math.min(min, item.top);
        max = Math.max(max, item.top + item.height);
      });

      if (min > margin.axis) {
        // there is an empty gap between the lowest item and the axis
        var offset = min - margin.axis;
        max -= offset;
        util.forEach(items, function (item) {
          item.top -= offset;
        });
      }

      height = max + margin.item.vertical / 2;
    } else {
      height = 0;
    }

    height = Math.max(height, this.props.label.height);
    return height;
  };
  /**
   * Show this group: attach to the DOM
   */


  Group.prototype.show = function () {
    if (!this.dom.label.parentNode) {
      this.itemSet.dom.labelSet.appendChild(this.dom.label);
    }

    if (!this.dom.foreground.parentNode) {
      this.itemSet.dom.foreground.appendChild(this.dom.foreground);
    }

    if (!this.dom.background.parentNode) {
      this.itemSet.dom.background.appendChild(this.dom.background);
    }

    if (!this.dom.axis.parentNode) {
      this.itemSet.dom.axis.appendChild(this.dom.axis);
    }
  };
  /**
   * Hide this group: remove from the DOM
   */


  Group.prototype.hide = function () {
    var label = this.dom.label;

    if (label.parentNode) {
      label.parentNode.removeChild(label);
    }

    var foreground = this.dom.foreground;

    if (foreground.parentNode) {
      foreground.parentNode.removeChild(foreground);
    }

    var background = this.dom.background;

    if (background.parentNode) {
      background.parentNode.removeChild(background);
    }

    var axis = this.dom.axis;

    if (axis.parentNode) {
      axis.parentNode.removeChild(axis);
    }
  };
  /**
   * Add an item to the group
   * @param {Item} item
   */


  Group.prototype.add = function (item) {
    this.items[item.id] = item;
    item.setParent(this);
    this.stackDirty = true; // add to

    if (item.data.subgroup !== undefined) {
      this._addToSubgroup(item);

      this.orderSubgroups();
    }

    if (this.visibleItems.indexOf(item) == -1) {
      var range = this.itemSet.body.range; // TODO: not nice accessing the range like this

      this._checkIfVisible(item, this.visibleItems, range);
    }
  };

  Group.prototype._addToSubgroup = function (item, subgroupId) {
    subgroupId = subgroupId || item.data.subgroup;

    if (subgroupId != undefined && this.subgroups[subgroupId] === undefined) {
      this.subgroups[subgroupId] = {
        height: 0,
        top: 0,
        start: item.data.start,
        end: item.data.end || item.data.start,
        visible: false,
        index: this.subgroupIndex,
        items: [],
        stack: this.subgroupStackAll || this.subgroupStack[subgroupId] || false
      };
      this.subgroupIndex++;
    }

    if (new Date(item.data.start) < new Date(this.subgroups[subgroupId].start)) {
      this.subgroups[subgroupId].start = item.data.start;
    }

    var itemEnd = item.data.end || item.data.start;

    if (new Date(itemEnd) > new Date(this.subgroups[subgroupId].end)) {
      this.subgroups[subgroupId].end = itemEnd;
    }

    this.subgroups[subgroupId].items.push(item);
  };

  Group.prototype._updateSubgroupsSizes = function () {
    var me = this;

    if (me.subgroups) {
      for (var subgroup in me.subgroups) {
        var initialEnd = me.subgroups[subgroup].items[0].data.end || me.subgroups[subgroup].items[0].data.start;
        var newStart = me.subgroups[subgroup].items[0].data.start;
        var newEnd = initialEnd - 1;
        me.subgroups[subgroup].items.forEach(function (item) {
          if (new Date(item.data.start) < new Date(newStart)) {
            newStart = item.data.start;
          }

          var itemEnd = item.data.end || item.data.start;

          if (new Date(itemEnd) > new Date(newEnd)) {
            newEnd = itemEnd;
          }
        });
        me.subgroups[subgroup].start = newStart;
        me.subgroups[subgroup].end = new Date(newEnd - 1); // -1 to compensate for colliding end to start subgroups;
      }
    }
  };

  Group.prototype.orderSubgroups = function () {
    if (this.subgroupOrderer !== undefined) {
      var sortArray = [];
      var subgroup;

      if (typeof this.subgroupOrderer == 'string') {
        for (subgroup in this.subgroups) {
          sortArray.push({
            subgroup: subgroup,
            sortField: this.subgroups[subgroup].items[0].data[this.subgroupOrderer]
          });
        }

        sortArray.sort(function (a, b) {
          return a.sortField - b.sortField;
        });
      } else if (typeof this.subgroupOrderer == 'function') {
        for (subgroup in this.subgroups) {
          sortArray.push(this.subgroups[subgroup].items[0].data);
        }

        sortArray.sort(this.subgroupOrderer);
      }

      if (sortArray.length > 0) {
        for (var i = 0; i < sortArray.length; i++) {
          this.subgroups[sortArray[i].subgroup].index = i;
        }
      }
    }
  };

  Group.prototype.resetSubgroups = function () {
    for (var subgroup in this.subgroups) {
      if (this.subgroups.hasOwnProperty(subgroup)) {
        this.subgroups[subgroup].visible = false;
        this.subgroups[subgroup].height = 0;
      }
    }
  };
  /**
   * Remove an item from the group
   * @param {Item} item
   */


  Group.prototype.remove = function (item) {
    delete this.items[item.id];
    item.setParent(null);
    this.stackDirty = true; // remove from visible items

    var index = this.visibleItems.indexOf(item);
    if (index != -1) this.visibleItems.splice(index, 1);

    if (item.data.subgroup !== undefined) {
      this._removeFromSubgroup(item);

      this.orderSubgroups();
    }
  };

  Group.prototype._removeFromSubgroup = function (item, subgroupId) {
    subgroupId = subgroupId || item.data.subgroup;

    if (subgroupId != undefined) {
      var subgroup = this.subgroups[subgroupId];

      if (subgroup) {
        var itemIndex = subgroup.items.indexOf(item); //  Check the item is actually in this subgroup. How should items not in the group be handled?

        if (itemIndex >= 0) {
          subgroup.items.splice(itemIndex, 1);

          if (!subgroup.items.length) {
            delete this.subgroups[subgroupId];
          } else {
            this._updateSubgroupsSizes();
          }
        }
      }
    }
  };
  /**
   * Remove an item from the corresponding DataSet
   * @param {Item} item
   */


  Group.prototype.removeFromDataSet = function (item) {
    this.itemSet.removeItem(item.id);
  };
  /**
   * Reorder the items
   */


  Group.prototype.order = function () {
    var array = util.toArray(this.items);
    var startArray = [];
    var endArray = [];

    for (var i = 0; i < array.length; i++) {
      if (array[i].data.end !== undefined) {
        endArray.push(array[i]);
      }

      startArray.push(array[i]);
    }

    this.orderedItems = {
      byStart: startArray,
      byEnd: endArray
    };
    Stack.orderByStart(this.orderedItems.byStart);
    Stack.orderByEnd(this.orderedItems.byEnd);
  };
  /**
   * Update the visible items
   * @param {{byStart: Item[], byEnd: Item[]}} orderedItems   All items ordered by start date and by end date
   * @param {Item[]} oldVisibleItems                          The previously visible items.
   * @param {{start: number, end: number}} range              Visible range
   * @return {Item[]} visibleItems                            The new visible items.
   * @private
   */


  Group.prototype._updateItemsInRange = function (orderedItems, oldVisibleItems, range) {
    var visibleItems = [];
    var visibleItemsLookup = {}; // we keep this to quickly look up if an item already exists in the list without using indexOf on visibleItems

    var interval = (range.end - range.start) / 4;
    var lowerBound = range.start - interval;
    var upperBound = range.end + interval; // this function is used to do the binary search.

    var searchFunction = function (value) {
      if (value < lowerBound) {
        return -1;
      } else if (value <= upperBound) {
        return 0;
      } else {
        return 1;
      }
    }; // first check if the items that were in view previously are still in view.
    // IMPORTANT: this handles the case for the items with startdate before the window and enddate after the window!
    // also cleans up invisible items.


    if (oldVisibleItems.length > 0) {
      for (var i = 0; i < oldVisibleItems.length; i++) {
        this._checkIfVisibleWithReference(oldVisibleItems[i], visibleItems, visibleItemsLookup, range);
      }
    } // we do a binary search for the items that have only start values.


    var initialPosByStart = util.binarySearchCustom(orderedItems.byStart, searchFunction, 'data', 'start'); // trace the visible items from the inital start pos both ways until an invisible item is found, we only look at the start values.

    this._traceVisible(initialPosByStart, orderedItems.byStart, visibleItems, visibleItemsLookup, function (item) {
      return item.data.start < lowerBound || item.data.start > upperBound;
    }); // if the window has changed programmatically without overlapping the old window, the ranged items with start < lowerBound and end > upperbound are not shown.
    // We therefore have to brute force check all items in the byEnd list


    if (this.checkRangedItems == true) {
      this.checkRangedItems = false;

      for (i = 0; i < orderedItems.byEnd.length; i++) {
        this._checkIfVisibleWithReference(orderedItems.byEnd[i], visibleItems, visibleItemsLookup, range);
      }
    } else {
      // we do a binary search for the items that have defined end times.
      var initialPosByEnd = util.binarySearchCustom(orderedItems.byEnd, searchFunction, 'data', 'end'); // trace the visible items from the inital start pos both ways until an invisible item is found, we only look at the end values.

      this._traceVisible(initialPosByEnd, orderedItems.byEnd, visibleItems, visibleItemsLookup, function (item) {
        return item.data.end < lowerBound || item.data.end > upperBound;
      });
    }

    var redrawQueue = {};
    var redrawQueueLength = 0;

    for (i = 0; i < visibleItems.length; i++) {
      var item = visibleItems[i];

      if (!item.displayed) {
        var returnQueue = true;
        redrawQueue[i] = item.redraw(returnQueue);
        redrawQueueLength = redrawQueue[i].length;
      }
    }

    var needRedraw = redrawQueueLength > 0;

    if (needRedraw) {
      // redraw all regular items
      for (var j = 0; j < redrawQueueLength; j++) {
        util.forEach(redrawQueue, function (fns) {
          fns[j]();
        });
      }
    }

    for (i = 0; i < visibleItems.length; i++) {
      visibleItems[i].repositionX();
    }

    return visibleItems;
  };

  Group.prototype._traceVisible = function (initialPos, items, visibleItems, visibleItemsLookup, breakCondition) {
    if (initialPos != -1) {
      var i, item;

      for (i = initialPos; i >= 0; i--) {
        item = items[i];

        if (breakCondition(item)) {
          break;
        } else {
          if (visibleItemsLookup[item.id] === undefined) {
            visibleItemsLookup[item.id] = true;
            visibleItems.push(item);
          }
        }
      }

      for (i = initialPos + 1; i < items.length; i++) {
        item = items[i];

        if (breakCondition(item)) {
          break;
        } else {
          if (visibleItemsLookup[item.id] === undefined) {
            visibleItemsLookup[item.id] = true;
            visibleItems.push(item);
          }
        }
      }
    }
  };
  /**
   * this function is very similar to the _checkIfInvisible() but it does not
   * return booleans, hides the item if it should not be seen and always adds to
   * the visibleItems.
   * this one is for brute forcing and hiding.
   *
   * @param {Item} item
   * @param {Array} visibleItems
   * @param {{start:number, end:number}} range
   * @private
   */


  Group.prototype._checkIfVisible = function (item, visibleItems, range) {
    if (item.isVisible(range)) {
      if (!item.displayed) item.show(); // reposition item horizontally

      item.repositionX();
      visibleItems.push(item);
    } else {
      if (item.displayed) item.hide();
    }
  };
  /**
   * this function is very similar to the _checkIfInvisible() but it does not
   * return booleans, hides the item if it should not be seen and always adds to
   * the visibleItems.
   * this one is for brute forcing and hiding.
   *
   * @param {Item} item
   * @param {Array.<vis.Item>} visibleItems
   * @param {Object<number, boolean>} visibleItemsLookup
   * @param {{start:number, end:number}} range
   * @private
   */


  Group.prototype._checkIfVisibleWithReference = function (item, visibleItems, visibleItemsLookup, range) {
    if (item.isVisible(range)) {
      if (visibleItemsLookup[item.id] === undefined) {
        visibleItemsLookup[item.id] = true;
        visibleItems.push(item);
      }
    } else {
      if (item.displayed) item.hide();
    }
  };

  Group.prototype.changeSubgroup = function (item, oldSubgroup, newSubgroup) {
    this._removeFromSubgroup(item, oldSubgroup);

    this._addToSubgroup(item, newSubgroup);

    this.orderSubgroups();
  };

  var Group_1 = Group;

  /**
   * @constructor BackgroundGroup
   * @param {number | string} groupId
   * @param {Object} data
   * @param {ItemSet} itemSet
   * @extends Group
   */

  function BackgroundGroup(groupId, data, itemSet) {
    Group_1.call(this, groupId, data, itemSet);
    this.width = 0;
    this.height = 0;
    this.top = 0;
    this.left = 0;
  }

  BackgroundGroup.prototype = Object.create(Group_1.prototype);
  /**
   * Repaint this group
   * @param {{start: number, end: number}} range
   * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
   * @param {boolean} [forceRestack=false]  Force restacking of all items
   * @return {boolean} Returns true if the group is resized
   */

  BackgroundGroup.prototype.redraw = function (range, margin, forceRestack) {
    // eslint-disable-line no-unused-vars
    var resized = false;
    this.visibleItems = this._updateItemsInRange(this.orderedItems, this.visibleItems, range); // calculate actual size

    this.width = this.dom.background.offsetWidth; // apply new height (just always zero for BackgroundGroup

    this.dom.background.style.height = '0'; // update vertical position of items after they are re-stacked and the height of the group is calculated

    for (var i = 0, ii = this.visibleItems.length; i < ii; i++) {
      var item = this.visibleItems[i];
      item.repositionY(margin);
    }

    return resized;
  };
  /**
   * Show this group: attach to the DOM
   */


  BackgroundGroup.prototype.show = function () {
    if (!this.dom.background.parentNode) {
      this.itemSet.dom.background.appendChild(this.dom.background);
    }
  };

  var BackgroundGroup_1 = BackgroundGroup;

  /**
   * @constructor Item
   * @param {Object} data             Object containing (optional) parameters type,
   *                                  start, end, content, group, className.
   * @param {{toScreen: function, toTime: function}} conversion
   *                                  Conversion functions from time to screen and vice versa
   * @param {Object} options          Configuration options
   *                                  // TODO: describe available options
   */

  function Item(data, conversion, options) {
    this.id = null;
    this.parent = null;
    this.data = data;
    this.dom = null;
    this.conversion = conversion || {};
    this.options = options || {};
    this.selected = false;
    this.displayed = false;
    this.groupShowing = true;
    this.dirty = true;
    this.top = null;
    this.right = null;
    this.left = null;
    this.width = null;
    this.height = null;
    this.editable = null;

    this._updateEditStatus();
  }

  Item.prototype.stack = true;
  /**
   * Select current item
   */

  Item.prototype.select = function () {
    this.selected = true;
    this.dirty = true;
    if (this.displayed) this.redraw();
  };
  /**
   * Unselect current item
   */


  Item.prototype.unselect = function () {
    this.selected = false;
    this.dirty = true;
    if (this.displayed) this.redraw();
  };
  /**
   * Set data for the item. Existing data will be updated. The id should not
   * be changed. When the item is displayed, it will be redrawn immediately.
   * @param {Object} data
   */


  Item.prototype.setData = function (data) {
    var groupChanged = data.group != undefined && this.data.group != data.group;

    if (groupChanged && this.parent != null) {
      this.parent.itemSet._moveToGroup(this, data.group);
    }

    if (this.parent) {
      this.parent.stackDirty = true;
    }

    var subGroupChanged = data.subgroup != undefined && this.data.subgroup != data.subgroup;

    if (subGroupChanged && this.parent != null) {
      this.parent.changeSubgroup(this, this.data.subgroup, data.subgroup);
    }

    this.data = data;

    this._updateEditStatus();

    this.dirty = true;
    if (this.displayed) this.redraw();
  };
  /**
   * Set a parent for the item
   * @param {Group} parent
   */


  Item.prototype.setParent = function (parent) {
    if (this.displayed) {
      this.hide();
      this.parent = parent;

      if (this.parent) {
        this.show();
      }
    } else {
      this.parent = parent;
    }
  };
  /**
   * Check whether this item is visible inside given range
   * @param {vis.Range} range with a timestamp for start and end
   * @returns {boolean} True if visible
   */


  Item.prototype.isVisible = function (range) {
    // eslint-disable-line no-unused-vars
    return false;
  };
  /**
   * Show the Item in the DOM (when not already visible)
   * @return {Boolean} changed
   */


  Item.prototype.show = function () {
    return false;
  };
  /**
   * Hide the Item from the DOM (when visible)
   * @return {Boolean} changed
   */


  Item.prototype.hide = function () {
    return false;
  };
  /**
   * Repaint the item
   */


  Item.prototype.redraw = function () {// should be implemented by the item
  };
  /**
   * Reposition the Item horizontally
   */


  Item.prototype.repositionX = function () {// should be implemented by the item
  };
  /**
   * Reposition the Item vertically
   */


  Item.prototype.repositionY = function () {// should be implemented by the item
  };
  /**
   * Repaint a drag area on the center of the item when the item is selected
   * @protected
   */


  Item.prototype._repaintDragCenter = function () {
    if (this.selected && this.options.editable.updateTime && !this.dom.dragCenter) {
      var me = this; // create and show drag area

      var dragCenter = document.createElement('div');
      dragCenter.className = 'vis-drag-center';
      dragCenter.dragCenterItem = this;
      var hammer = new hammer$2(dragCenter);
      hammer.on('tap', function (event) {
        me.parent.itemSet.body.emitter.emit('click', {
          event: event,
          item: me.id
        });
      });
      hammer.on('doubletap', function (event) {
        event.stopPropagation();

        me.parent.itemSet._onUpdateItem(me);

        me.parent.itemSet.body.emitter.emit('doubleClick', {
          event: event,
          item: me.id
        });
      });

      if (this.dom.box) {
        if (this.dom.dragLeft) {
          this.dom.box.insertBefore(dragCenter, this.dom.dragLeft);
        } else {
          this.dom.box.appendChild(dragCenter);
        }
      } else if (this.dom.point) {
        this.dom.point.appendChild(dragCenter);
      }

      this.dom.dragCenter = dragCenter;
    } else if (!this.selected && this.dom.dragCenter) {
      // delete drag area
      if (this.dom.dragCenter.parentNode) {
        this.dom.dragCenter.parentNode.removeChild(this.dom.dragCenter);
      }

      this.dom.dragCenter = null;
    }
  };
  /**
   * Repaint a delete button on the top right of the item when the item is selected
   * @param {HTMLElement} anchor
   * @protected
   */


  Item.prototype._repaintDeleteButton = function (anchor) {
    var editable = (this.options.editable.overrideItems || this.editable == null) && this.options.editable.remove || !this.options.editable.overrideItems && this.editable != null && this.editable.remove;

    if (this.selected && editable && !this.dom.deleteButton) {
      // create and show button
      var me = this;
      var deleteButton = document.createElement('div');

      if (this.options.rtl) {
        deleteButton.className = 'vis-delete-rtl';
      } else {
        deleteButton.className = 'vis-delete';
      }

      deleteButton.title = 'Delete this item'; // TODO: be able to destroy the delete button

      new hammer$2(deleteButton).on('tap', function (event) {
        event.stopPropagation();
        me.parent.removeFromDataSet(me);
      });
      anchor.appendChild(deleteButton);
      this.dom.deleteButton = deleteButton;
    } else if (!this.selected && this.dom.deleteButton) {
      // remove button
      if (this.dom.deleteButton.parentNode) {
        this.dom.deleteButton.parentNode.removeChild(this.dom.deleteButton);
      }

      this.dom.deleteButton = null;
    }
  };
  /**
   * Repaint a onChange tooltip on the top right of the item when the item is selected
   * @param {HTMLElement} anchor
   * @protected
   */


  Item.prototype._repaintOnItemUpdateTimeTooltip = function (anchor) {
    if (!this.options.tooltipOnItemUpdateTime) return;
    var editable = (this.options.editable.updateTime || this.data.editable === true) && this.data.editable !== false;

    if (this.selected && editable && !this.dom.onItemUpdateTimeTooltip) {
      var onItemUpdateTimeTooltip = document.createElement('div');
      onItemUpdateTimeTooltip.className = 'vis-onUpdateTime-tooltip';
      anchor.appendChild(onItemUpdateTimeTooltip);
      this.dom.onItemUpdateTimeTooltip = onItemUpdateTimeTooltip;
    } else if (!this.selected && this.dom.onItemUpdateTimeTooltip) {
      // remove button
      if (this.dom.onItemUpdateTimeTooltip.parentNode) {
        this.dom.onItemUpdateTimeTooltip.parentNode.removeChild(this.dom.onItemUpdateTimeTooltip);
      }

      this.dom.onItemUpdateTimeTooltip = null;
    } // position onChange tooltip


    if (this.dom.onItemUpdateTimeTooltip) {
      // only show when editing
      this.dom.onItemUpdateTimeTooltip.style.visibility = this.parent.itemSet.touchParams.itemIsDragging ? 'visible' : 'hidden'; // position relative to item's content

      if (this.options.rtl) {
        this.dom.onItemUpdateTimeTooltip.style.right = this.dom.content.style.right;
      } else {
        this.dom.onItemUpdateTimeTooltip.style.left = this.dom.content.style.left;
      } // position above or below the item depending on the item's position in the window


      var tooltipOffset = 50; // TODO: should be tooltip height (depends on template)

      var scrollTop = this.parent.itemSet.body.domProps.scrollTop; // TODO: this.top for orientation:true is actually the items distance from the bottom... 
      // (should be this.bottom)

      var itemDistanceFromTop;

      if (this.options.orientation.item == 'top') {
        itemDistanceFromTop = this.top;
      } else {
        itemDistanceFromTop = this.parent.height - this.top - this.height;
      }

      var isCloseToTop = itemDistanceFromTop + this.parent.top - tooltipOffset < -scrollTop;

      if (isCloseToTop) {
        this.dom.onItemUpdateTimeTooltip.style.bottom = "";
        this.dom.onItemUpdateTimeTooltip.style.top = this.height + 2 + "px";
      } else {
        this.dom.onItemUpdateTimeTooltip.style.top = "";
        this.dom.onItemUpdateTimeTooltip.style.bottom = this.height + 2 + "px";
      } // handle tooltip content


      var content;
      var templateFunction;

      if (this.options.tooltipOnItemUpdateTime && this.options.tooltipOnItemUpdateTime.template) {
        templateFunction = this.options.tooltipOnItemUpdateTime.template.bind(this);
        content = templateFunction(this.data);
      } else {
        content = 'start: ' + moment$3(this.data.start).format('MM/DD/YYYY hh:mm');

        if (this.data.end) {
          content += '<br> end: ' + moment$3(this.data.end).format('MM/DD/YYYY hh:mm');
        }
      }

      this.dom.onItemUpdateTimeTooltip.innerHTML = content;
    }
  };
  /**
   * Set HTML contents for the item
   * @param {Element} element   HTML element to fill with the contents
   * @private
   */


  Item.prototype._updateContents = function (element) {
    var content;
    var changed;
    var templateFunction;
    var itemVisibleFrameContent;
    var visibleFrameTemplateFunction;
    var itemData = this.parent.itemSet.itemsData.get(this.id); // get a clone of the data from the dataset

    var frameElement = this.dom.box || this.dom.point;
    var itemVisibleFrameContentElement = frameElement.getElementsByClassName('vis-item-visible-frame')[0];

    if (this.options.visibleFrameTemplate) {
      visibleFrameTemplateFunction = this.options.visibleFrameTemplate.bind(this);
      itemVisibleFrameContent = visibleFrameTemplateFunction(itemData, frameElement);
    } else {
      itemVisibleFrameContent = '';
    }

    if (itemVisibleFrameContentElement) {
      if (itemVisibleFrameContent instanceof Object && !(itemVisibleFrameContent instanceof Element)) {
        visibleFrameTemplateFunction(itemData, itemVisibleFrameContentElement);
      } else {
        changed = this._contentToString(this.itemVisibleFrameContent) !== this._contentToString(itemVisibleFrameContent);

        if (changed) {
          // only replace the content when changed
          if (itemVisibleFrameContent instanceof Element) {
            itemVisibleFrameContentElement.innerHTML = '';
            itemVisibleFrameContentElement.appendChild(itemVisibleFrameContent);
          } else if (itemVisibleFrameContent != undefined) {
            itemVisibleFrameContentElement.innerHTML = itemVisibleFrameContent;
          } else {
            if (!(this.data.type == 'background' && this.data.content === undefined)) {
              throw new Error('Property "content" missing in item ' + this.id);
            }
          }

          this.itemVisibleFrameContent = itemVisibleFrameContent;
        }
      }
    }

    if (this.options.template) {
      templateFunction = this.options.template.bind(this);
      content = templateFunction(itemData, element, this.data);
    } else {
      content = this.data.content;
    }

    if (content instanceof Object && !(content instanceof Element)) {
      templateFunction(itemData, element);
    } else {
      changed = this._contentToString(this.content) !== this._contentToString(content);

      if (changed) {
        // only replace the content when changed
        if (content instanceof Element) {
          element.innerHTML = '';
          element.appendChild(content);
        } else if (content != undefined) {
          element.innerHTML = content;
        } else {
          if (!(this.data.type == 'background' && this.data.content === undefined)) {
            throw new Error('Property "content" missing in item ' + this.id);
          }
        }

        this.content = content;
      }
    }
  };
  /**
   * Process dataAttributes timeline option and set as data- attributes on dom.content
   * @param {Element} element   HTML element to which the attributes will be attached
   * @private
   */


  Item.prototype._updateDataAttributes = function (element) {
    if (this.options.dataAttributes && this.options.dataAttributes.length > 0) {
      var attributes = [];

      if (Array.isArray(this.options.dataAttributes)) {
        attributes = this.options.dataAttributes;
      } else if (this.options.dataAttributes == 'all') {
        attributes = Object.keys(this.data);
      } else {
        return;
      }

      for (var i = 0; i < attributes.length; i++) {
        var name = attributes[i];
        var value = this.data[name];

        if (value != null) {
          element.setAttribute('data-' + name, value);
        } else {
          element.removeAttribute('data-' + name);
        }
      }
    }
  };
  /**
   * Update custom styles of the element
   * @param {Element} element
   * @private
   */


  Item.prototype._updateStyle = function (element) {
    // remove old styles
    if (this.style) {
      util.removeCssText(element, this.style);
      this.style = null;
    } // append new styles


    if (this.data.style) {
      util.addCssText(element, this.data.style);
      this.style = this.data.style;
    }
  };
  /**
   * Stringify the items contents
   * @param {string | Element | undefined} content
   * @returns {string | undefined}
   * @private
   */


  Item.prototype._contentToString = function (content) {
    if (typeof content === 'string') return content;
    if (content && 'outerHTML' in content) return content.outerHTML;
    return content;
  };
  /**
   * Update the editability of this item.
   */


  Item.prototype._updateEditStatus = function () {
    if (this.options) {
      if (typeof this.options.editable === 'boolean') {
        this.editable = {
          updateTime: this.options.editable,
          updateGroup: this.options.editable,
          remove: this.options.editable
        };
      } else if (typeof this.options.editable === 'object') {
        this.editable = {};
        util.selectiveExtend(['updateTime', 'updateGroup', 'remove'], this.editable, this.options.editable);
      }
    } // Item data overrides, except if options.editable.overrideItems is set.


    if (!this.options || !this.options.editable || this.options.editable.overrideItems !== true) {
      if (this.data) {
        if (typeof this.data.editable === 'boolean') {
          this.editable = {
            updateTime: this.data.editable,
            updateGroup: this.data.editable,
            remove: this.data.editable
          };
        } else if (typeof this.data.editable === 'object') {
          // TODO: in vis.js 5.0, we should change this to not reset options from the timeline configuration.
          // Basically just remove the next line...
          this.editable = {};
          util.selectiveExtend(['updateTime', 'updateGroup', 'remove'], this.editable, this.data.editable);
        }
      }
    }
  };
  /**
   * Return the width of the item left from its start date
   * @return {number}
   */


  Item.prototype.getWidthLeft = function () {
    return 0;
  };
  /**
   * Return the width of the item right from the max of its start and end date
   * @return {number}
   */


  Item.prototype.getWidthRight = function () {
    return 0;
  };
  /**
   * Return the title of the item
   * @return {string | undefined}
   */


  Item.prototype.getTitle = function () {
    return this.data.title;
  };

  /**
   * @constructor BoxItem
   * @extends Item
   * @param {Object} data             Object containing parameters start
   *                                  content, className.
   * @param {{toScreen: function, toTime: function}} conversion
   *                                  Conversion functions from time to screen and vice versa
   * @param {Object} [options]        Configuration options
   *                                  // TODO: describe available options
   */

  function BoxItem(data, conversion, options) {
    this.props = {
      dot: {
        width: 0,
        height: 0
      },
      line: {
        width: 0,
        height: 0
      }
    };
    this.options = options; // validate data

    if (data) {
      if (data.start == undefined) {
        throw new Error('Property "start" missing in item ' + data);
      }
    }

    Item.call(this, data, conversion, options);
  }

  BoxItem.prototype = new Item(null, null, null);
  /**
   * Check whether this item is visible inside given range
   * @param {{start: number, end: number}} range with a timestamp for start and end
   * @returns {boolean} True if visible
   */

  BoxItem.prototype.isVisible = function (range) {
    // determine visibility
    var isVisible;
    var align = this.options.align;
    var widthInMs = this.width * range.getMillisecondsPerPixel();

    if (align == 'right') {
      isVisible = this.data.start.getTime() > range.start && this.data.start.getTime() - widthInMs < range.end;
    } else if (align == 'left') {
      isVisible = this.data.start.getTime() + widthInMs > range.start && this.data.start.getTime() < range.end;
    } else {
      // default or 'center'
      isVisible = this.data.start.getTime() + widthInMs / 2 > range.start && this.data.start.getTime() - widthInMs / 2 < range.end;
    }

    return isVisible;
  };

  BoxItem.prototype._createDomElement = function () {
    if (!this.dom) {
      // create DOM
      this.dom = {}; // create main box

      this.dom.box = document.createElement('DIV'); // contents box (inside the background box). used for making margins

      this.dom.content = document.createElement('DIV');
      this.dom.content.className = 'vis-item-content';
      this.dom.box.appendChild(this.dom.content); // line to axis

      this.dom.line = document.createElement('DIV');
      this.dom.line.className = 'vis-line'; // dot on axis

      this.dom.dot = document.createElement('DIV');
      this.dom.dot.className = 'vis-dot'; // attach this item as attribute

      this.dom.box['timeline-item'] = this;
      this.dirty = true;
    }
  };

  BoxItem.prototype._appendDomElement = function () {
    if (!this.parent) {
      throw new Error('Cannot redraw item: no parent attached');
    }

    if (!this.dom.box.parentNode) {
      var foreground = this.parent.dom.foreground;
      if (!foreground) throw new Error('Cannot redraw item: parent has no foreground container element');
      foreground.appendChild(this.dom.box);
    }

    if (!this.dom.line.parentNode) {
      var background = this.parent.dom.background;
      if (!background) throw new Error('Cannot redraw item: parent has no background container element');
      background.appendChild(this.dom.line);
    }

    if (!this.dom.dot.parentNode) {
      var axis = this.parent.dom.axis;
      if (!background) throw new Error('Cannot redraw item: parent has no axis container element');
      axis.appendChild(this.dom.dot);
    }

    this.displayed = true;
  };

  BoxItem.prototype._updateDirtyDomComponents = function () {
    // An item is marked dirty when:
    // - the item is not yet rendered
    // - the item's data is changed
    // - the item is selected/deselected
    if (this.dirty) {
      this._updateContents(this.dom.content);

      this._updateDataAttributes(this.dom.box);

      this._updateStyle(this.dom.box);

      var editable = this.editable.updateTime || this.editable.updateGroup; // update class

      var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
      this.dom.box.className = 'vis-item vis-box' + className;
      this.dom.line.className = 'vis-item vis-line' + className;
      this.dom.dot.className = 'vis-item vis-dot' + className;
    }
  };

  BoxItem.prototype._getDomComponentsSizes = function () {
    return {
      previous: {
        right: this.dom.box.style.right,
        left: this.dom.box.style.left
      },
      dot: {
        height: this.dom.dot.offsetHeight,
        width: this.dom.dot.offsetWidth
      },
      line: {
        width: this.dom.line.offsetWidth
      },
      box: {
        width: this.dom.box.offsetWidth,
        height: this.dom.box.offsetHeight
      }
    };
  };

  BoxItem.prototype._updateDomComponentsSizes = function (sizes) {
    if (this.options.rtl) {
      this.dom.box.style.right = "0px";
    } else {
      this.dom.box.style.left = "0px";
    } // recalculate size


    this.props.dot.height = sizes.dot.height;
    this.props.dot.width = sizes.dot.width;
    this.props.line.width = sizes.line.width;
    this.width = sizes.box.width;
    this.height = sizes.box.height; // restore previous position

    if (this.options.rtl) {
      this.dom.box.style.right = sizes.previous.right;
    } else {
      this.dom.box.style.left = sizes.previous.left;
    }

    this.dirty = false;
  };

  BoxItem.prototype._repaintDomAdditionals = function () {
    this._repaintOnItemUpdateTimeTooltip(this.dom.box);

    this._repaintDragCenter();

    this._repaintDeleteButton(this.dom.box);
  };
  /**
   * Repaint the item
   * @param {boolean} [returnQueue=false]  return the queue
   * @return {boolean} the redraw queue if returnQueue=true
   */


  BoxItem.prototype.redraw = function (returnQueue) {
    var sizes;
    var queue = [// create item DOM
    this._createDomElement.bind(this), // append DOM to parent DOM
    this._appendDomElement.bind(this), // update dirty DOM
    this._updateDirtyDomComponents.bind(this), function () {
      if (this.dirty) {
        sizes = this._getDomComponentsSizes();
      }
    }.bind(this), function () {
      if (this.dirty) {
        this._updateDomComponentsSizes.bind(this)(sizes);
      }
    }.bind(this), // repaint DOM additionals
    this._repaintDomAdditionals.bind(this)];

    if (returnQueue) {
      return queue;
    } else {
      var result;
      queue.forEach(function (fn) {
        result = fn();
      });
      return result;
    }
  };
  /**
   * Show the item in the DOM (when not already visible). The items DOM will
   * be created when needed.
   * @param {boolean} [returnQueue=false]  whether to return a queue of functions to execute instead of just executing them
   * @return {boolean} the redraw queue if returnQueue=true
   */


  BoxItem.prototype.show = function (returnQueue) {
    if (!this.displayed) {
      return this.redraw(returnQueue);
    }
  };
  /**
   * Hide the item from the DOM (when visible)
   */


  BoxItem.prototype.hide = function () {
    if (this.displayed) {
      var dom = this.dom;
      if (dom.box.parentNode) dom.box.parentNode.removeChild(dom.box);
      if (dom.line.parentNode) dom.line.parentNode.removeChild(dom.line);
      if (dom.dot.parentNode) dom.dot.parentNode.removeChild(dom.dot);
      this.displayed = false;
    }
  };
  /**
   * Reposition the item horizontally
   * @Override
   */


  BoxItem.prototype.repositionX = function () {
    var start = this.conversion.toScreen(this.data.start);
    var align = this.options.align; // calculate left position of the box

    if (align == 'right') {
      if (this.options.rtl) {
        this.right = start - this.width; // reposition box, line, and dot

        this.dom.box.style.right = this.right + 'px';
        this.dom.line.style.right = start - this.props.line.width + 'px';
        this.dom.dot.style.right = start - this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
      } else {
        this.left = start - this.width; // reposition box, line, and dot

        this.dom.box.style.left = this.left + 'px';
        this.dom.line.style.left = start - this.props.line.width + 'px';
        this.dom.dot.style.left = start - this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
      }
    } else if (align == 'left') {
      if (this.options.rtl) {
        this.right = start; // reposition box, line, and dot

        this.dom.box.style.right = this.right + 'px';
        this.dom.line.style.right = start + 'px';
        this.dom.dot.style.right = start + this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
      } else {
        this.left = start; // reposition box, line, and dot

        this.dom.box.style.left = this.left + 'px';
        this.dom.line.style.left = start + 'px';
        this.dom.dot.style.left = start + this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
      }
    } else {
      // default or 'center'
      if (this.options.rtl) {
        this.right = start - this.width / 2; // reposition box, line, and dot

        this.dom.box.style.right = this.right + 'px';
        this.dom.line.style.right = start - this.props.line.width + 'px';
        this.dom.dot.style.right = start - this.props.dot.width / 2 + 'px';
      } else {
        this.left = start - this.width / 2; // reposition box, line, and dot

        this.dom.box.style.left = this.left + 'px';
        this.dom.line.style.left = start - this.props.line.width / 2 + 'px';
        this.dom.dot.style.left = start - this.props.dot.width / 2 + 'px';
      }
    }
  };
  /**
   * Reposition the item vertically
   * @Override
   */


  BoxItem.prototype.repositionY = function () {
    var orientation = this.options.orientation.item;
    var box = this.dom.box;
    var line = this.dom.line;
    var dot = this.dom.dot;

    if (orientation == 'top') {
      box.style.top = (this.top || 0) + 'px';
      line.style.top = '0';
      line.style.height = this.parent.top + this.top + 1 + 'px';
      line.style.bottom = '';
    } else {
      // orientation 'bottom'
      var itemSetHeight = this.parent.itemSet.props.height; // TODO: this is nasty

      var lineHeight = itemSetHeight - this.parent.top - this.parent.height + this.top;
      box.style.top = (this.parent.height - this.top - this.height || 0) + 'px';
      line.style.top = itemSetHeight - lineHeight + 'px';
      line.style.bottom = '0';
    }

    dot.style.top = -this.props.dot.height / 2 + 'px';
  };
  /**
   * Return the width of the item left from its start date
   * @return {number}
   */


  BoxItem.prototype.getWidthLeft = function () {
    return this.width / 2;
  };
  /**
   * Return the width of the item right from its start date
   * @return {number}
   */


  BoxItem.prototype.getWidthRight = function () {
    return this.width / 2;
  };

  var BoxItem_1 = BoxItem;

  /**
   * @constructor PointItem
   * @extends Item
   * @param {Object} data             Object containing parameters start
   *                                  content, className.
   * @param {{toScreen: function, toTime: function}} conversion
   *                                  Conversion functions from time to screen and vice versa
   * @param {Object} [options]        Configuration options
   *                                  // TODO: describe available options
   */

  function PointItem(data, conversion, options) {
    this.props = {
      dot: {
        top: 0,
        width: 0,
        height: 0
      },
      content: {
        height: 0,
        marginLeft: 0,
        marginRight: 0
      }
    };
    this.options = options; // validate data

    if (data) {
      if (data.start == undefined) {
        throw new Error('Property "start" missing in item ' + data);
      }
    }

    Item.call(this, data, conversion, options);
  }

  PointItem.prototype = new Item(null, null, null);
  /**
   * Check whether this item is visible inside given range
   * @param {{start: number, end: number}} range with a timestamp for start and end
   * @returns {boolean} True if visible
   */

  PointItem.prototype.isVisible = function (range) {
    // determine visibility
    var widthInMs = this.width * range.getMillisecondsPerPixel();
    return this.data.start.getTime() + widthInMs > range.start && this.data.start < range.end;
  };

  PointItem.prototype._createDomElement = function () {
    if (!this.dom) {
      // create DOM
      this.dom = {}; // background box

      this.dom.point = document.createElement('div'); // className is updated in redraw()
      // contents box, right from the dot

      this.dom.content = document.createElement('div');
      this.dom.content.className = 'vis-item-content';
      this.dom.point.appendChild(this.dom.content); // dot at start

      this.dom.dot = document.createElement('div');
      this.dom.point.appendChild(this.dom.dot); // attach this item as attribute

      this.dom.point['timeline-item'] = this;
      this.dirty = true;
    }
  };

  PointItem.prototype._appendDomElement = function () {
    if (!this.parent) {
      throw new Error('Cannot redraw item: no parent attached');
    }

    if (!this.dom.point.parentNode) {
      var foreground = this.parent.dom.foreground;

      if (!foreground) {
        throw new Error('Cannot redraw item: parent has no foreground container element');
      }

      foreground.appendChild(this.dom.point);
    }

    this.displayed = true;
  };

  PointItem.prototype._updateDirtyDomComponents = function () {
    // An item is marked dirty when:
    // - the item is not yet rendered
    // - the item's data is changed
    // - the item is selected/deselected
    if (this.dirty) {
      this._updateContents(this.dom.content);

      this._updateDataAttributes(this.dom.point);

      this._updateStyle(this.dom.point);

      var editable = this.editable.updateTime || this.editable.updateGroup; // update class

      var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
      this.dom.point.className = 'vis-item vis-point' + className;
      this.dom.dot.className = 'vis-item vis-dot' + className;
    }
  };

  PointItem.prototype._getDomComponentsSizes = function () {
    return {
      dot: {
        width: this.dom.dot.offsetWidth,
        height: this.dom.dot.offsetHeight
      },
      content: {
        width: this.dom.content.offsetWidth,
        height: this.dom.content.offsetHeight
      },
      point: {
        width: this.dom.point.offsetWidth,
        height: this.dom.point.offsetHeight
      }
    };
  };

  PointItem.prototype._updateDomComponentsSizes = function (sizes) {
    // recalculate size of dot and contents
    this.props.dot.width = sizes.dot.width;
    this.props.dot.height = sizes.dot.height;
    this.props.content.height = sizes.content.height; // resize contents

    if (this.options.rtl) {
      this.dom.content.style.marginRight = 2 * this.props.dot.width + 'px';
    } else {
      this.dom.content.style.marginLeft = 2 * this.props.dot.width + 'px';
    } //this.dom.content.style.marginRight = ... + 'px'; // TODO: margin right
    // recalculate size


    this.width = sizes.point.width;
    this.height = sizes.point.height; // reposition the dot

    this.dom.dot.style.top = (this.height - this.props.dot.height) / 2 + 'px';

    if (this.options.rtl) {
      this.dom.dot.style.right = this.props.dot.width / 2 + 'px';
    } else {
      this.dom.dot.style.left = this.props.dot.width / 2 + 'px';
    }

    this.dirty = false;
  };

  PointItem.prototype._repaintDomAdditionals = function () {
    this._repaintOnItemUpdateTimeTooltip(this.dom.point);

    this._repaintDragCenter();

    this._repaintDeleteButton(this.dom.point);
  };
  /**
   * Repaint the item
   * @param {boolean} [returnQueue=false]  return the queue
   * @return {boolean} the redraw queue if returnQueue=true
   */


  PointItem.prototype.redraw = function (returnQueue) {
    var sizes;
    var queue = [// create item DOM
    this._createDomElement.bind(this), // append DOM to parent DOM
    this._appendDomElement.bind(this), // update dirty DOM
    this._updateDirtyDomComponents.bind(this), function () {
      if (this.dirty) {
        sizes = this._getDomComponentsSizes();
      }
    }.bind(this), function () {
      if (this.dirty) {
        this._updateDomComponentsSizes.bind(this)(sizes);
      }
    }.bind(this), // repaint DOM additionals
    this._repaintDomAdditionals.bind(this)];

    if (returnQueue) {
      return queue;
    } else {
      var result;
      queue.forEach(function (fn) {
        result = fn();
      });
      return result;
    }
  };
  /**
   * Show the item in the DOM (when not already visible). The items DOM will
   * be created when needed.
   * @param {boolean} [returnQueue=false]  whether to return a queue of functions to execute instead of just executing them
   * @return {boolean} the redraw queue if returnQueue=true
   */


  PointItem.prototype.show = function (returnQueue) {
    if (!this.displayed) {
      return this.redraw(returnQueue);
    }
  };
  /**
   * Hide the item from the DOM (when visible)
   */


  PointItem.prototype.hide = function () {
    if (this.displayed) {
      if (this.dom.point.parentNode) {
        this.dom.point.parentNode.removeChild(this.dom.point);
      }

      this.displayed = false;
    }
  };
  /**
   * Reposition the item horizontally
   * @Override
   */


  PointItem.prototype.repositionX = function () {
    var start = this.conversion.toScreen(this.data.start);

    if (this.options.rtl) {
      this.right = start - this.props.dot.width; // reposition point

      this.dom.point.style.right = this.right + 'px';
    } else {
      this.left = start - this.props.dot.width; // reposition point

      this.dom.point.style.left = this.left + 'px';
    }
  };
  /**
   * Reposition the item vertically
   * @Override
   */


  PointItem.prototype.repositionY = function () {
    var orientation = this.options.orientation.item;
    var point = this.dom.point;

    if (orientation == 'top') {
      point.style.top = this.top + 'px';
    } else {
      point.style.top = this.parent.height - this.top - this.height + 'px';
    }
  };
  /**
   * Return the width of the item left from its start date
   * @return {number}
   */


  PointItem.prototype.getWidthLeft = function () {
    return this.props.dot.width;
  };
  /**
   * Return the width of the item right from  its start date
   * @return {number}
   */


  PointItem.prototype.getWidthRight = function () {
    return this.props.dot.width;
  };

  var PointItem_1 = PointItem;

  /**
   * @constructor RangeItem
   * @extends Item
   * @param {Object} data             Object containing parameters start, end
   *                                  content, className.
   * @param {{toScreen: function, toTime: function}} conversion
   *                                  Conversion functions from time to screen and vice versa
   * @param {Object} [options]        Configuration options
   *                                  // TODO: describe options
   */

  function RangeItem(data, conversion, options) {
    this.props = {
      content: {
        width: 0
      }
    };
    this.overflow = false; // if contents can overflow (css styling), this flag is set to true

    this.options = options; // validate data

    if (data) {
      if (data.start == undefined) {
        throw new Error('Property "start" missing in item ' + data.id);
      }

      if (data.end == undefined) {
        throw new Error('Property "end" missing in item ' + data.id);
      }
    }

    Item.call(this, data, conversion, options);
  }

  RangeItem.prototype = new Item(null, null, null);
  RangeItem.prototype.baseClassName = 'vis-item vis-range';
  /**
   * Check whether this item is visible inside given range
   *
   * @param {vis.Range} range with a timestamp for start and end
   * @returns {boolean} True if visible
   */

  RangeItem.prototype.isVisible = function (range) {
    // determine visibility
    return this.data.start < range.end && this.data.end > range.start;
  };

  RangeItem.prototype._createDomElement = function () {
    if (!this.dom) {
      // create DOM
      this.dom = {}; // background box

      this.dom.box = document.createElement('div'); // className is updated in redraw()
      // frame box (to prevent the item contents from overflowing)

      this.dom.frame = document.createElement('div');
      this.dom.frame.className = 'vis-item-overflow';
      this.dom.box.appendChild(this.dom.frame); // visible frame box (showing the frame that is always visible)

      this.dom.visibleFrame = document.createElement('div');
      this.dom.visibleFrame.className = 'vis-item-visible-frame';
      this.dom.box.appendChild(this.dom.visibleFrame); // contents box

      this.dom.content = document.createElement('div');
      this.dom.content.className = 'vis-item-content';
      this.dom.frame.appendChild(this.dom.content); // attach this item as attribute

      this.dom.box['timeline-item'] = this;
      this.dirty = true;
    }
  };

  RangeItem.prototype._appendDomElement = function () {
    if (!this.parent) {
      throw new Error('Cannot redraw item: no parent attached');
    }

    if (!this.dom.box.parentNode) {
      var foreground = this.parent.dom.foreground;

      if (!foreground) {
        throw new Error('Cannot redraw item: parent has no foreground container element');
      }

      foreground.appendChild(this.dom.box);
    }

    this.displayed = true;
  };

  RangeItem.prototype._updateDirtyDomComponents = function () {
    // update dirty DOM. An item is marked dirty when:
    // - the item is not yet rendered
    // - the item's data is changed
    // - the item is selected/deselected
    if (this.dirty) {
      this._updateContents(this.dom.content);

      this._updateDataAttributes(this.dom.box);

      this._updateStyle(this.dom.box);

      var editable = this.editable.updateTime || this.editable.updateGroup; // update class

      var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
      this.dom.box.className = this.baseClassName + className; // turn off max-width to be able to calculate the real width
      // this causes an extra browser repaint/reflow, but so be it

      this.dom.content.style.maxWidth = 'none';
    }
  };

  RangeItem.prototype._getDomComponentsSizes = function () {
    // determine from css whether this box has overflow
    this.overflow = window.getComputedStyle(this.dom.frame).overflow !== 'hidden';
    return {
      content: {
        width: this.dom.content.offsetWidth
      },
      box: {
        height: this.dom.box.offsetHeight
      }
    };
  };

  RangeItem.prototype._updateDomComponentsSizes = function (sizes) {
    this.props.content.width = sizes.content.width;
    this.height = sizes.box.height;
    this.dom.content.style.maxWidth = '';
    this.dirty = false;
  };

  RangeItem.prototype._repaintDomAdditionals = function () {
    this._repaintOnItemUpdateTimeTooltip(this.dom.box);

    this._repaintDeleteButton(this.dom.box);

    this._repaintDragCenter();

    this._repaintDragLeft();

    this._repaintDragRight();
  };
  /**
   * Repaint the item
   * @param {boolean} [returnQueue=false]  return the queue
   * @return {boolean} the redraw queue if returnQueue=true
   */


  RangeItem.prototype.redraw = function (returnQueue) {
    var sizes;
    var queue = [// create item DOM
    this._createDomElement.bind(this), // append DOM to parent DOM
    this._appendDomElement.bind(this), // update dirty DOM 
    this._updateDirtyDomComponents.bind(this), function () {
      if (this.dirty) {
        sizes = this._getDomComponentsSizes.bind(this)();
      }
    }.bind(this), function () {
      if (this.dirty) {
        this._updateDomComponentsSizes.bind(this)(sizes);
      }
    }.bind(this), // repaint DOM additionals
    this._repaintDomAdditionals.bind(this)];

    if (returnQueue) {
      return queue;
    } else {
      var result;
      queue.forEach(function (fn) {
        result = fn();
      });
      return result;
    }
  };
  /**
   * Show the item in the DOM (when not already visible). The items DOM will
   * be created when needed.
   * @param {boolean} [returnQueue=false]  whether to return a queue of functions to execute instead of just executing them
   * @return {boolean} the redraw queue if returnQueue=true
   */


  RangeItem.prototype.show = function (returnQueue) {
    if (!this.displayed) {
      return this.redraw(returnQueue);
    }
  };
  /**
   * Hide the item from the DOM (when visible)
   */


  RangeItem.prototype.hide = function () {
    if (this.displayed) {
      var box = this.dom.box;

      if (box.parentNode) {
        box.parentNode.removeChild(box);
      }

      this.displayed = false;
    }
  };
  /**
   * Reposition the item horizontally
   * @param {boolean} [limitSize=true] If true (default), the width of the range
   *                                   item will be limited, as the browser cannot
   *                                   display very wide divs. This means though
   *                                   that the applied left and width may
   *                                   not correspond to the ranges start and end
   * @Override
   */


  RangeItem.prototype.repositionX = function (limitSize) {
    var parentWidth = this.parent.width;
    var start = this.conversion.toScreen(this.data.start);
    var end = this.conversion.toScreen(this.data.end);
    var align = this.data.align === undefined ? this.options.align : this.data.align;
    var contentStartPosition;
    var contentWidth; // limit the width of the range, as browsers cannot draw very wide divs
    // unless limitSize: false is explicitly set in item data

    if (this.data.limitSize !== false && (limitSize === undefined || limitSize === true)) {
      if (start < -parentWidth) {
        start = -parentWidth;
      }

      if (end > 2 * parentWidth) {
        end = 2 * parentWidth;
      }
    } // add 0.5 to compensate floating-point values rounding


    var boxWidth = Math.max(end - start + 0.5, 1);

    if (this.overflow) {
      if (this.options.rtl) {
        this.right = start;
      } else {
        this.left = start;
      }

      this.width = boxWidth + this.props.content.width;
      contentWidth = this.props.content.width; // Note: The calculation of width is an optimistic calculation, giving
      //       a width which will not change when moving the Timeline
      //       So no re-stacking needed, which is nicer for the eye;
    } else {
      if (this.options.rtl) {
        this.right = start;
      } else {
        this.left = start;
      }

      this.width = boxWidth;
      contentWidth = Math.min(end - start, this.props.content.width);
    }

    if (this.options.rtl) {
      this.dom.box.style.right = this.right + 'px';
    } else {
      this.dom.box.style.left = this.left + 'px';
    }

    this.dom.box.style.width = boxWidth + 'px';

    switch (align) {
      case 'left':
        if (this.options.rtl) {
          this.dom.content.style.right = '0';
        } else {
          this.dom.content.style.left = '0';
        }

        break;

      case 'right':
        if (this.options.rtl) {
          this.dom.content.style.right = Math.max(boxWidth - contentWidth, 0) + 'px';
        } else {
          this.dom.content.style.left = Math.max(boxWidth - contentWidth, 0) + 'px';
        }

        break;

      case 'center':
        if (this.options.rtl) {
          this.dom.content.style.right = Math.max((boxWidth - contentWidth) / 2, 0) + 'px';
        } else {
          this.dom.content.style.left = Math.max((boxWidth - contentWidth) / 2, 0) + 'px';
        }

        break;

      default:
        // 'auto'
        // when range exceeds left of the window, position the contents at the left of the visible area
        if (this.overflow) {
          if (end > 0) {
            contentStartPosition = Math.max(-start, 0);
          } else {
            contentStartPosition = -contentWidth; // ensure it's not visible anymore
          }
        } else {
          if (start < 0) {
            contentStartPosition = -start;
          } else {
            contentStartPosition = 0;
          }
        }

        if (this.options.rtl) {
          this.dom.content.style.right = contentStartPosition + 'px';
        } else {
          this.dom.content.style.left = contentStartPosition + 'px';
          this.dom.content.style.width = 'calc(100% - ' + contentStartPosition + 'px)';
        }

    }
  };
  /**
   * Reposition the item vertically
   * @Override
   */


  RangeItem.prototype.repositionY = function () {
    var orientation = this.options.orientation.item;
    var box = this.dom.box;

    if (orientation == 'top') {
      box.style.top = this.top + 'px';
    } else {
      box.style.top = this.parent.height - this.top - this.height + 'px';
    }
  };
  /**
   * Repaint a drag area on the left side of the range when the range is selected
   * @protected
   */


  RangeItem.prototype._repaintDragLeft = function () {
    if ((this.selected || this.options.itemsAlwaysDraggable.range) && this.options.editable.updateTime && !this.dom.dragLeft) {
      // create and show drag area
      var dragLeft = document.createElement('div');
      dragLeft.className = 'vis-drag-left';
      dragLeft.dragLeftItem = this;
      this.dom.box.appendChild(dragLeft);
      this.dom.dragLeft = dragLeft;
    } else if (!this.selected && !this.options.itemsAlwaysDraggable.range && this.dom.dragLeft) {
      // delete drag area
      if (this.dom.dragLeft.parentNode) {
        this.dom.dragLeft.parentNode.removeChild(this.dom.dragLeft);
      }

      this.dom.dragLeft = null;
    }
  };
  /**
   * Repaint a drag area on the right side of the range when the range is selected
   * @protected
   */


  RangeItem.prototype._repaintDragRight = function () {
    if ((this.selected || this.options.itemsAlwaysDraggable.range) && this.options.editable.updateTime && !this.dom.dragRight) {
      // create and show drag area
      var dragRight = document.createElement('div');
      dragRight.className = 'vis-drag-right';
      dragRight.dragRightItem = this;
      this.dom.box.appendChild(dragRight);
      this.dom.dragRight = dragRight;
    } else if (!this.selected && !this.options.itemsAlwaysDraggable.range && this.dom.dragRight) {
      // delete drag area
      if (this.dom.dragRight.parentNode) {
        this.dom.dragRight.parentNode.removeChild(this.dom.dragRight);
      }

      this.dom.dragRight = null;
    }
  };

  var RangeItem_1 = RangeItem;

  /**
   * @constructor BackgroundItem
   * @extends Item
   * @param {Object} data             Object containing parameters start, end
   *                                  content, className.
   * @param {{toScreen: function, toTime: function}} conversion
   *                                  Conversion functions from time to screen and vice versa
   * @param {Object} [options]        Configuration options
   *                                  // TODO: describe options
   * // TODO: implement support for the BackgroundItem just having a start, then being displayed as a sort of an annotation
   */

  function BackgroundItem(data, conversion, options) {
    this.props = {
      content: {
        width: 0
      }
    };
    this.overflow = false; // if contents can overflow (css styling), this flag is set to true
    // validate data

    if (data) {
      if (data.start == undefined) {
        throw new Error('Property "start" missing in item ' + data.id);
      }

      if (data.end == undefined) {
        throw new Error('Property "end" missing in item ' + data.id);
      }
    }

    Item.call(this, data, conversion, options);
  }

  BackgroundItem.prototype = new Item(null, null, null);
  BackgroundItem.prototype.baseClassName = 'vis-item vis-background';
  BackgroundItem.prototype.stack = false;
  /**
   * Check whether this item is visible inside given range
   * @param {vis.Range} range with a timestamp for start and end
   * @returns {boolean} True if visible
   */

  BackgroundItem.prototype.isVisible = function (range) {
    // determine visibility
    return this.data.start < range.end && this.data.end > range.start;
  };

  BackgroundItem.prototype._createDomElement = function () {
    if (!this.dom) {
      // create DOM
      this.dom = {}; // background box

      this.dom.box = document.createElement('div'); // className is updated in redraw()
      // frame box (to prevent the item contents from overflowing

      this.dom.frame = document.createElement('div');
      this.dom.frame.className = 'vis-item-overflow';
      this.dom.box.appendChild(this.dom.frame); // contents box

      this.dom.content = document.createElement('div');
      this.dom.content.className = 'vis-item-content';
      this.dom.frame.appendChild(this.dom.content); // Note: we do NOT attach this item as attribute to the DOM,
      //       such that background items cannot be selected
      //this.dom.box['timeline-item'] = this;

      this.dirty = true;
    }
  };

  BackgroundItem.prototype._appendDomElement = function () {
    if (!this.parent) {
      throw new Error('Cannot redraw item: no parent attached');
    }

    if (!this.dom.box.parentNode) {
      var background = this.parent.dom.background;

      if (!background) {
        throw new Error('Cannot redraw item: parent has no background container element');
      }

      background.appendChild(this.dom.box);
    }

    this.displayed = true;
  };

  BackgroundItem.prototype._updateDirtyDomComponents = function () {
    // update dirty DOM. An item is marked dirty when:
    // - the item is not yet rendered
    // - the item's data is changed
    // - the item is selected/deselected
    if (this.dirty) {
      this._updateContents(this.dom.content);

      this._updateDataAttributes(this.dom.content);

      this._updateStyle(this.dom.box); // update class


      var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '');
      this.dom.box.className = this.baseClassName + className;
    }
  };

  BackgroundItem.prototype._getDomComponentsSizes = function () {
    // determine from css whether this box has overflow
    this.overflow = window.getComputedStyle(this.dom.content).overflow !== 'hidden';
    return {
      content: {
        width: this.dom.content.offsetWidth
      }
    };
  };

  BackgroundItem.prototype._updateDomComponentsSizes = function (sizes) {
    // recalculate size
    this.props.content.width = sizes.content.width;
    this.height = 0; // set height zero, so this item will be ignored when stacking items

    this.dirty = false;
  };

  BackgroundItem.prototype._repaintDomAdditionals = function () {};
  /**
   * Repaint the item
   * @param {boolean} [returnQueue=false]  return the queue
   * @return {boolean} the redraw result or the redraw queue if returnQueue=true
   */


  BackgroundItem.prototype.redraw = function (returnQueue) {
    var sizes;
    var queue = [// create item DOM
    this._createDomElement.bind(this), // append DOM to parent DOM
    this._appendDomElement.bind(this), this._updateDirtyDomComponents.bind(this), function () {
      if (this.dirty) {
        sizes = this._getDomComponentsSizes.bind(this)();
      }
    }.bind(this), function () {
      if (this.dirty) {
        this._updateDomComponentsSizes.bind(this)(sizes);
      }
    }.bind(this), // repaint DOM additionals
    this._repaintDomAdditionals.bind(this)];

    if (returnQueue) {
      return queue;
    } else {
      var result;
      queue.forEach(function (fn) {
        result = fn();
      });
      return result;
    }
  };
  /**
   * Show the item in the DOM (when not already visible). The items DOM will
   * be created when needed.
   */


  BackgroundItem.prototype.show = RangeItem_1.prototype.show;
  /**
   * Hide the item from the DOM (when visible)
   * @return {Boolean} changed
   */

  BackgroundItem.prototype.hide = RangeItem_1.prototype.hide;
  /**
   * Reposition the item horizontally
   * @Override
   */

  BackgroundItem.prototype.repositionX = RangeItem_1.prototype.repositionX;
  /**
   * Reposition the item vertically
   * @Override
   */

  BackgroundItem.prototype.repositionY = function (margin) {
    // eslint-disable-line no-unused-vars
    var height;
    var orientation = this.options.orientation.item; // special positioning for subgroups

    if (this.data.subgroup !== undefined) {
      // TODO: instead of calculating the top position of the subgroups here for every BackgroundItem, calculate the top of the subgroup once in Itemset
      var itemSubgroup = this.data.subgroup;
      this.dom.box.style.height = this.parent.subgroups[itemSubgroup].height + 'px';

      if (orientation == 'top') {
        this.dom.box.style.top = this.parent.top + this.parent.subgroups[itemSubgroup].top + 'px';
      } else {
        this.dom.box.style.top = this.parent.top + this.parent.height - this.parent.subgroups[itemSubgroup].top - this.parent.subgroups[itemSubgroup].height + 'px';
      }

      this.dom.box.style.bottom = '';
    } // and in the case of no subgroups:
    else {
        // we want backgrounds with groups to only show in groups.
        if (this.parent instanceof BackgroundGroup_1) {
          // if the item is not in a group:
          height = Math.max(this.parent.height, this.parent.itemSet.body.domProps.center.height, this.parent.itemSet.body.domProps.centerContainer.height);
          this.dom.box.style.bottom = orientation == 'bottom' ? '0' : '';
          this.dom.box.style.top = orientation == 'top' ? '0' : '';
        } else {
          height = this.parent.height; // same alignment for items when orientation is top or bottom

          this.dom.box.style.top = this.parent.top + 'px';
          this.dom.box.style.bottom = '';
        }
      }

    this.dom.box.style.height = height + 'px';
  };

  var BackgroundItem_1 = BackgroundItem;

  /**
   * Popup is a class to create a popup window with some text
   */

  class Popup {
    /**
     * @param {Element} container       The container object.
     * @param {string}  overflowMethod  How the popup should act to overflowing ('flip' or 'cap')
     */
    constructor(container, overflowMethod) {
      this.container = container;
      this.overflowMethod = overflowMethod || 'cap';
      this.x = 0;
      this.y = 0;
      this.padding = 5;
      this.hidden = false; // create the frame

      this.frame = document.createElement('div');
      this.frame.className = 'vis-tooltip';
      this.container.appendChild(this.frame);
    }
    /**
     * @param {number} x   Horizontal position of the popup window
     * @param {number} y   Vertical position of the popup window
     */


    setPosition(x, y) {
      this.x = parseInt(x);
      this.y = parseInt(y);
    }
    /**
     * Set the content for the popup window. This can be HTML code or text.
     * @param {string | Element} content
     */


    setText(content) {
      if (content instanceof Element) {
        this.frame.innerHTML = '';
        this.frame.appendChild(content);
      } else {
        this.frame.innerHTML = content; // string containing text or HTML
      }
    }
    /**
     * Show the popup window
     * @param {boolean} [doShow]    Show or hide the window
     */


    show(doShow) {
      if (doShow === undefined) {
        doShow = true;
      }

      if (doShow === true) {
        var height = this.frame.clientHeight;
        var width = this.frame.clientWidth;
        var maxHeight = this.frame.parentNode.clientHeight;
        var maxWidth = this.frame.parentNode.clientWidth;
        var left = 0,
            top = 0;

        if (this.overflowMethod == 'flip') {
          var isLeft = false,
              isTop = true; // Where around the position it's located

          if (this.y - height < this.padding) {
            isTop = false;
          }

          if (this.x + width > maxWidth - this.padding) {
            isLeft = true;
          }

          if (isLeft) {
            left = this.x - width;
          } else {
            left = this.x;
          }

          if (isTop) {
            top = this.y - height;
          } else {
            top = this.y;
          }
        } else {
          top = this.y - height;

          if (top + height + this.padding > maxHeight) {
            top = maxHeight - height - this.padding;
          }

          if (top < this.padding) {
            top = this.padding;
          }

          left = this.x;

          if (left + width + this.padding > maxWidth) {
            left = maxWidth - width - this.padding;
          }

          if (left < this.padding) {
            left = this.padding;
          }
        }

        this.frame.style.left = left + "px";
        this.frame.style.top = top + "px";
        this.frame.style.visibility = "visible";
        this.hidden = false;
      } else {
        this.hide();
      }
    }
    /**
     * Hide the popup window
     */


    hide() {
      this.hidden = true;
      this.frame.style.left = "0";
      this.frame.style.top = "0";
      this.frame.style.visibility = "hidden";
    }
    /**
     * Remove the popup window
     */


    destroy() {
      this.frame.parentNode.removeChild(this.frame); // Remove element from DOM
    }

  }

  var UNGROUPED = '__ungrouped__'; // reserved group id for ungrouped items

  var BACKGROUND = '__background__'; // reserved group id for background items without group

  /**
   * An ItemSet holds a set of items and ranges which can be displayed in a
   * range. The width is determined by the parent of the ItemSet, and the height
   * is determined by the size of the items.
   * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} body
   * @param {Object} [options]      See ItemSet.setOptions for the available options.
   * @constructor ItemSet
   * @extends Component
   */

  function ItemSet(body, options) {
    this.body = body;
    this.defaultOptions = {
      type: null,
      // 'box', 'point', 'range', 'background'
      orientation: {
        item: 'bottom' // item orientation: 'top' or 'bottom'

      },
      align: 'auto',
      // alignment of box items
      stack: true,
      stackSubgroups: true,
      groupOrderSwap: function (fromGroup, toGroup, groups) {
        // eslint-disable-line no-unused-vars
        var targetOrder = toGroup.order;
        toGroup.order = fromGroup.order;
        fromGroup.order = targetOrder;
      },
      groupOrder: 'order',
      selectable: true,
      multiselect: false,
      itemsAlwaysDraggable: {
        item: false,
        range: false
      },
      editable: {
        updateTime: false,
        updateGroup: false,
        add: false,
        remove: false,
        overrideItems: false
      },
      groupEditable: {
        order: false,
        add: false,
        remove: false
      },
      snap: TimeStep_1.snap,
      // Only called when `objectData.target === 'item'.
      onDropObjectOnItem: function (objectData, item, callback) {
        callback(item);
      },
      onAdd: function (item, callback) {
        callback(item);
      },
      onUpdate: function (item, callback) {
        callback(item);
      },
      onMove: function (item, callback) {
        callback(item);
      },
      onRemove: function (item, callback) {
        callback(item);
      },
      onMoving: function (item, callback) {
        callback(item);
      },
      onAddGroup: function (item, callback) {
        callback(item);
      },
      onMoveGroup: function (item, callback) {
        callback(item);
      },
      onRemoveGroup: function (item, callback) {
        callback(item);
      },
      margin: {
        item: {
          horizontal: 10,
          vertical: 10
        },
        axis: 20
      },
      showTooltips: true,
      tooltip: {
        followMouse: false,
        overflowMethod: 'flip'
      },
      tooltipOnItemUpdateTime: false
    }; // options is shared by this ItemSet and all its items

    this.options = util.extend({}, this.defaultOptions);
    this.options.rtl = options.rtl;
    this.options.onTimeout = options.onTimeout; // options for getting items from the DataSet with the correct type

    this.itemOptions = {
      type: {
        start: 'Date',
        end: 'Date'
      }
    };
    this.conversion = {
      toScreen: body.util.toScreen,
      toTime: body.util.toTime
    };
    this.dom = {};
    this.props = {};
    this.hammer = null;
    var me = this;
    this.itemsData = null; // DataSet

    this.groupsData = null; // DataSet

    this.itemsSettingTime = null;
    this.initialItemSetDrawn = false;
    this.userContinueNotBail = null; // listeners for the DataSet of the items

    this.itemListeners = {
      'add': function (event, params, senderId) {
        // eslint-disable-line no-unused-vars
        me._onAdd(params.items);
      },
      'update': function (event, params, senderId) {
        // eslint-disable-line no-unused-vars
        me._onUpdate(params.items);
      },
      'remove': function (event, params, senderId) {
        // eslint-disable-line no-unused-vars
        me._onRemove(params.items);
      }
    }; // listeners for the DataSet of the groups

    this.groupListeners = {
      'add': function (event, params, senderId) {
        // eslint-disable-line no-unused-vars
        me._onAddGroups(params.items);

        if (me.groupsData && me.groupsData.length > 0) {
          var groupsData = me.groupsData.getDataSet();
          groupsData.get().forEach(function (groupData) {
            if (groupData.nestedGroups) {
              if (groupData.showNested != false) {
                groupData.showNested = true;
              }

              var updatedGroups = [];
              groupData.nestedGroups.forEach(function (nestedGroupId) {
                var updatedNestedGroup = groupsData.get(nestedGroupId);

                if (!updatedNestedGroup) {
                  return;
                }

                updatedNestedGroup.nestedInGroup = groupData.id;

                if (groupData.showNested == false) {
                  updatedNestedGroup.visible = false;
                }

                updatedGroups = updatedGroups.concat(updatedNestedGroup);
              });
              groupsData.update(updatedGroups, senderId);
            }
          });
        }
      },
      'update': function (event, params, senderId) {
        // eslint-disable-line no-unused-vars
        me._onUpdateGroups(params.items);
      },
      'remove': function (event, params, senderId) {
        // eslint-disable-line no-unused-vars
        me._onRemoveGroups(params.items);
      }
    };
    this.items = {}; // object with an Item for every data item

    this.groups = {}; // Group object for every group

    this.groupIds = [];
    this.selection = []; // list with the ids of all selected nodes

    this.popup = null;
    this.popupTimer = null;
    this.touchParams = {}; // stores properties while dragging

    this.groupTouchParams = {}; // create the HTML DOM

    this._create();

    this.setOptions(options);
  }

  ItemSet.prototype = new Component_1(); // available item types will be registered here

  ItemSet.types = {
    background: BackgroundItem_1,
    box: BoxItem_1,
    range: RangeItem_1,
    point: PointItem_1
  };
  /**
   * Create the HTML DOM for the ItemSet
   */

  ItemSet.prototype._create = function () {
    var frame = document.createElement('div');
    frame.className = 'vis-itemset';
    frame['timeline-itemset'] = this;
    this.dom.frame = frame; // create background panel

    var background = document.createElement('div');
    background.className = 'vis-background';
    frame.appendChild(background);
    this.dom.background = background; // create foreground panel

    var foreground = document.createElement('div');
    foreground.className = 'vis-foreground';
    frame.appendChild(foreground);
    this.dom.foreground = foreground; // create axis panel

    var axis = document.createElement('div');
    axis.className = 'vis-axis';
    this.dom.axis = axis; // create labelset

    var labelSet = document.createElement('div');
    labelSet.className = 'vis-labelset';
    this.dom.labelSet = labelSet; // create ungrouped Group

    this._updateUngrouped(); // create background Group


    var backgroundGroup = new BackgroundGroup_1(BACKGROUND, null, this);
    backgroundGroup.show();
    this.groups[BACKGROUND] = backgroundGroup; // attach event listeners
    // Note: we bind to the centerContainer for the case where the height
    //       of the center container is larger than of the ItemSet, so we
    //       can click in the empty area to create a new item or deselect an item.

    this.hammer = new hammer$2(this.body.dom.centerContainer); // drag items when selected

    this.hammer.on('hammer.input', function (event) {
      if (event.isFirst) {
        this._onTouch(event);
      }
    }.bind(this));
    this.hammer.on('panstart', this._onDragStart.bind(this));
    this.hammer.on('panmove', this._onDrag.bind(this));
    this.hammer.on('panend', this._onDragEnd.bind(this));
    this.hammer.get('pan').set({
      threshold: 5,
      direction: hammer$2.DIRECTION_HORIZONTAL
    }); // single select (or unselect) when tapping an item

    this.hammer.on('tap', this._onSelectItem.bind(this)); // multi select when holding mouse/touch, or on ctrl+click

    this.hammer.on('press', this._onMultiSelectItem.bind(this)); // add item on doubletap

    this.hammer.on('doubletap', this._onAddItem.bind(this));

    if (this.options.rtl) {
      this.groupHammer = new hammer$2(this.body.dom.rightContainer);
    } else {
      this.groupHammer = new hammer$2(this.body.dom.leftContainer);
    }

    this.groupHammer.on('tap', this._onGroupClick.bind(this));
    this.groupHammer.on('panstart', this._onGroupDragStart.bind(this));
    this.groupHammer.on('panmove', this._onGroupDrag.bind(this));
    this.groupHammer.on('panend', this._onGroupDragEnd.bind(this));
    this.groupHammer.get('pan').set({
      threshold: 5,
      direction: hammer$2.DIRECTION_VERTICAL
    });
    this.body.dom.centerContainer.addEventListener('mouseover', this._onMouseOver.bind(this));
    this.body.dom.centerContainer.addEventListener('mouseout', this._onMouseOut.bind(this));
    this.body.dom.centerContainer.addEventListener('mousemove', this._onMouseMove.bind(this)); // right-click on timeline 

    this.body.dom.centerContainer.addEventListener('contextmenu', this._onDragEnd.bind(this));
    this.body.dom.centerContainer.addEventListener('mousewheel', this._onMouseWheel.bind(this)); // attach to the DOM

    this.show();
  };
  /**
   * Set options for the ItemSet. Existing options will be extended/overwritten.
   * @param {Object} [options] The following options are available:
   *                           {string} type
   *                              Default type for the items. Choose from 'box'
   *                              (default), 'point', 'range', or 'background'.
   *                              The default style can be overwritten by
   *                              individual items.
   *                           {string} align
   *                              Alignment for the items, only applicable for
   *                              BoxItem. Choose 'center' (default), 'left', or
   *                              'right'.
   *                           {string} orientation.item
   *                              Orientation of the item set. Choose 'top' or
   *                              'bottom' (default).
   *                           {Function} groupOrder
   *                              A sorting function for ordering groups
   *                           {boolean} stack
   *                              If true (default), items will be stacked on
   *                              top of each other.
   *                           {number} margin.axis
   *                              Margin between the axis and the items in pixels.
   *                              Default is 20.
   *                           {number} margin.item.horizontal
   *                              Horizontal margin between items in pixels.
   *                              Default is 10.
   *                           {number} margin.item.vertical
   *                              Vertical Margin between items in pixels.
   *                              Default is 10.
   *                           {number} margin.item
   *                              Margin between items in pixels in both horizontal
   *                              and vertical direction. Default is 10.
   *                           {number} margin
   *                              Set margin for both axis and items in pixels.
   *                           {boolean} selectable
   *                              If true (default), items can be selected.
   *                           {boolean} multiselect
   *                              If true, multiple items can be selected.
   *                              False by default.
   *                           {boolean} editable
   *                              Set all editable options to true or false
   *                           {boolean} editable.updateTime
   *                              Allow dragging an item to an other moment in time
   *                           {boolean} editable.updateGroup
   *                              Allow dragging an item to an other group
   *                           {boolean} editable.add
   *                              Allow creating new items on double tap
   *                           {boolean} editable.remove
   *                              Allow removing items by clicking the delete button
   *                              top right of a selected item.
   *                           {Function(item: Item, callback: Function)} onAdd
   *                              Callback function triggered when an item is about to be added:
   *                              when the user double taps an empty space in the Timeline.
   *                           {Function(item: Item, callback: Function)} onUpdate
   *                              Callback function fired when an item is about to be updated.
   *                              This function typically has to show a dialog where the user
   *                              change the item. If not implemented, nothing happens.
   *                           {Function(item: Item, callback: Function)} onMove
   *                              Fired when an item has been moved. If not implemented,
   *                              the move action will be accepted.
   *                           {Function(item: Item, callback: Function)} onRemove
   *                              Fired when an item is about to be deleted.
   *                              If not implemented, the item will be always removed.
   */


  ItemSet.prototype.setOptions = function (options) {
    if (options) {
      // copy all options that we know
      var fields = ['type', 'rtl', 'align', 'order', 'stack', 'stackSubgroups', 'selectable', 'multiselect', 'multiselectPerGroup', 'groupOrder', 'dataAttributes', 'template', 'groupTemplate', 'visibleFrameTemplate', 'hide', 'snap', 'groupOrderSwap', 'showTooltips', 'tooltip', 'tooltipOnItemUpdateTime', 'groupHeightMode', 'onTimeout', 'groupLabelDirection'];
      util.selectiveExtend(fields, this.options, options);

      if ('itemsAlwaysDraggable' in options) {
        if (typeof options.itemsAlwaysDraggable === 'boolean') {
          this.options.itemsAlwaysDraggable.item = options.itemsAlwaysDraggable;
          this.options.itemsAlwaysDraggable.range = false;
        } else if (typeof options.itemsAlwaysDraggable === 'object') {
          util.selectiveExtend(['item', 'range'], this.options.itemsAlwaysDraggable, options.itemsAlwaysDraggable); // only allow range always draggable when item is always draggable as well

          if (!this.options.itemsAlwaysDraggable.item) {
            this.options.itemsAlwaysDraggable.range = false;
          }
        }
      }

      if ('orientation' in options) {
        if (typeof options.orientation === 'string') {
          this.options.orientation.item = options.orientation === 'top' ? 'top' : 'bottom';
        } else if (typeof options.orientation === 'object' && 'item' in options.orientation) {
          this.options.orientation.item = options.orientation.item;
        }
      }

      if ('margin' in options) {
        if (typeof options.margin === 'number') {
          this.options.margin.axis = options.margin;
          this.options.margin.item.horizontal = options.margin;
          this.options.margin.item.vertical = options.margin;
        } else if (typeof options.margin === 'object') {
          util.selectiveExtend(['axis'], this.options.margin, options.margin);

          if ('item' in options.margin) {
            if (typeof options.margin.item === 'number') {
              this.options.margin.item.horizontal = options.margin.item;
              this.options.margin.item.vertical = options.margin.item;
            } else if (typeof options.margin.item === 'object') {
              util.selectiveExtend(['horizontal', 'vertical'], this.options.margin.item, options.margin.item);
            }
          }
        }
      }

      if ('editable' in options) {
        if (typeof options.editable === 'boolean') {
          this.options.editable.updateTime = options.editable;
          this.options.editable.updateGroup = options.editable;
          this.options.editable.add = options.editable;
          this.options.editable.remove = options.editable;
          this.options.editable.overrideItems = false;
        } else if (typeof options.editable === 'object') {
          util.selectiveExtend(['updateTime', 'updateGroup', 'add', 'remove', 'overrideItems'], this.options.editable, options.editable);
        }
      }

      if ('groupEditable' in options) {
        if (typeof options.groupEditable === 'boolean') {
          this.options.groupEditable.order = options.groupEditable;
          this.options.groupEditable.add = options.groupEditable;
          this.options.groupEditable.remove = options.groupEditable;
        } else if (typeof options.groupEditable === 'object') {
          util.selectiveExtend(['order', 'add', 'remove'], this.options.groupEditable, options.groupEditable);
        }
      } // callback functions


      var addCallback = function (name) {
        var fn = options[name];

        if (fn) {
          if (!(fn instanceof Function)) {
            throw new Error('option ' + name + ' must be a function ' + name + '(item, callback)');
          }

          this.options[name] = fn;
        }
      }.bind(this);

      ['onDropObjectOnItem', 'onAdd', 'onUpdate', 'onRemove', 'onMove', 'onMoving', 'onAddGroup', 'onMoveGroup', 'onRemoveGroup'].forEach(addCallback); // force the itemSet to refresh: options like orientation and margins may be changed

      this.markDirty();
    }
  };
  /**
   * Mark the ItemSet dirty so it will refresh everything with next redraw.
   * Optionally, all items can be marked as dirty and be refreshed.
   * @param {{refreshItems: boolean}} [options]
   */


  ItemSet.prototype.markDirty = function (options) {
    this.groupIds = [];

    if (options && options.refreshItems) {
      util.forEach(this.items, function (item) {
        item.dirty = true;
        if (item.displayed) item.redraw();
      });
    }
  };
  /**
   * Destroy the ItemSet
   */


  ItemSet.prototype.destroy = function () {
    this.clearPopupTimer();
    this.hide();
    this.setItems(null);
    this.setGroups(null);
    this.hammer && this.hammer.destroy();
    this.groupHammer && this.groupHammer.destroy();
    this.hammer = null;
    this.body = null;
    this.conversion = null;
  };
  /**
   * Hide the component from the DOM
   */


  ItemSet.prototype.hide = function () {
    // remove the frame containing the items
    if (this.dom.frame.parentNode) {
      this.dom.frame.parentNode.removeChild(this.dom.frame);
    } // remove the axis with dots


    if (this.dom.axis.parentNode) {
      this.dom.axis.parentNode.removeChild(this.dom.axis);
    } // remove the labelset containing all group labels


    if (this.dom.labelSet.parentNode) {
      this.dom.labelSet.parentNode.removeChild(this.dom.labelSet);
    }
  };
  /**
   * Show the component in the DOM (when not already visible).
   */


  ItemSet.prototype.show = function () {
    // show frame containing the items
    if (!this.dom.frame.parentNode) {
      this.body.dom.center.appendChild(this.dom.frame);
    } // show axis with dots


    if (!this.dom.axis.parentNode) {
      this.body.dom.backgroundVertical.appendChild(this.dom.axis);
    } // show labelset containing labels


    if (!this.dom.labelSet.parentNode) {
      if (this.options.rtl) {
        this.body.dom.right.appendChild(this.dom.labelSet);
      } else {
        this.body.dom.left.appendChild(this.dom.labelSet);
      }
    }
  };
  /**
   * Activates the popup timer to show the given popup after a fixed time.
   * @param {any} popup
   */


  ItemSet.prototype.setPopupTimer = function (popup) {
    this.clearPopupTimer();

    if (popup) {
      this.popupTimer = setTimeout(function () {
        popup.show();
      }, 500);
    }
  };
  /**
   * Clears the popup timer for the tooltip.
   */


  ItemSet.prototype.clearPopupTimer = function () {
    if (this.popupTimer != null) {
      clearTimeout(this.popupTimer);
      this.popupTimer = null;
    }
  };
  /**
   * Set selected items by their id. Replaces the current selection
   * Unknown id's are silently ignored.
   * @param {string[] | string} [ids] An array with zero or more id's of the items to be
   *                                  selected, or a single item id. If ids is undefined
   *                                  or an empty array, all items will be unselected.
   */


  ItemSet.prototype.setSelection = function (ids) {
    var i, ii, id, item;
    if (ids == undefined) ids = [];
    if (!Array.isArray(ids)) ids = [ids]; // unselect currently selected items

    for (i = 0, ii = this.selection.length; i < ii; i++) {
      id = this.selection[i];
      item = this.items[id];
      if (item) item.unselect();
    } // select items


    this.selection = [];

    for (i = 0, ii = ids.length; i < ii; i++) {
      id = ids[i];
      item = this.items[id];

      if (item) {
        this.selection.push(id);
        item.select();
      }
    }
  };
  /**
   * Get the selected items by their id
   * @return {Array} ids  The ids of the selected items
   */


  ItemSet.prototype.getSelection = function () {
    return this.selection.concat([]);
  };
  /**
   * Get the id's of the currently visible items.
   * @returns {Array} The ids of the visible items
   */


  ItemSet.prototype.getVisibleItems = function () {
    var range = this.body.range.getRange();
    var right, left;

    if (this.options.rtl) {
      right = this.body.util.toScreen(range.start);
      left = this.body.util.toScreen(range.end);
    } else {
      left = this.body.util.toScreen(range.start);
      right = this.body.util.toScreen(range.end);
    }

    var ids = [];

    for (var groupId in this.groups) {
      if (this.groups.hasOwnProperty(groupId)) {
        var group = this.groups[groupId];
        var rawVisibleItems = group.isVisible ? group.visibleItems : []; // filter the "raw" set with visibleItems into a set which is really
        // visible by pixels

        for (var i = 0; i < rawVisibleItems.length; i++) {
          var item = rawVisibleItems[i]; // TODO: also check whether visible vertically

          if (this.options.rtl) {
            if (item.right < left && item.right + item.width > right) {
              ids.push(item.id);
            }
          } else {
            if (item.left < right && item.left + item.width > left) {
              ids.push(item.id);
            }
          }
        }
      }
    }

    return ids;
  };
  /**
   * Get the id's of the currently visible groups.
   * @returns {Array} The ids of the visible groups
   */


  ItemSet.prototype.getVisibleGroups = function () {
    var ids = [];

    for (var groupId in this.groups) {
      if (this.groups.hasOwnProperty(groupId)) {
        var group = this.groups[groupId];

        if (group.isVisible) {
          ids.push(groupId);
        }
      }
    }

    return ids;
  };
  /**
   * Deselect a selected item
   * @param {string | number} id
   * @private
   */


  ItemSet.prototype._deselect = function (id) {
    var selection = this.selection;

    for (var i = 0, ii = selection.length; i < ii; i++) {
      if (selection[i] == id) {
        // non-strict comparison!
        selection.splice(i, 1);
        break;
      }
    }
  };
  /**
   * Repaint the component
   * @return {boolean} Returns true if the component is resized
   */


  ItemSet.prototype.redraw = function () {
    var margin = this.options.margin,
        range = this.body.range,
        asSize = util.option.asSize,
        options = this.options,
        orientation = options.orientation.item,
        resized = false,
        frame = this.dom.frame; // recalculate absolute position (before redrawing groups)

    this.props.top = this.body.domProps.top.height + this.body.domProps.border.top;

    if (this.options.rtl) {
      this.props.right = this.body.domProps.right.width + this.body.domProps.border.right;
    } else {
      this.props.left = this.body.domProps.left.width + this.body.domProps.border.left;
    } // update class name


    frame.className = 'vis-itemset'; // reorder the groups (if needed)

    resized = this._orderGroups() || resized; // check whether zoomed (in that case we need to re-stack everything)
    // TODO: would be nicer to get this as a trigger from Range

    var visibleInterval = range.end - range.start;
    var zoomed = visibleInterval != this.lastVisibleInterval || this.props.width != this.props.lastWidth;
    var scrolled = range.start != this.lastRangeStart;
    var changedStackOption = options.stack != this.lastStack;
    var changedStackSubgroupsOption = options.stackSubgroups != this.lastStackSubgroups;
    var forceRestack = zoomed || scrolled || changedStackOption || changedStackSubgroupsOption;
    this.lastVisibleInterval = visibleInterval;
    this.lastRangeStart = range.start;
    this.lastStack = options.stack;
    this.lastStackSubgroups = options.stackSubgroups;
    this.props.lastWidth = this.props.width;

    var firstGroup = this._firstGroup();

    var firstMargin = {
      item: margin.item,
      axis: margin.axis
    };
    var nonFirstMargin = {
      item: margin.item,
      axis: margin.item.vertical / 2
    };
    var height = 0;
    var minHeight = margin.axis + margin.item.vertical; // redraw the background group

    this.groups[BACKGROUND].redraw(range, nonFirstMargin, forceRestack);
    var redrawQueue = {};
    var redrawQueueLength = 0; // collect redraw functions

    util.forEach(this.groups, function (group, key) {
      if (key === BACKGROUND) return;
      var groupMargin = group == firstGroup ? firstMargin : nonFirstMargin;
      var returnQueue = true;
      redrawQueue[key] = group.redraw(range, groupMargin, forceRestack, returnQueue);
      redrawQueueLength = redrawQueue[key].length;
    });
    var needRedraw = redrawQueueLength > 0;

    if (needRedraw) {
      var redrawResults = {};

      for (var i = 0; i < redrawQueueLength; i++) {
        util.forEach(redrawQueue, function (fns, key) {
          redrawResults[key] = fns[i]();
        });
      } // redraw all regular groups


      util.forEach(this.groups, function (group, key) {
        if (key === BACKGROUND) return;
        var groupResized = redrawResults[key];
        resized = groupResized || resized;
        height += group.height;
      });
      height = Math.max(height, minHeight);
    }

    height = Math.max(height, minHeight); // update frame height

    frame.style.height = asSize(height); // calculate actual size

    this.props.width = frame.offsetWidth;
    this.props.height = height; // reposition axis

    this.dom.axis.style.top = asSize(orientation == 'top' ? this.body.domProps.top.height + this.body.domProps.border.top : this.body.domProps.top.height + this.body.domProps.centerContainer.height);

    if (this.options.rtl) {
      this.dom.axis.style.right = '0';
    } else {
      this.dom.axis.style.left = '0';
    }

    this.initialItemSetDrawn = true; // check if this component is resized

    resized = this._isResized() || resized;
    return resized;
  };
  /**
   * Get the first group, aligned with the axis
   * @return {Group | null} firstGroup
   * @private
   */


  ItemSet.prototype._firstGroup = function () {
    var firstGroupIndex = this.options.orientation.item == 'top' ? 0 : this.groupIds.length - 1;
    var firstGroupId = this.groupIds[firstGroupIndex];
    var firstGroup = this.groups[firstGroupId] || this.groups[UNGROUPED];
    return firstGroup || null;
  };
  /**
   * Create or delete the group holding all ungrouped items. This group is used when
   * there are no groups specified.
   * @protected
   */


  ItemSet.prototype._updateUngrouped = function () {
    var ungrouped = this.groups[UNGROUPED];
    var item, itemId;

    if (this.groupsData) {
      // remove the group holding all ungrouped items
      if (ungrouped) {
        ungrouped.hide();
        delete this.groups[UNGROUPED];

        for (itemId in this.items) {
          if (this.items.hasOwnProperty(itemId)) {
            item = this.items[itemId];
            item.parent && item.parent.remove(item);

            var groupId = this._getGroupId(item.data);

            var group = this.groups[groupId];
            group && group.add(item) || item.hide();
          }
        }
      }
    } else {
      // create a group holding all (unfiltered) items
      if (!ungrouped) {
        var id = null;
        var data = null;
        ungrouped = new Group_1(id, data, this);
        this.groups[UNGROUPED] = ungrouped;

        for (itemId in this.items) {
          if (this.items.hasOwnProperty(itemId)) {
            item = this.items[itemId];
            ungrouped.add(item);
          }
        }

        ungrouped.show();
      }
    }
  };
  /**
   * Get the element for the labelset
   * @return {HTMLElement} labelSet
   */


  ItemSet.prototype.getLabelSet = function () {
    return this.dom.labelSet;
  };
  /**
   * Set items
   * @param {vis.DataSet | null} items
   */


  ItemSet.prototype.setItems = function (items) {
    this.itemsSettingTime = new Date();
    var me = this,
        ids,
        oldItemsData = this.itemsData; // replace the dataset

    if (!items) {
      this.itemsData = null;
    } else if (items instanceof DataSet || items instanceof DataView) {
      this.itemsData = items;
    } else {
      throw new TypeError('Data must be an instance of DataSet or DataView');
    }

    if (oldItemsData) {
      // unsubscribe from old dataset
      util.forEach(this.itemListeners, function (callback, event) {
        oldItemsData.off(event, callback);
      }); // remove all drawn items

      ids = oldItemsData.getIds();

      this._onRemove(ids);
    }

    if (this.itemsData) {
      // subscribe to new dataset
      var id = this.id;
      util.forEach(this.itemListeners, function (callback, event) {
        me.itemsData.on(event, callback, id);
      }); // add all new items

      ids = this.itemsData.getIds();

      this._onAdd(ids); // update the group holding all ungrouped items


      this._updateUngrouped();
    }

    this.body.emitter.emit('_change', {
      queue: true
    });
  };
  /**
   * Get the current items
   * @returns {vis.DataSet | null}
   */


  ItemSet.prototype.getItems = function () {
    return this.itemsData;
  };
  /**
   * Set groups
   * @param {vis.DataSet} groups
   */


  ItemSet.prototype.setGroups = function (groups) {
    var me = this,
        ids; // unsubscribe from current dataset

    if (this.groupsData) {
      util.forEach(this.groupListeners, function (callback, event) {
        me.groupsData.off(event, callback);
      }); // remove all drawn groups

      ids = this.groupsData.getIds();
      this.groupsData = null;

      this._onRemoveGroups(ids); // note: this will cause a redraw

    } // replace the dataset


    if (!groups) {
      this.groupsData = null;
    } else if (groups instanceof DataSet || groups instanceof DataView) {
      this.groupsData = groups;
    } else {
      throw new TypeError('Data must be an instance of DataSet or DataView');
    }

    if (this.groupsData) {
      // go over all groups nesting
      var groupsData = this.groupsData;

      if (this.groupsData instanceof DataView) {
        groupsData = this.groupsData.getDataSet();
      }

      groupsData.get().forEach(function (group) {
        if (group.nestedGroups) {
          group.nestedGroups.forEach(function (nestedGroupId) {
            var updatedNestedGroup = groupsData.get(nestedGroupId);
            updatedNestedGroup.nestedInGroup = group.id;

            if (group.showNested == false) {
              updatedNestedGroup.visible = false;
            }

            groupsData.update(updatedNestedGroup);
          });
        }
      }); // subscribe to new dataset

      var id = this.id;
      util.forEach(this.groupListeners, function (callback, event) {
        me.groupsData.on(event, callback, id);
      }); // draw all ms

      ids = this.groupsData.getIds();

      this._onAddGroups(ids);
    } // update the group holding all ungrouped items


    this._updateUngrouped(); // update the order of all items in each group


    this._order();

    this.body.emitter.emit('_change', {
      queue: true
    });
  };
  /**
   * Get the current groups
   * @returns {vis.DataSet | null} groups
   */


  ItemSet.prototype.getGroups = function () {
    return this.groupsData;
  };
  /**
   * Remove an item by its id
   * @param {string | number} id
   */


  ItemSet.prototype.removeItem = function (id) {
    var item = this.itemsData.get(id),
        dataset = this.itemsData.getDataSet();

    if (item) {
      // confirm deletion
      this.options.onRemove(item, function (item) {
        if (item) {
          // remove by id here, it is possible that an item has no id defined
          // itself, so better not delete by the item itself
          dataset.remove(id);
        }
      });
    }
  };
  /**
   * Get the time of an item based on it's data and options.type
   * @param {Object} itemData
   * @returns {string} Returns the type
   * @private
   */


  ItemSet.prototype._getType = function (itemData) {
    return itemData.type || this.options.type || (itemData.end ? 'range' : 'box');
  };
  /**
   * Get the group id for an item
   * @param {Object} itemData
   * @returns {string} Returns the groupId
   * @private
   */


  ItemSet.prototype._getGroupId = function (itemData) {
    var type = this._getType(itemData);

    if (type == 'background' && itemData.group == undefined) {
      return BACKGROUND;
    } else {
      return this.groupsData ? itemData.group : UNGROUPED;
    }
  };
  /**
   * Handle updated items
   * @param {number[]} ids
   * @protected
   */


  ItemSet.prototype._onUpdate = function (ids) {
    var me = this;
    ids.forEach(function (id) {
      var itemData = me.itemsData.get(id, me.itemOptions);
      var item = me.items[id];
      var type = itemData ? me._getType(itemData) : null;
      var constructor = ItemSet.types[type];
      var selected;

      if (item) {
        // update item   	
        if (!constructor || !(item instanceof constructor)) {
          // item type has changed, delete the item and recreate it
          selected = item.selected; // preserve selection of this item

          me._removeItem(item);

          item = null;
        } else {
          me._updateItem(item, itemData);
        }
      }

      if (!item && itemData) {
        // create item
        if (constructor) {
          item = new constructor(itemData, me.conversion, me.options);
          item.id = id; // TODO: not so nice setting id afterwards

          me._addItem(item);

          if (selected) {
            this.selection.push(id);
            item.select();
          }
        } else if (type == 'rangeoverflow') {
          // TODO: deprecated since version 2.1.0 (or 3.0.0?). cleanup some day
          throw new TypeError('Item type "rangeoverflow" is deprecated. Use css styling instead: ' + '.vis-item.vis-range .vis-item-content {overflow: visible;}');
        } else {
          throw new TypeError('Unknown item type "' + type + '"');
        }
      }
    }.bind(this));

    this._order();

    this.body.emitter.emit('_change', {
      queue: true
    });
  };
  /**
   * Handle added items
   * @param {number[]} ids
   * @protected
   */


  ItemSet.prototype._onAdd = ItemSet.prototype._onUpdate;
  /**
   * Handle removed items
   * @param {number[]} ids
   * @protected
   */

  ItemSet.prototype._onRemove = function (ids) {
    var count = 0;
    var me = this;
    ids.forEach(function (id) {
      var item = me.items[id];

      if (item) {
        count++;

        me._removeItem(item);
      }
    });

    if (count) {
      // update order
      this._order();

      this.body.emitter.emit('_change', {
        queue: true
      });
    }
  };
  /**
   * Update the order of item in all groups
   * @private
   */


  ItemSet.prototype._order = function () {
    // reorder the items in all groups
    // TODO: optimization: only reorder groups affected by the changed items
    util.forEach(this.groups, function (group) {
      group.order();
    });
  };
  /**
   * Handle updated groups
   * @param {number[]} ids
   * @private
   */


  ItemSet.prototype._onUpdateGroups = function (ids) {
    this._onAddGroups(ids);
  };
  /**
   * Handle changed groups (added or updated)
   * @param {number[]} ids
   * @private
   */


  ItemSet.prototype._onAddGroups = function (ids) {
    var me = this;
    ids.forEach(function (id) {
      var groupData = me.groupsData.get(id);
      var group = me.groups[id];

      if (!group) {
        // check for reserved ids
        if (id == UNGROUPED || id == BACKGROUND) {
          throw new Error('Illegal group id. ' + id + ' is a reserved id.');
        }

        var groupOptions = Object.create(me.options);
        util.extend(groupOptions, {
          height: null
        });
        group = new Group_1(id, groupData, me);
        me.groups[id] = group; // add items with this groupId to the new group

        for (var itemId in me.items) {
          if (me.items.hasOwnProperty(itemId)) {
            var item = me.items[itemId];

            if (item.data.group == id) {
              group.add(item);
            }
          }
        }

        group.order();
        group.show();
      } else {
        // update group
        group.setData(groupData);
      }
    });
    this.body.emitter.emit('_change', {
      queue: true
    });
  };
  /**
   * Handle removed groups
   * @param {number[]} ids
   * @private
   */


  ItemSet.prototype._onRemoveGroups = function (ids) {
    var groups = this.groups;
    ids.forEach(function (id) {
      var group = groups[id];

      if (group) {
        group.hide();
        delete groups[id];
      }
    });
    this.markDirty();
    this.body.emitter.emit('_change', {
      queue: true
    });
  };
  /**
   * Reorder the groups if needed
   * @return {boolean} changed
   * @private
   */


  ItemSet.prototype._orderGroups = function () {
    if (this.groupsData) {
      // reorder the groups
      var groupIds = this.groupsData.getIds({
        order: this.options.groupOrder
      });
      groupIds = this._orderNestedGroups(groupIds);
      var changed = !util.equalArray(groupIds, this.groupIds);

      if (changed) {
        // hide all groups, removes them from the DOM
        var groups = this.groups;
        groupIds.forEach(function (groupId) {
          groups[groupId].hide();
        }); // show the groups again, attach them to the DOM in correct order

        groupIds.forEach(function (groupId) {
          groups[groupId].show();
        });
        this.groupIds = groupIds;
      }

      return changed;
    } else {
      return false;
    }
  };
  /**
   * Reorder the nested groups
   *
   * @param {Array.<number>} groupIds
   * @returns {Array.<number>}
   * @private
   */


  ItemSet.prototype._orderNestedGroups = function (groupIds) {
    /**
     * Recursively order nested groups
     *
     * @param {ItemSet} t
     * @param {Array.<number>} groupIds
     * @returns {Array.<number>}
     * @private
     */
    function getOrderedNestedGroups(t, groupIds) {
      var result = [];
      groupIds.forEach(function (groupId) {
        result.push(groupId);
        var groupData = t.groupsData.get(groupId);

        if (groupData.nestedGroups) {
          var nestedGroupIds = t.groupsData.get({
            filter: function (nestedGroup) {
              return nestedGroup.nestedInGroup == groupId;
            },
            order: t.options.groupOrder
          }).map(function (nestedGroup) {
            return nestedGroup.id;
          });
          result = result.concat(getOrderedNestedGroups(t, nestedGroupIds));
        }
      });
      return result;
    }

    var topGroupIds = groupIds.filter(groupId => !this.groupsData.get(groupId).nestedInGroup);
    return getOrderedNestedGroups(this, topGroupIds);
  };
  /**
   * Add a new item
   * @param {Item} item
   * @private
   */


  ItemSet.prototype._addItem = function (item) {
    this.items[item.id] = item; // add to group

    var groupId = this._getGroupId(item.data);

    var group = this.groups[groupId];

    if (!group) {
      item.groupShowing = false;
    } else if (group && group.data && group.data.showNested) {
      item.groupShowing = true;
    }

    if (group) group.add(item);
  };
  /**
   * Update an existing item
   * @param {Item} item
   * @param {Object} itemData
   * @private
   */


  ItemSet.prototype._updateItem = function (item, itemData) {
    // update the items data (will redraw the item when displayed)
    item.setData(itemData);

    var groupId = this._getGroupId(item.data);

    var group = this.groups[groupId];

    if (!group) {
      item.groupShowing = false;
    } else if (group && group.data && group.data.showNested) {
      item.groupShowing = true;
    }
  };
  /**
   * Delete an item from the ItemSet: remove it from the DOM, from the map
   * with items, and from the map with visible items, and from the selection
   * @param {Item} item
   * @private
   */


  ItemSet.prototype._removeItem = function (item) {
    // remove from DOM
    item.hide(); // remove from items

    delete this.items[item.id]; // remove from selection

    var index = this.selection.indexOf(item.id);
    if (index != -1) this.selection.splice(index, 1); // remove from group

    item.parent && item.parent.remove(item);
  };
  /**
   * Create an array containing all items being a range (having an end date)
   * @param {Array.<Object>} array
   * @returns {Array}
   * @private
   */


  ItemSet.prototype._constructByEndArray = function (array) {
    var endArray = [];

    for (var i = 0; i < array.length; i++) {
      if (array[i] instanceof RangeItem_1) {
        endArray.push(array[i]);
      }
    }

    return endArray;
  };
  /**
   * Register the clicked item on touch, before dragStart is initiated.
   *
   * dragStart is initiated from a mousemove event, AFTER the mouse/touch is
   * already moving. Therefore, the mouse/touch can sometimes be above an other
   * DOM element than the item itself.
   *
   * @param {Event} event
   * @private
   */


  ItemSet.prototype._onTouch = function (event) {
    // store the touched item, used in _onDragStart
    this.touchParams.item = this.itemFromTarget(event);
    this.touchParams.dragLeftItem = event.target.dragLeftItem || false;
    this.touchParams.dragRightItem = event.target.dragRightItem || false;
    this.touchParams.itemProps = null;
  };
  /**
   * Given an group id, returns the index it has.
   *
   * @param {number} groupId
   * @returns {number} index / groupId
   * @private
   */


  ItemSet.prototype._getGroupIndex = function (groupId) {
    for (var i = 0; i < this.groupIds.length; i++) {
      if (groupId == this.groupIds[i]) return i;
    }
  };
  /**
   * Start dragging the selected events
   * @param {Event} event
   * @private
   */


  ItemSet.prototype._onDragStart = function (event) {
    if (this.touchParams.itemIsDragging) {
      return;
    }

    var item = this.touchParams.item || null;
    var me = this;
    var props;

    if (item && (item.selected || this.options.itemsAlwaysDraggable.item)) {
      if (this.options.editable.overrideItems && !this.options.editable.updateTime && !this.options.editable.updateGroup) {
        return;
      } // override options.editable


      if (item.editable != null && !item.editable.updateTime && !item.editable.updateGroup && !this.options.editable.overrideItems) {
        return;
      }

      var dragLeftItem = this.touchParams.dragLeftItem;
      var dragRightItem = this.touchParams.dragRightItem;
      this.touchParams.itemIsDragging = true;
      this.touchParams.selectedItem = item;

      if (dragLeftItem) {
        props = {
          item: dragLeftItem,
          initialX: event.center.x,
          dragLeft: true,
          data: this._cloneItemData(item.data)
        };
        this.touchParams.itemProps = [props];
      } else if (dragRightItem) {
        props = {
          item: dragRightItem,
          initialX: event.center.x,
          dragRight: true,
          data: this._cloneItemData(item.data)
        };
        this.touchParams.itemProps = [props];
      } else if (this.options.editable.add && (event.srcEvent.ctrlKey || event.srcEvent.metaKey)) {
        // create a new range item when dragging with ctrl key down
        this._onDragStartAddItem(event);
      } else {
        if (this.groupIds.length < 1) {
          // Mitigates a race condition if _onDragStart() is
          // called after markDirty() without redraw() being called between.
          this.redraw();
        }

        var baseGroupIndex = this._getGroupIndex(item.data.group);

        var itemsToDrag = this.options.itemsAlwaysDraggable.item && !item.selected ? [item.id] : this.getSelection();
        this.touchParams.itemProps = itemsToDrag.map(function (id) {
          var item = me.items[id];

          var groupIndex = me._getGroupIndex(item.data.group);

          return {
            item: item,
            initialX: event.center.x,
            groupOffset: baseGroupIndex - groupIndex,
            data: this._cloneItemData(item.data)
          };
        }.bind(this));
      }

      event.stopPropagation();
    } else if (this.options.editable.add && (event.srcEvent.ctrlKey || event.srcEvent.metaKey)) {
      // create a new range item when dragging with ctrl key down
      this._onDragStartAddItem(event);
    }
  };
  /**
   * Start creating a new range item by dragging.
   * @param {Event} event
   * @private
   */


  ItemSet.prototype._onDragStartAddItem = function (event) {
    var xAbs;
    var x;
    var snap = this.options.snap || null;

    if (this.options.rtl) {
      xAbs = util.getAbsoluteRight(this.dom.frame);
      x = xAbs - event.center.x + 10; // plus 10 to compensate for the drag starting as soon as you've moved 10px
    } else {
      xAbs = util.getAbsoluteLeft(this.dom.frame);
      x = event.center.x - xAbs - 10; // minus 10 to compensate for the drag starting as soon as you've moved 10px
    }

    var time = this.body.util.toTime(x);
    var scale = this.body.util.getScale();
    var step = this.body.util.getStep();
    var start = snap ? snap(time, scale, step) : time;
    var end = start;
    var itemData = {
      type: 'range',
      start: start,
      end: end,
      content: 'new item'
    };
    var id = util.randomUUID();
    itemData[this.itemsData._fieldId] = id;
    var group = this.groupFromTarget(event);

    if (group) {
      itemData.group = group.groupId;
    }

    var newItem = new RangeItem_1(itemData, this.conversion, this.options);
    newItem.id = id; // TODO: not so nice setting id afterwards

    newItem.data = this._cloneItemData(itemData);

    this._addItem(newItem);

    this.touchParams.selectedItem = newItem;
    var props = {
      item: newItem,
      initialX: event.center.x,
      data: newItem.data
    };

    if (this.options.rtl) {
      props.dragLeft = true;
    } else {
      props.dragRight = true;
    }

    this.touchParams.itemProps = [props];
    event.stopPropagation();
  };
  /**
   * Drag selected items
   * @param {Event} event
   * @private
   */


  ItemSet.prototype._onDrag = function (event) {
    // deactivate tooltip window
    this.clearPopupTimer();

    if (this.popup != null) {
      this.popup.hide();
    }

    if (this.touchParams.itemProps) {
      event.stopPropagation();
      var me = this;
      var snap = this.options.snap || null;
      var xOffset;

      if (this.options.rtl) {
        xOffset = this.body.dom.root.offsetLeft + this.body.domProps.right.width;
      } else {
        xOffset = this.body.dom.root.offsetLeft + this.body.domProps.left.width;
      }

      var scale = this.body.util.getScale();
      var step = this.body.util.getStep(); //only calculate the new group for the item that's actually dragged

      var selectedItem = this.touchParams.selectedItem;
      var updateGroupAllowed = (this.options.editable.overrideItems || selectedItem.editable == null) && this.options.editable.updateGroup || !this.options.editable.overrideItems && selectedItem.editable != null && selectedItem.editable.updateGroup;
      var newGroupBase = null;

      if (updateGroupAllowed && selectedItem) {
        if (selectedItem.data.group != undefined) {
          // drag from one group to another
          var group = me.groupFromTarget(event);

          if (group) {
            //we know the offset for all items, so the new group for all items
            //will be relative to this one.
            newGroupBase = this._getGroupIndex(group.groupId);
          }
        }
      } // move


      this.touchParams.itemProps.forEach(function (props) {
        var current = me.body.util.toTime(event.center.x - xOffset);
        var initial = me.body.util.toTime(props.initialX - xOffset);
        var offset;
        var initialStart;
        var initialEnd;
        var start;
        var end;

        if (this.options.rtl) {
          offset = -(current - initial); // ms
        } else {
          offset = current - initial; // ms
        }

        var itemData = this._cloneItemData(props.item.data); // clone the data


        if (props.item.editable != null && !props.item.editable.updateTime && !props.item.editable.updateGroup && !me.options.editable.overrideItems) {
          return;
        }

        var updateTimeAllowed = (this.options.editable.overrideItems || selectedItem.editable == null) && this.options.editable.updateTime || !this.options.editable.overrideItems && selectedItem.editable != null && selectedItem.editable.updateTime;

        if (updateTimeAllowed) {
          if (props.dragLeft) {
            // drag left side of a range item
            if (this.options.rtl) {
              if (itemData.end != undefined) {
                initialEnd = util.convert(props.data.end, 'Date');
                end = new Date(initialEnd.valueOf() + offset); // TODO: pass a Moment instead of a Date to snap(). (Breaking change)

                itemData.end = snap ? snap(end, scale, step) : end;
              }
            } else {
              if (itemData.start != undefined) {
                initialStart = util.convert(props.data.start, 'Date');
                start = new Date(initialStart.valueOf() + offset); // TODO: pass a Moment instead of a Date to snap(). (Breaking change)

                itemData.start = snap ? snap(start, scale, step) : start;
              }
            }
          } else if (props.dragRight) {
            // drag right side of a range item
            if (this.options.rtl) {
              if (itemData.start != undefined) {
                initialStart = util.convert(props.data.start, 'Date');
                start = new Date(initialStart.valueOf() + offset); // TODO: pass a Moment instead of a Date to snap(). (Breaking change)

                itemData.start = snap ? snap(start, scale, step) : start;
              }
            } else {
              if (itemData.end != undefined) {
                initialEnd = util.convert(props.data.end, 'Date');
                end = new Date(initialEnd.valueOf() + offset); // TODO: pass a Moment instead of a Date to snap(). (Breaking change)

                itemData.end = snap ? snap(end, scale, step) : end;
              }
            }
          } else {
            // drag both start and end
            if (itemData.start != undefined) {
              initialStart = util.convert(props.data.start, 'Date').valueOf();
              start = new Date(initialStart + offset);

              if (itemData.end != undefined) {
                initialEnd = util.convert(props.data.end, 'Date');
                var duration = initialEnd.valueOf() - initialStart.valueOf(); // TODO: pass a Moment instead of a Date to snap(). (Breaking change)

                itemData.start = snap ? snap(start, scale, step) : start;
                itemData.end = new Date(itemData.start.valueOf() + duration);
              } else {
                // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
                itemData.start = snap ? snap(start, scale, step) : start;
              }
            }
          }
        }

        if (updateGroupAllowed && !props.dragLeft && !props.dragRight && newGroupBase != null) {
          if (itemData.group != undefined) {
            var newOffset = newGroupBase - props.groupOffset; //make sure we stay in bounds

            newOffset = Math.max(0, newOffset);
            newOffset = Math.min(me.groupIds.length - 1, newOffset);
            itemData.group = me.groupIds[newOffset];
          }
        } // confirm moving the item


        itemData = this._cloneItemData(itemData); // convert start and end to the correct type

        me.options.onMoving(itemData, function (itemData) {
          if (itemData) {
            props.item.setData(this._cloneItemData(itemData, 'Date'));
          }
        }.bind(this));
      }.bind(this));
      this.body.emitter.emit('_change');
    }
  };
  /**
   * Move an item to another group
   * @param {Item} item
   * @param {string | number} groupId
   * @private
   */


  ItemSet.prototype._moveToGroup = function (item, groupId) {
    var group = this.groups[groupId];

    if (group && group.groupId != item.data.group) {
      var oldGroup = item.parent;
      oldGroup.remove(item);
      oldGroup.order();
      item.data.group = group.groupId;
      group.add(item);
      group.order();
    }
  };
  /**
   * End of dragging selected items
   * @param {Event} event
   * @private
   */


  ItemSet.prototype._onDragEnd = function (event) {
    this.touchParams.itemIsDragging = false;

    if (this.touchParams.itemProps) {
      event.stopPropagation();
      var me = this;
      var dataset = this.itemsData.getDataSet();
      var itemProps = this.touchParams.itemProps;
      this.touchParams.itemProps = null;
      itemProps.forEach(function (props) {
        var id = props.item.id;
        var exists = me.itemsData.get(id, me.itemOptions) != null;

        if (!exists) {
          // add a new item
          me.options.onAdd(props.item.data, function (itemData) {
            me._removeItem(props.item); // remove temporary item


            if (itemData) {
              me.itemsData.getDataSet().add(itemData);
            } // force re-stacking of all items next redraw


            me.body.emitter.emit('_change');
          });
        } else {
          // update existing item
          var itemData = this._cloneItemData(props.item.data); // convert start and end to the correct type


          me.options.onMove(itemData, function (itemData) {
            if (itemData) {
              // apply changes
              itemData[dataset._fieldId] = id; // ensure the item contains its id (can be undefined)

              dataset.update(itemData);
            } else {
              // restore original values
              props.item.setData(props.data);
              me.body.emitter.emit('_change');
            }
          });
        }
      }.bind(this));
    }
  };

  ItemSet.prototype._onGroupClick = function (event) {
    var group = this.groupFromTarget(event);
    if (!group || !group.nestedGroups) return;
    var groupsData = this.groupsData.getDataSet();
    var nestingGroup = groupsData.get(group.groupId);

    if (nestingGroup.showNested == undefined) {
      nestingGroup.showNested = true;
    }

    nestingGroup.showNested = !nestingGroup.showNested;
    var nestedGroups = groupsData.get(group.nestedGroups).map(function (nestedGroup) {
      nestedGroup.visible = nestingGroup.showNested;
      return nestedGroup;
    });
    groupsData.update(nestedGroups.concat(nestingGroup));

    if (nestingGroup.showNested) {
      util.removeClassName(group.dom.label, 'collapsed');
      util.addClassName(group.dom.label, 'expanded');
    } else {
      util.removeClassName(group.dom.label, 'expanded');
      var collapsedDirClassName = this.options.rtl ? 'collapsed-rtl' : 'collapsed';
      util.addClassName(group.dom.label, collapsedDirClassName);
    }
  };

  ItemSet.prototype._onGroupDragStart = function (event) {
    if (this.options.groupEditable.order) {
      this.groupTouchParams.group = this.groupFromTarget(event);

      if (this.groupTouchParams.group) {
        event.stopPropagation();
        this.groupTouchParams.originalOrder = this.groupsData.getIds({
          order: this.options.groupOrder
        });
      }
    }
  };

  ItemSet.prototype._onGroupDrag = function (event) {
    if (this.options.groupEditable.order && this.groupTouchParams.group) {
      event.stopPropagation();
      var groupsData = this.groupsData;

      if (this.groupsData instanceof DataView) {
        groupsData = this.groupsData.getDataSet();
      } // drag from one group to another


      var group = this.groupFromTarget(event); // try to avoid toggling when groups differ in height

      if (group && group.height != this.groupTouchParams.group.height) {
        var movingUp = group.top < this.groupTouchParams.group.top;
        var clientY = event.center ? event.center.y : event.clientY;
        var targetGroupTop = util.getAbsoluteTop(group.dom.foreground);
        var draggedGroupHeight = this.groupTouchParams.group.height;

        if (movingUp) {
          // skip swapping the groups when the dragged group is not below clientY afterwards
          if (targetGroupTop + draggedGroupHeight < clientY) {
            return;
          }
        } else {
          var targetGroupHeight = group.height; // skip swapping the groups when the dragged group is not below clientY afterwards

          if (targetGroupTop + targetGroupHeight - draggedGroupHeight > clientY) {
            return;
          }
        }
      }

      if (group && group != this.groupTouchParams.group) {
        var targetGroup = groupsData.get(group.groupId);
        var draggedGroup = groupsData.get(this.groupTouchParams.group.groupId); // switch groups

        if (draggedGroup && targetGroup) {
          this.options.groupOrderSwap(draggedGroup, targetGroup, groupsData);
          groupsData.update(draggedGroup);
          groupsData.update(targetGroup);
        } // fetch current order of groups


        var newOrder = groupsData.getIds({
          order: this.options.groupOrder
        }); // in case of changes since _onGroupDragStart

        if (!util.equalArray(newOrder, this.groupTouchParams.originalOrder)) {
          var origOrder = this.groupTouchParams.originalOrder;
          var draggedId = this.groupTouchParams.group.groupId;
          var numGroups = Math.min(origOrder.length, newOrder.length);
          var curPos = 0;
          var newOffset = 0;
          var orgOffset = 0;

          while (curPos < numGroups) {
            // as long as the groups are where they should be step down along the groups order
            while (curPos + newOffset < numGroups && curPos + orgOffset < numGroups && newOrder[curPos + newOffset] == origOrder[curPos + orgOffset]) {
              curPos++;
            } // all ok


            if (curPos + newOffset >= numGroups) {
              break;
            } // not all ok
            // if dragged group was move upwards everything below should have an offset


            if (newOrder[curPos + newOffset] == draggedId) {
              newOffset = 1;
            } // if dragged group was move downwards everything above should have an offset
            else if (origOrder[curPos + orgOffset] == draggedId) {
                orgOffset = 1;
              } // found a group (apart from dragged group) that has the wrong position -> switch with the 
              // group at the position where other one should be, fix index arrays and continue
              else {
                  var slippedPosition = newOrder.indexOf(origOrder[curPos + orgOffset]);
                  var switchGroup = groupsData.get(newOrder[curPos + newOffset]);
                  var shouldBeGroup = groupsData.get(origOrder[curPos + orgOffset]);
                  this.options.groupOrderSwap(switchGroup, shouldBeGroup, groupsData);
                  groupsData.update(switchGroup);
                  groupsData.update(shouldBeGroup);
                  var switchGroupId = newOrder[curPos + newOffset];
                  newOrder[curPos + newOffset] = origOrder[curPos + orgOffset];
                  newOrder[slippedPosition] = switchGroupId;
                  curPos++;
                }
          }
        }
      }
    }
  };

  ItemSet.prototype._onGroupDragEnd = function (event) {
    if (this.options.groupEditable.order && this.groupTouchParams.group) {
      event.stopPropagation(); // update existing group

      var me = this;
      var id = me.groupTouchParams.group.groupId;
      var dataset = me.groupsData.getDataSet();
      var groupData = util.extend({}, dataset.get(id)); // clone the data

      me.options.onMoveGroup(groupData, function (groupData) {
        if (groupData) {
          // apply changes
          groupData[dataset._fieldId] = id; // ensure the group contains its id (can be undefined)

          dataset.update(groupData);
        } else {
          // fetch current order of groups
          var newOrder = dataset.getIds({
            order: me.options.groupOrder
          }); // restore original order

          if (!util.equalArray(newOrder, me.groupTouchParams.originalOrder)) {
            var origOrder = me.groupTouchParams.originalOrder;
            var numGroups = Math.min(origOrder.length, newOrder.length);
            var curPos = 0;

            while (curPos < numGroups) {
              // as long as the groups are where they should be step down along the groups order
              while (curPos < numGroups && newOrder[curPos] == origOrder[curPos]) {
                curPos++;
              } // all ok


              if (curPos >= numGroups) {
                break;
              } // found a group that has the wrong position -> switch with the
              // group at the position where other one should be, fix index arrays and continue


              var slippedPosition = newOrder.indexOf(origOrder[curPos]);
              var switchGroup = dataset.get(newOrder[curPos]);
              var shouldBeGroup = dataset.get(origOrder[curPos]);
              me.options.groupOrderSwap(switchGroup, shouldBeGroup, dataset);
              dataset.update(switchGroup);
              dataset.update(shouldBeGroup);
              var switchGroupId = newOrder[curPos];
              newOrder[curPos] = origOrder[curPos];
              newOrder[slippedPosition] = switchGroupId;
              curPos++;
            }
          }
        }
      });
      me.body.emitter.emit('groupDragged', {
        groupId: id
      });
    }
  };
  /**
   * Handle selecting/deselecting an item when tapping it
   * @param {Event} event
   * @private
   */


  ItemSet.prototype._onSelectItem = function (event) {
    if (!this.options.selectable) return;
    var ctrlKey = event.srcEvent && (event.srcEvent.ctrlKey || event.srcEvent.metaKey);
    var shiftKey = event.srcEvent && event.srcEvent.shiftKey;

    if (ctrlKey || shiftKey) {
      this._onMultiSelectItem(event);

      return;
    }

    var oldSelection = this.getSelection();
    var item = this.itemFromTarget(event);
    var selection = item ? [item.id] : [];
    this.setSelection(selection);
    var newSelection = this.getSelection(); // emit a select event,
    // except when old selection is empty and new selection is still empty

    if (newSelection.length > 0 || oldSelection.length > 0) {
      this.body.emitter.emit('select', {
        items: newSelection,
        event: event
      });
    }
  };
  /**
   * Handle hovering an item
   * @param {Event} event
   * @private
   */


  ItemSet.prototype._onMouseOver = function (event) {
    var item = this.itemFromTarget(event);
    if (!item) return; // Item we just left

    var related = this.itemFromRelatedTarget(event);

    if (item === related) {
      // We haven't changed item, just element in the item
      return;
    }

    var title = item.getTitle();

    if (this.options.showTooltips && title) {
      if (this.popup == null) {
        this.popup = new Popup(this.body.dom.root, this.options.tooltip.overflowMethod || 'flip');
      }

      this.popup.setText(title);
      var container = this.body.dom.centerContainer;
      this.popup.setPosition(event.clientX - util.getAbsoluteLeft(container) + container.offsetLeft, event.clientY - util.getAbsoluteTop(container) + container.offsetTop);
      this.setPopupTimer(this.popup);
    } else {
      // Hovering over item without a title, hide popup
      // Needed instead of _just_ in _onMouseOut due to #2572
      this.clearPopupTimer();

      if (this.popup != null) {
        this.popup.hide();
      }
    }

    this.body.emitter.emit('itemover', {
      item: item.id,
      event: event
    });
  };

  ItemSet.prototype._onMouseOut = function (event) {
    var item = this.itemFromTarget(event);
    if (!item) return; // Item we are going to

    var related = this.itemFromRelatedTarget(event);

    if (item === related) {
      // We aren't changing item, just element in the item
      return;
    }

    this.clearPopupTimer();

    if (this.popup != null) {
      this.popup.hide();
    }

    this.body.emitter.emit('itemout', {
      item: item.id,
      event: event
    });
  };

  ItemSet.prototype._onMouseMove = function (event) {
    var item = this.itemFromTarget(event);
    if (!item) return;

    if (this.popupTimer != null) {
      // restart timer
      this.setPopupTimer(this.popup);
    }

    if (this.options.showTooltips && this.options.tooltip.followMouse) {
      if (this.popup) {
        if (!this.popup.hidden) {
          var container = this.body.dom.centerContainer;
          this.popup.setPosition(event.clientX - util.getAbsoluteLeft(container) + container.offsetLeft, event.clientY - util.getAbsoluteTop(container) + container.offsetTop);
          this.popup.show(); // Redraw
        }
      }
    }
  };
  /**
   * Handle mousewheel
   * @param {Event}  event   The event
   * @private
   */


  ItemSet.prototype._onMouseWheel = function (event) {
    if (this.touchParams.itemIsDragging) {
      this._onDragEnd(event);
    }
  };
  /**
   * Handle updates of an item on double tap
   * @param {vis.Item}  item   The item
   * @private
   */


  ItemSet.prototype._onUpdateItem = function (item) {
    if (!this.options.selectable) return;
    if (!this.options.editable.add) return;
    var me = this;

    if (item) {
      // execute async handler to update the item (or cancel it)
      var itemData = me.itemsData.get(item.id); // get a clone of the data from the dataset

      this.options.onUpdate(itemData, function (itemData) {
        if (itemData) {
          me.itemsData.getDataSet().update(itemData);
        }
      });
    }
  };
  /**
   * Handle drop event of data on item
   * Only called when `objectData.target === 'item'.
   * @param {Event} event The event 
   * @private
   */


  ItemSet.prototype._onDropObjectOnItem = function (event) {
    var item = this.itemFromTarget(event);
    var objectData = JSON.parse(event.dataTransfer.getData("text"));
    this.options.onDropObjectOnItem(objectData, item);
  };
  /**
   * Handle creation of an item on double tap or drop of a drag event
   * @param {Event} event   The event
   * @private
   */


  ItemSet.prototype._onAddItem = function (event) {
    if (!this.options.selectable) return;
    if (!this.options.editable.add) return;
    var me = this;
    var snap = this.options.snap || null;
    var xAbs;
    var x; // add item

    if (this.options.rtl) {
      xAbs = util.getAbsoluteRight(this.dom.frame);
      x = xAbs - event.center.x;
    } else {
      xAbs = util.getAbsoluteLeft(this.dom.frame);
      x = event.center.x - xAbs;
    } // var xAbs = util.getAbsoluteLeft(this.dom.frame);
    // var x = event.center.x - xAbs;


    var start = this.body.util.toTime(x);
    var scale = this.body.util.getScale();
    var step = this.body.util.getStep();
    var end;
    var newItemData;

    if (event.type == 'drop') {
      newItemData = JSON.parse(event.dataTransfer.getData("text"));
      newItemData.content = newItemData.content ? newItemData.content : 'new item';
      newItemData.start = newItemData.start ? newItemData.start : snap ? snap(start, scale, step) : start;
      newItemData.type = newItemData.type || 'box';
      newItemData[this.itemsData._fieldId] = newItemData.id || util.randomUUID();

      if (newItemData.type == 'range' && !newItemData.end) {
        end = this.body.util.toTime(x + this.props.width / 5);
        newItemData.end = snap ? snap(end, scale, step) : end;
      }
    } else {
      newItemData = {
        start: snap ? snap(start, scale, step) : start,
        content: 'new item'
      };
      newItemData[this.itemsData._fieldId] = util.randomUUID(); // when default type is a range, add a default end date to the new item

      if (this.options.type === 'range') {
        end = this.body.util.toTime(x + this.props.width / 5);
        newItemData.end = snap ? snap(end, scale, step) : end;
      }
    }

    var group = this.groupFromTarget(event);

    if (group) {
      newItemData.group = group.groupId;
    } // execute async handler to customize (or cancel) adding an item


    newItemData = this._cloneItemData(newItemData); // convert start and end to the correct type

    this.options.onAdd(newItemData, function (item) {
      if (item) {
        me.itemsData.getDataSet().add(item);

        if (event.type == 'drop') {
          me.setSelection([item.id]);
        } // TODO: need to trigger a redraw?

      }
    });
  };
  /**
   * Handle selecting/deselecting multiple items when holding an item
   * @param {Event} event
   * @private
   */


  ItemSet.prototype._onMultiSelectItem = function (event) {
    if (!this.options.selectable) return;
    var item = this.itemFromTarget(event);

    if (item) {
      // multi select items (if allowed)
      var selection = this.options.multiselect ? this.getSelection() // take current selection
      : []; // deselect current selection

      var shiftKey = event.srcEvent && event.srcEvent.shiftKey || false;

      if (shiftKey && this.options.multiselect) {
        // select all items between the old selection and the tapped item
        var itemGroup = this.itemsData.get(item.id).group; // when filtering get the group of the last selected item

        var lastSelectedGroup = undefined;

        if (this.options.multiselectPerGroup) {
          if (selection.length > 0) {
            lastSelectedGroup = this.itemsData.get(selection[0]).group;
          }
        } // determine the selection range


        if (!this.options.multiselectPerGroup || lastSelectedGroup == undefined || lastSelectedGroup == itemGroup) {
          selection.push(item.id);
        }

        var range = ItemSet._getItemRange(this.itemsData.get(selection, this.itemOptions));

        if (!this.options.multiselectPerGroup || lastSelectedGroup == itemGroup) {
          // select all items within the selection range
          selection = [];

          for (var id in this.items) {
            if (this.items.hasOwnProperty(id)) {
              var _item = this.items[id];
              var start = _item.data.start;
              var end = _item.data.end !== undefined ? _item.data.end : start;

              if (start >= range.min && end <= range.max && (!this.options.multiselectPerGroup || lastSelectedGroup == this.itemsData.get(_item.id).group) && !(_item instanceof BackgroundItem_1)) {
                selection.push(_item.id); // do not use id but item.id, id itself is stringified
              }
            }
          }
        }
      } else {
        // add/remove this item from the current selection
        var index = selection.indexOf(item.id);

        if (index == -1) {
          // item is not yet selected -> select it
          selection.push(item.id);
        } else {
          // item is already selected -> deselect it
          selection.splice(index, 1);
        }
      }

      this.setSelection(selection);
      this.body.emitter.emit('select', {
        items: this.getSelection(),
        event: event
      });
    }
  };
  /**
   * Calculate the time range of a list of items
   * @param {Array.<Object>} itemsData
   * @return {{min: Date, max: Date}} Returns the range of the provided items
   * @private
   */


  ItemSet._getItemRange = function (itemsData) {
    var max = null;
    var min = null;
    itemsData.forEach(function (data) {
      if (min == null || data.start < min) {
        min = data.start;
      }

      if (data.end != undefined) {
        if (max == null || data.end > max) {
          max = data.end;
        }
      } else {
        if (max == null || data.start > max) {
          max = data.start;
        }
      }
    });
    return {
      min: min,
      max: max
    };
  };
  /**
   * Find an item from an element:
   * searches for the attribute 'timeline-item' in the element's tree
   * @param {HTMLElement} element
   * @return {Item | null} item
   */


  ItemSet.prototype.itemFromElement = function (element) {
    var cur = element;

    while (cur) {
      if (cur.hasOwnProperty('timeline-item')) {
        return cur['timeline-item'];
      }

      cur = cur.parentNode;
    }

    return null;
  };
  /**
   * Find an item from an event target:
   * searches for the attribute 'timeline-item' in the event target's element tree
   * @param {Event} event
   * @return {Item | null} item
   */


  ItemSet.prototype.itemFromTarget = function (event) {
    return this.itemFromElement(event.target);
  };
  /**
   * Find an item from an event's related target:
   * searches for the attribute 'timeline-item' in the related target's element tree
   * @param {Event} event
   * @return {Item | null} item
   */


  ItemSet.prototype.itemFromRelatedTarget = function (event) {
    return this.itemFromElement(event.relatedTarget);
  };
  /**
   * Find the Group from an event target:
   * searches for the attribute 'timeline-group' in the event target's element tree
   * @param {Event} event
   * @return {Group | null} group
   */


  ItemSet.prototype.groupFromTarget = function (event) {
    var clientY = event.center ? event.center.y : event.clientY;
    var groupIds = this.groupIds;

    if (groupIds.length <= 0 && this.groupsData) {
      groupIds = this.groupsData.getIds({
        order: this.options.groupOrder
      });
    }

    for (var i = 0; i < groupIds.length; i++) {
      var groupId = groupIds[i];
      var group = this.groups[groupId];
      var foreground = group.dom.foreground;
      var top = util.getAbsoluteTop(foreground);

      if (clientY >= top && clientY < top + foreground.offsetHeight) {
        return group;
      }

      if (this.options.orientation.item === 'top') {
        if (i === this.groupIds.length - 1 && clientY > top) {
          return group;
        }
      } else {
        if (i === 0 && clientY < top + foreground.offset) {
          return group;
        }
      }
    }

    return null;
  };
  /**
   * Find the ItemSet from an event target:
   * searches for the attribute 'timeline-itemset' in the event target's element tree
   * @param {Event} event
   * @return {ItemSet | null} item
   */


  ItemSet.itemSetFromTarget = function (event) {
    var target = event.target;

    while (target) {
      if (target.hasOwnProperty('timeline-itemset')) {
        return target['timeline-itemset'];
      }

      target = target.parentNode;
    }

    return null;
  };
  /**
   * Clone the data of an item, and "normalize" it: convert the start and end date
   * to the type (Date, Moment, ...) configured in the DataSet. If not configured,
   * start and end are converted to Date.
   * @param {Object} itemData, typically `item.data`
   * @param {string} [type]  Optional Date type. If not provided, the type from the DataSet is taken
   * @return {Object} The cloned object
   * @private
   */


  ItemSet.prototype._cloneItemData = function (itemData, type) {
    var clone = util.extend({}, itemData);

    if (!type) {
      // convert start and end date to the type (Date, Moment, ...) configured in the DataSet
      type = this.itemsData.getDataSet()._options.type;
    }

    if (clone.start != undefined) {
      clone.start = util.convert(clone.start, type && type.start || 'Date');
    }

    if (clone.end != undefined) {
      clone.end = util.convert(clone.end, type && type.end || 'Date');
    }

    return clone;
  };

  let errorFound$1 = false;
  let allOptions$3;
  let printStyle$2 = 'background: #FFeeee; color: #dd0000';
  /**
   *  Used to validate options.
   */

  class Validator$3 {
    /**
     * @ignore
     */
    constructor() {}
    /**
     * Main function to be called
     * @param {Object} options
     * @param {Object} referenceOptions
     * @param {Object} subObject
     * @returns {boolean}
     * @static
     */


    static validate(options, referenceOptions, subObject) {
      errorFound$1 = false;
      allOptions$3 = referenceOptions;
      let usedOptions = referenceOptions;

      if (subObject !== undefined) {
        usedOptions = referenceOptions[subObject];
      }

      Validator$3.parse(options, usedOptions, []);
      return errorFound$1;
    }
    /**
     * Will traverse an object recursively and check every value
     * @param {Object} options
     * @param {Object} referenceOptions
     * @param {array} path    | where to look for the actual option
     * @static
     */


    static parse(options, referenceOptions, path) {
      for (let option in options) {
        if (options.hasOwnProperty(option)) {
          Validator$3.check(option, options, referenceOptions, path);
        }
      }
    }
    /**
     * Check every value. If the value is an object, call the parse function on that object.
     * @param {string} option
     * @param {Object} options
     * @param {Object} referenceOptions
     * @param {array} path    | where to look for the actual option
     * @static
     */


    static check(option, options, referenceOptions, path) {
      if (referenceOptions[option] === undefined && referenceOptions.__any__ === undefined) {
        Validator$3.getSuggestion(option, referenceOptions, path);
        return;
      }

      let referenceOption = option;
      let is_object = true;

      if (referenceOptions[option] === undefined && referenceOptions.__any__ !== undefined) {
        // NOTE: This only triggers if the __any__ is in the top level of the options object.
        //       THAT'S A REALLY BAD PLACE TO ALLOW IT!!!!
        // TODO: Examine if needed, remove if possible
        // __any__ is a wildcard. Any value is accepted and will be further analysed by reference.
        referenceOption = '__any__'; // if the any-subgroup is not a predefined object in the configurator,
        // we do not look deeper into the object.

        is_object = Validator$3.getType(options[option]) === 'object';
      }

      let refOptionObj = referenceOptions[referenceOption];

      if (is_object && refOptionObj.__type__ !== undefined) {
        refOptionObj = refOptionObj.__type__;
      }

      Validator$3.checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path);
    }
    /**
     *
     * @param {string}  option           | the option property
     * @param {Object}  options          | The supplied options object
     * @param {Object}  referenceOptions | The reference options containing all options and their allowed formats
     * @param {string}  referenceOption  | Usually this is the same as option, except when handling an __any__ tag.
     * @param {string}  refOptionObj     | This is the type object from the reference options
     * @param {Array}   path             | where in the object is the option
     * @static
     */


    static checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path) {
      let log = function (message) {
        console.log('%c' + message + Validator$3.printLocation(path, option), printStyle$2);
      };

      let optionType = Validator$3.getType(options[option]);
      let refOptionType = refOptionObj[optionType];

      if (refOptionType !== undefined) {
        // if the type is correct, we check if it is supposed to be one of a few select values
        if (Validator$3.getType(refOptionType) === 'array' && refOptionType.indexOf(options[option]) === -1) {
          log('Invalid option detected in "' + option + '".' + ' Allowed values are:' + Validator$3.print(refOptionType) + ' not "' + options[option] + '". ');
          errorFound$1 = true;
        } else if (optionType === 'object' && referenceOption !== "__any__") {
          path = util.copyAndExtendArray(path, option);
          Validator$3.parse(options[option], referenceOptions[referenceOption], path);
        }
      } else if (refOptionObj['any'] === undefined) {
        // type of the field is incorrect and the field cannot be any
        log('Invalid type received for "' + option + '". Expected: ' + Validator$3.print(Object.keys(refOptionObj)) + '. Received [' + optionType + '] "' + options[option] + '"');
        errorFound$1 = true;
      }
    }
    /**
     *
     * @param {Object|boolean|number|string|Array.<number>|Date|Node|Moment|undefined|null} object
     * @returns {string}
     * @static
     */


    static getType(object) {
      var type = typeof object;

      if (type === 'object') {
        if (object === null) {
          return 'null';
        }

        if (object instanceof Boolean) {
          return 'boolean';
        }

        if (object instanceof Number) {
          return 'number';
        }

        if (object instanceof String) {
          return 'string';
        }

        if (Array.isArray(object)) {
          return 'array';
        }

        if (object instanceof Date) {
          return 'date';
        }

        if (object.nodeType !== undefined) {
          return 'dom';
        }

        if (object._isAMomentObject === true) {
          return 'moment';
        }

        return 'object';
      } else if (type === 'number') {
        return 'number';
      } else if (type === 'boolean') {
        return 'boolean';
      } else if (type === 'string') {
        return 'string';
      } else if (type === undefined) {
        return 'undefined';
      }

      return type;
    }
    /**
     * @param {string} option
     * @param {Object} options
     * @param {Array.<string>} path
     * @static
     */


    static getSuggestion(option, options, path) {
      let localSearch = Validator$3.findInOptions(option, options, path, false);
      let globalSearch = Validator$3.findInOptions(option, allOptions$3, [], true);
      let localSearchThreshold = 8;
      let globalSearchThreshold = 4;
      let msg;

      if (localSearch.indexMatch !== undefined) {
        msg = ' in ' + Validator$3.printLocation(localSearch.path, option, '') + 'Perhaps it was incomplete? Did you mean: "' + localSearch.indexMatch + '"?\n\n';
      } else if (globalSearch.distance <= globalSearchThreshold && localSearch.distance > globalSearch.distance) {
        msg = ' in ' + Validator$3.printLocation(localSearch.path, option, '') + 'Perhaps it was misplaced? Matching option found at: ' + Validator$3.printLocation(globalSearch.path, globalSearch.closestMatch, '');
      } else if (localSearch.distance <= localSearchThreshold) {
        msg = '. Did you mean "' + localSearch.closestMatch + '"?' + Validator$3.printLocation(localSearch.path, option);
      } else {
        msg = '. Did you mean one of these: ' + Validator$3.print(Object.keys(options)) + Validator$3.printLocation(path, option);
      }

      console.log('%cUnknown option detected: "' + option + '"' + msg, printStyle$2);
      errorFound$1 = true;
    }
    /**
     * traverse the options in search for a match.
     * @param {string} option
     * @param {Object} options
     * @param {Array} path    | where to look for the actual option
     * @param {boolean} [recursive=false]
     * @returns {{closestMatch: string, path: Array, distance: number}}
     * @static
     */


    static findInOptions(option, options, path, recursive = false) {
      let min = 1e9;
      let closestMatch = '';
      let closestMatchPath = [];
      let lowerCaseOption = option.toLowerCase();
      let indexMatch = undefined;

      for (let op in options) {
        // eslint-disable-line guard-for-in
        let distance;

        if (options[op].__type__ !== undefined && recursive === true) {
          let result = Validator$3.findInOptions(option, options[op], util.copyAndExtendArray(path, op));

          if (min > result.distance) {
            closestMatch = result.closestMatch;
            closestMatchPath = result.path;
            min = result.distance;
            indexMatch = result.indexMatch;
          }
        } else {
          if (op.toLowerCase().indexOf(lowerCaseOption) !== -1) {
            indexMatch = op;
          }

          distance = Validator$3.levenshteinDistance(option, op);

          if (min > distance) {
            closestMatch = op;
            closestMatchPath = util.copyArray(path);
            min = distance;
          }
        }
      }

      return {
        closestMatch: closestMatch,
        path: closestMatchPath,
        distance: min,
        indexMatch: indexMatch
      };
    }
    /**
     * @param {Array.<string>} path
     * @param {Object} option
     * @param {string} prefix
     * @returns {String}
     * @static
     */


    static printLocation(path, option, prefix = 'Problem value found at: \n') {
      let str = '\n\n' + prefix + 'options = {\n';

      for (let i = 0; i < path.length; i++) {
        for (let j = 0; j < i + 1; j++) {
          str += '  ';
        }

        str += path[i] + ': {\n';
      }

      for (let j = 0; j < path.length + 1; j++) {
        str += '  ';
      }

      str += option + '\n';

      for (let i = 0; i < path.length + 1; i++) {
        for (let j = 0; j < path.length - i; j++) {
          str += '  ';
        }

        str += '}\n';
      }

      return str + '\n\n';
    }
    /**
     * @param {Object} options
     * @returns {String}
     * @static
     */


    static print(options) {
      return JSON.stringify(options).replace(/(\")|(\[)|(\])|(,"__type__")/g, "").replace(/(\,)/g, ', ');
    }
    /**
     *  Compute the edit distance between the two given strings
     * http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript
     *
     * Copyright (c) 2011 Andrei Mackenzie
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     *
     * @param {string} a
     * @param {string} b
     * @returns {Array.<Array.<number>>}}
     * @static
     */


    static levenshteinDistance(a, b) {
      if (a.length === 0) return b.length;
      if (b.length === 0) return a.length;
      var matrix = []; // increment along the first column of each row

      var i;

      for (i = 0; i <= b.length; i++) {
        matrix[i] = [i];
      } // increment each column in the first row


      var j;

      for (j = 0; j <= a.length; j++) {
        matrix[0][j] = j;
      } // Fill in the rest of the matrix


      for (i = 1; i <= b.length; i++) {
        for (j = 1; j <= a.length; j++) {
          if (b.charAt(i - 1) == a.charAt(j - 1)) {
            matrix[i][j] = matrix[i - 1][j - 1];
          } else {
            matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution
            Math.min(matrix[i][j - 1] + 1, // insertion
            matrix[i - 1][j] + 1)); // deletion
          }
        }
      }

      return matrix[b.length][a.length];
    }

  }

  var Validator$4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Validator: Validator$3,
    printStyle: printStyle$2
  });

  /**
   * This object contains all possible options. It will check if the types are correct, if required if the option is one
   * of the allowed values.
   *
   * __any__ means that the name of the property does not matter.
   * __type__ is a required field for all objects and contains the allowed types of all objects
   */
  let string$1 = 'string';
  let bool$1 = 'boolean';
  let number$1 = 'number';
  let array = 'array';
  let date = 'date';
  let object$1 = 'object'; // should only be in a __type__ property

  let dom = 'dom';
  let moment$4 = 'moment';
  let any = 'any';
  let allOptions$4 = {
    configure: {
      enabled: {
        'boolean': bool$1
      },
      filter: {
        'boolean': bool$1,
        'function': 'function'
      },
      container: {
        dom
      },
      __type__: {
        object: object$1,
        'boolean': bool$1,
        'function': 'function'
      }
    },
    //globals :
    align: {
      string: string$1
    },
    alignCurrentTime: {
      string: string$1,
      'undefined': 'undefined'
    },
    rtl: {
      'boolean': bool$1,
      'undefined': 'undefined'
    },
    rollingMode: {
      follow: {
        'boolean': bool$1
      },
      offset: {
        number: number$1,
        'undefined': 'undefined'
      },
      __type__: {
        object: object$1
      }
    },
    onTimeout: {
      timeoutMs: {
        number: number$1
      },
      callback: {
        'function': 'function'
      },
      __type__: {
        object: object$1
      }
    },
    verticalScroll: {
      'boolean': bool$1,
      'undefined': 'undefined'
    },
    horizontalScroll: {
      'boolean': bool$1,
      'undefined': 'undefined'
    },
    autoResize: {
      'boolean': bool$1
    },
    throttleRedraw: {
      number: number$1
    },
    // TODO: DEPRICATED see https://github.com/almende/vis/issues/2511
    clickToUse: {
      'boolean': bool$1
    },
    dataAttributes: {
      string: string$1,
      array
    },
    editable: {
      add: {
        'boolean': bool$1,
        'undefined': 'undefined'
      },
      remove: {
        'boolean': bool$1,
        'undefined': 'undefined'
      },
      updateGroup: {
        'boolean': bool$1,
        'undefined': 'undefined'
      },
      updateTime: {
        'boolean': bool$1,
        'undefined': 'undefined'
      },
      overrideItems: {
        'boolean': bool$1,
        'undefined': 'undefined'
      },
      __type__: {
        'boolean': bool$1,
        object: object$1
      }
    },
    end: {
      number: number$1,
      date,
      string: string$1,
      moment: moment$4
    },
    format: {
      minorLabels: {
        millisecond: {
          string: string$1,
          'undefined': 'undefined'
        },
        second: {
          string: string$1,
          'undefined': 'undefined'
        },
        minute: {
          string: string$1,
          'undefined': 'undefined'
        },
        hour: {
          string: string$1,
          'undefined': 'undefined'
        },
        weekday: {
          string: string$1,
          'undefined': 'undefined'
        },
        day: {
          string: string$1,
          'undefined': 'undefined'
        },
        week: {
          string: string$1,
          'undefined': 'undefined'
        },
        month: {
          string: string$1,
          'undefined': 'undefined'
        },
        quarter: {
          string: string$1,
          'undefined': 'undefined'
        },
        year: {
          string: string$1,
          'undefined': 'undefined'
        },
        __type__: {
          object: object$1,
          'function': 'function'
        }
      },
      majorLabels: {
        millisecond: {
          string: string$1,
          'undefined': 'undefined'
        },
        second: {
          string: string$1,
          'undefined': 'undefined'
        },
        minute: {
          string: string$1,
          'undefined': 'undefined'
        },
        hour: {
          string: string$1,
          'undefined': 'undefined'
        },
        weekday: {
          string: string$1,
          'undefined': 'undefined'
        },
        day: {
          string: string$1,
          'undefined': 'undefined'
        },
        week: {
          string: string$1,
          'undefined': 'undefined'
        },
        month: {
          string: string$1,
          'undefined': 'undefined'
        },
        quarter: {
          string: string$1,
          'undefined': 'undefined'
        },
        year: {
          string: string$1,
          'undefined': 'undefined'
        },
        __type__: {
          object: object$1,
          'function': 'function'
        }
      },
      __type__: {
        object: object$1
      }
    },
    moment: {
      'function': 'function'
    },
    groupHeightMode: {
      string: string$1
    },
    groupLabelDirection: {
      string: string$1
    },
    groupOrder: {
      string: string$1,
      'function': 'function'
    },
    groupEditable: {
      add: {
        'boolean': bool$1,
        'undefined': 'undefined'
      },
      remove: {
        'boolean': bool$1,
        'undefined': 'undefined'
      },
      order: {
        'boolean': bool$1,
        'undefined': 'undefined'
      },
      __type__: {
        'boolean': bool$1,
        object: object$1
      }
    },
    groupOrderSwap: {
      'function': 'function'
    },
    height: {
      string: string$1,
      number: number$1
    },
    hiddenDates: {
      start: {
        date,
        number: number$1,
        string: string$1,
        moment: moment$4
      },
      end: {
        date,
        number: number$1,
        string: string$1,
        moment: moment$4
      },
      repeat: {
        string: string$1
      },
      __type__: {
        object: object$1,
        array
      }
    },
    itemsAlwaysDraggable: {
      item: {
        'boolean': bool$1,
        'undefined': 'undefined'
      },
      range: {
        'boolean': bool$1,
        'undefined': 'undefined'
      },
      __type__: {
        'boolean': bool$1,
        object: object$1
      }
    },
    limitSize: {
      'boolean': bool$1
    },
    locale: {
      string: string$1
    },
    locales: {
      __any__: {
        any
      },
      __type__: {
        object: object$1
      }
    },
    margin: {
      axis: {
        number: number$1
      },
      item: {
        horizontal: {
          number: number$1,
          'undefined': 'undefined'
        },
        vertical: {
          number: number$1,
          'undefined': 'undefined'
        },
        __type__: {
          object: object$1,
          number: number$1
        }
      },
      __type__: {
        object: object$1,
        number: number$1
      }
    },
    max: {
      date,
      number: number$1,
      string: string$1,
      moment: moment$4
    },
    maxHeight: {
      number: number$1,
      string: string$1
    },
    maxMinorChars: {
      number: number$1
    },
    min: {
      date,
      number: number$1,
      string: string$1,
      moment: moment$4
    },
    minHeight: {
      number: number$1,
      string: string$1
    },
    moveable: {
      'boolean': bool$1
    },
    multiselect: {
      'boolean': bool$1
    },
    multiselectPerGroup: {
      'boolean': bool$1
    },
    onAdd: {
      'function': 'function'
    },
    onDropObjectOnItem: {
      'function': 'function'
    },
    onUpdate: {
      'function': 'function'
    },
    onMove: {
      'function': 'function'
    },
    onMoving: {
      'function': 'function'
    },
    onRemove: {
      'function': 'function'
    },
    onAddGroup: {
      'function': 'function'
    },
    onMoveGroup: {
      'function': 'function'
    },
    onRemoveGroup: {
      'function': 'function'
    },
    onInitialDrawComplete: {
      'function': 'function'
    },
    order: {
      'function': 'function'
    },
    orientation: {
      axis: {
        string: string$1,
        'undefined': 'undefined'
      },
      item: {
        string: string$1,
        'undefined': 'undefined'
      },
      __type__: {
        string: string$1,
        object: object$1
      }
    },
    selectable: {
      'boolean': bool$1
    },
    showCurrentTime: {
      'boolean': bool$1
    },
    showMajorLabels: {
      'boolean': bool$1
    },
    showMinorLabels: {
      'boolean': bool$1
    },
    stack: {
      'boolean': bool$1
    },
    stackSubgroups: {
      'boolean': bool$1
    },
    snap: {
      'function': 'function',
      'null': 'null'
    },
    start: {
      date,
      number: number$1,
      string: string$1,
      moment: moment$4
    },
    template: {
      'function': 'function'
    },
    loadingScreenTemplate: {
      'function': 'function'
    },
    groupTemplate: {
      'function': 'function'
    },
    visibleFrameTemplate: {
      string: string$1,
      'function': 'function'
    },
    showTooltips: {
      'boolean': bool$1
    },
    tooltip: {
      followMouse: {
        'boolean': bool$1
      },
      overflowMethod: {
        'string': ['cap', 'flip']
      },
      __type__: {
        object: object$1
      }
    },
    tooltipOnItemUpdateTime: {
      template: {
        'function': 'function'
      },
      __type__: {
        'boolean': bool$1,
        object: object$1
      }
    },
    timeAxis: {
      scale: {
        string: string$1,
        'undefined': 'undefined'
      },
      step: {
        number: number$1,
        'undefined': 'undefined'
      },
      __type__: {
        object: object$1
      }
    },
    type: {
      string: string$1
    },
    width: {
      string: string$1,
      number: number$1
    },
    zoomable: {
      'boolean': bool$1
    },
    zoomKey: {
      string: ['ctrlKey', 'altKey', 'metaKey', '']
    },
    zoomMax: {
      number: number$1
    },
    zoomMin: {
      number: number$1
    },
    __type__: {
      object: object$1
    }
  };
  let configureOptions = {
    global: {
      align: ['center', 'left', 'right'],
      alignCurrentTime: ['none', 'year', 'month', 'quarter', 'week', 'isoWeek', 'day', 'date', 'hour', 'minute', 'second'],
      direction: false,
      autoResize: true,
      clickToUse: false,
      // dataAttributes: ['all'], // FIXME: can be 'all' or string[]
      editable: {
        add: false,
        remove: false,
        updateGroup: false,
        updateTime: false
      },
      end: '',
      format: {
        minorLabels: {
          millisecond: 'SSS',
          second: 's',
          minute: 'HH:mm',
          hour: 'HH:mm',
          weekday: 'ddd D',
          day: 'D',
          week: 'w',
          month: 'MMM',
          quarter: '[Q]Q',
          year: 'YYYY'
        },
        majorLabels: {
          millisecond: 'HH:mm:ss',
          second: 'D MMMM HH:mm',
          minute: 'ddd D MMMM',
          hour: 'ddd D MMMM',
          weekday: 'MMMM YYYY',
          day: 'MMMM YYYY',
          week: 'MMMM YYYY',
          month: 'YYYY',
          quarter: 'YYYY',
          year: ''
        }
      },
      groupHeightMode: ['auto', 'fixed'],
      groupLabelDirection: ['horizontal', 'vertical'],
      //groupOrder: {string, 'function': 'function'},
      groupsDraggable: false,
      height: '',
      //hiddenDates: {object, array},
      locale: '',
      margin: {
        axis: [20, 0, 100, 1],
        item: {
          horizontal: [10, 0, 100, 1],
          vertical: [10, 0, 100, 1]
        }
      },
      max: '',
      maxHeight: '',
      maxMinorChars: [7, 0, 20, 1],
      min: '',
      minHeight: '',
      moveable: false,
      multiselect: false,
      multiselectPerGroup: false,
      //onAdd: {'function': 'function'},
      //onUpdate: {'function': 'function'},
      //onMove: {'function': 'function'},
      //onMoving: {'function': 'function'},
      //onRename: {'function': 'function'},
      //order: {'function': 'function'},
      orientation: {
        axis: ['both', 'bottom', 'top'],
        item: ['bottom', 'top']
      },
      selectable: true,
      showCurrentTime: false,
      showMajorLabels: true,
      showMinorLabels: true,
      stack: true,
      stackSubgroups: true,
      //snap: {'function': 'function', nada},
      start: '',
      //template: {'function': 'function'},
      //timeAxis: {
      //  scale: ['millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'quarter', 'year'],
      //  step: [1, 1, 10, 1]
      //},
      showTooltips: true,
      tooltip: {
        followMouse: false,
        overflowMethod: 'flip'
      },
      tooltipOnItemUpdateTime: false,
      type: ['box', 'point', 'range', 'background'],
      width: '100%',
      zoomable: true,
      zoomKey: ['ctrlKey', 'altKey', 'metaKey', ''],
      zoomMax: [315360000000000, 10, 315360000000000, 1],
      zoomMin: [10, 10, 315360000000000, 1]
    }
  };

  var optionsTimeline = /*#__PURE__*/Object.freeze({
    __proto__: null,
    allOptions: allOptions$4,
    configureOptions: configureOptions
  });

  var htmlColors = {
    black: '#000000',
    navy: '#000080',
    darkblue: '#00008B',
    mediumblue: '#0000CD',
    blue: '#0000FF',
    darkgreen: '#006400',
    green: '#008000',
    teal: '#008080',
    darkcyan: '#008B8B',
    deepskyblue: '#00BFFF',
    darkturquoise: '#00CED1',
    mediumspringgreen: '#00FA9A',
    lime: '#00FF00',
    springgreen: '#00FF7F',
    aqua: '#00FFFF',
    cyan: '#00FFFF',
    midnightblue: '#191970',
    dodgerblue: '#1E90FF',
    lightseagreen: '#20B2AA',
    forestgreen: '#228B22',
    seagreen: '#2E8B57',
    darkslategray: '#2F4F4F',
    limegreen: '#32CD32',
    mediumseagreen: '#3CB371',
    turquoise: '#40E0D0',
    royalblue: '#4169E1',
    steelblue: '#4682B4',
    darkslateblue: '#483D8B',
    mediumturquoise: '#48D1CC',
    indigo: '#4B0082',
    darkolivegreen: '#556B2F',
    cadetblue: '#5F9EA0',
    cornflowerblue: '#6495ED',
    mediumaquamarine: '#66CDAA',
    dimgray: '#696969',
    slateblue: '#6A5ACD',
    olivedrab: '#6B8E23',
    slategray: '#708090',
    lightslategray: '#778899',
    mediumslateblue: '#7B68EE',
    lawngreen: '#7CFC00',
    chartreuse: '#7FFF00',
    aquamarine: '#7FFFD4',
    maroon: '#800000',
    purple: '#800080',
    olive: '#808000',
    gray: '#808080',
    skyblue: '#87CEEB',
    lightskyblue: '#87CEFA',
    blueviolet: '#8A2BE2',
    darkred: '#8B0000',
    darkmagenta: '#8B008B',
    saddlebrown: '#8B4513',
    darkseagreen: '#8FBC8F',
    lightgreen: '#90EE90',
    mediumpurple: '#9370D8',
    darkviolet: '#9400D3',
    palegreen: '#98FB98',
    darkorchid: '#9932CC',
    yellowgreen: '#9ACD32',
    sienna: '#A0522D',
    brown: '#A52A2A',
    darkgray: '#A9A9A9',
    lightblue: '#ADD8E6',
    greenyellow: '#ADFF2F',
    paleturquoise: '#AFEEEE',
    lightsteelblue: '#B0C4DE',
    powderblue: '#B0E0E6',
    firebrick: '#B22222',
    darkgoldenrod: '#B8860B',
    mediumorchid: '#BA55D3',
    rosybrown: '#BC8F8F',
    darkkhaki: '#BDB76B',
    silver: '#C0C0C0',
    mediumvioletred: '#C71585',
    indianred: '#CD5C5C',
    peru: '#CD853F',
    chocolate: '#D2691E',
    tan: '#D2B48C',
    lightgrey: '#D3D3D3',
    palevioletred: '#D87093',
    thistle: '#D8BFD8',
    orchid: '#DA70D6',
    goldenrod: '#DAA520',
    crimson: '#DC143C',
    gainsboro: '#DCDCDC',
    plum: '#DDA0DD',
    burlywood: '#DEB887',
    lightcyan: '#E0FFFF',
    lavender: '#E6E6FA',
    darksalmon: '#E9967A',
    violet: '#EE82EE',
    palegoldenrod: '#EEE8AA',
    lightcoral: '#F08080',
    khaki: '#F0E68C',
    aliceblue: '#F0F8FF',
    honeydew: '#F0FFF0',
    azure: '#F0FFFF',
    sandybrown: '#F4A460',
    wheat: '#F5DEB3',
    beige: '#F5F5DC',
    whitesmoke: '#F5F5F5',
    mintcream: '#F5FFFA',
    ghostwhite: '#F8F8FF',
    salmon: '#FA8072',
    antiquewhite: '#FAEBD7',
    linen: '#FAF0E6',
    lightgoldenrodyellow: '#FAFAD2',
    oldlace: '#FDF5E6',
    red: '#FF0000',
    fuchsia: '#FF00FF',
    magenta: '#FF00FF',
    deeppink: '#FF1493',
    orangered: '#FF4500',
    tomato: '#FF6347',
    hotpink: '#FF69B4',
    coral: '#FF7F50',
    darkorange: '#FF8C00',
    lightsalmon: '#FFA07A',
    orange: '#FFA500',
    lightpink: '#FFB6C1',
    pink: '#FFC0CB',
    gold: '#FFD700',
    peachpuff: '#FFDAB9',
    navajowhite: '#FFDEAD',
    moccasin: '#FFE4B5',
    bisque: '#FFE4C4',
    mistyrose: '#FFE4E1',
    blanchedalmond: '#FFEBCD',
    papayawhip: '#FFEFD5',
    lavenderblush: '#FFF0F5',
    seashell: '#FFF5EE',
    cornsilk: '#FFF8DC',
    lemonchiffon: '#FFFACD',
    floralwhite: '#FFFAF0',
    snow: '#FFFAFA',
    yellow: '#FFFF00',
    lightyellow: '#FFFFE0',
    ivory: '#FFFFF0',
    white: '#FFFFFF'
  };
  /**
   * @param {number} [pixelRatio=1]
   */

  class ColorPicker {
    /**
     * @param {number} [pixelRatio=1]
     */
    constructor(pixelRatio = 1) {
      this.pixelRatio = pixelRatio;
      this.generated = false;
      this.centerCoordinates = {
        x: 289 / 2,
        y: 289 / 2
      };
      this.r = 289 * 0.49;
      this.color = {
        r: 255,
        g: 255,
        b: 255,
        a: 1.0
      };
      this.hueCircle = undefined;
      this.initialColor = {
        r: 255,
        g: 255,
        b: 255,
        a: 1.0
      };
      this.previousColor = undefined;
      this.applied = false; // bound by

      this.updateCallback = () => {};

      this.closeCallback = () => {}; // create all DOM elements


      this._create();
    }
    /**
     * this inserts the colorPicker into a div from the DOM
     * @param {Element} container
     */


    insertTo(container) {
      if (this.hammer !== undefined) {
        this.hammer.destroy();
        this.hammer = undefined;
      }

      this.container = container;
      this.container.appendChild(this.frame);

      this._bindHammer();

      this._setSize();
    }
    /**
     * the callback is executed on apply and save. Bind it to the application
     * @param {function} callback
     */


    setUpdateCallback(callback) {
      if (typeof callback === 'function') {
        this.updateCallback = callback;
      } else {
        throw new Error("Function attempted to set as colorPicker update callback is not a function.");
      }
    }
    /**
     * the callback is executed on apply and save. Bind it to the application
     * @param {function} callback
     */


    setCloseCallback(callback) {
      if (typeof callback === 'function') {
        this.closeCallback = callback;
      } else {
        throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
      }
    }
    /**
     *
     * @param {string} color
     * @returns {String}
     * @private
     */


    _isColorString(color) {
      if (typeof color === 'string') {
        return htmlColors[color];
      }
    }
    /**
     * Set the color of the colorPicker
     * Supported formats:
     * 'red'                   --> HTML color string
     * '#ffffff'               --> hex string
     * 'rgb(255,255,255)'      --> rgb string
     * 'rgba(255,255,255,1.0)' --> rgba string
     * {r:255,g:255,b:255}     --> rgb object
     * {r:255,g:255,b:255,a:1.0} --> rgba object
     * @param {string|Object} color
     * @param {boolean} [setInitial=true]
     */


    setColor(color, setInitial = true) {
      if (color === 'none') {
        return;
      }

      let rgba; // if a html color shorthand is used, convert to hex

      var htmlColor = this._isColorString(color);

      if (htmlColor !== undefined) {
        color = htmlColor;
      } // check format


      if (util.isString(color) === true) {
        if (util.isValidRGB(color) === true) {
          let rgbaArray = color.substr(4).substr(0, color.length - 5).split(',');
          rgba = {
            r: rgbaArray[0],
            g: rgbaArray[1],
            b: rgbaArray[2],
            a: 1.0
          };
        } else if (util.isValidRGBA(color) === true) {
          let rgbaArray = color.substr(5).substr(0, color.length - 6).split(',');
          rgba = {
            r: rgbaArray[0],
            g: rgbaArray[1],
            b: rgbaArray[2],
            a: rgbaArray[3]
          };
        } else if (util.isValidHex(color) === true) {
          let rgbObj = util.hexToRGB(color);
          rgba = {
            r: rgbObj.r,
            g: rgbObj.g,
            b: rgbObj.b,
            a: 1.0
          };
        }
      } else {
        if (color instanceof Object) {
          if (color.r !== undefined && color.g !== undefined && color.b !== undefined) {
            let alpha = color.a !== undefined ? color.a : '1.0';
            rgba = {
              r: color.r,
              g: color.g,
              b: color.b,
              a: alpha
            };
          }
        }
      } // set color


      if (rgba === undefined) {
        throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + JSON.stringify(color));
      } else {
        this._setColor(rgba, setInitial);
      }
    }
    /**
     * this shows the color picker.
     * The hue circle is constructed once and stored.
     */


    show() {
      if (this.closeCallback !== undefined) {
        this.closeCallback();
        this.closeCallback = undefined;
      }

      this.applied = false;
      this.frame.style.display = 'block';

      this._generateHueCircle();
    } // ------------------------------------------ PRIVATE ----------------------------- //

    /**
     * Hide the picker. Is called by the cancel button.
     * Optional boolean to store the previous color for easy access later on.
     * @param {boolean} [storePrevious=true]
     * @private
     */


    _hide(storePrevious = true) {
      // store the previous color for next time;
      if (storePrevious === true) {
        this.previousColor = util.extend({}, this.color);
      }

      if (this.applied === true) {
        this.updateCallback(this.initialColor);
      }

      this.frame.style.display = 'none'; // call the closing callback, restoring the onclick method.
      // this is in a setTimeout because it will trigger the show again before the click is done.

      setTimeout(() => {
        if (this.closeCallback !== undefined) {
          this.closeCallback();
          this.closeCallback = undefined;
        }
      }, 0);
    }
    /**
     * bound to the save button. Saves and hides.
     * @private
     */


    _save() {
      this.updateCallback(this.color);
      this.applied = false;

      this._hide();
    }
    /**
     * Bound to apply button. Saves but does not close. Is undone by the cancel button.
     * @private
     */


    _apply() {
      this.applied = true;
      this.updateCallback(this.color);

      this._updatePicker(this.color);
    }
    /**
     * load the color from the previous session.
     * @private
     */


    _loadLast() {
      if (this.previousColor !== undefined) {
        this.setColor(this.previousColor, false);
      } else {
        alert("There is no last color to load...");
      }
    }
    /**
     * set the color, place the picker
     * @param {Object} rgba
     * @param {boolean} [setInitial=true]
     * @private
     */


    _setColor(rgba, setInitial = true) {
      // store the initial color
      if (setInitial === true) {
        this.initialColor = util.extend({}, rgba);
      }

      this.color = rgba;
      let hsv = util.RGBToHSV(rgba.r, rgba.g, rgba.b);
      let angleConvert = 2 * Math.PI;
      let radius = this.r * hsv.s;
      let x = this.centerCoordinates.x + radius * Math.sin(angleConvert * hsv.h);
      let y = this.centerCoordinates.y + radius * Math.cos(angleConvert * hsv.h);
      this.colorPickerSelector.style.left = x - 0.5 * this.colorPickerSelector.clientWidth + 'px';
      this.colorPickerSelector.style.top = y - 0.5 * this.colorPickerSelector.clientHeight + 'px';

      this._updatePicker(rgba);
    }
    /**
     * bound to opacity control
     * @param {number} value
     * @private
     */


    _setOpacity(value) {
      this.color.a = value / 100;

      this._updatePicker(this.color);
    }
    /**
     * bound to brightness control
     * @param {number} value
     * @private
     */


    _setBrightness(value) {
      let hsv = util.RGBToHSV(this.color.r, this.color.g, this.color.b);
      hsv.v = value / 100;
      let rgba = util.HSVToRGB(hsv.h, hsv.s, hsv.v);
      rgba['a'] = this.color.a;
      this.color = rgba;

      this._updatePicker();
    }
    /**
     * update the color picker. A black circle overlays the hue circle to mimic the brightness decreasing.
     * @param {Object} rgba
     * @private
     */


    _updatePicker(rgba = this.color) {
      let hsv = util.RGBToHSV(rgba.r, rgba.g, rgba.b);
      let ctx = this.colorPickerCanvas.getContext('2d');

      if (this.pixelRation === undefined) {
        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
      }

      ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0); // clear the canvas

      let w = this.colorPickerCanvas.clientWidth;
      let h = this.colorPickerCanvas.clientHeight;
      ctx.clearRect(0, 0, w, h);
      ctx.putImageData(this.hueCircle, 0, 0);
      ctx.fillStyle = 'rgba(0,0,0,' + (1 - hsv.v) + ')';
      ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
      ctx.fill();
      this.brightnessRange.value = 100 * hsv.v;
      this.opacityRange.value = 100 * rgba.a;
      this.initialColorDiv.style.backgroundColor = 'rgba(' + this.initialColor.r + ',' + this.initialColor.g + ',' + this.initialColor.b + ',' + this.initialColor.a + ')';
      this.newColorDiv.style.backgroundColor = 'rgba(' + this.color.r + ',' + this.color.g + ',' + this.color.b + ',' + this.color.a + ')';
    }
    /**
     * used by create to set the size of the canvas.
     * @private
     */


    _setSize() {
      this.colorPickerCanvas.style.width = '100%';
      this.colorPickerCanvas.style.height = '100%';
      this.colorPickerCanvas.width = 289 * this.pixelRatio;
      this.colorPickerCanvas.height = 289 * this.pixelRatio;
    }
    /**
     * create all dom elements
     * TODO: cleanup, lots of similar dom elements
     * @private
     */


    _create() {
      this.frame = document.createElement('div');
      this.frame.className = 'vis-color-picker';
      this.colorPickerDiv = document.createElement('div');
      this.colorPickerSelector = document.createElement('div');
      this.colorPickerSelector.className = 'vis-selector';
      this.colorPickerDiv.appendChild(this.colorPickerSelector);
      this.colorPickerCanvas = document.createElement('canvas');
      this.colorPickerDiv.appendChild(this.colorPickerCanvas);

      if (!this.colorPickerCanvas.getContext) {
        let noCanvas = document.createElement('DIV');
        noCanvas.style.color = 'red';
        noCanvas.style.fontWeight = 'bold';
        noCanvas.style.padding = '10px';
        noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
        this.colorPickerCanvas.appendChild(noCanvas);
      } else {
        let ctx = this.colorPickerCanvas.getContext("2d");
        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
        this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
      }

      this.colorPickerDiv.className = 'vis-color';
      this.opacityDiv = document.createElement('div');
      this.opacityDiv.className = 'vis-opacity';
      this.brightnessDiv = document.createElement('div');
      this.brightnessDiv.className = 'vis-brightness';
      this.arrowDiv = document.createElement('div');
      this.arrowDiv.className = 'vis-arrow';
      this.opacityRange = document.createElement('input');

      try {
        this.opacityRange.type = 'range'; // Not supported on IE9

        this.opacityRange.min = '0';
        this.opacityRange.max = '100';
      } // TODO: Add some error handling and remove this lint exception
      catch (err) {} // eslint-disable-line no-empty


      this.opacityRange.value = '100';
      this.opacityRange.className = 'vis-range';
      this.brightnessRange = document.createElement('input');

      try {
        this.brightnessRange.type = 'range'; // Not supported on IE9

        this.brightnessRange.min = '0';
        this.brightnessRange.max = '100';
      } // TODO: Add some error handling and remove this lint exception
      catch (err) {} // eslint-disable-line no-empty


      this.brightnessRange.value = '100';
      this.brightnessRange.className = 'vis-range';
      this.opacityDiv.appendChild(this.opacityRange);
      this.brightnessDiv.appendChild(this.brightnessRange);
      var me = this;

      this.opacityRange.onchange = function () {
        me._setOpacity(this.value);
      };

      this.opacityRange.oninput = function () {
        me._setOpacity(this.value);
      };

      this.brightnessRange.onchange = function () {
        me._setBrightness(this.value);
      };

      this.brightnessRange.oninput = function () {
        me._setBrightness(this.value);
      };

      this.brightnessLabel = document.createElement("div");
      this.brightnessLabel.className = "vis-label vis-brightness";
      this.brightnessLabel.innerHTML = 'brightness:';
      this.opacityLabel = document.createElement("div");
      this.opacityLabel.className = "vis-label vis-opacity";
      this.opacityLabel.innerHTML = 'opacity:';
      this.newColorDiv = document.createElement("div");
      this.newColorDiv.className = "vis-new-color";
      this.newColorDiv.innerHTML = 'new';
      this.initialColorDiv = document.createElement("div");
      this.initialColorDiv.className = "vis-initial-color";
      this.initialColorDiv.innerHTML = 'initial';
      this.cancelButton = document.createElement("div");
      this.cancelButton.className = "vis-button vis-cancel";
      this.cancelButton.innerHTML = 'cancel';
      this.cancelButton.onclick = this._hide.bind(this, false);
      this.applyButton = document.createElement("div");
      this.applyButton.className = "vis-button vis-apply";
      this.applyButton.innerHTML = 'apply';
      this.applyButton.onclick = this._apply.bind(this);
      this.saveButton = document.createElement("div");
      this.saveButton.className = "vis-button vis-save";
      this.saveButton.innerHTML = 'save';
      this.saveButton.onclick = this._save.bind(this);
      this.loadButton = document.createElement("div");
      this.loadButton.className = "vis-button vis-load";
      this.loadButton.innerHTML = 'load last';
      this.loadButton.onclick = this._loadLast.bind(this);
      this.frame.appendChild(this.colorPickerDiv);
      this.frame.appendChild(this.arrowDiv);
      this.frame.appendChild(this.brightnessLabel);
      this.frame.appendChild(this.brightnessDiv);
      this.frame.appendChild(this.opacityLabel);
      this.frame.appendChild(this.opacityDiv);
      this.frame.appendChild(this.newColorDiv);
      this.frame.appendChild(this.initialColorDiv);
      this.frame.appendChild(this.cancelButton);
      this.frame.appendChild(this.applyButton);
      this.frame.appendChild(this.saveButton);
      this.frame.appendChild(this.loadButton);
    }
    /**
     * bind hammer to the color picker
     * @private
     */


    _bindHammer() {
      this.drag = {};
      this.pinch = {};
      this.hammer = new hammer$2(this.colorPickerCanvas);
      this.hammer.get('pinch').set({
        enable: true
      });
      hammerUtil.onTouch(this.hammer, event => {
        this._moveSelector(event);
      });
      this.hammer.on('tap', event => {
        this._moveSelector(event);
      });
      this.hammer.on('panstart', event => {
        this._moveSelector(event);
      });
      this.hammer.on('panmove', event => {
        this._moveSelector(event);
      });
      this.hammer.on('panend', event => {
        this._moveSelector(event);
      });
    }
    /**
     * generate the hue circle. This is relatively heavy (200ms) and is done only once on the first time it is shown.
     * @private
     */


    _generateHueCircle() {
      if (this.generated === false) {
        let ctx = this.colorPickerCanvas.getContext('2d');

        if (this.pixelRation === undefined) {
          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
        }

        ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0); // clear the canvas

        let w = this.colorPickerCanvas.clientWidth;
        let h = this.colorPickerCanvas.clientHeight;
        ctx.clearRect(0, 0, w, h); // draw hue circle

        let x, y, hue, sat;
        this.centerCoordinates = {
          x: w * 0.5,
          y: h * 0.5
        };
        this.r = 0.49 * w;
        let angleConvert = 2 * Math.PI / 360;
        let hfac = 1 / 360;
        let sfac = 1 / this.r;
        let rgb;

        for (hue = 0; hue < 360; hue++) {
          for (sat = 0; sat < this.r; sat++) {
            x = this.centerCoordinates.x + sat * Math.sin(angleConvert * hue);
            y = this.centerCoordinates.y + sat * Math.cos(angleConvert * hue);
            rgb = util.HSVToRGB(hue * hfac, sat * sfac, 1);
            ctx.fillStyle = 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
            ctx.fillRect(x - 0.5, y - 0.5, 2, 2);
          }
        }

        ctx.strokeStyle = 'rgba(0,0,0,1)';
        ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
        ctx.stroke();
        this.hueCircle = ctx.getImageData(0, 0, w, h);
      }

      this.generated = true;
    }
    /**
     * move the selector. This is called by hammer functions.
     *
     * @param {Event}  event   The event
     * @private
     */


    _moveSelector(event) {
      let rect = this.colorPickerDiv.getBoundingClientRect();
      let left = event.center.x - rect.left;
      let top = event.center.y - rect.top;
      let centerY = 0.5 * this.colorPickerDiv.clientHeight;
      let centerX = 0.5 * this.colorPickerDiv.clientWidth;
      let x = left - centerX;
      let y = top - centerY;
      let angle = Math.atan2(x, y);
      let radius = 0.98 * Math.min(Math.sqrt(x * x + y * y), centerX);
      let newTop = Math.cos(angle) * radius + centerY;
      let newLeft = Math.sin(angle) * radius + centerX;
      this.colorPickerSelector.style.top = newTop - 0.5 * this.colorPickerSelector.clientHeight + 'px';
      this.colorPickerSelector.style.left = newLeft - 0.5 * this.colorPickerSelector.clientWidth + 'px'; // set color

      let h = angle / (2 * Math.PI);
      h = h < 0 ? h + 1 : h;
      let s = radius / this.r;
      let hsv = util.RGBToHSV(this.color.r, this.color.g, this.color.b);
      hsv.h = h;
      hsv.s = s;
      let rgba = util.HSVToRGB(hsv.h, hsv.s, hsv.v);
      rgba['a'] = this.color.a;
      this.color = rgba; // update previews

      this.initialColorDiv.style.backgroundColor = 'rgba(' + this.initialColor.r + ',' + this.initialColor.g + ',' + this.initialColor.b + ',' + this.initialColor.a + ')';
      this.newColorDiv.style.backgroundColor = 'rgba(' + this.color.r + ',' + this.color.g + ',' + this.color.b + ',' + this.color.a + ')';
    }

  }

  /**
   * The way this works is for all properties of this.possible options, you can supply the property name in any form to list the options.
   * Boolean options are recognised as Boolean
   * Number options should be written as array: [default value, min value, max value, stepsize]
   * Colors should be written as array: ['color', '#ffffff']
   * Strings with should be written as array: [option1, option2, option3, ..]
   *
   * The options are matched with their counterparts in each of the modules and the values used in the configuration are
   */

  class Configurator {
    /**
     * @param {Object} parentModule        | the location where parentModule.setOptions() can be called
     * @param {Object} defaultContainer    | the default container of the module
     * @param {Object} configureOptions    | the fully configured and predefined options set found in allOptions.js
     * @param {number} pixelRatio          | canvas pixel ratio
     */
    constructor(parentModule, defaultContainer, configureOptions, pixelRatio = 1) {
      this.parent = parentModule;
      this.changedOptions = [];
      this.container = defaultContainer;
      this.allowCreation = false;
      this.options = {};
      this.initialized = false;
      this.popupCounter = 0;
      this.defaultOptions = {
        enabled: false,
        filter: true,
        container: undefined,
        showButton: true
      };
      util.extend(this.options, this.defaultOptions);
      this.configureOptions = configureOptions;
      this.moduleOptions = {};
      this.domElements = [];
      this.popupDiv = {};
      this.popupLimit = 5;
      this.popupHistory = {};
      this.colorPicker = new ColorPicker(pixelRatio);
      this.wrapper = undefined;
    }
    /**
     * refresh all options.
     * Because all modules parse their options by themselves, we just use their options. We copy them here.
     *
     * @param {Object} options
     */


    setOptions(options) {
      if (options !== undefined) {
        // reset the popup history because the indices may have been changed.
        this.popupHistory = {};

        this._removePopup();

        let enabled = true;

        if (typeof options === 'string') {
          this.options.filter = options;
        } else if (options instanceof Array) {
          this.options.filter = options.join();
        } else if (typeof options === 'object') {
          if (options == null) {
            throw new TypeError('options cannot be null');
          }

          if (options.container !== undefined) {
            this.options.container = options.container;
          }

          if (options.filter !== undefined) {
            this.options.filter = options.filter;
          }

          if (options.showButton !== undefined) {
            this.options.showButton = options.showButton;
          }

          if (options.enabled !== undefined) {
            enabled = options.enabled;
          }
        } else if (typeof options === 'boolean') {
          this.options.filter = true;
          enabled = options;
        } else if (typeof options === 'function') {
          this.options.filter = options;
          enabled = true;
        }

        if (this.options.filter === false) {
          enabled = false;
        }

        this.options.enabled = enabled;
      }

      this._clean();
    }
    /**
     *
     * @param {Object} moduleOptions
     */


    setModuleOptions(moduleOptions) {
      this.moduleOptions = moduleOptions;

      if (this.options.enabled === true) {
        this._clean();

        if (this.options.container !== undefined) {
          this.container = this.options.container;
        }

        this._create();
      }
    }
    /**
     * Create all DOM elements
     * @private
     */


    _create() {
      this._clean();

      this.changedOptions = [];
      let filter = this.options.filter;
      let counter = 0;
      let show = false;

      for (let option in this.configureOptions) {
        if (this.configureOptions.hasOwnProperty(option)) {
          this.allowCreation = false;
          show = false;

          if (typeof filter === 'function') {
            show = filter(option, []);
            show = show || this._handleObject(this.configureOptions[option], [option], true);
          } else if (filter === true || filter.indexOf(option) !== -1) {
            show = true;
          }

          if (show !== false) {
            this.allowCreation = true; // linebreak between categories

            if (counter > 0) {
              this._makeItem([]);
            } // a header for the category


            this._makeHeader(option); // get the sub options


            this._handleObject(this.configureOptions[option], [option]);
          }

          counter++;
        }
      }

      this._makeButton();

      this._push(); //~ this.colorPicker.insertTo(this.container);

    }
    /**
     * draw all DOM elements on the screen
     * @private
     */


    _push() {
      this.wrapper = document.createElement('div');
      this.wrapper.className = 'vis-configuration-wrapper';
      this.container.appendChild(this.wrapper);

      for (var i = 0; i < this.domElements.length; i++) {
        this.wrapper.appendChild(this.domElements[i]);
      }

      this._showPopupIfNeeded();
    }
    /**
     * delete all DOM elements
     * @private
     */


    _clean() {
      for (var i = 0; i < this.domElements.length; i++) {
        this.wrapper.removeChild(this.domElements[i]);
      }

      if (this.wrapper !== undefined) {
        this.container.removeChild(this.wrapper);
        this.wrapper = undefined;
      }

      this.domElements = [];

      this._removePopup();
    }
    /**
     * get the value from the actualOptions if it exists
     * @param {array} path    | where to look for the actual option
     * @returns {*}
     * @private
     */


    _getValue(path) {
      let base = this.moduleOptions;

      for (let i = 0; i < path.length; i++) {
        if (base[path[i]] !== undefined) {
          base = base[path[i]];
        } else {
          base = undefined;
          break;
        }
      }

      return base;
    }
    /**
     * all option elements are wrapped in an item
     * @param {Array} path    | where to look for the actual option
     * @param {Array.<Element>} domElements
     * @returns {number}
     * @private
     */


    _makeItem(path, ...domElements) {
      if (this.allowCreation === true) {
        let item = document.createElement('div');
        item.className = 'vis-configuration vis-config-item vis-config-s' + path.length;
        domElements.forEach(element => {
          item.appendChild(element);
        });
        this.domElements.push(item);
        return this.domElements.length;
      }

      return 0;
    }
    /**
     * header for major subjects
     * @param {string} name
     * @private
     */


    _makeHeader(name) {
      let div = document.createElement('div');
      div.className = 'vis-configuration vis-config-header';
      div.innerHTML = name;

      this._makeItem([], div);
    }
    /**
     * make a label, if it is an object label, it gets different styling.
     * @param {string} name
     * @param {array} path    | where to look for the actual option
     * @param {string} objectLabel
     * @returns {HTMLElement}
     * @private
     */


    _makeLabel(name, path, objectLabel = false) {
      let div = document.createElement('div');
      div.className = 'vis-configuration vis-config-label vis-config-s' + path.length;

      if (objectLabel === true) {
        div.innerHTML = '<i><b>' + name + ':</b></i>';
      } else {
        div.innerHTML = name + ':';
      }

      return div;
    }
    /**
     * make a dropdown list for multiple possible string optoins
     * @param {Array.<number>} arr
     * @param {number} value
     * @param {array} path    | where to look for the actual option
     * @private
     */


    _makeDropdown(arr, value, path) {
      let select = document.createElement('select');
      select.className = 'vis-configuration vis-config-select';
      let selectedValue = 0;

      if (value !== undefined) {
        if (arr.indexOf(value) !== -1) {
          selectedValue = arr.indexOf(value);
        }
      }

      for (let i = 0; i < arr.length; i++) {
        let option = document.createElement('option');
        option.value = arr[i];

        if (i === selectedValue) {
          option.selected = 'selected';
        }

        option.innerHTML = arr[i];
        select.appendChild(option);
      }

      let me = this;

      select.onchange = function () {
        me._update(this.value, path);
      };

      let label = this._makeLabel(path[path.length - 1], path);

      this._makeItem(path, label, select);
    }
    /**
     * make a range object for numeric options
     * @param {Array.<number>} arr
     * @param {number} value
     * @param {array} path    | where to look for the actual option
     * @private
     */


    _makeRange(arr, value, path) {
      let defaultValue = arr[0];
      let min = arr[1];
      let max = arr[2];
      let step = arr[3];
      let range = document.createElement('input');
      range.className = 'vis-configuration vis-config-range';

      try {
        range.type = 'range'; // not supported on IE9

        range.min = min;
        range.max = max;
      } // TODO: Add some error handling and remove this lint exception
      catch (err) {} // eslint-disable-line no-empty


      range.step = step; // set up the popup settings in case they are needed.

      let popupString = '';
      let popupValue = 0;

      if (value !== undefined) {
        let factor = 1.20;

        if (value < 0 && value * factor < min) {
          range.min = Math.ceil(value * factor);
          popupValue = range.min;
          popupString = 'range increased';
        } else if (value / factor < min) {
          range.min = Math.ceil(value / factor);
          popupValue = range.min;
          popupString = 'range increased';
        }

        if (value * factor > max && max !== 1) {
          range.max = Math.ceil(value * factor);
          popupValue = range.max;
          popupString = 'range increased';
        }

        range.value = value;
      } else {
        range.value = defaultValue;
      }

      let input = document.createElement('input');
      input.className = 'vis-configuration vis-config-rangeinput';
      input.value = range.value;
      var me = this;

      range.onchange = function () {
        input.value = this.value;

        me._update(Number(this.value), path);
      };

      range.oninput = function () {
        input.value = this.value;
      };

      let label = this._makeLabel(path[path.length - 1], path);

      let itemIndex = this._makeItem(path, label, range, input); // if a popup is needed AND it has not been shown for this value, show it.


      if (popupString !== '' && this.popupHistory[itemIndex] !== popupValue) {
        this.popupHistory[itemIndex] = popupValue;

        this._setupPopup(popupString, itemIndex);
      }
    }
    /**
     * make a button object
     * @private
     */


    _makeButton() {
      if (this.options.showButton === true) {
        let generateButton = document.createElement('div');
        generateButton.className = 'vis-configuration vis-config-button';
        generateButton.innerHTML = 'generate options';

        generateButton.onclick = () => {
          this._printOptions();
        };

        generateButton.onmouseover = () => {
          generateButton.className = 'vis-configuration vis-config-button hover';
        };

        generateButton.onmouseout = () => {
          generateButton.className = 'vis-configuration vis-config-button';
        };

        this.optionsContainer = document.createElement('div');
        this.optionsContainer.className = 'vis-configuration vis-config-option-container';
        this.domElements.push(this.optionsContainer);
        this.domElements.push(generateButton);
      }
    }
    /**
     * prepare the popup
     * @param {string} string
     * @param {number} index
     * @private
     */


    _setupPopup(string, index) {
      if (this.initialized === true && this.allowCreation === true && this.popupCounter < this.popupLimit) {
        let div = document.createElement("div");
        div.id = "vis-configuration-popup";
        div.className = "vis-configuration-popup";
        div.innerHTML = string;

        div.onclick = () => {
          this._removePopup();
        };

        this.popupCounter += 1;
        this.popupDiv = {
          html: div,
          index: index
        };
      }
    }
    /**
     * remove the popup from the dom
     * @private
     */


    _removePopup() {
      if (this.popupDiv.html !== undefined) {
        this.popupDiv.html.parentNode.removeChild(this.popupDiv.html);
        clearTimeout(this.popupDiv.hideTimeout);
        clearTimeout(this.popupDiv.deleteTimeout);
        this.popupDiv = {};
      }
    }
    /**
     * Show the popup if it is needed.
     * @private
     */


    _showPopupIfNeeded() {
      if (this.popupDiv.html !== undefined) {
        let correspondingElement = this.domElements[this.popupDiv.index];
        let rect = correspondingElement.getBoundingClientRect();
        this.popupDiv.html.style.left = rect.left + "px";
        this.popupDiv.html.style.top = rect.top - 30 + "px"; // 30 is the height;

        document.body.appendChild(this.popupDiv.html);
        this.popupDiv.hideTimeout = setTimeout(() => {
          this.popupDiv.html.style.opacity = 0;
        }, 1500);
        this.popupDiv.deleteTimeout = setTimeout(() => {
          this._removePopup();
        }, 1800);
      }
    }
    /**
     * make a checkbox for boolean options.
     * @param {number} defaultValue
     * @param {number} value
     * @param {array} path    | where to look for the actual option
     * @private
     */


    _makeCheckbox(defaultValue, value, path) {
      var checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.className = 'vis-configuration vis-config-checkbox';
      checkbox.checked = defaultValue;

      if (value !== undefined) {
        checkbox.checked = value;

        if (value !== defaultValue) {
          if (typeof defaultValue === 'object') {
            if (value !== defaultValue.enabled) {
              this.changedOptions.push({
                path: path,
                value: value
              });
            }
          } else {
            this.changedOptions.push({
              path: path,
              value: value
            });
          }
        }
      }

      let me = this;

      checkbox.onchange = function () {
        me._update(this.checked, path);
      };

      let label = this._makeLabel(path[path.length - 1], path);

      this._makeItem(path, label, checkbox);
    }
    /**
     * make a text input field for string options.
     * @param {number} defaultValue
     * @param {number} value
     * @param {array} path    | where to look for the actual option
     * @private
     */


    _makeTextInput(defaultValue, value, path) {
      var checkbox = document.createElement('input');
      checkbox.type = 'text';
      checkbox.className = 'vis-configuration vis-config-text';
      checkbox.value = value;

      if (value !== defaultValue) {
        this.changedOptions.push({
          path: path,
          value: value
        });
      }

      let me = this;

      checkbox.onchange = function () {
        me._update(this.value, path);
      };

      let label = this._makeLabel(path[path.length - 1], path);

      this._makeItem(path, label, checkbox);
    }
    /**
     * make a color field with a color picker for color fields
     * @param {Array.<number>} arr
     * @param {number} value
     * @param {array} path    | where to look for the actual option
     * @private
     */


    _makeColorField(arr, value, path) {
      let defaultColor = arr[1];
      let div = document.createElement('div');
      value = value === undefined ? defaultColor : value;

      if (value !== 'none') {
        div.className = 'vis-configuration vis-config-colorBlock';
        div.style.backgroundColor = value;
      } else {
        div.className = 'vis-configuration vis-config-colorBlock none';
      }

      value = value === undefined ? defaultColor : value;

      div.onclick = () => {
        this._showColorPicker(value, div, path);
      };

      let label = this._makeLabel(path[path.length - 1], path);

      this._makeItem(path, label, div);
    }
    /**
     * used by the color buttons to call the color picker.
     * @param {number} value
     * @param {HTMLElement} div
     * @param {array} path    | where to look for the actual option
     * @private
     */


    _showColorPicker(value, div, path) {
      // clear the callback from this div
      div.onclick = function () {};

      this.colorPicker.insertTo(div);
      this.colorPicker.show();
      this.colorPicker.setColor(value);
      this.colorPicker.setUpdateCallback(color => {
        let colorString = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + color.a + ')';
        div.style.backgroundColor = colorString;

        this._update(colorString, path);
      }); // on close of the colorpicker, restore the callback.

      this.colorPicker.setCloseCallback(() => {
        div.onclick = () => {
          this._showColorPicker(value, div, path);
        };
      });
    }
    /**
     * parse an object and draw the correct items
     * @param {Object} obj
     * @param {array} [path=[]]    | where to look for the actual option
     * @param {boolean} [checkOnly=false]
     * @returns {boolean}
     * @private
     */


    _handleObject(obj, path = [], checkOnly = false) {
      let show = false;
      let filter = this.options.filter;
      let visibleInSet = false;

      for (let subObj in obj) {
        if (obj.hasOwnProperty(subObj)) {
          show = true;
          let item = obj[subObj];
          let newPath = util.copyAndExtendArray(path, subObj);

          if (typeof filter === 'function') {
            show = filter(subObj, path); // if needed we must go deeper into the object.

            if (show === false) {
              if (!(item instanceof Array) && typeof item !== 'string' && typeof item !== 'boolean' && item instanceof Object) {
                this.allowCreation = false;
                show = this._handleObject(item, newPath, true);
                this.allowCreation = checkOnly === false;
              }
            }
          }

          if (show !== false) {
            visibleInSet = true;

            let value = this._getValue(newPath);

            if (item instanceof Array) {
              this._handleArray(item, value, newPath);
            } else if (typeof item === 'string') {
              this._makeTextInput(item, value, newPath);
            } else if (typeof item === 'boolean') {
              this._makeCheckbox(item, value, newPath);
            } else if (item instanceof Object) {
              // collapse the physics options that are not enabled
              let draw = true;

              if (path.indexOf('physics') !== -1) {
                if (this.moduleOptions.physics.solver !== subObj) {
                  draw = false;
                }
              }

              if (draw === true) {
                // initially collapse options with an disabled enabled option.
                if (item.enabled !== undefined) {
                  let enabledPath = util.copyAndExtendArray(newPath, 'enabled');

                  let enabledValue = this._getValue(enabledPath);

                  if (enabledValue === true) {
                    let label = this._makeLabel(subObj, newPath, true);

                    this._makeItem(newPath, label);

                    visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                  } else {
                    this._makeCheckbox(item, enabledValue, newPath);
                  }
                } else {
                  let label = this._makeLabel(subObj, newPath, true);

                  this._makeItem(newPath, label);

                  visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                }
              }
            } else {
              console.error('dont know how to handle', item, subObj, newPath);
            }
          }
        }
      }

      return visibleInSet;
    }
    /**
     * handle the array type of option
     * @param {Array.<number>} arr
     * @param {number} value
     * @param {array} path    | where to look for the actual option
     * @private
     */


    _handleArray(arr, value, path) {
      if (typeof arr[0] === 'string' && arr[0] === 'color') {
        this._makeColorField(arr, value, path);

        if (arr[1] !== value) {
          this.changedOptions.push({
            path: path,
            value: value
          });
        }
      } else if (typeof arr[0] === 'string') {
        this._makeDropdown(arr, value, path);

        if (arr[0] !== value) {
          this.changedOptions.push({
            path: path,
            value: value
          });
        }
      } else if (typeof arr[0] === 'number') {
        this._makeRange(arr, value, path);

        if (arr[0] !== value) {
          this.changedOptions.push({
            path: path,
            value: Number(value)
          });
        }
      }
    }
    /**
     * called to update the network with the new settings.
     * @param {number} value
     * @param {array} path    | where to look for the actual option
     * @private
     */


    _update(value, path) {
      let options = this._constructOptions(value, path);

      if (this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit) {
        this.parent.body.emitter.emit("configChange", options);
      }

      this.initialized = true;
      this.parent.setOptions(options);
    }
    /**
     *
     * @param {string|Boolean} value
     * @param {Array.<string>} path
     * @param {{}} optionsObj
     * @returns {{}}
     * @private
     */


    _constructOptions(value, path, optionsObj = {}) {
      let pointer = optionsObj; // when dropdown boxes can be string or boolean, we typecast it into correct types

      value = value === 'true' ? true : value;
      value = value === 'false' ? false : value;

      for (let i = 0; i < path.length; i++) {
        if (path[i] !== 'global') {
          if (pointer[path[i]] === undefined) {
            pointer[path[i]] = {};
          }

          if (i !== path.length - 1) {
            pointer = pointer[path[i]];
          } else {
            pointer[path[i]] = value;
          }
        }
      }

      return optionsObj;
    }
    /**
     * @private
     */


    _printOptions() {
      let options = this.getOptions();
      this.optionsContainer.innerHTML = '<pre>var options = ' + JSON.stringify(options, null, 2) + '</pre>';
    }
    /**
     *
     * @returns {{}} options
     */


    getOptions() {
      let options = {};

      for (var i = 0; i < this.changedOptions.length; i++) {
        this._constructOptions(this.changedOptions[i].value, this.changedOptions[i].path, options);
      }

      return options;
    }

  }

  var {
    DataSet: DataSet$2
  } = index;
  var {
    DataView: DataView$3
  } = index;
  var Validator$5 = Validator$4.Validator;
  var printStyle$3 = Validator$4.printStyle;
  var allOptions$5 = optionsTimeline.allOptions;
  var configureOptions$1 = optionsTimeline.configureOptions;
  var Configurator$1 = Configurator.default;
  /**
   * Create a timeline visualization
   * @param {HTMLElement} container
   * @param {vis.DataSet | vis.DataView | Array} [items]
   * @param {vis.DataSet | vis.DataView | Array} [groups]
   * @param {Object} [options]  See Timeline.setOptions for the available options.
   * @constructor Timeline
   * @extends Core
   */

  function Timeline(container, items, groups, options) {
    this.initTime = new Date();
    this.itemsDone = false;

    if (!(this instanceof Timeline)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // if the third element is options, the forth is groups (optionally);


    if (!(Array.isArray(groups) || groups instanceof DataSet$2 || groups instanceof DataView$3) && groups instanceof Object) {
      var forthArgument = options;
      options = groups;
      groups = forthArgument;
    } // TODO: REMOVE THIS in the next MAJOR release
    // see https://github.com/almende/vis/issues/2511


    if (options && options.throttleRedraw) {
      console.warn("Timeline option \"throttleRedraw\" is DEPRICATED and no longer supported. It will be removed in the next MAJOR release.");
    }

    var me = this;
    this.defaultOptions = {
      start: null,
      end: null,
      autoResize: true,
      orientation: {
        axis: 'bottom',
        // axis orientation: 'bottom', 'top', or 'both'
        item: 'bottom' // not relevant

      },
      moment: moment$3,
      width: null,
      height: null,
      maxHeight: null,
      minHeight: null
    };
    this.options = util.deepExtend({}, this.defaultOptions); // Create the DOM, props, and emitter

    this._create(container);

    if (!options || options && typeof options.rtl == "undefined") {
      this.dom.root.style.visibility = 'hidden';
      var directionFromDom,
          domNode = this.dom.root;

      while (!directionFromDom && domNode) {
        directionFromDom = window.getComputedStyle(domNode, null).direction;
        domNode = domNode.parentElement;
      }

      this.options.rtl = directionFromDom && directionFromDom.toLowerCase() == "rtl";
    } else {
      this.options.rtl = options.rtl;
    }

    this.options.rollingMode = options && options.rollingMode;
    this.options.onInitialDrawComplete = options && options.onInitialDrawComplete;
    this.options.onTimeout = options && options.onTimeout;
    this.options.loadingScreenTemplate = options && options.loadingScreenTemplate; // Prepare loading screen

    var loadingScreenFragment = document.createElement('div');

    if (this.options.loadingScreenTemplate) {
      var templateFunction = this.options.loadingScreenTemplate.bind(this);
      var loadingScreen = templateFunction(this.dom.loadingScreen);

      if (loadingScreen instanceof Object && !(loadingScreen instanceof Element)) {
        templateFunction(loadingScreenFragment);
      } else {
        if (loadingScreen instanceof Element) {
          loadingScreenFragment.innerHTML = '';
          loadingScreenFragment.appendChild(loadingScreen);
        } else if (loadingScreen != undefined) {
          loadingScreenFragment.innerHTML = loadingScreen;
        }
      }
    }

    this.dom.loadingScreen.appendChild(loadingScreenFragment); // all components listed here will be repainted automatically

    this.components = [];
    this.body = {
      dom: this.dom,
      domProps: this.props,
      emitter: {
        on: this.on.bind(this),
        off: this.off.bind(this),
        emit: this.emit.bind(this)
      },
      hiddenDates: [],
      util: {
        getScale: function () {
          return me.timeAxis.step.scale;
        },
        getStep: function () {
          return me.timeAxis.step.step;
        },
        toScreen: me._toScreen.bind(me),
        toGlobalScreen: me._toGlobalScreen.bind(me),
        // this refers to the root.width
        toTime: me._toTime.bind(me),
        toGlobalTime: me._toGlobalTime.bind(me)
      }
    }; // range

    this.range = new Range_1$1(this.body, this.options);
    this.components.push(this.range);
    this.body.range = this.range; // time axis

    this.timeAxis = new TimeAxis(this.body, this.options);
    this.timeAxis2 = null; // used in case of orientation option 'both'

    this.components.push(this.timeAxis); // current time bar

    this.currentTime = new CurrentTime_1(this.body, this.options);
    this.components.push(this.currentTime); // item set

    this.itemSet = new ItemSet(this.body, this.options);
    this.components.push(this.itemSet);
    this.itemsData = null; // DataSet

    this.groupsData = null; // DataSet

    this.dom.root.onclick = function (event) {
      me.emit('click', me.getEventProperties(event));
    };

    this.dom.root.ondblclick = function (event) {
      me.emit('doubleClick', me.getEventProperties(event));
    };

    this.dom.root.oncontextmenu = function (event) {
      me.emit('contextmenu', me.getEventProperties(event));
    };

    this.dom.root.onmouseover = function (event) {
      me.emit('mouseOver', me.getEventProperties(event));
    };

    if (window.PointerEvent) {
      this.dom.root.onpointerdown = function (event) {
        me.emit('mouseDown', me.getEventProperties(event));
      };

      this.dom.root.onpointermove = function (event) {
        me.emit('mouseMove', me.getEventProperties(event));
      };

      this.dom.root.onpointerup = function (event) {
        me.emit('mouseUp', me.getEventProperties(event));
      };
    } else {
      this.dom.root.onmousemove = function (event) {
        me.emit('mouseMove', me.getEventProperties(event));
      };

      this.dom.root.onmousedown = function (event) {
        me.emit('mouseDown', me.getEventProperties(event));
      };

      this.dom.root.onmouseup = function (event) {
        me.emit('mouseUp', me.getEventProperties(event));
      };
    } //Single time autoscale/fit


    this.initialFitDone = false;
    this.on('changed', function () {
      if (me.itemsData == null) return;

      if (!me.initialFitDone && !me.options.rollingMode) {
        me.initialFitDone = true;

        if (me.options.start != undefined || me.options.end != undefined) {
          if (me.options.start == undefined || me.options.end == undefined) {
            var range = me.getItemRange();
          }

          var start = me.options.start != undefined ? me.options.start : range.min;
          var end = me.options.end != undefined ? me.options.end : range.max;
          me.setWindow(start, end, {
            animation: false
          });
        } else {
          me.fit({
            animation: false
          });
        }
      }

      if (!me.initialDrawDone && (me.initialRangeChangeDone || !me.options.start && !me.options.end || me.options.rollingMode)) {
        me.initialDrawDone = true;
        me.itemSet.initialDrawDone = true;
        me.dom.root.style.visibility = 'visible';
        me.dom.loadingScreen.parentNode.removeChild(me.dom.loadingScreen);

        if (me.options.onInitialDrawComplete) {
          setTimeout(() => {
            return me.options.onInitialDrawComplete();
          }, 0);
        }
      }
    });
    this.on('destroyTimeline', () => {
      me.destroy();
    }); // apply options

    if (options) {
      this.setOptions(options);
    } // IMPORTANT: THIS HAPPENS BEFORE SET ITEMS!


    if (groups) {
      this.setGroups(groups);
    } // create itemset


    if (items) {
      this.setItems(items);
    } // draw for the first time


    this._redraw();
  } // Extend the functionality from Core


  Timeline.prototype = new Core();
  /**
   * Load a configurator
   * @return {Object}
   * @private
   */

  Timeline.prototype._createConfigurator = function () {
    return new Configurator$1(this, this.dom.container, configureOptions$1);
  };
  /**
   * Force a redraw. The size of all items will be recalculated.
   * Can be useful to manually redraw when option autoResize=false and the window
   * has been resized, or when the items CSS has been changed.
   *
   * Note: this function will be overridden on construction with a trottled version
   */


  Timeline.prototype.redraw = function () {
    this.itemSet && this.itemSet.markDirty({
      refreshItems: true
    });

    this._redraw();
  };

  Timeline.prototype.setOptions = function (options) {
    // validate options
    let errorFound = Validator$5.validate(options, allOptions$5);

    if (errorFound === true) {
      console.log('%cErrors have been found in the supplied options object.', printStyle$3);
    }

    Core.prototype.setOptions.call(this, options);

    if ('type' in options) {
      if (options.type !== this.options.type) {
        this.options.type = options.type; // force recreation of all items

        var itemsData = this.itemsData;

        if (itemsData) {
          var selection = this.getSelection();
          this.setItems(null); // remove all

          this.setItems(itemsData); // add all

          this.setSelection(selection); // restore selection
        }
      }
    }
  };
  /**
   * Set items
   * @param {vis.DataSet | Array | null} items
   */


  Timeline.prototype.setItems = function (items) {
    this.itemsDone = false; // convert to type DataSet when needed

    var newDataSet;

    if (!items) {
      newDataSet = null;
    } else if (items instanceof DataSet$2 || items instanceof DataView$3) {
      newDataSet = items;
    } else {
      // turn an array into a dataset
      newDataSet = new DataSet$2(items, {
        type: {
          start: 'Date',
          end: 'Date'
        }
      });
    } // set items


    this.itemsData = newDataSet;
    this.itemSet && this.itemSet.setItems(newDataSet);
  };
  /**
   * Set groups
   * @param {vis.DataSet | Array} groups
   */


  Timeline.prototype.setGroups = function (groups) {
    // convert to type DataSet when needed
    var newDataSet;

    if (!groups) {
      newDataSet = null;
    } else {
      var filter = function (group) {
        return group.visible !== false;
      };

      if (groups instanceof DataSet$2 || groups instanceof DataView$3) {
        newDataSet = new DataView$3(groups, {
          filter: filter
        });
      } else {
        // turn an array into a dataset
        newDataSet = new DataSet$2(groups.filter(filter));
      }
    }

    this.groupsData = newDataSet;
    this.itemSet.setGroups(newDataSet);
  };
  /**
   * Set both items and groups in one go
   * @param {{items: (Array | vis.DataSet), groups: (Array | vis.DataSet)}} data
   */


  Timeline.prototype.setData = function (data) {
    if (data && data.groups) {
      this.setGroups(data.groups);
    }

    if (data && data.items) {
      this.setItems(data.items);
    }
  };
  /**
   * Set selected items by their id. Replaces the current selection
   * Unknown id's are silently ignored.
   * @param {string[] | string} [ids]  An array with zero or more id's of the items to be
   *                                selected. If ids is an empty array, all items will be
   *                                unselected.
   * @param {Object} [options]      Available options:
   *                                `focus: boolean`
   *                                    If true, focus will be set to the selected item(s)
   *                                `animation: boolean | {duration: number, easingFunction: string}`
   *                                    If true (default), the range is animated
   *                                    smoothly to the new window. An object can be
   *                                    provided to specify duration and easing function.
   *                                    Default duration is 500 ms, and default easing
   *                                    function is 'easeInOutQuad'.
   *                                    Only applicable when option focus is true.
   */


  Timeline.prototype.setSelection = function (ids, options) {
    this.itemSet && this.itemSet.setSelection(ids);

    if (options && options.focus) {
      this.focus(ids, options);
    }
  };
  /**
   * Get the selected items by their id
   * @return {Array} ids  The ids of the selected items
   */


  Timeline.prototype.getSelection = function () {
    return this.itemSet && this.itemSet.getSelection() || [];
  };
  /**
   * Adjust the visible window such that the selected item (or multiple items)
   * are centered on screen.
   * @param {string | String[]} id     An item id or array with item ids
   * @param {Object} [options]      Available options:
   *                                `animation: boolean | {duration: number, easingFunction: string}`
   *                                    If true (default), the range is animated
   *                                    smoothly to the new window. An object can be
   *                                    provided to specify duration and easing function.
   *                                    Default duration is 500 ms, and default easing
   *                                    function is 'easeInOutQuad'.
   */


  Timeline.prototype.focus = function (id, options) {
    if (!this.itemsData || id == undefined) return;
    var ids = Array.isArray(id) ? id : [id]; // get the specified item(s)

    var itemsData = this.itemsData.getDataSet().get(ids, {
      type: {
        start: 'Date',
        end: 'Date'
      }
    }); // calculate minimum start and maximum end of specified items

    var start = null;
    var end = null;
    itemsData.forEach(function (itemData) {
      var s = itemData.start.valueOf();
      var e = 'end' in itemData ? itemData.end.valueOf() : itemData.start.valueOf();

      if (start === null || s < start) {
        start = s;
      }

      if (end === null || e > end) {
        end = e;
      }
    });

    if (start !== null && end !== null) {
      var me = this; // Use the first item for the vertical focus

      var item = this.itemSet.items[ids[0]];
      var startPos = this._getScrollTop() * -1;
      var initialVerticalScroll = null; // Setup a handler for each frame of the vertical scroll

      var verticalAnimationFrame = function (ease, willDraw, done) {
        var verticalScroll = getItemVerticalScroll(me, item);

        if (verticalScroll === false) {
          return; // We don't need to scroll, so do nothing
        }

        if (!initialVerticalScroll) {
          initialVerticalScroll = verticalScroll;
        }

        if (initialVerticalScroll.itemTop == verticalScroll.itemTop && !initialVerticalScroll.shouldScroll) {
          return; // We don't need to scroll, so do nothing
        } else if (initialVerticalScroll.itemTop != verticalScroll.itemTop && verticalScroll.shouldScroll) {
          // The redraw shifted elements, so reset the animation to correct
          initialVerticalScroll = verticalScroll;
          startPos = me._getScrollTop() * -1;
        }

        var from = startPos;
        var to = initialVerticalScroll.scrollOffset;
        var scrollTop = done ? to : from + (to - from) * ease;

        me._setScrollTop(-scrollTop);

        if (!willDraw) {
          me._redraw();
        }
      }; // Enforces the final vertical scroll position


      var setFinalVerticalPosition = function () {
        var finalVerticalScroll = getItemVerticalScroll(me, item);

        if (finalVerticalScroll.shouldScroll && finalVerticalScroll.itemTop != initialVerticalScroll.itemTop) {
          me._setScrollTop(-finalVerticalScroll.scrollOffset);

          me._redraw();
        }
      }; // Perform one last check at the end to make sure the final vertical
      // position is correct


      var finalVerticalCallback = function () {
        // Double check we ended at the proper scroll position
        setFinalVerticalPosition(); // Let the redraw settle and finalize the position.      

        setTimeout(setFinalVerticalPosition, 100);
      }; // calculate the new middle and interval for the window


      var middle = (start + end) / 2;
      var interval = Math.max(this.range.end - this.range.start, (end - start) * 1.1);
      var animation = options && options.animation !== undefined ? options.animation : true;

      if (!animation) {
        // We aren't animating so set a default so that the final callback forces the vertical location
        initialVerticalScroll = {
          shouldScroll: false,
          scrollOffset: -1,
          itemTop: -1
        };
      }

      this.range.setRange(middle - interval / 2, middle + interval / 2, {
        animation: animation
      }, finalVerticalCallback, verticalAnimationFrame);
    }
  };
  /**
   * Set Timeline window such that it fits all items
   * @param {Object} [options]  Available options:
   *                                `animation: boolean | {duration: number, easingFunction: string}`
   *                                    If true (default), the range is animated
   *                                    smoothly to the new window. An object can be
   *                                    provided to specify duration and easing function.
   *                                    Default duration is 500 ms, and default easing
   *                                    function is 'easeInOutQuad'.
   * @param {function} [callback]
   */


  Timeline.prototype.fit = function (options, callback) {
    var animation = options && options.animation !== undefined ? options.animation : true;
    var range;
    var dataset = this.itemsData && this.itemsData.getDataSet();

    if (dataset.length === 1 && dataset.get()[0].end === undefined) {
      // a single item -> don't fit, just show a range around the item from -4 to +3 days
      range = this.getDataRange();
      this.moveTo(range.min.valueOf(), {
        animation
      }, callback);
    } else {
      // exactly fit the items (plus a small margin)
      range = this.getItemRange();
      this.range.setRange(range.min, range.max, {
        animation: animation
      }, callback);
    }
  };
  /**
   *
   * @param {vis.Item} item
   * @returns {number}
   */


  function getStart(item) {
    return util.convert(item.data.start, 'Date').valueOf();
  }
  /**
   *
   * @param {vis.Item} item
   * @returns {number}
   */


  function getEnd(item) {
    var end = item.data.end != undefined ? item.data.end : item.data.start;
    return util.convert(end, 'Date').valueOf();
  }
  /**
   * @param {vis.Timeline} timeline
   * @param {vis.Item} item
   * @return {{shouldScroll: bool, scrollOffset: number, itemTop: number}}
   */


  function getItemVerticalScroll(timeline, item) {
    if (!item.parent) {
      // The item no longer exists, so ignore this focus.
      return false;
    }

    var leftHeight = timeline.props.leftContainer.height;
    var contentHeight = timeline.props.left.height;
    var group = item.parent;
    var offset = group.top;
    var shouldScroll = true;
    var orientation = timeline.timeAxis.options.orientation.axis;

    var itemTop = function () {
      if (orientation == "bottom") {
        return group.height - item.top - item.height;
      } else {
        return item.top;
      }
    };

    var currentScrollHeight = timeline._getScrollTop() * -1;
    var targetOffset = offset + itemTop();
    var height = item.height;

    if (targetOffset < currentScrollHeight) {
      if (offset + leftHeight <= offset + itemTop() + height) {
        offset += itemTop() - timeline.itemSet.options.margin.item.vertical;
      }
    } else if (targetOffset + height > currentScrollHeight + leftHeight) {
      offset += itemTop() + height - leftHeight + timeline.itemSet.options.margin.item.vertical;
    } else {
      shouldScroll = false;
    }

    offset = Math.min(offset, contentHeight - leftHeight);
    return {
      shouldScroll: shouldScroll,
      scrollOffset: offset,
      itemTop: targetOffset
    };
  }
  /**
   * Determine the range of the items, taking into account their actual width
   * and a margin of 10 pixels on both sides.
   *
   * @returns {{min: Date, max: Date}}
   */


  Timeline.prototype.getItemRange = function () {
    // get a rough approximation for the range based on the items start and end dates
    var range = this.getDataRange();
    var min = range.min !== null ? range.min.valueOf() : null;
    var max = range.max !== null ? range.max.valueOf() : null;
    var minItem = null;
    var maxItem = null;

    if (min != null && max != null) {
      var interval = max - min; // ms

      if (interval <= 0) {
        interval = 10;
      }

      var factor = interval / this.props.center.width;
      var redrawQueue = {};
      var redrawQueueLength = 0; // collect redraw functions

      util.forEach(this.itemSet.items, function (item, key) {
        if (item.groupShowing) {
          var returnQueue = true;
          redrawQueue[key] = item.redraw(returnQueue);
          redrawQueueLength = redrawQueue[key].length;
        }
      });
      var needRedraw = redrawQueueLength > 0;

      if (needRedraw) {
        // redraw all regular items
        for (var i = 0; i < redrawQueueLength; i++) {
          util.forEach(redrawQueue, function (fns) {
            fns[i]();
          });
        }
      } // calculate the date of the left side and right side of the items given


      util.forEach(this.itemSet.items, function (item) {
        var start = getStart(item);
        var end = getEnd(item);
        var startSide;
        var endSide;

        if (this.options.rtl) {
          startSide = start - (item.getWidthRight() + 10) * factor;
          endSide = end + (item.getWidthLeft() + 10) * factor;
        } else {
          startSide = start - (item.getWidthLeft() + 10) * factor;
          endSide = end + (item.getWidthRight() + 10) * factor;
        }

        if (startSide < min) {
          min = startSide;
          minItem = item;
        }

        if (endSide > max) {
          max = endSide;
          maxItem = item;
        }
      }.bind(this));

      if (minItem && maxItem) {
        var lhs = minItem.getWidthLeft() + 10;
        var rhs = maxItem.getWidthRight() + 10;
        var delta = this.props.center.width - lhs - rhs; // px

        if (delta > 0) {
          if (this.options.rtl) {
            min = getStart(minItem) - rhs * interval / delta; // ms

            max = getEnd(maxItem) + lhs * interval / delta; // ms
          } else {
            min = getStart(minItem) - lhs * interval / delta; // ms

            max = getEnd(maxItem) + rhs * interval / delta; // ms
          }
        }
      }
    }

    return {
      min: min != null ? new Date(min) : null,
      max: max != null ? new Date(max) : null
    };
  };
  /**
   * Calculate the data range of the items start and end dates
   * @returns {{min: Date, max: Date}}
   */


  Timeline.prototype.getDataRange = function () {
    var min = null;
    var max = null;
    var dataset = this.itemsData && this.itemsData.getDataSet();

    if (dataset) {
      dataset.forEach(function (item) {
        var start = util.convert(item.start, 'Date').valueOf();
        var end = util.convert(item.end != undefined ? item.end : item.start, 'Date').valueOf();

        if (min === null || start < min) {
          min = start;
        }

        if (max === null || end > max) {
          max = end;
        }
      });
    }

    return {
      min: min != null ? new Date(min) : null,
      max: max != null ? new Date(max) : null
    };
  };
  /**
   * Generate Timeline related information from an event
   * @param {Event} event
   * @return {Object} An object with related information, like on which area
   *                  The event happened, whether clicked on an item, etc.
   */


  Timeline.prototype.getEventProperties = function (event) {
    var clientX = event.center ? event.center.x : event.clientX;
    var clientY = event.center ? event.center.y : event.clientY;
    var x;

    if (this.options.rtl) {
      x = util.getAbsoluteRight(this.dom.centerContainer) - clientX;
    } else {
      x = clientX - util.getAbsoluteLeft(this.dom.centerContainer);
    }

    var y = clientY - util.getAbsoluteTop(this.dom.centerContainer);
    var item = this.itemSet.itemFromTarget(event);
    var group = this.itemSet.groupFromTarget(event);
    var customTime = CustomTime.customTimeFromTarget(event);
    var snap = this.itemSet.options.snap || null;
    var scale = this.body.util.getScale();
    var step = this.body.util.getStep();

    var time = this._toTime(x);

    var snappedTime = snap ? snap(time, scale, step) : time;
    var element = util.getTarget(event);
    var what = null;

    if (item != null) {
      what = 'item';
    } else if (customTime != null) {
      what = 'custom-time';
    } else if (util.hasParent(element, this.timeAxis.dom.foreground)) {
      what = 'axis';
    } else if (this.timeAxis2 && util.hasParent(element, this.timeAxis2.dom.foreground)) {
      what = 'axis';
    } else if (util.hasParent(element, this.itemSet.dom.labelSet)) {
      what = 'group-label';
    } else if (util.hasParent(element, this.currentTime.bar)) {
      what = 'current-time';
    } else if (util.hasParent(element, this.dom.center)) {
      what = 'background';
    }

    return {
      event: event,
      item: item ? item.id : null,
      group: group ? group.groupId : null,
      what: what,
      pageX: event.srcEvent ? event.srcEvent.pageX : event.pageX,
      pageY: event.srcEvent ? event.srcEvent.pageY : event.pageY,
      x: x,
      y: y,
      time: time,
      snappedTime: snappedTime
    };
  };
  /**
   * Toggle Timeline rolling mode
   */


  Timeline.prototype.toggleRollingMode = function () {
    if (this.range.rolling) {
      this.range.stopRolling();
    } else {
      if (this.options.rollingMode == undefined) {
        this.setOptions(this.options);
      }

      this.range.startRolling();
    }
  };

  var Timeline_1 = Timeline;

  /**
   *
   * @param {number} start
   * @param {number} end
   * @param {boolean} autoScaleStart
   * @param {boolean} autoScaleEnd
   * @param {number} containerHeight
   * @param {number} majorCharHeight
   * @param {boolean} zeroAlign
   * @param {function} formattingFunction
   * @constructor DataScale
   */
  function DataScale(start, end, autoScaleStart, autoScaleEnd, containerHeight, majorCharHeight, zeroAlign = false, formattingFunction = false) {
    this.majorSteps = [1, 2, 5, 10];
    this.minorSteps = [0.25, 0.5, 1, 2];
    this.customLines = null;
    this.containerHeight = containerHeight;
    this.majorCharHeight = majorCharHeight;
    this._start = start;
    this._end = end;
    this.scale = 1;
    this.minorStepIdx = -1;
    this.magnitudefactor = 1;
    this.determineScale();
    this.zeroAlign = zeroAlign;
    this.autoScaleStart = autoScaleStart;
    this.autoScaleEnd = autoScaleEnd;
    this.formattingFunction = formattingFunction;

    if (autoScaleStart || autoScaleEnd) {
      var me = this;

      var roundToMinor = function (value) {
        var rounded = value - value % (me.magnitudefactor * me.minorSteps[me.minorStepIdx]);

        if (value % (me.magnitudefactor * me.minorSteps[me.minorStepIdx]) > 0.5 * (me.magnitudefactor * me.minorSteps[me.minorStepIdx])) {
          return rounded + me.magnitudefactor * me.minorSteps[me.minorStepIdx];
        } else {
          return rounded;
        }
      };

      if (autoScaleStart) {
        this._start -= this.magnitudefactor * 2 * this.minorSteps[this.minorStepIdx];
        this._start = roundToMinor(this._start);
      }

      if (autoScaleEnd) {
        this._end += this.magnitudefactor * this.minorSteps[this.minorStepIdx];
        this._end = roundToMinor(this._end);
      }

      this.determineScale();
    }
  }

  DataScale.prototype.setCharHeight = function (majorCharHeight) {
    this.majorCharHeight = majorCharHeight;
  };

  DataScale.prototype.setHeight = function (containerHeight) {
    this.containerHeight = containerHeight;
  };

  DataScale.prototype.determineScale = function () {
    var range = this._end - this._start;
    this.scale = this.containerHeight / range;
    var minimumStepValue = this.majorCharHeight / this.scale;
    var orderOfMagnitude = range > 0 ? Math.round(Math.log(range) / Math.LN10) : 0;
    this.minorStepIdx = -1;
    this.magnitudefactor = Math.pow(10, orderOfMagnitude);
    var start = 0;

    if (orderOfMagnitude < 0) {
      start = orderOfMagnitude;
    }

    var solutionFound = false;

    for (var l = start; Math.abs(l) <= Math.abs(orderOfMagnitude); l++) {
      this.magnitudefactor = Math.pow(10, l);

      for (var j = 0; j < this.minorSteps.length; j++) {
        var stepSize = this.magnitudefactor * this.minorSteps[j];

        if (stepSize >= minimumStepValue) {
          solutionFound = true;
          this.minorStepIdx = j;
          break;
        }
      }

      if (solutionFound === true) {
        break;
      }
    }
  };

  DataScale.prototype.is_major = function (value) {
    return value % (this.magnitudefactor * this.majorSteps[this.minorStepIdx]) === 0;
  };

  DataScale.prototype.getStep = function () {
    return this.magnitudefactor * this.minorSteps[this.minorStepIdx];
  };

  DataScale.prototype.getFirstMajor = function () {
    var majorStep = this.magnitudefactor * this.majorSteps[this.minorStepIdx];
    return this.convertValue(this._start + (majorStep - this._start % majorStep) % majorStep);
  };

  DataScale.prototype.formatValue = function (current) {
    var returnValue = current.toPrecision(5);

    if (typeof this.formattingFunction === 'function') {
      returnValue = this.formattingFunction(current);
    }

    if (typeof returnValue === 'number') {
      return '' + returnValue;
    } else if (typeof returnValue === 'string') {
      return returnValue;
    } else {
      return current.toPrecision(5);
    }
  };

  DataScale.prototype.getLines = function () {
    var lines = [];
    var step = this.getStep();
    var bottomOffset = (step - this._start % step) % step;

    for (var i = this._start + bottomOffset; this._end - i > 0.00001; i += step) {
      if (i != this._start) {
        //Skip the bottom line
        lines.push({
          major: this.is_major(i),
          y: this.convertValue(i),
          val: this.formatValue(i)
        });
      }
    }

    return lines;
  };

  DataScale.prototype.followScale = function (other) {
    var oldStepIdx = this.minorStepIdx;
    var oldStart = this._start;
    var oldEnd = this._end;
    var me = this;

    var increaseMagnitude = function () {
      me.magnitudefactor *= 2;
    };

    var decreaseMagnitude = function () {
      me.magnitudefactor /= 2;
    };

    if (other.minorStepIdx <= 1 && this.minorStepIdx <= 1 || other.minorStepIdx > 1 && this.minorStepIdx > 1) ; else if (other.minorStepIdx < this.minorStepIdx) {
      //I'm 5, they are 4 per major.
      this.minorStepIdx = 1;

      if (oldStepIdx == 2) {
        increaseMagnitude();
      } else {
        increaseMagnitude();
        increaseMagnitude();
      }
    } else {
      //I'm 4, they are 5 per major
      this.minorStepIdx = 2;

      if (oldStepIdx == 1) {
        decreaseMagnitude();
      } else {
        decreaseMagnitude();
        decreaseMagnitude();
      }
    } //Get masters stats:


    var otherZero = other.convertValue(0);
    var otherStep = other.getStep() * other.scale;
    var done = false;
    var count = 0; //Loop until magnitude is correct for given constrains.

    while (!done && count++ < 5) {
      //Get my stats:
      this.scale = otherStep / (this.minorSteps[this.minorStepIdx] * this.magnitudefactor);
      var newRange = this.containerHeight / this.scale; //For the case the magnitudefactor has changed:

      this._start = oldStart;
      this._end = this._start + newRange;
      var myOriginalZero = this._end * this.scale;
      var majorStep = this.magnitudefactor * this.majorSteps[this.minorStepIdx];
      var majorOffset = this.getFirstMajor() - other.getFirstMajor();

      if (this.zeroAlign) {
        var zeroOffset = otherZero - myOriginalZero;
        this._end += zeroOffset / this.scale;
        this._start = this._end - newRange;
      } else {
        if (!this.autoScaleStart) {
          this._start += majorStep - majorOffset / this.scale;
          this._end = this._start + newRange;
        } else {
          this._start -= majorOffset / this.scale;
          this._end = this._start + newRange;
        }
      }

      if (!this.autoScaleEnd && this._end > oldEnd + 0.00001) {
        //Need to decrease magnitude to prevent scale overshoot! (end)
        decreaseMagnitude();
        done = false;
        continue;
      }

      if (!this.autoScaleStart && this._start < oldStart - 0.00001) {
        if (this.zeroAlign && oldStart >= 0) {
          console.warn("Can't adhere to given 'min' range, due to zeroalign");
        } else {
          //Need to decrease magnitude to prevent scale overshoot! (start)
          decreaseMagnitude();
          done = false;
          continue;
        }
      }

      if (this.autoScaleStart && this.autoScaleEnd && newRange < oldEnd - oldStart) {
        increaseMagnitude();
        done = false;
        continue;
      }

      done = true;
    }
  };

  DataScale.prototype.convertValue = function (value) {
    return this.containerHeight - (value - this._start) * this.scale;
  };

  DataScale.prototype.screenToValue = function (pixels) {
    return (this.containerHeight - pixels) / this.scale + this._start;
  };

  var DataScale_1 = DataScale;

  /**
   * A horizontal time axis
   * @param {Object} body
   * @param {Object} [options]        See DataAxis.setOptions for the available
   *                                  options.
   * @param {SVGElement} svg
   * @param {vis.LineGraph.options} linegraphOptions
   * @constructor DataAxis
   * @extends Component
   */

  function DataAxis(body, options, svg, linegraphOptions) {
    this.id = util.randomUUID();
    this.body = body;
    this.defaultOptions = {
      orientation: 'left',
      // supported: 'left', 'right'
      showMinorLabels: true,
      showMajorLabels: true,
      icons: false,
      majorLinesOffset: 7,
      minorLinesOffset: 4,
      labelOffsetX: 10,
      labelOffsetY: 2,
      iconWidth: 20,
      width: '40px',
      visible: true,
      alignZeros: true,
      left: {
        range: {
          min: undefined,
          max: undefined
        },
        format: function (value) {
          return '' + parseFloat(value.toPrecision(3));
        },
        title: {
          text: undefined,
          style: undefined
        }
      },
      right: {
        range: {
          min: undefined,
          max: undefined
        },
        format: function (value) {
          return '' + parseFloat(value.toPrecision(3));
        },
        title: {
          text: undefined,
          style: undefined
        }
      }
    };
    this.linegraphOptions = linegraphOptions;
    this.linegraphSVG = svg;
    this.props = {};
    this.DOMelements = {
      // dynamic elements
      lines: {},
      labels: {},
      title: {}
    };
    this.dom = {};
    this.scale = undefined;
    this.range = {
      start: 0,
      end: 0
    };
    this.options = util.extend({}, this.defaultOptions);
    this.conversionFactor = 1;
    this.setOptions(options);
    this.width = Number(('' + this.options.width).replace("px", ""));
    this.minWidth = this.width;
    this.height = this.linegraphSVG.getBoundingClientRect().height;
    this.hidden = false;
    this.stepPixels = 25;
    this.zeroCrossing = -1;
    this.amountOfSteps = -1;
    this.lineOffset = 0;
    this.master = true;
    this.masterAxis = null;
    this.svgElements = {};
    this.iconsRemoved = false;
    this.groups = {};
    this.amountOfGroups = 0; // create the HTML DOM

    this._create();

    if (this.scale == undefined) {
      this._redrawLabels();
    }

    this.framework = {
      svg: this.svg,
      svgElements: this.svgElements,
      options: this.options,
      groups: this.groups
    };
    var me = this;
    this.body.emitter.on("verticalDrag", function () {
      me.dom.lineContainer.style.top = me.body.domProps.scrollTop + 'px';
    });
  }

  DataAxis.prototype = new Component_1();

  DataAxis.prototype.addGroup = function (label, graphOptions) {
    if (!this.groups.hasOwnProperty(label)) {
      this.groups[label] = graphOptions;
    }

    this.amountOfGroups += 1;
  };

  DataAxis.prototype.updateGroup = function (label, graphOptions) {
    if (!this.groups.hasOwnProperty(label)) {
      this.amountOfGroups += 1;
    }

    this.groups[label] = graphOptions;
  };

  DataAxis.prototype.removeGroup = function (label) {
    if (this.groups.hasOwnProperty(label)) {
      delete this.groups[label];
      this.amountOfGroups -= 1;
    }
  };

  DataAxis.prototype.setOptions = function (options) {
    if (options) {
      var redraw = false;

      if (this.options.orientation != options.orientation && options.orientation !== undefined) {
        redraw = true;
      }

      var fields = ['orientation', 'showMinorLabels', 'showMajorLabels', 'icons', 'majorLinesOffset', 'minorLinesOffset', 'labelOffsetX', 'labelOffsetY', 'iconWidth', 'width', 'visible', 'left', 'right', 'alignZeros'];
      util.selectiveDeepExtend(fields, this.options, options);
      this.minWidth = Number(('' + this.options.width).replace("px", ""));

      if (redraw === true && this.dom.frame) {
        this.hide();
        this.show();
      }
    }
  };
  /**
   * Create the HTML DOM for the DataAxis
   */


  DataAxis.prototype._create = function () {
    this.dom.frame = document.createElement('div');
    this.dom.frame.style.width = this.options.width;
    this.dom.frame.style.height = this.height;
    this.dom.lineContainer = document.createElement('div');
    this.dom.lineContainer.style.width = '100%';
    this.dom.lineContainer.style.height = this.height;
    this.dom.lineContainer.style.position = 'relative';
    this.dom.lineContainer.style.visibility = 'visible';
    this.dom.lineContainer.style.display = 'block'; // create svg element for graph drawing.

    this.svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
    this.svg.style.position = "absolute";
    this.svg.style.top = '0px';
    this.svg.style.height = '100%';
    this.svg.style.width = '100%';
    this.svg.style.display = "block";
    this.dom.frame.appendChild(this.svg);
  };

  DataAxis.prototype._redrawGroupIcons = function () {
    DOMutil$1.prepareElements(this.svgElements);
    var x;
    var iconWidth = this.options.iconWidth;
    var iconHeight = 15;
    var iconOffset = 4;
    var y = iconOffset + 0.5 * iconHeight;

    if (this.options.orientation === 'left') {
      x = iconOffset;
    } else {
      x = this.width - iconWidth - iconOffset;
    }

    var groupArray = Object.keys(this.groups);
    groupArray.sort(function (a, b) {
      return a < b ? -1 : 1;
    });

    for (var i = 0; i < groupArray.length; i++) {
      var groupId = groupArray[i];

      if (this.groups[groupId].visible === true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] === true)) {
        this.groups[groupId].getLegend(iconWidth, iconHeight, this.framework, x, y);
        y += iconHeight + iconOffset;
      }
    }

    DOMutil$1.cleanupElements(this.svgElements);
    this.iconsRemoved = false;
  };

  DataAxis.prototype._cleanupIcons = function () {
    if (this.iconsRemoved === false) {
      DOMutil$1.prepareElements(this.svgElements);
      DOMutil$1.cleanupElements(this.svgElements);
      this.iconsRemoved = true;
    }
  };
  /**
   * Create the HTML DOM for the DataAxis
   */


  DataAxis.prototype.show = function () {
    this.hidden = false;

    if (!this.dom.frame.parentNode) {
      if (this.options.orientation === 'left') {
        this.body.dom.left.appendChild(this.dom.frame);
      } else {
        this.body.dom.right.appendChild(this.dom.frame);
      }
    }

    if (!this.dom.lineContainer.parentNode) {
      this.body.dom.backgroundHorizontal.appendChild(this.dom.lineContainer);
    }

    this.dom.lineContainer.style.display = 'block';
  };
  /**
   * Create the HTML DOM for the DataAxis
   */


  DataAxis.prototype.hide = function () {
    this.hidden = true;

    if (this.dom.frame.parentNode) {
      this.dom.frame.parentNode.removeChild(this.dom.frame);
    }

    this.dom.lineContainer.style.display = 'none';
  };
  /**
   * Set a range (start and end)
   * @param {number} start
   * @param {number} end
   */


  DataAxis.prototype.setRange = function (start, end) {
    this.range.start = start;
    this.range.end = end;
  };
  /**
   * Repaint the component
   * @return {boolean} Returns true if the component is resized
   */


  DataAxis.prototype.redraw = function () {
    var resized = false;
    var activeGroups = 0; // Make sure the line container adheres to the vertical scrolling.

    this.dom.lineContainer.style.top = this.body.domProps.scrollTop + 'px';

    for (var groupId in this.groups) {
      if (this.groups.hasOwnProperty(groupId)) {
        if (this.groups[groupId].visible === true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] === true)) {
          activeGroups++;
        }
      }
    }

    if (this.amountOfGroups === 0 || activeGroups === 0) {
      this.hide();
    } else {
      this.show();
      this.height = Number(this.linegraphSVG.style.height.replace("px", "")); // svg offsetheight did not work in firefox and explorer...

      this.dom.lineContainer.style.height = this.height + 'px';
      this.width = this.options.visible === true ? Number(('' + this.options.width).replace("px", "")) : 0;
      var props = this.props;
      var frame = this.dom.frame; // update classname

      frame.className = 'vis-data-axis'; // calculate character width and height

      this._calculateCharSize();

      var orientation = this.options.orientation;
      var showMinorLabels = this.options.showMinorLabels;
      var showMajorLabels = this.options.showMajorLabels; // determine the width and height of the elements for the axis

      props.minorLabelHeight = showMinorLabels ? props.minorCharHeight : 0;
      props.majorLabelHeight = showMajorLabels ? props.majorCharHeight : 0;
      props.minorLineWidth = this.body.dom.backgroundHorizontal.offsetWidth - this.lineOffset - this.width + 2 * this.options.minorLinesOffset;
      props.minorLineHeight = 1;
      props.majorLineWidth = this.body.dom.backgroundHorizontal.offsetWidth - this.lineOffset - this.width + 2 * this.options.majorLinesOffset;
      props.majorLineHeight = 1; //  take frame offline while updating (is almost twice as fast)

      if (orientation === 'left') {
        frame.style.top = '0';
        frame.style.left = '0';
        frame.style.bottom = '';
        frame.style.width = this.width + 'px';
        frame.style.height = this.height + "px";
        this.props.width = this.body.domProps.left.width;
        this.props.height = this.body.domProps.left.height;
      } else {
        // right
        frame.style.top = '';
        frame.style.bottom = '0';
        frame.style.left = '0';
        frame.style.width = this.width + 'px';
        frame.style.height = this.height + "px";
        this.props.width = this.body.domProps.right.width;
        this.props.height = this.body.domProps.right.height;
      }

      resized = this._redrawLabels();
      resized = this._isResized() || resized;

      if (this.options.icons === true) {
        this._redrawGroupIcons();
      } else {
        this._cleanupIcons();
      }

      this._redrawTitle(orientation);
    }

    return resized;
  };
  /**
   * Repaint major and minor text labels and vertical grid lines
   *
   * @returns {boolean}
   * @private
   */


  DataAxis.prototype._redrawLabels = function () {
    var resized = false;
    DOMutil$1.prepareElements(this.DOMelements.lines);
    DOMutil$1.prepareElements(this.DOMelements.labels);
    var orientation = this.options['orientation'];
    var customRange = this.options[orientation].range != undefined ? this.options[orientation].range : {}; //Override range with manual options:

    var autoScaleEnd = true;

    if (customRange.max != undefined) {
      this.range.end = customRange.max;
      autoScaleEnd = false;
    }

    var autoScaleStart = true;

    if (customRange.min != undefined) {
      this.range.start = customRange.min;
      autoScaleStart = false;
    }

    this.scale = new DataScale_1(this.range.start, this.range.end, autoScaleStart, autoScaleEnd, this.dom.frame.offsetHeight, this.props.majorCharHeight, this.options.alignZeros, this.options[orientation].format);

    if (this.master === false && this.masterAxis != undefined) {
      this.scale.followScale(this.masterAxis.scale);
      this.dom.lineContainer.style.display = 'none';
    } else {
      this.dom.lineContainer.style.display = 'block';
    } //Is updated in side-effect of _redrawLabel():


    this.maxLabelSize = 0;
    var lines = this.scale.getLines();
    lines.forEach(line => {
      var y = line.y;
      var isMajor = line.major;

      if (this.options['showMinorLabels'] && isMajor === false) {
        this._redrawLabel(y - 2, line.val, orientation, 'vis-y-axis vis-minor', this.props.minorCharHeight);
      }

      if (isMajor) {
        if (y >= 0) {
          this._redrawLabel(y - 2, line.val, orientation, 'vis-y-axis vis-major', this.props.majorCharHeight);
        }
      }

      if (this.master === true) {
        if (isMajor) {
          this._redrawLine(y, orientation, 'vis-grid vis-horizontal vis-major', this.options.majorLinesOffset, this.props.majorLineWidth);
        } else {
          this._redrawLine(y, orientation, 'vis-grid vis-horizontal vis-minor', this.options.minorLinesOffset, this.props.minorLineWidth);
        }
      }
    }); // Note that title is rotated, so we're using the height, not width!

    var titleWidth = 0;

    if (this.options[orientation].title !== undefined && this.options[orientation].title.text !== undefined) {
      titleWidth = this.props.titleCharHeight;
    }

    var offset = this.options.icons === true ? Math.max(this.options.iconWidth, titleWidth) + this.options.labelOffsetX + 15 : titleWidth + this.options.labelOffsetX + 15; // this will resize the yAxis to accommodate the labels.

    if (this.maxLabelSize > this.width - offset && this.options.visible === true) {
      this.width = this.maxLabelSize + offset;
      this.options.width = this.width + "px";
      DOMutil$1.cleanupElements(this.DOMelements.lines);
      DOMutil$1.cleanupElements(this.DOMelements.labels);
      this.redraw();
      resized = true;
    } // this will resize the yAxis if it is too big for the labels.
    else if (this.maxLabelSize < this.width - offset && this.options.visible === true && this.width > this.minWidth) {
        this.width = Math.max(this.minWidth, this.maxLabelSize + offset);
        this.options.width = this.width + "px";
        DOMutil$1.cleanupElements(this.DOMelements.lines);
        DOMutil$1.cleanupElements(this.DOMelements.labels);
        this.redraw();
        resized = true;
      } else {
        DOMutil$1.cleanupElements(this.DOMelements.lines);
        DOMutil$1.cleanupElements(this.DOMelements.labels);
        resized = false;
      }

    return resized;
  };

  DataAxis.prototype.convertValue = function (value) {
    return this.scale.convertValue(value);
  };

  DataAxis.prototype.screenToValue = function (x) {
    return this.scale.screenToValue(x);
  };
  /**
   * Create a label for the axis at position x
   *
   * @param {number} y
   * @param {string} text
   * @param {'top'|'right'|'bottom'|'left'} orientation
   * @param {string} className
   * @param {number} characterHeight
   * @private
   */


  DataAxis.prototype._redrawLabel = function (y, text, orientation, className, characterHeight) {
    // reuse redundant label
    var label = DOMutil$1.getDOMElement('div', this.DOMelements.labels, this.dom.frame); //this.dom.redundant.labels.shift();

    label.className = className;
    label.innerHTML = text;

    if (orientation === 'left') {
      label.style.left = '-' + this.options.labelOffsetX + 'px';
      label.style.textAlign = "right";
    } else {
      label.style.right = '-' + this.options.labelOffsetX + 'px';
      label.style.textAlign = "left";
    }

    label.style.top = y - 0.5 * characterHeight + this.options.labelOffsetY + 'px';
    text += '';
    var largestWidth = Math.max(this.props.majorCharWidth, this.props.minorCharWidth);

    if (this.maxLabelSize < text.length * largestWidth) {
      this.maxLabelSize = text.length * largestWidth;
    }
  };
  /**
   * Create a minor line for the axis at position y
   * @param {number} y
   * @param {'top'|'right'|'bottom'|'left'} orientation
   * @param {string} className
   * @param {number} offset
   * @param {number} width
   */


  DataAxis.prototype._redrawLine = function (y, orientation, className, offset, width) {
    if (this.master === true) {
      var line = DOMutil$1.getDOMElement('div', this.DOMelements.lines, this.dom.lineContainer); //this.dom.redundant.lines.shift();

      line.className = className;
      line.innerHTML = '';

      if (orientation === 'left') {
        line.style.left = this.width - offset + 'px';
      } else {
        line.style.right = this.width - offset + 'px';
      }

      line.style.width = width + 'px';
      line.style.top = y + 'px';
    }
  };
  /**
   * Create a title for the axis
   * @private
   * @param {'top'|'right'|'bottom'|'left'} orientation
   */


  DataAxis.prototype._redrawTitle = function (orientation) {
    DOMutil$1.prepareElements(this.DOMelements.title); // Check if the title is defined for this axes

    if (this.options[orientation].title !== undefined && this.options[orientation].title.text !== undefined) {
      var title = DOMutil$1.getDOMElement('div', this.DOMelements.title, this.dom.frame);
      title.className = 'vis-y-axis vis-title vis-' + orientation;
      title.innerHTML = this.options[orientation].title.text; // Add style - if provided

      if (this.options[orientation].title.style !== undefined) {
        util.addCssText(title, this.options[orientation].title.style);
      }

      if (orientation === 'left') {
        title.style.left = this.props.titleCharHeight + 'px';
      } else {
        title.style.right = this.props.titleCharHeight + 'px';
      }

      title.style.width = this.height + 'px';
    } // we need to clean up in case we did not use all elements.


    DOMutil$1.cleanupElements(this.DOMelements.title);
  };
  /**
   * Determine the size of text on the axis (both major and minor axis).
   * The size is calculated only once and then cached in this.props.
   * @private
   */


  DataAxis.prototype._calculateCharSize = function () {
    // determine the char width and height on the minor axis
    if (!('minorCharHeight' in this.props)) {
      var textMinor = document.createTextNode('0');
      var measureCharMinor = document.createElement('div');
      measureCharMinor.className = 'vis-y-axis vis-minor vis-measure';
      measureCharMinor.appendChild(textMinor);
      this.dom.frame.appendChild(measureCharMinor);
      this.props.minorCharHeight = measureCharMinor.clientHeight;
      this.props.minorCharWidth = measureCharMinor.clientWidth;
      this.dom.frame.removeChild(measureCharMinor);
    }

    if (!('majorCharHeight' in this.props)) {
      var textMajor = document.createTextNode('0');
      var measureCharMajor = document.createElement('div');
      measureCharMajor.className = 'vis-y-axis vis-major vis-measure';
      measureCharMajor.appendChild(textMajor);
      this.dom.frame.appendChild(measureCharMajor);
      this.props.majorCharHeight = measureCharMajor.clientHeight;
      this.props.majorCharWidth = measureCharMajor.clientWidth;
      this.dom.frame.removeChild(measureCharMajor);
    }

    if (!('titleCharHeight' in this.props)) {
      var textTitle = document.createTextNode('0');
      var measureCharTitle = document.createElement('div');
      measureCharTitle.className = 'vis-y-axis vis-title vis-measure';
      measureCharTitle.appendChild(textTitle);
      this.dom.frame.appendChild(measureCharTitle);
      this.props.titleCharHeight = measureCharTitle.clientHeight;
      this.props.titleCharWidth = measureCharTitle.clientWidth;
      this.dom.frame.removeChild(measureCharTitle);
    }
  };

  /**
   *
   * @param {number | string} groupId
   * @param {Object} options   // TODO: Describe options
   *
   * @constructor Points
   */

  function Points(groupId, options) {} // eslint-disable-line no-unused-vars

  /**
   * draw the data points
   *
   * @param {Array} dataset
   * @param {GraphGroup} group
   * @param {Object} framework            | SVG DOM element
   * @param {number} [offset]
   */


  Points.draw = function (dataset, group, framework, offset) {
    offset = offset || 0;
    var callback = getCallback(framework, group);

    for (var i = 0; i < dataset.length; i++) {
      if (!callback) {
        // draw the point the simple way.
        DOMutil$1.drawPoint(dataset[i].screen_x + offset, dataset[i].screen_y, getGroupTemplate(group), framework.svgElements, framework.svg, dataset[i].label);
      } else {
        var callbackResult = callback(dataset[i], group); // result might be true, false or an object

        if (callbackResult === true || typeof callbackResult === 'object') {
          DOMutil$1.drawPoint(dataset[i].screen_x + offset, dataset[i].screen_y, getGroupTemplate(group, callbackResult), framework.svgElements, framework.svg, dataset[i].label);
        }
      }
    }
  };

  Points.drawIcon = function (group, x, y, iconWidth, iconHeight, framework) {
    var fillHeight = iconHeight * 0.5;
    var outline = DOMutil$1.getSVGElement("rect", framework.svgElements, framework.svg);
    outline.setAttributeNS(null, "x", x);
    outline.setAttributeNS(null, "y", y - fillHeight);
    outline.setAttributeNS(null, "width", iconWidth);
    outline.setAttributeNS(null, "height", 2 * fillHeight);
    outline.setAttributeNS(null, "class", "vis-outline"); //Don't call callback on icon

    DOMutil$1.drawPoint(x + 0.5 * iconWidth, y, getGroupTemplate(group), framework.svgElements, framework.svg);
  };
  /**
   *
   * @param {vis.Group} group
   * @param {any} callbackResult
   * @returns {{style: *, styles: (*|string), size: *, className: *}}
   */


  function getGroupTemplate(group, callbackResult) {
    callbackResult = typeof callbackResult === 'undefined' ? {} : callbackResult;
    return {
      style: callbackResult.style || group.options.drawPoints.style,
      styles: callbackResult.styles || group.options.drawPoints.styles,
      size: callbackResult.size || group.options.drawPoints.size,
      className: callbackResult.className || group.className
    };
  }
  /**
   *
   * @param {Object} framework            | SVG DOM element
   * @param {vis.Group} group
   * @returns {function}
   */


  function getCallback(framework, group) {
    var callback = undefined; // check for the graph2d onRender

    if (framework.options && framework.options.drawPoints && framework.options.drawPoints.onRender && typeof framework.options.drawPoints.onRender == 'function') {
      callback = framework.options.drawPoints.onRender;
    } // override it with the group onRender if defined


    if (group.group.options && group.group.options.drawPoints && group.group.options.drawPoints.onRender && typeof group.group.options.drawPoints.onRender == 'function') {
      callback = group.group.options.drawPoints.onRender;
    }

    return callback;
  }

  var points = Points;

  /**
   *
   * @param {vis.GraphGroup.id} groupId
   * @param {Object} options   // TODO: Describe options
   * @constructor Bargraph
   */

  function Bargraph(groupId, options) {// eslint-disable-line no-unused-vars
  }

  Bargraph.drawIcon = function (group, x, y, iconWidth, iconHeight, framework) {
    var fillHeight = iconHeight * 0.5;
    var outline = DOMutil$1.getSVGElement("rect", framework.svgElements, framework.svg);
    outline.setAttributeNS(null, "x", x);
    outline.setAttributeNS(null, "y", y - fillHeight);
    outline.setAttributeNS(null, "width", iconWidth);
    outline.setAttributeNS(null, "height", 2 * fillHeight);
    outline.setAttributeNS(null, "class", "vis-outline");
    var barWidth = Math.round(0.3 * iconWidth);
    var originalWidth = group.options.barChart.width;
    var scale = originalWidth / barWidth;
    var bar1Height = Math.round(0.4 * iconHeight);
    var bar2Height = Math.round(0.75 * iconHeight);
    var offset = Math.round((iconWidth - 2 * barWidth) / 3);
    DOMutil$1.drawBar(x + 0.5 * barWidth + offset, y + fillHeight - bar1Height - 1, barWidth, bar1Height, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);
    DOMutil$1.drawBar(x + 1.5 * barWidth + offset + 2, y + fillHeight - bar2Height - 1, barWidth, bar2Height, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);

    if (group.options.drawPoints.enabled == true) {
      var groupTemplate = {
        style: group.options.drawPoints.style,
        styles: group.options.drawPoints.styles,
        size: group.options.drawPoints.size / scale,
        className: group.className
      };
      DOMutil$1.drawPoint(x + 0.5 * barWidth + offset, y + fillHeight - bar1Height - 1, groupTemplate, framework.svgElements, framework.svg);
      DOMutil$1.drawPoint(x + 1.5 * barWidth + offset + 2, y + fillHeight - bar2Height - 1, groupTemplate, framework.svgElements, framework.svg);
    }
  };
  /**
   * draw a bar graph
   *
   * @param {Array.<vis.GraphGroup.id>} groupIds
   * @param {Object} processedGroupData
   * @param {{svg: Object, svgElements: Array.<Object>, options: Object, groups: Array.<vis.Group>}} framework
   */


  Bargraph.draw = function (groupIds, processedGroupData, framework) {
    var combinedData = [];
    var intersections = {};
    var coreDistance;
    var key, drawData;
    var group;
    var i, j;
    var barPoints = 0; // combine all barchart data

    for (i = 0; i < groupIds.length; i++) {
      group = framework.groups[groupIds[i]];

      if (group.options.style === 'bar') {
        if (group.visible === true && (framework.options.groups.visibility[groupIds[i]] === undefined || framework.options.groups.visibility[groupIds[i]] === true)) {
          for (j = 0; j < processedGroupData[groupIds[i]].length; j++) {
            combinedData.push({
              screen_x: processedGroupData[groupIds[i]][j].screen_x,
              screen_end: processedGroupData[groupIds[i]][j].screen_end,
              screen_y: processedGroupData[groupIds[i]][j].screen_y,
              x: processedGroupData[groupIds[i]][j].x,
              end: processedGroupData[groupIds[i]][j].end,
              y: processedGroupData[groupIds[i]][j].y,
              groupId: groupIds[i],
              label: processedGroupData[groupIds[i]][j].label
            });
            barPoints += 1;
          }
        }
      }
    }

    if (barPoints === 0) {
      return;
    } // sort by time and by group


    combinedData.sort(function (a, b) {
      if (a.screen_x === b.screen_x) {
        return a.groupId < b.groupId ? -1 : 1;
      } else {
        return a.screen_x - b.screen_x;
      }
    }); // get intersections

    Bargraph._getDataIntersections(intersections, combinedData); // plot barchart


    for (i = 0; i < combinedData.length; i++) {
      group = framework.groups[combinedData[i].groupId];
      var minWidth = group.options.barChart.minWidth != undefined ? group.options.barChart.minWidth : 0.1 * group.options.barChart.width;
      key = combinedData[i].screen_x;
      var heightOffset = 0;

      if (intersections[key] === undefined) {
        if (i + 1 < combinedData.length) {
          coreDistance = Math.abs(combinedData[i + 1].screen_x - key);
        }

        drawData = Bargraph._getSafeDrawData(coreDistance, group, minWidth);
      } else {
        var nextKey = i + (intersections[key].amount - intersections[key].resolved);

        if (nextKey < combinedData.length) {
          coreDistance = Math.abs(combinedData[nextKey].screen_x - key);
        }

        drawData = Bargraph._getSafeDrawData(coreDistance, group, minWidth);
        intersections[key].resolved += 1;

        if (group.options.stack === true && group.options.excludeFromStacking !== true) {
          if (combinedData[i].screen_y < group.zeroPosition) {
            heightOffset = intersections[key].accumulatedNegative;
            intersections[key].accumulatedNegative += group.zeroPosition - combinedData[i].screen_y;
          } else {
            heightOffset = intersections[key].accumulatedPositive;
            intersections[key].accumulatedPositive += group.zeroPosition - combinedData[i].screen_y;
          }
        } else if (group.options.barChart.sideBySide === true) {
          drawData.width = drawData.width / intersections[key].amount;
          drawData.offset += intersections[key].resolved * drawData.width - 0.5 * drawData.width * (intersections[key].amount + 1);
        }
      }

      let dataWidth = drawData.width;
      let start = combinedData[i].screen_x; // are we drawing explicit boxes? (we supplied an end value)

      if (combinedData[i].screen_end != undefined) {
        dataWidth = combinedData[i].screen_end - combinedData[i].screen_x;
        start += dataWidth * 0.5;
      } else {
        start += drawData.offset;
      }

      DOMutil$1.drawBar(start, combinedData[i].screen_y - heightOffset, dataWidth, group.zeroPosition - combinedData[i].screen_y, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style); // draw points

      if (group.options.drawPoints.enabled === true) {
        let pointData = {
          screen_x: combinedData[i].screen_x,
          screen_y: combinedData[i].screen_y - heightOffset,
          x: combinedData[i].x,
          y: combinedData[i].y,
          groupId: combinedData[i].groupId,
          label: combinedData[i].label
        };
        points.draw([pointData], group, framework, drawData.offset); //DOMutil.drawPoint(combinedData[i].x + drawData.offset, combinedData[i].y, group, framework.svgElements, framework.svg);
      }
    }
  };
  /**
   * Fill the intersections object with counters of how many datapoints share the same x coordinates
   * @param {Object} intersections
   * @param {Array.<Object>} combinedData
   * @private
   */


  Bargraph._getDataIntersections = function (intersections, combinedData) {
    // get intersections
    var coreDistance;

    for (var i = 0; i < combinedData.length; i++) {
      if (i + 1 < combinedData.length) {
        coreDistance = Math.abs(combinedData[i + 1].screen_x - combinedData[i].screen_x);
      }

      if (i > 0) {
        coreDistance = Math.min(coreDistance, Math.abs(combinedData[i - 1].screen_x - combinedData[i].screen_x));
      }

      if (coreDistance === 0) {
        if (intersections[combinedData[i].screen_x] === undefined) {
          intersections[combinedData[i].screen_x] = {
            amount: 0,
            resolved: 0,
            accumulatedPositive: 0,
            accumulatedNegative: 0
          };
        }

        intersections[combinedData[i].screen_x].amount += 1;
      }
    }
  };
  /**
   * Get the width and offset for bargraphs based on the coredistance between datapoints
   *
   * @param {number} coreDistance
   * @param {vis.Group} group
   * @param {number} minWidth
   * @returns {{width: number, offset: number}}
   * @private
   */


  Bargraph._getSafeDrawData = function (coreDistance, group, minWidth) {
    var width, offset;

    if (coreDistance < group.options.barChart.width && coreDistance > 0) {
      width = coreDistance < minWidth ? minWidth : coreDistance;
      offset = 0; // recalculate offset with the new width;

      if (group.options.barChart.align === 'left') {
        offset -= 0.5 * coreDistance;
      } else if (group.options.barChart.align === 'right') {
        offset += 0.5 * coreDistance;
      }
    } else {
      // default settings
      width = group.options.barChart.width;
      offset = 0;

      if (group.options.barChart.align === 'left') {
        offset -= 0.5 * group.options.barChart.width;
      } else if (group.options.barChart.align === 'right') {
        offset += 0.5 * group.options.barChart.width;
      }
    }

    return {
      width: width,
      offset: offset
    };
  };

  Bargraph.getStackedYRange = function (combinedData, groupRanges, groupIds, groupLabel, orientation) {
    if (combinedData.length > 0) {
      // sort by time and by group
      combinedData.sort(function (a, b) {
        if (a.screen_x === b.screen_x) {
          return a.groupId < b.groupId ? -1 : 1;
        } else {
          return a.screen_x - b.screen_x;
        }
      });
      var intersections = {};

      Bargraph._getDataIntersections(intersections, combinedData);

      groupRanges[groupLabel] = Bargraph._getStackedYRange(intersections, combinedData);
      groupRanges[groupLabel].yAxisOrientation = orientation;
      groupIds.push(groupLabel);
    }
  };

  Bargraph._getStackedYRange = function (intersections, combinedData) {
    var key;
    var yMin = combinedData[0].screen_y;
    var yMax = combinedData[0].screen_y;

    for (var i = 0; i < combinedData.length; i++) {
      key = combinedData[i].screen_x;

      if (intersections[key] === undefined) {
        yMin = yMin > combinedData[i].screen_y ? combinedData[i].screen_y : yMin;
        yMax = yMax < combinedData[i].screen_y ? combinedData[i].screen_y : yMax;
      } else {
        if (combinedData[i].screen_y < 0) {
          intersections[key].accumulatedNegative += combinedData[i].screen_y;
        } else {
          intersections[key].accumulatedPositive += combinedData[i].screen_y;
        }
      }
    }

    for (var xpos in intersections) {
      if (intersections.hasOwnProperty(xpos)) {
        yMin = yMin > intersections[xpos].accumulatedNegative ? intersections[xpos].accumulatedNegative : yMin;
        yMin = yMin > intersections[xpos].accumulatedPositive ? intersections[xpos].accumulatedPositive : yMin;
        yMax = yMax < intersections[xpos].accumulatedNegative ? intersections[xpos].accumulatedNegative : yMax;
        yMax = yMax < intersections[xpos].accumulatedPositive ? intersections[xpos].accumulatedPositive : yMax;
      }
    }

    return {
      min: yMin,
      max: yMax
    };
  };

  var bar = Bargraph;

  /**
   *
   * @param {vis.GraphGroup.id} groupId
   * @param {Object} options   // TODO: Describe options
   * @constructor Line
   */

  function Line(groupId, options) {// eslint-disable-line no-unused-vars
  }

  Line.calcPath = function (dataset, group) {
    if (dataset != null) {
      if (dataset.length > 0) {
        var d = []; // construct path from dataset

        if (group.options.interpolation.enabled == true) {
          d = Line._catmullRom(dataset, group);
        } else {
          d = Line._linear(dataset);
        }

        return d;
      }
    }
  };

  Line.drawIcon = function (group, x, y, iconWidth, iconHeight, framework) {
    var fillHeight = iconHeight * 0.5;
    var path, fillPath;
    var outline = DOMutil$1.getSVGElement("rect", framework.svgElements, framework.svg);
    outline.setAttributeNS(null, "x", x);
    outline.setAttributeNS(null, "y", y - fillHeight);
    outline.setAttributeNS(null, "width", iconWidth);
    outline.setAttributeNS(null, "height", 2 * fillHeight);
    outline.setAttributeNS(null, "class", "vis-outline");
    path = DOMutil$1.getSVGElement("path", framework.svgElements, framework.svg);
    path.setAttributeNS(null, "class", group.className);

    if (group.style !== undefined) {
      path.setAttributeNS(null, "style", group.style);
    }

    path.setAttributeNS(null, "d", "M" + x + "," + y + " L" + (x + iconWidth) + "," + y + "");

    if (group.options.shaded.enabled == true) {
      fillPath = DOMutil$1.getSVGElement("path", framework.svgElements, framework.svg);

      if (group.options.shaded.orientation == 'top') {
        fillPath.setAttributeNS(null, "d", "M" + x + ", " + (y - fillHeight) + "L" + x + "," + y + " L" + (x + iconWidth) + "," + y + " L" + (x + iconWidth) + "," + (y - fillHeight));
      } else {
        fillPath.setAttributeNS(null, "d", "M" + x + "," + y + " " + "L" + x + "," + (y + fillHeight) + " " + "L" + (x + iconWidth) + "," + (y + fillHeight) + "L" + (x + iconWidth) + "," + y);
      }

      fillPath.setAttributeNS(null, "class", group.className + " vis-icon-fill");

      if (group.options.shaded.style !== undefined && group.options.shaded.style !== "") {
        fillPath.setAttributeNS(null, "style", group.options.shaded.style);
      }
    }

    if (group.options.drawPoints.enabled == true) {
      var groupTemplate = {
        style: group.options.drawPoints.style,
        styles: group.options.drawPoints.styles,
        size: group.options.drawPoints.size,
        className: group.className
      };
      DOMutil$1.drawPoint(x + 0.5 * iconWidth, y, groupTemplate, framework.svgElements, framework.svg);
    }
  };

  Line.drawShading = function (pathArray, group, subPathArray, framework) {
    // append shading to the path
    if (group.options.shaded.enabled == true) {
      var svgHeight = Number(framework.svg.style.height.replace('px', ''));
      var fillPath = DOMutil$1.getSVGElement('path', framework.svgElements, framework.svg);
      var type = "L";

      if (group.options.interpolation.enabled == true) {
        type = "C";
      }

      var dFill;
      var zero = 0;

      if (group.options.shaded.orientation == 'top') {
        zero = 0;
      } else if (group.options.shaded.orientation == 'bottom') {
        zero = svgHeight;
      } else {
        zero = Math.min(Math.max(0, group.zeroPosition), svgHeight);
      }

      if (group.options.shaded.orientation == 'group' && subPathArray != null && subPathArray != undefined) {
        dFill = 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false) + ' L' + subPathArray[subPathArray.length - 1][0] + "," + subPathArray[subPathArray.length - 1][1] + " " + this.serializePath(subPathArray, type, true) + subPathArray[0][0] + "," + subPathArray[0][1] + " Z";
      } else {
        dFill = 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false) + ' V' + zero + ' H' + pathArray[0][0] + " Z";
      }

      fillPath.setAttributeNS(null, 'class', group.className + ' vis-fill');

      if (group.options.shaded.style !== undefined) {
        fillPath.setAttributeNS(null, 'style', group.options.shaded.style);
      }

      fillPath.setAttributeNS(null, 'd', dFill);
    }
  };
  /**
   * draw a line graph
   *
   * @param {Array.<Object>} pathArray
   * @param {vis.Group} group
   * @param {{svg: Object, svgElements: Array.<Object>, options: Object, groups: Array.<vis.Group>}} framework
   */


  Line.draw = function (pathArray, group, framework) {
    if (pathArray != null && pathArray != undefined) {
      var path = DOMutil$1.getSVGElement('path', framework.svgElements, framework.svg);
      path.setAttributeNS(null, "class", group.className);

      if (group.style !== undefined) {
        path.setAttributeNS(null, "style", group.style);
      }

      var type = "L";

      if (group.options.interpolation.enabled == true) {
        type = "C";
      } // copy properties to path for drawing.


      path.setAttributeNS(null, 'd', 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false));
    }
  };

  Line.serializePath = function (pathArray, type, inverse) {
    if (pathArray.length < 2) {
      //Too little data to create a path.
      return "";
    }

    var d = type;
    var i;

    if (inverse) {
      for (i = pathArray.length - 2; i > 0; i--) {
        d += pathArray[i][0] + "," + pathArray[i][1] + " ";
      }
    } else {
      for (i = 1; i < pathArray.length; i++) {
        d += pathArray[i][0] + "," + pathArray[i][1] + " ";
      }
    }

    return d;
  };
  /**
   * This uses an uniform parametrization of the interpolation algorithm:
   * 'On the Parameterization of Catmull-Rom Curves' by Cem Yuksel et al.
   * @param {Array.<Object>} data
   * @returns {string}
   * @private
   */


  Line._catmullRomUniform = function (data) {
    // catmull rom
    var p0, p1, p2, p3, bp1, bp2;
    var d = [];
    d.push([Math.round(data[0].screen_x), Math.round(data[0].screen_y)]);
    var normalization = 1 / 6;
    var length = data.length;

    for (var i = 0; i < length - 1; i++) {
      p0 = i == 0 ? data[0] : data[i - 1];
      p1 = data[i];
      p2 = data[i + 1];
      p3 = i + 2 < length ? data[i + 2] : p2; // Catmull-Rom to Cubic Bezier conversion matrix
      //    0       1       0       0
      //  -1/6      1      1/6      0
      //    0      1/6      1     -1/6
      //    0       0       1       0
      //    bp0 = { x: p1.x,                               y: p1.y };

      bp1 = {
        screen_x: (-p0.screen_x + 6 * p1.screen_x + p2.screen_x) * normalization,
        screen_y: (-p0.screen_y + 6 * p1.screen_y + p2.screen_y) * normalization
      };
      bp2 = {
        screen_x: (p1.screen_x + 6 * p2.screen_x - p3.screen_x) * normalization,
        screen_y: (p1.screen_y + 6 * p2.screen_y - p3.screen_y) * normalization
      }; //    bp0 = { x: p2.x,                               y: p2.y };

      d.push([bp1.screen_x, bp1.screen_y]);
      d.push([bp2.screen_x, bp2.screen_y]);
      d.push([p2.screen_x, p2.screen_y]);
    }

    return d;
  };
  /**
   * This uses either the chordal or centripetal parameterization of the catmull-rom algorithm.
   * By default, the centripetal parameterization is used because this gives the nicest results.
   * These parameterizations are relatively heavy because the distance between 4 points have to be calculated.
   *
   * One optimization can be used to reuse distances since this is a sliding window approach.
   * @param {Array.<Object>} data
   * @param {vis.GraphGroup} group
   * @returns {string}
   * @private
   */


  Line._catmullRom = function (data, group) {
    var alpha = group.options.interpolation.alpha;

    if (alpha == 0 || alpha === undefined) {
      return this._catmullRomUniform(data);
    } else {
      var p0, p1, p2, p3, bp1, bp2, d1, d2, d3, A, B, N, M;
      var d3powA, d2powA, d3pow2A, d2pow2A, d1pow2A, d1powA;
      var d = [];
      d.push([Math.round(data[0].screen_x), Math.round(data[0].screen_y)]);
      var length = data.length;

      for (var i = 0; i < length - 1; i++) {
        p0 = i == 0 ? data[0] : data[i - 1];
        p1 = data[i];
        p2 = data[i + 1];
        p3 = i + 2 < length ? data[i + 2] : p2;
        d1 = Math.sqrt(Math.pow(p0.screen_x - p1.screen_x, 2) + Math.pow(p0.screen_y - p1.screen_y, 2));
        d2 = Math.sqrt(Math.pow(p1.screen_x - p2.screen_x, 2) + Math.pow(p1.screen_y - p2.screen_y, 2));
        d3 = Math.sqrt(Math.pow(p2.screen_x - p3.screen_x, 2) + Math.pow(p2.screen_y - p3.screen_y, 2)); // Catmull-Rom to Cubic Bezier conversion matrix
        // A = 2d1^2a + 3d1^a * d2^a + d3^2a
        // B = 2d3^2a + 3d3^a * d2^a + d2^2a
        // [   0             1            0          0          ]
        // [   -d2^2a /N     A/N          d1^2a /N   0          ]
        // [   0             d3^2a /M     B/M        -d2^2a /M  ]
        // [   0             0            1          0          ]

        d3powA = Math.pow(d3, alpha);
        d3pow2A = Math.pow(d3, 2 * alpha);
        d2powA = Math.pow(d2, alpha);
        d2pow2A = Math.pow(d2, 2 * alpha);
        d1powA = Math.pow(d1, alpha);
        d1pow2A = Math.pow(d1, 2 * alpha);
        A = 2 * d1pow2A + 3 * d1powA * d2powA + d2pow2A;
        B = 2 * d3pow2A + 3 * d3powA * d2powA + d2pow2A;
        N = 3 * d1powA * (d1powA + d2powA);

        if (N > 0) {
          N = 1 / N;
        }

        M = 3 * d3powA * (d3powA + d2powA);

        if (M > 0) {
          M = 1 / M;
        }

        bp1 = {
          screen_x: (-d2pow2A * p0.screen_x + A * p1.screen_x + d1pow2A * p2.screen_x) * N,
          screen_y: (-d2pow2A * p0.screen_y + A * p1.screen_y + d1pow2A * p2.screen_y) * N
        };
        bp2 = {
          screen_x: (d3pow2A * p1.screen_x + B * p2.screen_x - d2pow2A * p3.screen_x) * M,
          screen_y: (d3pow2A * p1.screen_y + B * p2.screen_y - d2pow2A * p3.screen_y) * M
        };

        if (bp1.screen_x == 0 && bp1.screen_y == 0) {
          bp1 = p1;
        }

        if (bp2.screen_x == 0 && bp2.screen_y == 0) {
          bp2 = p2;
        }

        d.push([bp1.screen_x, bp1.screen_y]);
        d.push([bp2.screen_x, bp2.screen_y]);
        d.push([p2.screen_x, p2.screen_y]);
      }

      return d;
    }
  };
  /**
   * this generates the SVG path for a linear drawing between datapoints.
   * @param {Array.<Object>} data
   * @returns {string}
   * @private
   */


  Line._linear = function (data) {
    // linear
    var d = [];

    for (var i = 0; i < data.length; i++) {
      d.push([data[i].screen_x, data[i].screen_y]);
    }

    return d;
  };

  var line = Line;

  /**
   * /**
   * @param {object} group            | the object of the group from the dataset
   * @param {string} groupId          | ID of the group
   * @param {object} options          | the default options
   * @param {array} groupsUsingDefaultStyles  | this array has one entree.
   *                                            It is passed as an array so it is passed by reference.
   *                                            It enumerates through the default styles
   * @constructor GraphGroup
   */

  function GraphGroup(group, groupId, options, groupsUsingDefaultStyles) {
    this.id = groupId;
    var fields = ['sampling', 'style', 'sort', 'yAxisOrientation', 'barChart', 'drawPoints', 'shaded', 'interpolation', 'zIndex', 'excludeFromStacking', 'excludeFromLegend'];
    this.options = util.selectiveBridgeObject(fields, options);
    this.usingDefaultStyle = group.className === undefined;
    this.groupsUsingDefaultStyles = groupsUsingDefaultStyles;
    this.zeroPosition = 0;
    this.update(group);

    if (this.usingDefaultStyle == true) {
      this.groupsUsingDefaultStyles[0] += 1;
    }

    this.itemsData = [];
    this.visible = group.visible === undefined ? true : group.visible;
  }
  /**
   * this loads a reference to all items in this group into this group.
   * @param {array} items
   */


  GraphGroup.prototype.setItems = function (items) {
    if (items != null) {
      this.itemsData = items;

      if (this.options.sort == true) {
        util.insertSort(this.itemsData, function (a, b) {
          return a.x > b.x ? 1 : -1;
        });
      }
    } else {
      this.itemsData = [];
    }
  };

  GraphGroup.prototype.getItems = function () {
    return this.itemsData;
  };
  /**
   * this is used for barcharts and shading, this way, we only have to calculate it once.
   * @param {number} pos
   */


  GraphGroup.prototype.setZeroPosition = function (pos) {
    this.zeroPosition = pos;
  };
  /**
   * set the options of the graph group over the default options.
   * @param {Object} options
   */


  GraphGroup.prototype.setOptions = function (options) {
    if (options !== undefined) {
      var fields = ['sampling', 'style', 'sort', 'yAxisOrientation', 'barChart', 'zIndex', 'excludeFromStacking', 'excludeFromLegend'];
      util.selectiveDeepExtend(fields, this.options, options); // if the group's drawPoints is a function delegate the callback to the onRender property

      if (typeof options.drawPoints == 'function') {
        options.drawPoints = {
          onRender: options.drawPoints
        };
      }

      util.mergeOptions(this.options, options, 'interpolation');
      util.mergeOptions(this.options, options, 'drawPoints');
      util.mergeOptions(this.options, options, 'shaded');

      if (options.interpolation) {
        if (typeof options.interpolation == 'object') {
          if (options.interpolation.parametrization) {
            if (options.interpolation.parametrization == 'uniform') {
              this.options.interpolation.alpha = 0;
            } else if (options.interpolation.parametrization == 'chordal') {
              this.options.interpolation.alpha = 1.0;
            } else {
              this.options.interpolation.parametrization = 'centripetal';
              this.options.interpolation.alpha = 0.5;
            }
          }
        }
      }
    }
  };
  /**
   * this updates the current group class with the latest group dataset entree, used in _updateGroup in linegraph
   * @param {vis.Group} group
   */


  GraphGroup.prototype.update = function (group) {
    this.group = group;
    this.content = group.content || 'graph';
    this.className = group.className || this.className || 'vis-graph-group' + this.groupsUsingDefaultStyles[0] % 10;
    this.visible = group.visible === undefined ? true : group.visible;
    this.style = group.style;
    this.setOptions(group.options);
  };
  /**
   * return the legend entree for this group.
   *
   * @param {number} iconWidth
   * @param {number} iconHeight
   * @param {{svg: (*|Element), svgElements: Object, options: Object, groups: Array.<Object>}} framework
   * @param {number} x
   * @param {number} y
   * @returns {{icon: (*|Element), label: (*|string), orientation: *}}
   */


  GraphGroup.prototype.getLegend = function (iconWidth, iconHeight, framework, x, y) {
    if (framework == undefined || framework == null) {
      var svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
      framework = {
        svg: svg,
        svgElements: {},
        options: this.options,
        groups: [this]
      };
    }

    if (x == undefined || x == null) {
      x = 0;
    }

    if (y == undefined || y == null) {
      y = 0.5 * iconHeight;
    }

    switch (this.options.style) {
      case "line":
        line.drawIcon(this, x, y, iconWidth, iconHeight, framework);
        break;

      case "points": //explicit no break

      case "point":
        points.drawIcon(this, x, y, iconWidth, iconHeight, framework);
        break;

      case "bar":
        bar.drawIcon(this, x, y, iconWidth, iconHeight, framework);
        break;
    }

    return {
      icon: framework.svg,
      label: this.content,
      orientation: this.options.yAxisOrientation
    };
  };

  GraphGroup.prototype.getYRange = function (groupData) {
    var yMin = groupData[0].y;
    var yMax = groupData[0].y;

    for (var j = 0; j < groupData.length; j++) {
      yMin = yMin > groupData[j].y ? groupData[j].y : yMin;
      yMax = yMax < groupData[j].y ? groupData[j].y : yMax;
    }

    return {
      min: yMin,
      max: yMax,
      yAxisOrientation: this.options.yAxisOrientation
    };
  };

  var GraphGroup_1 = GraphGroup;

  /**
   * Legend for Graph2d
   *
   * @param {vis.Graph2d.body} body
   * @param {vis.Graph2d.options} options
   * @param {number} side
   * @param {vis.LineGraph.options} linegraphOptions
   * @constructor Legend
   * @extends Component
   */

  function Legend(body, options, side, linegraphOptions) {
    this.body = body;
    this.defaultOptions = {
      enabled: false,
      icons: true,
      iconSize: 20,
      iconSpacing: 6,
      left: {
        visible: true,
        position: 'top-left' // top/bottom - left,center,right

      },
      right: {
        visible: true,
        position: 'top-right' // top/bottom - left,center,right

      }
    };
    this.side = side;
    this.options = util.extend({}, this.defaultOptions);
    this.linegraphOptions = linegraphOptions;
    this.svgElements = {};
    this.dom = {};
    this.groups = {};
    this.amountOfGroups = 0;

    this._create();

    this.framework = {
      svg: this.svg,
      svgElements: this.svgElements,
      options: this.options,
      groups: this.groups
    };
    this.setOptions(options);
  }

  Legend.prototype = new Component_1();

  Legend.prototype.clear = function () {
    this.groups = {};
    this.amountOfGroups = 0;
  };

  Legend.prototype.addGroup = function (label, graphOptions) {
    // Include a group only if the group option 'excludeFromLegend: false' is not set.
    if (graphOptions.options.excludeFromLegend != true) {
      if (!this.groups.hasOwnProperty(label)) {
        this.groups[label] = graphOptions;
      }

      this.amountOfGroups += 1;
    }
  };

  Legend.prototype.updateGroup = function (label, graphOptions) {
    this.groups[label] = graphOptions;
  };

  Legend.prototype.removeGroup = function (label) {
    if (this.groups.hasOwnProperty(label)) {
      delete this.groups[label];
      this.amountOfGroups -= 1;
    }
  };

  Legend.prototype._create = function () {
    this.dom.frame = document.createElement('div');
    this.dom.frame.className = 'vis-legend';
    this.dom.frame.style.position = "absolute";
    this.dom.frame.style.top = "10px";
    this.dom.frame.style.display = "block";
    this.dom.textArea = document.createElement('div');
    this.dom.textArea.className = 'vis-legend-text';
    this.dom.textArea.style.position = "relative";
    this.dom.textArea.style.top = "0px";
    this.svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
    this.svg.style.position = 'absolute';
    this.svg.style.top = 0 + 'px';
    this.svg.style.width = this.options.iconSize + 5 + 'px';
    this.svg.style.height = '100%';
    this.dom.frame.appendChild(this.svg);
    this.dom.frame.appendChild(this.dom.textArea);
  };
  /**
   * Hide the component from the DOM
   */


  Legend.prototype.hide = function () {
    // remove the frame containing the items
    if (this.dom.frame.parentNode) {
      this.dom.frame.parentNode.removeChild(this.dom.frame);
    }
  };
  /**
   * Show the component in the DOM (when not already visible).
   */


  Legend.prototype.show = function () {
    // show frame containing the items
    if (!this.dom.frame.parentNode) {
      this.body.dom.center.appendChild(this.dom.frame);
    }
  };

  Legend.prototype.setOptions = function (options) {
    var fields = ['enabled', 'orientation', 'icons', 'left', 'right'];
    util.selectiveDeepExtend(fields, this.options, options);
  };

  Legend.prototype.redraw = function () {
    var activeGroups = 0;
    var groupArray = Object.keys(this.groups);
    groupArray.sort(function (a, b) {
      return a < b ? -1 : 1;
    });

    for (var i = 0; i < groupArray.length; i++) {
      var groupId = groupArray[i];

      if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
        activeGroups++;
      }
    }

    if (this.options[this.side].visible == false || this.amountOfGroups == 0 || this.options.enabled == false || activeGroups == 0) {
      this.hide();
    } else {
      this.show();

      if (this.options[this.side].position == 'top-left' || this.options[this.side].position == 'bottom-left') {
        this.dom.frame.style.left = '4px';
        this.dom.frame.style.textAlign = "left";
        this.dom.textArea.style.textAlign = "left";
        this.dom.textArea.style.left = this.options.iconSize + 15 + 'px';
        this.dom.textArea.style.right = '';
        this.svg.style.left = 0 + 'px';
        this.svg.style.right = '';
      } else {
        this.dom.frame.style.right = '4px';
        this.dom.frame.style.textAlign = "right";
        this.dom.textArea.style.textAlign = "right";
        this.dom.textArea.style.right = this.options.iconSize + 15 + 'px';
        this.dom.textArea.style.left = '';
        this.svg.style.right = 0 + 'px';
        this.svg.style.left = '';
      }

      if (this.options[this.side].position == 'top-left' || this.options[this.side].position == 'top-right') {
        this.dom.frame.style.top = 4 - Number(this.body.dom.center.style.top.replace("px", "")) + 'px';
        this.dom.frame.style.bottom = '';
      } else {
        var scrollableHeight = this.body.domProps.center.height - this.body.domProps.centerContainer.height;
        this.dom.frame.style.bottom = 4 + scrollableHeight + Number(this.body.dom.center.style.top.replace("px", "")) + 'px';
        this.dom.frame.style.top = '';
      }

      if (this.options.icons == false) {
        this.dom.frame.style.width = this.dom.textArea.offsetWidth + 10 + 'px';
        this.dom.textArea.style.right = '';
        this.dom.textArea.style.left = '';
        this.svg.style.width = '0px';
      } else {
        this.dom.frame.style.width = this.options.iconSize + 15 + this.dom.textArea.offsetWidth + 10 + 'px';
        this.drawLegendIcons();
      }

      var content = '';

      for (i = 0; i < groupArray.length; i++) {
        groupId = groupArray[i];

        if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
          content += this.groups[groupId].content + '<br />';
        }
      }

      this.dom.textArea.innerHTML = content;
      this.dom.textArea.style.lineHeight = 0.75 * this.options.iconSize + this.options.iconSpacing + 'px';
    }
  };

  Legend.prototype.drawLegendIcons = function () {
    if (this.dom.frame.parentNode) {
      var groupArray = Object.keys(this.groups);
      groupArray.sort(function (a, b) {
        return a < b ? -1 : 1;
      }); // this resets the elements so the order is maintained

      DOMutil$1.resetElements(this.svgElements);
      var padding = window.getComputedStyle(this.dom.frame).paddingTop;
      var iconOffset = Number(padding.replace('px', ''));
      var x = iconOffset;
      var iconWidth = this.options.iconSize;
      var iconHeight = 0.75 * this.options.iconSize;
      var y = iconOffset + 0.5 * iconHeight + 3;
      this.svg.style.width = iconWidth + 5 + iconOffset + 'px';

      for (var i = 0; i < groupArray.length; i++) {
        var groupId = groupArray[i];

        if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
          this.groups[groupId].getLegend(iconWidth, iconHeight, this.framework, x, y);
          y += iconHeight + this.options.iconSpacing;
        }
      }
    }
  };

  var Legend_1 = Legend;

  var {
    DataSet: DataSet$3
  } = index;
  var {
    DataView: DataView$4
  } = index;
  var UNGROUPED$1 = '__ungrouped__'; // reserved group id for ungrouped items

  /**
   * This is the constructor of the LineGraph. It requires a Timeline body and options.
   *
   * @param {vis.Timeline.body} body
   * @param {Object} options
   * @constructor LineGraph
   * @extends Component
   */

  function LineGraph(body, options) {
    this.id = util.randomUUID();
    this.body = body;
    this.defaultOptions = {
      yAxisOrientation: 'left',
      defaultGroup: 'default',
      sort: true,
      sampling: true,
      stack: false,
      graphHeight: '400px',
      shaded: {
        enabled: false,
        orientation: 'bottom' // top, bottom, zero

      },
      style: 'line',
      // line, bar
      barChart: {
        width: 50,
        sideBySide: false,
        align: 'center' // left, center, right

      },
      interpolation: {
        enabled: true,
        parametrization: 'centripetal',
        // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
        alpha: 0.5
      },
      drawPoints: {
        enabled: true,
        size: 6,
        style: 'square' // square, circle

      },
      dataAxis: {},
      //Defaults are done on DataAxis level
      legend: {},
      //Defaults are done on Legend level
      groups: {
        visibility: {}
      }
    }; // options is shared by this lineGraph and all its items

    this.options = util.extend({}, this.defaultOptions);
    this.dom = {};
    this.props = {};
    this.hammer = null;
    this.groups = {};
    this.abortedGraphUpdate = false;
    this.updateSVGheight = false;
    this.updateSVGheightOnResize = false;
    this.forceGraphUpdate = true;
    var me = this;
    this.itemsData = null; // DataSet

    this.groupsData = null; // DataSet
    // listeners for the DataSet of the items

    this.itemListeners = {
      'add': function (event, params, senderId) {
        // eslint-disable-line no-unused-vars
        me._onAdd(params.items);
      },
      'update': function (event, params, senderId) {
        // eslint-disable-line no-unused-vars
        me._onUpdate(params.items);
      },
      'remove': function (event, params, senderId) {
        // eslint-disable-line no-unused-vars
        me._onRemove(params.items);
      }
    }; // listeners for the DataSet of the groups

    this.groupListeners = {
      'add': function (event, params, senderId) {
        // eslint-disable-line no-unused-vars
        me._onAddGroups(params.items);
      },
      'update': function (event, params, senderId) {
        // eslint-disable-line no-unused-vars
        me._onUpdateGroups(params.items);
      },
      'remove': function (event, params, senderId) {
        // eslint-disable-line no-unused-vars
        me._onRemoveGroups(params.items);
      }
    };
    this.items = {}; // object with an Item for every data item

    this.selection = []; // list with the ids of all selected nodes

    this.lastStart = this.body.range.start;
    this.touchParams = {}; // stores properties while dragging

    this.svgElements = {};
    this.setOptions(options);
    this.groupsUsingDefaultStyles = [0];
    this.body.emitter.on('rangechanged', function () {
      me.lastStart = me.body.range.start;
      me.svg.style.left = util.option.asSize(-me.props.width);
      me.forceGraphUpdate = true; //Is this local redraw necessary? (Core also does a change event!)

      me.redraw.call(me);
    }); // create the HTML DOM

    this._create();

    this.framework = {
      svg: this.svg,
      svgElements: this.svgElements,
      options: this.options,
      groups: this.groups
    };
  }

  LineGraph.prototype = new Component_1();
  /**
   * Create the HTML DOM for the ItemSet
   */

  LineGraph.prototype._create = function () {
    var frame = document.createElement('div');
    frame.className = 'vis-line-graph';
    this.dom.frame = frame; // create svg element for graph drawing.

    this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    this.svg.style.position = 'relative';
    this.svg.style.height = ('' + this.options.graphHeight).replace('px', '') + 'px';
    this.svg.style.display = 'block';
    frame.appendChild(this.svg); // data axis

    this.options.dataAxis.orientation = 'left';
    this.yAxisLeft = new DataAxis(this.body, this.options.dataAxis, this.svg, this.options.groups);
    this.options.dataAxis.orientation = 'right';
    this.yAxisRight = new DataAxis(this.body, this.options.dataAxis, this.svg, this.options.groups);
    delete this.options.dataAxis.orientation; // legends

    this.legendLeft = new Legend_1(this.body, this.options.legend, 'left', this.options.groups);
    this.legendRight = new Legend_1(this.body, this.options.legend, 'right', this.options.groups);
    this.show();
  };
  /**
   * set the options of the LineGraph. the mergeOptions is used for subObjects that have an enabled element.
   * @param {object} options
   */


  LineGraph.prototype.setOptions = function (options) {
    if (options) {
      var fields = ['sampling', 'defaultGroup', 'stack', 'height', 'graphHeight', 'yAxisOrientation', 'style', 'barChart', 'dataAxis', 'sort', 'groups'];

      if (options.graphHeight === undefined && options.height !== undefined) {
        this.updateSVGheight = true;
        this.updateSVGheightOnResize = true;
      } else if (this.body.domProps.centerContainer.height !== undefined && options.graphHeight !== undefined) {
        if (parseInt((options.graphHeight + '').replace("px", '')) < this.body.domProps.centerContainer.height) {
          this.updateSVGheight = true;
        }
      }

      util.selectiveDeepExtend(fields, this.options, options);
      util.mergeOptions(this.options, options, 'interpolation');
      util.mergeOptions(this.options, options, 'drawPoints');
      util.mergeOptions(this.options, options, 'shaded');
      util.mergeOptions(this.options, options, 'legend');

      if (options.interpolation) {
        if (typeof options.interpolation == 'object') {
          if (options.interpolation.parametrization) {
            if (options.interpolation.parametrization == 'uniform') {
              this.options.interpolation.alpha = 0;
            } else if (options.interpolation.parametrization == 'chordal') {
              this.options.interpolation.alpha = 1.0;
            } else {
              this.options.interpolation.parametrization = 'centripetal';
              this.options.interpolation.alpha = 0.5;
            }
          }
        }
      }

      if (this.yAxisLeft) {
        if (options.dataAxis !== undefined) {
          this.yAxisLeft.setOptions(this.options.dataAxis);
          this.yAxisRight.setOptions(this.options.dataAxis);
        }
      }

      if (this.legendLeft) {
        if (options.legend !== undefined) {
          this.legendLeft.setOptions(this.options.legend);
          this.legendRight.setOptions(this.options.legend);
        }
      }

      if (this.groups.hasOwnProperty(UNGROUPED$1)) {
        this.groups[UNGROUPED$1].setOptions(options);
      }
    } // this is used to redraw the graph if the visibility of the groups is changed.


    if (this.dom.frame) {
      //not on initial run?
      this.forceGraphUpdate = true;
      this.body.emitter.emit("_change", {
        queue: true
      });
    }
  };
  /**
   * Hide the component from the DOM
   */


  LineGraph.prototype.hide = function () {
    // remove the frame containing the items
    if (this.dom.frame.parentNode) {
      this.dom.frame.parentNode.removeChild(this.dom.frame);
    }
  };
  /**
   * Show the component in the DOM (when not already visible).
   */


  LineGraph.prototype.show = function () {
    // show frame containing the items
    if (!this.dom.frame.parentNode) {
      this.body.dom.center.appendChild(this.dom.frame);
    }
  };
  /**
   * Set items
   * @param {vis.DataSet | null} items
   */


  LineGraph.prototype.setItems = function (items) {
    var me = this,
        ids,
        oldItemsData = this.itemsData; // replace the dataset

    if (!items) {
      this.itemsData = null;
    } else if (items instanceof DataSet$3 || items instanceof DataView$4) {
      this.itemsData = items;
    } else {
      throw new TypeError('Data must be an instance of DataSet or DataView');
    }

    if (oldItemsData) {
      // unsubscribe from old dataset
      util.forEach(this.itemListeners, function (callback, event) {
        oldItemsData.off(event, callback);
      }); // remove all drawn items

      ids = oldItemsData.getIds();

      this._onRemove(ids);
    }

    if (this.itemsData) {
      // subscribe to new dataset
      var id = this.id;
      util.forEach(this.itemListeners, function (callback, event) {
        me.itemsData.on(event, callback, id);
      }); // add all new items

      ids = this.itemsData.getIds();

      this._onAdd(ids);
    }
  };
  /**
   * Set groups
   * @param {vis.DataSet} groups
   */


  LineGraph.prototype.setGroups = function (groups) {
    var me = this;
    var ids; // unsubscribe from current dataset

    if (this.groupsData) {
      util.forEach(this.groupListeners, function (callback, event) {
        me.groupsData.off(event, callback);
      }); // remove all drawn groups

      ids = this.groupsData.getIds();
      this.groupsData = null;

      for (var i = 0; i < ids.length; i++) {
        this._removeGroup(ids[i]);
      }
    } // replace the dataset


    if (!groups) {
      this.groupsData = null;
    } else if (groups instanceof DataSet$3 || groups instanceof DataView$4) {
      this.groupsData = groups;
    } else {
      throw new TypeError('Data must be an instance of DataSet or DataView');
    }

    if (this.groupsData) {
      // subscribe to new dataset
      var id = this.id;
      util.forEach(this.groupListeners, function (callback, event) {
        me.groupsData.on(event, callback, id);
      }); // draw all ms

      ids = this.groupsData.getIds();

      this._onAddGroups(ids);
    }
  };

  LineGraph.prototype._onUpdate = function (ids) {
    this._updateAllGroupData(ids);
  };

  LineGraph.prototype._onAdd = function (ids) {
    this._onUpdate(ids);
  };

  LineGraph.prototype._onRemove = function (ids) {
    this._onUpdate(ids);
  };

  LineGraph.prototype._onUpdateGroups = function (groupIds) {
    this._updateAllGroupData(null, groupIds);
  };

  LineGraph.prototype._onAddGroups = function (groupIds) {
    this._onUpdateGroups(groupIds);
  };
  /**
   * this cleans the group out off the legends and the dataaxis, updates the ungrouped and updates the graph
   * @param {Array} groupIds
   * @private
   */


  LineGraph.prototype._onRemoveGroups = function (groupIds) {
    for (var i = 0; i < groupIds.length; i++) {
      this._removeGroup(groupIds[i]);
    }

    this.forceGraphUpdate = true;
    this.body.emitter.emit("_change", {
      queue: true
    });
  };
  /**
   * this cleans the group out off the legends and the dataaxis
   * @param {vis.GraphGroup.id} groupId
   * @private
   */


  LineGraph.prototype._removeGroup = function (groupId) {
    if (this.groups.hasOwnProperty(groupId)) {
      if (this.groups[groupId].options.yAxisOrientation == 'right') {
        this.yAxisRight.removeGroup(groupId);
        this.legendRight.removeGroup(groupId);
        this.legendRight.redraw();
      } else {
        this.yAxisLeft.removeGroup(groupId);
        this.legendLeft.removeGroup(groupId);
        this.legendLeft.redraw();
      }

      delete this.groups[groupId];
    }
  };
  /**
   * update a group object with the group dataset entree
   *
   * @param {vis.GraphGroup} group
   * @param {vis.GraphGroup.id} groupId
   * @private
   */


  LineGraph.prototype._updateGroup = function (group, groupId) {
    if (!this.groups.hasOwnProperty(groupId)) {
      this.groups[groupId] = new GraphGroup_1(group, groupId, this.options, this.groupsUsingDefaultStyles);

      if (this.groups[groupId].options.yAxisOrientation == 'right') {
        this.yAxisRight.addGroup(groupId, this.groups[groupId]);
        this.legendRight.addGroup(groupId, this.groups[groupId]);
      } else {
        this.yAxisLeft.addGroup(groupId, this.groups[groupId]);
        this.legendLeft.addGroup(groupId, this.groups[groupId]);
      }
    } else {
      this.groups[groupId].update(group);

      if (this.groups[groupId].options.yAxisOrientation == 'right') {
        this.yAxisRight.updateGroup(groupId, this.groups[groupId]);
        this.legendRight.updateGroup(groupId, this.groups[groupId]); //If yAxisOrientation changed, clean out the group from the other axis.

        this.yAxisLeft.removeGroup(groupId);
        this.legendLeft.removeGroup(groupId);
      } else {
        this.yAxisLeft.updateGroup(groupId, this.groups[groupId]);
        this.legendLeft.updateGroup(groupId, this.groups[groupId]); //If yAxisOrientation changed, clean out the group from the other axis.

        this.yAxisRight.removeGroup(groupId);
        this.legendRight.removeGroup(groupId);
      }
    }

    this.legendLeft.redraw();
    this.legendRight.redraw();
  };
  /**
   * this updates all groups, it is used when there is an update the the itemset.
   *
   * @param  {Array} ids
   * @param  {Array} groupIds
   * @private
   */


  LineGraph.prototype._updateAllGroupData = function (ids, groupIds) {
    if (this.itemsData != null) {
      var groupsContent = {};
      var items = this.itemsData.get();
      var fieldId = this.itemsData._fieldId;
      var idMap = {};

      if (ids) {
        ids.map(function (id) {
          idMap[id] = id;
        });
      } //pre-Determine array sizes, for more efficient memory claim


      var groupCounts = {};

      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var groupId = item.group;

        if (groupId === null || groupId === undefined) {
          groupId = UNGROUPED$1;
        }

        groupCounts.hasOwnProperty(groupId) ? groupCounts[groupId]++ : groupCounts[groupId] = 1;
      } //Pre-load arrays from existing groups if items are not changed (not in ids)


      var existingItemsMap = {};

      if (!groupIds && ids) {
        for (groupId in this.groups) {
          if (this.groups.hasOwnProperty(groupId)) {
            group = this.groups[groupId];
            var existing_items = group.getItems();
            groupsContent[groupId] = existing_items.filter(function (item) {
              existingItemsMap[item[fieldId]] = item[fieldId];
              return item[fieldId] !== idMap[item[fieldId]];
            });
            var newLength = groupCounts[groupId];
            groupCounts[groupId] -= groupsContent[groupId].length;

            if (groupsContent[groupId].length < newLength) {
              groupsContent[groupId][newLength - 1] = {};
            }
          }
        }
      } //Now insert data into the arrays.


      for (i = 0; i < items.length; i++) {
        item = items[i];
        groupId = item.group;

        if (groupId === null || groupId === undefined) {
          groupId = UNGROUPED$1;
        }

        if (!groupIds && ids && item[fieldId] !== idMap[item[fieldId]] && existingItemsMap.hasOwnProperty(item[fieldId])) {
          continue;
        }

        if (!groupsContent.hasOwnProperty(groupId)) {
          groupsContent[groupId] = new Array(groupCounts[groupId]);
        } //Copy data (because of unmodifiable DataView input.


        var extended = util.bridgeObject(item);
        extended.x = util.convert(item.x, 'Date');
        extended.end = util.convert(item.end, 'Date');
        extended.orginalY = item.y; //real Y

        extended.y = Number(item.y);
        extended[fieldId] = item[fieldId];
        var index = groupsContent[groupId].length - groupCounts[groupId]--;
        groupsContent[groupId][index] = extended;
      } //Make sure all groups are present, to allow removal of old groups


      for (groupId in this.groups) {
        if (this.groups.hasOwnProperty(groupId)) {
          if (!groupsContent.hasOwnProperty(groupId)) {
            groupsContent[groupId] = new Array(0);
          }
        }
      } //Update legendas, style and axis


      for (groupId in groupsContent) {
        if (groupsContent.hasOwnProperty(groupId)) {
          if (groupsContent[groupId].length == 0) {
            if (this.groups.hasOwnProperty(groupId)) {
              this._removeGroup(groupId);
            }
          } else {
            var group = undefined;

            if (this.groupsData != undefined) {
              group = this.groupsData.get(groupId);
            }

            if (group == undefined) {
              group = {
                id: groupId,
                content: this.options.defaultGroup + groupId
              };
            }

            this._updateGroup(group, groupId);

            this.groups[groupId].setItems(groupsContent[groupId]);
          }
        }
      }

      this.forceGraphUpdate = true;
      this.body.emitter.emit("_change", {
        queue: true
      });
    }
  };
  /**
   * Redraw the component, mandatory function
   * @return {boolean} Returns true if the component is resized
   */


  LineGraph.prototype.redraw = function () {
    var resized = false; // calculate actual size and position

    this.props.width = this.dom.frame.offsetWidth;
    this.props.height = this.body.domProps.centerContainer.height - this.body.domProps.border.top - this.body.domProps.border.bottom; // check if this component is resized

    resized = this._isResized() || resized; // check whether zoomed (in that case we need to re-stack everything)

    var visibleInterval = this.body.range.end - this.body.range.start;
    var zoomed = visibleInterval != this.lastVisibleInterval;
    this.lastVisibleInterval = visibleInterval; // the svg element is three times as big as the width, this allows for fully dragging left and right
    // without reloading the graph. the controls for this are bound to events in the constructor

    if (resized == true) {
      this.svg.style.width = util.option.asSize(3 * this.props.width);
      this.svg.style.left = util.option.asSize(-this.props.width); // if the height of the graph is set as proportional, change the height of the svg

      if ((this.options.height + '').indexOf("%") != -1 || this.updateSVGheightOnResize == true) {
        this.updateSVGheight = true;
      }
    } // update the height of the graph on each redraw of the graph.


    if (this.updateSVGheight == true) {
      if (this.options.graphHeight != this.props.height + 'px') {
        this.options.graphHeight = this.props.height + 'px';
        this.svg.style.height = this.props.height + 'px';
      }

      this.updateSVGheight = false;
    } else {
      this.svg.style.height = ('' + this.options.graphHeight).replace('px', '') + 'px';
    } // zoomed is here to ensure that animations are shown correctly.


    if (resized == true || zoomed == true || this.abortedGraphUpdate == true || this.forceGraphUpdate == true) {
      resized = this._updateGraph() || resized;
      this.forceGraphUpdate = false;
    } else {
      // move the whole svg while dragging
      if (this.lastStart != 0) {
        var offset = this.body.range.start - this.lastStart;
        var range = this.body.range.end - this.body.range.start;

        if (this.props.width != 0) {
          var rangePerPixelInv = this.props.width / range;
          var xOffset = offset * rangePerPixelInv;
          this.svg.style.left = -this.props.width - xOffset + 'px';
        }
      }
    }

    this.legendLeft.redraw();
    this.legendRight.redraw();
    return resized;
  };

  LineGraph.prototype._getSortedGroupIds = function () {
    // getting group Ids
    var grouplist = [];

    for (var groupId in this.groups) {
      if (this.groups.hasOwnProperty(groupId)) {
        var group = this.groups[groupId];

        if (group.visible == true && (this.options.groups.visibility[groupId] === undefined || this.options.groups.visibility[groupId] == true)) {
          grouplist.push({
            id: groupId,
            zIndex: group.options.zIndex
          });
        }
      }
    }

    util.insertSort(grouplist, function (a, b) {
      var az = a.zIndex;
      var bz = b.zIndex;
      if (az === undefined) az = 0;
      if (bz === undefined) bz = 0;
      return az == bz ? 0 : az < bz ? -1 : 1;
    });
    var groupIds = new Array(grouplist.length);

    for (var i = 0; i < grouplist.length; i++) {
      groupIds[i] = grouplist[i].id;
    }

    return groupIds;
  };
  /**
   * Update and redraw the graph.
   *
   * @returns {boolean}
   * @private
   */


  LineGraph.prototype._updateGraph = function () {
    // reset the svg elements
    DOMutil$1.prepareElements(this.svgElements);

    if (this.props.width != 0 && this.itemsData != null) {
      var group, i;
      var groupRanges = {};
      var changeCalled = false; // this is the range of the SVG canvas

      var minDate = this.body.util.toGlobalTime(-this.body.domProps.root.width);
      var maxDate = this.body.util.toGlobalTime(2 * this.body.domProps.root.width); // getting group Ids

      var groupIds = this._getSortedGroupIds();

      if (groupIds.length > 0) {
        var groupsData = {}; // fill groups data, this only loads the data we require based on the timewindow

        this._getRelevantData(groupIds, groupsData, minDate, maxDate); // apply sampling, if disabled, it will pass through this function.


        this._applySampling(groupIds, groupsData); // we transform the X coordinates to detect collisions


        for (i = 0; i < groupIds.length; i++) {
          this._convertXcoordinates(groupsData[groupIds[i]]);
        } // now all needed data has been collected we start the processing.


        this._getYRanges(groupIds, groupsData, groupRanges); // update the Y axis first, we use this data to draw at the correct Y points


        changeCalled = this._updateYAxis(groupIds, groupRanges); //  at changeCalled, abort this update cycle as the graph needs another update with new Width input from the Redraw container.
        //  Cleanup SVG elements on abort.

        if (changeCalled == true) {
          DOMutil$1.cleanupElements(this.svgElements);
          this.abortedGraphUpdate = true;
          return true;
        }

        this.abortedGraphUpdate = false; // With the yAxis scaled correctly, use this to get the Y values of the points.

        var below = undefined;

        for (i = 0; i < groupIds.length; i++) {
          group = this.groups[groupIds[i]];

          if (this.options.stack === true && this.options.style === 'line') {
            if (group.options.excludeFromStacking == undefined || !group.options.excludeFromStacking) {
              if (below != undefined) {
                this._stack(groupsData[group.id], groupsData[below.id]);

                if (group.options.shaded.enabled == true && group.options.shaded.orientation !== "group") {
                  if (group.options.shaded.orientation == "top" && below.options.shaded.orientation !== "group") {
                    below.options.shaded.orientation = "group";
                    below.options.shaded.groupId = group.id;
                  } else {
                    group.options.shaded.orientation = "group";
                    group.options.shaded.groupId = below.id;
                  }
                }
              }

              below = group;
            }
          }

          this._convertYcoordinates(groupsData[groupIds[i]], group);
        } //Precalculate paths and draw shading if appropriate. This will make sure the shading is always behind any lines.


        var paths = {};

        for (i = 0; i < groupIds.length; i++) {
          group = this.groups[groupIds[i]];

          if (group.options.style === 'line' && group.options.shaded.enabled == true) {
            var dataset = groupsData[groupIds[i]];

            if (dataset == null || dataset.length == 0) {
              continue;
            }

            if (!paths.hasOwnProperty(groupIds[i])) {
              paths[groupIds[i]] = line.calcPath(dataset, group);
            }

            if (group.options.shaded.orientation === "group") {
              var subGroupId = group.options.shaded.groupId;

              if (groupIds.indexOf(subGroupId) === -1) {
                console.log(group.id + ": Unknown shading group target given:" + subGroupId);
                continue;
              }

              if (!paths.hasOwnProperty(subGroupId)) {
                paths[subGroupId] = line.calcPath(groupsData[subGroupId], this.groups[subGroupId]);
              }

              line.drawShading(paths[groupIds[i]], group, paths[subGroupId], this.framework);
            } else {
              line.drawShading(paths[groupIds[i]], group, undefined, this.framework);
            }
          }
        } // draw the groups, calculating paths if still necessary.


        bar.draw(groupIds, groupsData, this.framework);

        for (i = 0; i < groupIds.length; i++) {
          group = this.groups[groupIds[i]];

          if (groupsData[groupIds[i]].length > 0) {
            switch (group.options.style) {
              case "line":
                if (!paths.hasOwnProperty(groupIds[i])) {
                  paths[groupIds[i]] = line.calcPath(groupsData[groupIds[i]], group);
                }

                line.draw(paths[groupIds[i]], group, this.framework);
              // eslint-disable-line no-fallthrough

              case "point": // eslint-disable-line no-fallthrough

              case "points":
                if (group.options.style == "point" || group.options.style == "points" || group.options.drawPoints.enabled == true) {
                  points.draw(groupsData[groupIds[i]], group, this.framework);
                }

                break;

            }
          }
        }
      }
    } // cleanup unused svg elements


    DOMutil$1.cleanupElements(this.svgElements);
    return false;
  };

  LineGraph.prototype._stack = function (data, subData) {
    var index, dx, dy, subPrevPoint, subNextPoint;
    index = 0; // for each data point we look for a matching on in the set below

    for (var j = 0; j < data.length; j++) {
      subPrevPoint = undefined;
      subNextPoint = undefined; // we look for time matches or a before-after point

      for (var k = index; k < subData.length; k++) {
        // if times match exactly
        if (subData[k].x === data[j].x) {
          subPrevPoint = subData[k];
          subNextPoint = subData[k];
          index = k;
          break;
        } else if (subData[k].x > data[j].x) {
          // overshoot
          subNextPoint = subData[k];

          if (k == 0) {
            subPrevPoint = subNextPoint;
          } else {
            subPrevPoint = subData[k - 1];
          }

          index = k;
          break;
        }
      } // in case the last data point has been used, we assume it stays like this.


      if (subNextPoint === undefined) {
        subPrevPoint = subData[subData.length - 1];
        subNextPoint = subData[subData.length - 1];
      } // linear interpolation


      dx = subNextPoint.x - subPrevPoint.x;
      dy = subNextPoint.y - subPrevPoint.y;

      if (dx == 0) {
        data[j].y = data[j].orginalY + subNextPoint.y;
      } else {
        data[j].y = data[j].orginalY + dy / dx * (data[j].x - subPrevPoint.x) + subPrevPoint.y; // ax + b where b is data[j].y
      }
    }
  };
  /**
   * first select and preprocess the data from the datasets.
   * the groups have their preselection of data, we now loop over this data to see
   * what data we need to draw. Sorted data is much faster.
   * more optimization is possible by doing the sampling before and using the binary search
   * to find the end date to determine the increment.
   *
   * @param {array}  groupIds
   * @param {object} groupsData
   * @param {date}   minDate
   * @param {date}   maxDate
   * @private
   */


  LineGraph.prototype._getRelevantData = function (groupIds, groupsData, minDate, maxDate) {
    var group, i, j, item;

    if (groupIds.length > 0) {
      for (i = 0; i < groupIds.length; i++) {
        group = this.groups[groupIds[i]];
        var itemsData = group.getItems(); // optimization for sorted data

        if (group.options.sort == true) {
          var dateComparator = function (a, b) {
            return a.getTime() == b.getTime() ? 0 : a < b ? -1 : 1;
          };

          var first = Math.max(0, util.binarySearchValue(itemsData, minDate, 'x', 'before', dateComparator));
          var last = Math.min(itemsData.length, util.binarySearchValue(itemsData, maxDate, 'x', 'after', dateComparator) + 1);

          if (last <= 0) {
            last = itemsData.length;
          }

          var dataContainer = new Array(last - first);

          for (j = first; j < last; j++) {
            item = group.itemsData[j];
            dataContainer[j - first] = item;
          }

          groupsData[groupIds[i]] = dataContainer;
        } else {
          // If unsorted data, all data is relevant, just returning entire structure
          groupsData[groupIds[i]] = group.itemsData;
        }
      }
    }
  };
  /**
   *
   * @param {Array.<vis.GraphGroup.id>} groupIds
   * @param {vis.DataSet} groupsData
   * @private
   */


  LineGraph.prototype._applySampling = function (groupIds, groupsData) {
    var group;

    if (groupIds.length > 0) {
      for (var i = 0; i < groupIds.length; i++) {
        group = this.groups[groupIds[i]];

        if (group.options.sampling == true) {
          var dataContainer = groupsData[groupIds[i]];

          if (dataContainer.length > 0) {
            var increment = 1;
            var amountOfPoints = dataContainer.length; // the global screen is used because changing the width of the yAxis may affect the increment, resulting in an endless loop
            // of width changing of the yAxis.
            //TODO: This assumes sorted data, but that's not guaranteed!

            var xDistance = this.body.util.toGlobalScreen(dataContainer[dataContainer.length - 1].x) - this.body.util.toGlobalScreen(dataContainer[0].x);
            var pointsPerPixel = amountOfPoints / xDistance;
            increment = Math.min(Math.ceil(0.2 * amountOfPoints), Math.max(1, Math.round(pointsPerPixel)));
            var sampledData = new Array(amountOfPoints);

            for (var j = 0; j < amountOfPoints; j += increment) {
              var idx = Math.round(j / increment);
              sampledData[idx] = dataContainer[j];
            }

            groupsData[groupIds[i]] = sampledData.splice(0, Math.round(amountOfPoints / increment));
          }
        }
      }
    }
  };
  /**
   *
   * @param {Array.<vis.GraphGroup.id>} groupIds
   * @param {vis.DataSet} groupsData
   * @param {object} groupRanges  | this is being filled here
   * @private
   */


  LineGraph.prototype._getYRanges = function (groupIds, groupsData, groupRanges) {
    var groupData, group, i;
    var combinedDataLeft = [];
    var combinedDataRight = [];
    var options;

    if (groupIds.length > 0) {
      for (i = 0; i < groupIds.length; i++) {
        groupData = groupsData[groupIds[i]];
        options = this.groups[groupIds[i]].options;

        if (groupData.length > 0) {
          group = this.groups[groupIds[i]]; // if bar graphs are stacked, their range need to be handled differently and accumulated over all groups.

          if (options.stack === true && options.style === 'bar') {
            if (options.yAxisOrientation === 'left') {
              combinedDataLeft = combinedDataLeft.concat(groupData);
            } else {
              combinedDataRight = combinedDataRight.concat(groupData);
            }
          } else {
            groupRanges[groupIds[i]] = group.getYRange(groupData, groupIds[i]);
          }
        }
      } // if bar graphs are stacked, their range need to be handled differently and accumulated over all groups.


      bar.getStackedYRange(combinedDataLeft, groupRanges, groupIds, '__barStackLeft', 'left');
      bar.getStackedYRange(combinedDataRight, groupRanges, groupIds, '__barStackRight', 'right');
    }
  };
  /**
   * this sets the Y ranges for the Y axis. It also determines which of the axis should be shown or hidden.
   * @param {Array.<vis.GraphGroup.id>} groupIds
   * @param {Object} groupRanges
   * @returns {boolean} resized
   * @private
   */


  LineGraph.prototype._updateYAxis = function (groupIds, groupRanges) {
    var resized = false;
    var yAxisLeftUsed = false;
    var yAxisRightUsed = false;
    var minLeft = 1e9,
        minRight = 1e9,
        maxLeft = -1e9,
        maxRight = -1e9,
        minVal,
        maxVal; // if groups are present

    if (groupIds.length > 0) {
      // this is here to make sure that if there are no items in the axis but there are groups, that there is no infinite draw/redraw loop.
      for (var i = 0; i < groupIds.length; i++) {
        var group = this.groups[groupIds[i]];

        if (group && group.options.yAxisOrientation != 'right') {
          yAxisLeftUsed = true;
          minLeft = 1e9;
          maxLeft = -1e9;
        } else if (group && group.options.yAxisOrientation) {
          yAxisRightUsed = true;
          minRight = 1e9;
          maxRight = -1e9;
        }
      } // if there are items:


      for (i = 0; i < groupIds.length; i++) {
        if (groupRanges.hasOwnProperty(groupIds[i])) {
          if (groupRanges[groupIds[i]].ignore !== true) {
            minVal = groupRanges[groupIds[i]].min;
            maxVal = groupRanges[groupIds[i]].max;

            if (groupRanges[groupIds[i]].yAxisOrientation != 'right') {
              yAxisLeftUsed = true;
              minLeft = minLeft > minVal ? minVal : minLeft;
              maxLeft = maxLeft < maxVal ? maxVal : maxLeft;
            } else {
              yAxisRightUsed = true;
              minRight = minRight > minVal ? minVal : minRight;
              maxRight = maxRight < maxVal ? maxVal : maxRight;
            }
          }
        }
      }

      if (yAxisLeftUsed == true) {
        this.yAxisLeft.setRange(minLeft, maxLeft);
      }

      if (yAxisRightUsed == true) {
        this.yAxisRight.setRange(minRight, maxRight);
      }
    }

    resized = this._toggleAxisVisiblity(yAxisLeftUsed, this.yAxisLeft) || resized;
    resized = this._toggleAxisVisiblity(yAxisRightUsed, this.yAxisRight) || resized;

    if (yAxisRightUsed == true && yAxisLeftUsed == true) {
      this.yAxisLeft.drawIcons = true;
      this.yAxisRight.drawIcons = true;
    } else {
      this.yAxisLeft.drawIcons = false;
      this.yAxisRight.drawIcons = false;
    }

    this.yAxisRight.master = !yAxisLeftUsed;
    this.yAxisRight.masterAxis = this.yAxisLeft;

    if (this.yAxisRight.master == false) {
      if (yAxisRightUsed == true) {
        this.yAxisLeft.lineOffset = this.yAxisRight.width;
      } else {
        this.yAxisLeft.lineOffset = 0;
      }

      resized = this.yAxisLeft.redraw() || resized;
      resized = this.yAxisRight.redraw() || resized;
    } else {
      resized = this.yAxisRight.redraw() || resized;
    } // clean the accumulated lists


    var tempGroups = ['__barStackLeft', '__barStackRight', '__lineStackLeft', '__lineStackRight'];

    for (i = 0; i < tempGroups.length; i++) {
      if (groupIds.indexOf(tempGroups[i]) != -1) {
        groupIds.splice(groupIds.indexOf(tempGroups[i]), 1);
      }
    }

    return resized;
  };
  /**
   * This shows or hides the Y axis if needed. If there is a change, the changed event is emitted by the updateYAxis function
   *
   * @param {boolean} axisUsed
   * @param {vis.DataAxis}  axis
   * @returns {boolean}
   * @private
   */


  LineGraph.prototype._toggleAxisVisiblity = function (axisUsed, axis) {
    var changed = false;

    if (axisUsed == false) {
      if (axis.dom.frame.parentNode && axis.hidden == false) {
        axis.hide();
        changed = true;
      }
    } else {
      if (!axis.dom.frame.parentNode && axis.hidden == true) {
        axis.show();
        changed = true;
      }
    }

    return changed;
  };
  /**
   * This uses the DataAxis object to generate the correct X coordinate on the SVG window. It uses the
   * util function toScreen to get the x coordinate from the timestamp. It also pre-filters the data and get the minMax ranges for
   * the yAxis.
   *
   * @param {Array.<Object>} datapoints
   * @private
   */


  LineGraph.prototype._convertXcoordinates = function (datapoints) {
    var toScreen = this.body.util.toScreen;

    for (var i = 0; i < datapoints.length; i++) {
      datapoints[i].screen_x = toScreen(datapoints[i].x) + this.props.width;
      datapoints[i].screen_y = datapoints[i].y; //starting point for range calculations

      if (datapoints[i].end != undefined) {
        datapoints[i].screen_end = toScreen(datapoints[i].end) + this.props.width;
      } else {
        datapoints[i].screen_end = undefined;
      }
    }
  };
  /**
   * This uses the DataAxis object to generate the correct X coordinate on the SVG window. It uses the
   * util function toScreen to get the x coordinate from the timestamp. It also pre-filters the data and get the minMax ranges for
   * the yAxis.
   *
   * @param {Array.<Object>} datapoints
   * @param {vis.GraphGroup} group
   * @private
   */


  LineGraph.prototype._convertYcoordinates = function (datapoints, group) {
    var axis = this.yAxisLeft;
    var svgHeight = Number(this.svg.style.height.replace('px', ''));

    if (group.options.yAxisOrientation == 'right') {
      axis = this.yAxisRight;
    }

    for (var i = 0; i < datapoints.length; i++) {
      datapoints[i].screen_y = Math.round(axis.convertValue(datapoints[i].y));
    }

    group.setZeroPosition(Math.min(svgHeight, axis.convertValue(0)));
  };

  var LineGraph_1 = LineGraph;

  /**
   * This object contains all possible options. It will check if the types are correct, if required if the option is one
   * of the allowed values.
   *
   * __any__ means that the name of the property does not matter.
   * __type__ is a required field for all objects and contains the allowed types of all objects
   */
  let string$2 = 'string';
  let bool$2 = 'boolean';
  let number$2 = 'number';
  let array$1 = 'array';
  let date$1 = 'date';
  let object$2 = 'object'; // should only be in a __type__ property

  let dom$1 = 'dom';
  let moment$5 = 'moment';
  let any$1 = 'any';
  let allOptions$6 = {
    configure: {
      enabled: {
        'boolean': bool$2
      },
      filter: {
        'boolean': bool$2,
        'function': 'function'
      },
      container: {
        dom: dom$1
      },
      __type__: {
        object: object$2,
        'boolean': bool$2,
        'function': 'function'
      }
    },
    //globals :
    alignCurrentTime: {
      string: string$2,
      'undefined': 'undefined'
    },
    yAxisOrientation: {
      string: ['left', 'right']
    },
    defaultGroup: {
      string: string$2
    },
    sort: {
      'boolean': bool$2
    },
    sampling: {
      'boolean': bool$2
    },
    stack: {
      'boolean': bool$2
    },
    graphHeight: {
      string: string$2,
      number: number$2
    },
    shaded: {
      enabled: {
        'boolean': bool$2
      },
      orientation: {
        string: ['bottom', 'top', 'zero', 'group']
      },
      // top, bottom, zero, group
      groupId: {
        object: object$2
      },
      __type__: {
        'boolean': bool$2,
        object: object$2
      }
    },
    style: {
      string: ['line', 'bar', 'points']
    },
    // line, bar
    barChart: {
      width: {
        number: number$2
      },
      minWidth: {
        number: number$2
      },
      sideBySide: {
        'boolean': bool$2
      },
      align: {
        string: ['left', 'center', 'right']
      },
      __type__: {
        object: object$2
      }
    },
    interpolation: {
      enabled: {
        'boolean': bool$2
      },
      parametrization: {
        string: ['centripetal', 'chordal', 'uniform']
      },
      // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
      alpha: {
        number: number$2
      },
      __type__: {
        object: object$2,
        'boolean': bool$2
      }
    },
    drawPoints: {
      enabled: {
        'boolean': bool$2
      },
      onRender: {
        'function': 'function'
      },
      size: {
        number: number$2
      },
      style: {
        string: ['square', 'circle']
      },
      // square, circle
      __type__: {
        object: object$2,
        'boolean': bool$2,
        'function': 'function'
      }
    },
    dataAxis: {
      showMinorLabels: {
        'boolean': bool$2
      },
      showMajorLabels: {
        'boolean': bool$2
      },
      icons: {
        'boolean': bool$2
      },
      width: {
        string: string$2,
        number: number$2
      },
      visible: {
        'boolean': bool$2
      },
      alignZeros: {
        'boolean': bool$2
      },
      left: {
        range: {
          min: {
            number: number$2,
            'undefined': 'undefined'
          },
          max: {
            number: number$2,
            'undefined': 'undefined'
          },
          __type__: {
            object: object$2
          }
        },
        format: {
          'function': 'function'
        },
        title: {
          text: {
            string: string$2,
            number: number$2,
            'undefined': 'undefined'
          },
          style: {
            string: string$2,
            'undefined': 'undefined'
          },
          __type__: {
            object: object$2
          }
        },
        __type__: {
          object: object$2
        }
      },
      right: {
        range: {
          min: {
            number: number$2,
            'undefined': 'undefined'
          },
          max: {
            number: number$2,
            'undefined': 'undefined'
          },
          __type__: {
            object: object$2
          }
        },
        format: {
          'function': 'function'
        },
        title: {
          text: {
            string: string$2,
            number: number$2,
            'undefined': 'undefined'
          },
          style: {
            string: string$2,
            'undefined': 'undefined'
          },
          __type__: {
            object: object$2
          }
        },
        __type__: {
          object: object$2
        }
      },
      __type__: {
        object: object$2
      }
    },
    legend: {
      enabled: {
        'boolean': bool$2
      },
      icons: {
        'boolean': bool$2
      },
      left: {
        visible: {
          'boolean': bool$2
        },
        position: {
          string: ['top-right', 'bottom-right', 'top-left', 'bottom-left']
        },
        __type__: {
          object: object$2
        }
      },
      right: {
        visible: {
          'boolean': bool$2
        },
        position: {
          string: ['top-right', 'bottom-right', 'top-left', 'bottom-left']
        },
        __type__: {
          object: object$2
        }
      },
      __type__: {
        object: object$2,
        'boolean': bool$2
      }
    },
    groups: {
      visibility: {
        any: any$1
      },
      __type__: {
        object: object$2
      }
    },
    autoResize: {
      'boolean': bool$2
    },
    throttleRedraw: {
      number: number$2
    },
    // TODO: DEPRICATED see https://github.com/almende/vis/issues/2511
    clickToUse: {
      'boolean': bool$2
    },
    end: {
      number: number$2,
      date: date$1,
      string: string$2,
      moment: moment$5
    },
    format: {
      minorLabels: {
        millisecond: {
          string: string$2,
          'undefined': 'undefined'
        },
        second: {
          string: string$2,
          'undefined': 'undefined'
        },
        minute: {
          string: string$2,
          'undefined': 'undefined'
        },
        hour: {
          string: string$2,
          'undefined': 'undefined'
        },
        weekday: {
          string: string$2,
          'undefined': 'undefined'
        },
        day: {
          string: string$2,
          'undefined': 'undefined'
        },
        month: {
          string: string$2,
          'undefined': 'undefined'
        },
        quarter: {
          string: string$2,
          'undefined': 'undefined'
        },
        year: {
          string: string$2,
          'undefined': 'undefined'
        },
        __type__: {
          object: object$2
        }
      },
      majorLabels: {
        millisecond: {
          string: string$2,
          'undefined': 'undefined'
        },
        second: {
          string: string$2,
          'undefined': 'undefined'
        },
        minute: {
          string: string$2,
          'undefined': 'undefined'
        },
        hour: {
          string: string$2,
          'undefined': 'undefined'
        },
        weekday: {
          string: string$2,
          'undefined': 'undefined'
        },
        day: {
          string: string$2,
          'undefined': 'undefined'
        },
        month: {
          string: string$2,
          'undefined': 'undefined'
        },
        quarter: {
          string: string$2,
          'undefined': 'undefined'
        },
        year: {
          string: string$2,
          'undefined': 'undefined'
        },
        __type__: {
          object: object$2
        }
      },
      __type__: {
        object: object$2
      }
    },
    moment: {
      'function': 'function'
    },
    height: {
      string: string$2,
      number: number$2
    },
    hiddenDates: {
      start: {
        date: date$1,
        number: number$2,
        string: string$2,
        moment: moment$5
      },
      end: {
        date: date$1,
        number: number$2,
        string: string$2,
        moment: moment$5
      },
      repeat: {
        string: string$2
      },
      __type__: {
        object: object$2,
        array: array$1
      }
    },
    locale: {
      string: string$2
    },
    locales: {
      __any__: {
        any: any$1
      },
      __type__: {
        object: object$2
      }
    },
    max: {
      date: date$1,
      number: number$2,
      string: string$2,
      moment: moment$5
    },
    maxHeight: {
      number: number$2,
      string: string$2
    },
    maxMinorChars: {
      number: number$2
    },
    min: {
      date: date$1,
      number: number$2,
      string: string$2,
      moment: moment$5
    },
    minHeight: {
      number: number$2,
      string: string$2
    },
    moveable: {
      'boolean': bool$2
    },
    multiselect: {
      'boolean': bool$2
    },
    orientation: {
      string: string$2
    },
    showCurrentTime: {
      'boolean': bool$2
    },
    showMajorLabels: {
      'boolean': bool$2
    },
    showMinorLabels: {
      'boolean': bool$2
    },
    start: {
      date: date$1,
      number: number$2,
      string: string$2,
      moment: moment$5
    },
    timeAxis: {
      scale: {
        string: string$2,
        'undefined': 'undefined'
      },
      step: {
        number: number$2,
        'undefined': 'undefined'
      },
      __type__: {
        object: object$2
      }
    },
    width: {
      string: string$2,
      number: number$2
    },
    zoomable: {
      'boolean': bool$2
    },
    zoomKey: {
      string: ['ctrlKey', 'altKey', 'metaKey', '']
    },
    zoomMax: {
      number: number$2
    },
    zoomMin: {
      number: number$2
    },
    zIndex: {
      number: number$2
    },
    __type__: {
      object: object$2
    }
  };
  let configureOptions$2 = {
    global: {
      alignCurrentTime: ['none', 'year', 'month', 'quarter', 'week', 'isoWeek', 'day', 'date', 'hour', 'minute', 'second'],
      //yAxisOrientation: ['left','right'], // TDOO: enable as soon as Grahp2d doesn't crash when changing this on the fly
      sort: true,
      sampling: true,
      stack: false,
      shaded: {
        enabled: false,
        orientation: ['zero', 'top', 'bottom', 'group'] // zero, top, bottom

      },
      style: ['line', 'bar', 'points'],
      // line, bar
      barChart: {
        width: [50, 5, 100, 5],
        minWidth: [50, 5, 100, 5],
        sideBySide: false,
        align: ['left', 'center', 'right'] // left, center, right

      },
      interpolation: {
        enabled: true,
        parametrization: ['centripetal', 'chordal', 'uniform'] // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)

      },
      drawPoints: {
        enabled: true,
        size: [6, 2, 30, 1],
        style: ['square', 'circle'] // square, circle

      },
      dataAxis: {
        showMinorLabels: true,
        showMajorLabels: true,
        icons: false,
        width: [40, 0, 200, 1],
        visible: true,
        alignZeros: true,
        left: {
          //range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
          //format: function (value) {return value;},
          title: {
            text: '',
            style: ''
          }
        },
        right: {
          //range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
          //format: function (value) {return value;},
          title: {
            text: '',
            style: ''
          }
        }
      },
      legend: {
        enabled: false,
        icons: true,
        left: {
          visible: true,
          position: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] // top/bottom - left,right

        },
        right: {
          visible: true,
          position: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] // top/bottom - left,right

        }
      },
      autoResize: true,
      clickToUse: false,
      end: '',
      format: {
        minorLabels: {
          millisecond: 'SSS',
          second: 's',
          minute: 'HH:mm',
          hour: 'HH:mm',
          weekday: 'ddd D',
          day: 'D',
          month: 'MMM',
          quarter: '[Q]Q',
          year: 'YYYY'
        },
        majorLabels: {
          millisecond: 'HH:mm:ss',
          second: 'D MMMM HH:mm',
          minute: 'ddd D MMMM',
          hour: 'ddd D MMMM',
          weekday: 'MMMM YYYY',
          day: 'MMMM YYYY',
          month: 'YYYY',
          quarter: 'YYYY',
          year: ''
        }
      },
      height: '',
      locale: '',
      max: '',
      maxHeight: '',
      maxMinorChars: [7, 0, 20, 1],
      min: '',
      minHeight: '',
      moveable: true,
      orientation: ['both', 'bottom', 'top'],
      showCurrentTime: false,
      showMajorLabels: true,
      showMinorLabels: true,
      start: '',
      width: '100%',
      zoomable: true,
      zoomKey: ['ctrlKey', 'altKey', 'metaKey', ''],
      zoomMax: [315360000000000, 10, 315360000000000, 1],
      zoomMin: [10, 10, 315360000000000, 1],
      zIndex: 0
    }
  };

  var optionsGraph2d = /*#__PURE__*/Object.freeze({
    __proto__: null,
    allOptions: allOptions$6,
    configureOptions: configureOptions$2
  });

  var {
    DataSet: DataSet$4
  } = index;
  var {
    DataView: DataView$5
  } = index;
  var Validator$6 = Validator$4.Validator;
  var printStyle$4 = Validator$4.printStyle;
  var allOptions$7 = optionsGraph2d.allOptions;
  var configureOptions$3 = optionsGraph2d.configureOptions;
  var Configurator$2 = Configurator.default;
  /**
   * Create a timeline visualization
   * @param {HTMLElement} container
   * @param {vis.DataSet | Array} [items]
   * @param {vis.DataSet | Array | vis.DataView | Object} [groups]
   * @param {Object} [options]  See Graph2d.setOptions for the available options.
   * @constructor Graph2d
   * @extends Core
   */

  function Graph2d(container, items, groups, options) {
    // if the third element is options, the forth is groups (optionally);
    if (!(Array.isArray(groups) || groups instanceof DataSet$4 || groups instanceof DataView$5) && groups instanceof Object) {
      var forthArgument = options;
      options = groups;
      groups = forthArgument;
    } // TODO: REMOVE THIS in the next MAJOR release
    // see https://github.com/almende/vis/issues/2511


    if (options && options.throttleRedraw) {
      console.warn("Graph2d option \"throttleRedraw\" is DEPRICATED and no longer supported. It will be removed in the next MAJOR release.");
    }

    var me = this;
    this.defaultOptions = {
      start: null,
      end: null,
      autoResize: true,
      orientation: {
        axis: 'bottom',
        // axis orientation: 'bottom', 'top', or 'both'
        item: 'bottom' // not relevant for Graph2d

      },
      moment: moment$3,
      width: null,
      height: null,
      maxHeight: null,
      minHeight: null
    };
    this.options = util.deepExtend({}, this.defaultOptions); // Create the DOM, props, and emitter

    this._create(container); // all components listed here will be repainted automatically


    this.components = [];
    this.body = {
      dom: this.dom,
      domProps: this.props,
      emitter: {
        on: this.on.bind(this),
        off: this.off.bind(this),
        emit: this.emit.bind(this)
      },
      hiddenDates: [],
      util: {
        toScreen: me._toScreen.bind(me),
        toGlobalScreen: me._toGlobalScreen.bind(me),
        // this refers to the root.width
        toTime: me._toTime.bind(me),
        toGlobalTime: me._toGlobalTime.bind(me)
      }
    }; // range

    this.range = new Range_1$1(this.body);
    this.components.push(this.range);
    this.body.range = this.range; // time axis

    this.timeAxis = new TimeAxis(this.body);
    this.components.push(this.timeAxis); //this.body.util.snap = this.timeAxis.snap.bind(this.timeAxis);
    // current time bar

    this.currentTime = new CurrentTime_1(this.body);
    this.components.push(this.currentTime); // item set

    this.linegraph = new LineGraph_1(this.body);
    this.components.push(this.linegraph);
    this.itemsData = null; // DataSet

    this.groupsData = null; // DataSet

    this.on('tap', function (event) {
      me.emit('click', me.getEventProperties(event));
    });
    this.on('doubletap', function (event) {
      me.emit('doubleClick', me.getEventProperties(event));
    });

    this.dom.root.oncontextmenu = function (event) {
      me.emit('contextmenu', me.getEventProperties(event));
    }; //Single time autoscale/fit


    this.initialFitDone = false;
    this.on('changed', function () {
      if (me.itemsData == null) return;

      if (!me.initialFitDone && !me.options.rollingMode) {
        me.initialFitDone = true;

        if (me.options.start != undefined || me.options.end != undefined) {
          if (me.options.start == undefined || me.options.end == undefined) {
            var range = me.getItemRange();
          }

          var start = me.options.start != undefined ? me.options.start : range.min;
          var end = me.options.end != undefined ? me.options.end : range.max;
          me.setWindow(start, end, {
            animation: false
          });
        } else {
          me.fit({
            animation: false
          });
        }
      }

      if (!me.initialDrawDone && (me.initialRangeChangeDone || !me.options.start && !me.options.end || me.options.rollingMode)) {
        me.initialDrawDone = true;
        me.itemSet.initialDrawDone = true;
        me.dom.root.style.visibility = 'visible';
        me.dom.loadingScreen.parentNode.removeChild(me.dom.loadingScreen);

        if (me.options.onInitialDrawComplete) {
          setTimeout(() => {
            return me.options.onInitialDrawComplete();
          }, 0);
        }
      }
    }); // apply options

    if (options) {
      this.setOptions(options);
    } // IMPORTANT: THIS HAPPENS BEFORE SET ITEMS!


    if (groups) {
      this.setGroups(groups);
    } // create itemset


    if (items) {
      this.setItems(items);
    } // draw for the first time


    this._redraw();
  } // Extend the functionality from Core


  Graph2d.prototype = new Core();

  Graph2d.prototype.setOptions = function (options) {
    // validate options
    let errorFound = Validator$6.validate(options, allOptions$7);

    if (errorFound === true) {
      console.log('%cErrors have been found in the supplied options object.', printStyle$4);
    }

    Core.prototype.setOptions.call(this, options);
  };
  /**
   * Set items
   * @param {vis.DataSet | Array | null} items
   */


  Graph2d.prototype.setItems = function (items) {
    var initialLoad = this.itemsData == null; // convert to type DataSet when needed

    var newDataSet;

    if (!items) {
      newDataSet = null;
    } else if (items instanceof DataSet$4 || items instanceof DataView$5) {
      newDataSet = items;
    } else {
      // turn an array into a dataset
      newDataSet = new DataSet$4(items, {
        type: {
          start: 'Date',
          end: 'Date'
        }
      });
    } // set items


    this.itemsData = newDataSet;
    this.linegraph && this.linegraph.setItems(newDataSet);

    if (initialLoad) {
      if (this.options.start != undefined || this.options.end != undefined) {
        var start = this.options.start != undefined ? this.options.start : null;
        var end = this.options.end != undefined ? this.options.end : null;
        this.setWindow(start, end, {
          animation: false
        });
      } else {
        this.fit({
          animation: false
        });
      }
    }
  };
  /**
   * Set groups
   * @param {vis.DataSet | Array} groups
   */


  Graph2d.prototype.setGroups = function (groups) {
    // convert to type DataSet when needed
    var newDataSet;

    if (!groups) {
      newDataSet = null;
    } else if (groups instanceof DataSet$4 || groups instanceof DataView$5) {
      newDataSet = groups;
    } else {
      // turn an array into a dataset
      newDataSet = new DataSet$4(groups);
    }

    this.groupsData = newDataSet;
    this.linegraph.setGroups(newDataSet);
  };
  /**
   * Returns an object containing an SVG element with the icon of the group (size determined by iconWidth and iconHeight), the label of the group (content) and the yAxisOrientation of the group (left or right).
   * @param {vis.GraphGroup.id} groupId
   * @param {number} width
   * @param {number} height
   * @returns {{icon: SVGElement, label: string, orientation: string}|string}
   */


  Graph2d.prototype.getLegend = function (groupId, width, height) {
    if (width === undefined) {
      width = 15;
    }

    if (height === undefined) {
      height = 15;
    }

    if (this.linegraph.groups[groupId] !== undefined) {
      return this.linegraph.groups[groupId].getLegend(width, height);
    } else {
      return "cannot find group:'" + groupId + "'";
    }
  };
  /**
   * This checks if the visible option of the supplied group (by ID) is true or false.
   * @param {vis.GraphGroup.id} groupId
   * @returns {boolean}
   */


  Graph2d.prototype.isGroupVisible = function (groupId) {
    if (this.linegraph.groups[groupId] !== undefined) {
      return this.linegraph.groups[groupId].visible && (this.linegraph.options.groups.visibility[groupId] === undefined || this.linegraph.options.groups.visibility[groupId] == true);
    } else {
      return false;
    }
  };
  /**
   * Get the data range of the item set.
   * @returns {{min: Date, max: Date}} range  A range with a start and end Date.
   *                                          When no minimum is found, min==null
   *                                          When no maximum is found, max==null
   */


  Graph2d.prototype.getDataRange = function () {
    var min = null;
    var max = null; // calculate min from start filed

    for (var groupId in this.linegraph.groups) {
      if (this.linegraph.groups.hasOwnProperty(groupId)) {
        if (this.linegraph.groups[groupId].visible == true) {
          for (var i = 0; i < this.linegraph.groups[groupId].itemsData.length; i++) {
            var item = this.linegraph.groups[groupId].itemsData[i];
            var value = util.convert(item.x, 'Date').valueOf();
            min = min == null ? value : min > value ? value : min;
            max = max == null ? value : max < value ? value : max;
          }
        }
      }
    }

    return {
      min: min != null ? new Date(min) : null,
      max: max != null ? new Date(max) : null
    };
  };
  /**
   * Generate Timeline related information from an event
   * @param {Event} event
   * @return {Object} An object with related information, like on which area
   *                  The event happened, whether clicked on an item, etc.
   */


  Graph2d.prototype.getEventProperties = function (event) {
    var clientX = event.center ? event.center.x : event.clientX;
    var clientY = event.center ? event.center.y : event.clientY;
    var x = clientX - util.getAbsoluteLeft(this.dom.centerContainer);
    var y = clientY - util.getAbsoluteTop(this.dom.centerContainer);

    var time = this._toTime(x);

    var customTime = CustomTime.customTimeFromTarget(event);
    var element = util.getTarget(event);
    var what = null;

    if (util.hasParent(element, this.timeAxis.dom.foreground)) {
      what = 'axis';
    } else if (this.timeAxis2 && util.hasParent(element, this.timeAxis2.dom.foreground)) {
      what = 'axis';
    } else if (util.hasParent(element, this.linegraph.yAxisLeft.dom.frame)) {
      what = 'data-axis';
    } else if (util.hasParent(element, this.linegraph.yAxisRight.dom.frame)) {
      what = 'data-axis';
    } else if (util.hasParent(element, this.linegraph.legendLeft.dom.frame)) {
      what = 'legend';
    } else if (util.hasParent(element, this.linegraph.legendRight.dom.frame)) {
      what = 'legend';
    } else if (customTime != null) {
      what = 'custom-time';
    } else if (util.hasParent(element, this.currentTime.bar)) {
      what = 'current-time';
    } else if (util.hasParent(element, this.dom.center)) {
      what = 'background';
    }

    var value = [];
    var yAxisLeft = this.linegraph.yAxisLeft;
    var yAxisRight = this.linegraph.yAxisRight;

    if (!yAxisLeft.hidden && this.itemsData.length > 0) {
      value.push(yAxisLeft.screenToValue(y));
    }

    if (!yAxisRight.hidden && this.itemsData.length > 0) {
      value.push(yAxisRight.screenToValue(y));
    }

    return {
      event: event,
      what: what,
      pageX: event.srcEvent ? event.srcEvent.pageX : event.pageX,
      pageY: event.srcEvent ? event.srcEvent.pageY : event.pageY,
      x: x,
      y: y,
      time: time,
      value: value
    };
  };
  /**
   * Load a configurator
   * @return {Object}
   * @private
   */


  Graph2d.prototype._createConfigurator = function () {
    return new Configurator$2(this, this.dom.container, configureOptions$3);
  };

  var Graph2d_1 = Graph2d;

  var DOMutil$2 = DOMutil$1; // data

  var Timeline$1 = Timeline_1;
  var Graph2d$1 = Graph2d_1;
  var timeline = {
    Core: Core,
    DateUtil: DateUtil,
    Range: Range_1$1,
    stack: Stack,
    TimeStep: TimeStep_1,
    components: {
      items: {
        Item: Item,
        BackgroundItem: BackgroundItem_1,
        BoxItem: BoxItem_1,
        PointItem: PointItem_1,
        RangeItem: RangeItem_1
      },
      BackgroundGroup: BackgroundGroup_1,
      Component: Component_1,
      CurrentTime: CurrentTime_1,
      CustomTime: CustomTime,
      DataAxis: DataAxis,
      DataScale: DataScale_1,
      GraphGroup: GraphGroup_1,
      Group: Group_1,
      ItemSet: ItemSet,
      Legend: Legend_1,
      LineGraph: LineGraph_1,
      TimeAxis: TimeAxis
    }
  }; // bundled external libraries

  var moment$6 = moment$3;
  var Hammer = hammer$2;
  var keycharm$1 = keycharm;

  // utils
  var network = {
    Images: Ar,
    allOptions: ec,
    convertDot: sc,
    convertGephi: Ao,
    dotparser: Po,
    gephiParser: Ro
  }; // Graph3d
  var index$1 = {
    util: util$1,
    DataSet: DataSet,
    DataView: DataView,
    Queue: Queue,
    Network: nc,
    network: network,
    Graph3d: Graph3d$1,
    graph3d: graph3d,
    Timeline: Timeline$1,
    Graph2d: Graph2d$1,
    timeline: timeline,
    DOMutil: DOMutil$2,
    keycharm: keycharm$1,
    moment: moment$6,
    Hammer: Hammer
  };

  return index$1;

})));
//# sourceMappingURL=vis.js.map
